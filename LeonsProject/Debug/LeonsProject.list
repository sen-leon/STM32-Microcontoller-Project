
LeonsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800b078  0800b078  0001b078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b638  0800b638  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b638  0800b638  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b638  0800b638  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b638  0800b638  0001b638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b63c  0800b63c  0001b63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200001e4  0800b824  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  0800b824  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9ff  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d2  00000000  00000000  0002dc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0002fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00030b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001319c  00000000  00000000  00031818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001030f  00000000  00000000  000449b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fcc4  00000000  00000000  00054cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c4987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f8  00000000  00000000  000c49d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b05c 	.word	0x0800b05c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800b05c 	.word	0x0800b05c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe11 	bl	8002064 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd61 	bl	8001f14 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe03 	bl	8002064 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fdf9 	bl	8002064 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd89 	bl	8001f98 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd7f 	bl	8001f98 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb55 	bl	8000b60 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fae1 	bl	8000a88 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb47 	bl	8000b60 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb3d 	bl	8000b60 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 faed 	bl	8000ad4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae3 	bl	8000ad4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fadd>:
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	46c6      	mov	lr, r8
 8000520:	0243      	lsls	r3, r0, #9
 8000522:	0a5b      	lsrs	r3, r3, #9
 8000524:	024e      	lsls	r6, r1, #9
 8000526:	0045      	lsls	r5, r0, #1
 8000528:	004f      	lsls	r7, r1, #1
 800052a:	00da      	lsls	r2, r3, #3
 800052c:	0fc4      	lsrs	r4, r0, #31
 800052e:	469c      	mov	ip, r3
 8000530:	0a70      	lsrs	r0, r6, #9
 8000532:	4690      	mov	r8, r2
 8000534:	b500      	push	{lr}
 8000536:	0e2d      	lsrs	r5, r5, #24
 8000538:	0e3f      	lsrs	r7, r7, #24
 800053a:	0fc9      	lsrs	r1, r1, #31
 800053c:	09b6      	lsrs	r6, r6, #6
 800053e:	428c      	cmp	r4, r1
 8000540:	d04b      	beq.n	80005da <__aeabi_fadd+0xbe>
 8000542:	1bea      	subs	r2, r5, r7
 8000544:	2a00      	cmp	r2, #0
 8000546:	dd36      	ble.n	80005b6 <__aeabi_fadd+0x9a>
 8000548:	2f00      	cmp	r7, #0
 800054a:	d061      	beq.n	8000610 <__aeabi_fadd+0xf4>
 800054c:	2dff      	cmp	r5, #255	; 0xff
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0x36>
 8000550:	e0ad      	b.n	80006ae <__aeabi_fadd+0x192>
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	04db      	lsls	r3, r3, #19
 8000556:	431e      	orrs	r6, r3
 8000558:	2a1b      	cmp	r2, #27
 800055a:	dc00      	bgt.n	800055e <__aeabi_fadd+0x42>
 800055c:	e0d3      	b.n	8000706 <__aeabi_fadd+0x1ea>
 800055e:	2001      	movs	r0, #1
 8000560:	4643      	mov	r3, r8
 8000562:	1a18      	subs	r0, r3, r0
 8000564:	0143      	lsls	r3, r0, #5
 8000566:	d400      	bmi.n	800056a <__aeabi_fadd+0x4e>
 8000568:	e08c      	b.n	8000684 <__aeabi_fadd+0x168>
 800056a:	0180      	lsls	r0, r0, #6
 800056c:	0987      	lsrs	r7, r0, #6
 800056e:	0038      	movs	r0, r7
 8000570:	f002 fd54 	bl	800301c <__clzsi2>
 8000574:	3805      	subs	r0, #5
 8000576:	4087      	lsls	r7, r0
 8000578:	4285      	cmp	r5, r0
 800057a:	dc00      	bgt.n	800057e <__aeabi_fadd+0x62>
 800057c:	e0b6      	b.n	80006ec <__aeabi_fadd+0x1d0>
 800057e:	1a2d      	subs	r5, r5, r0
 8000580:	48b3      	ldr	r0, [pc, #716]	; (8000850 <__aeabi_fadd+0x334>)
 8000582:	4038      	ands	r0, r7
 8000584:	0743      	lsls	r3, r0, #29
 8000586:	d004      	beq.n	8000592 <__aeabi_fadd+0x76>
 8000588:	230f      	movs	r3, #15
 800058a:	4003      	ands	r3, r0
 800058c:	2b04      	cmp	r3, #4
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0x76>
 8000590:	3004      	adds	r0, #4
 8000592:	0143      	lsls	r3, r0, #5
 8000594:	d400      	bmi.n	8000598 <__aeabi_fadd+0x7c>
 8000596:	e078      	b.n	800068a <__aeabi_fadd+0x16e>
 8000598:	1c6a      	adds	r2, r5, #1
 800059a:	2dfe      	cmp	r5, #254	; 0xfe
 800059c:	d065      	beq.n	800066a <__aeabi_fadd+0x14e>
 800059e:	0180      	lsls	r0, r0, #6
 80005a0:	0a43      	lsrs	r3, r0, #9
 80005a2:	469c      	mov	ip, r3
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	4663      	mov	r3, ip
 80005a8:	05d0      	lsls	r0, r2, #23
 80005aa:	4318      	orrs	r0, r3
 80005ac:	07e4      	lsls	r4, r4, #31
 80005ae:	4320      	orrs	r0, r4
 80005b0:	bc80      	pop	{r7}
 80005b2:	46b8      	mov	r8, r7
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	d035      	beq.n	8000626 <__aeabi_fadd+0x10a>
 80005ba:	1b7a      	subs	r2, r7, r5
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0xa6>
 80005c0:	e0af      	b.n	8000722 <__aeabi_fadd+0x206>
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0xae>
 80005c8:	e0a7      	b.n	800071a <__aeabi_fadd+0x1fe>
 80005ca:	1e53      	subs	r3, r2, #1
 80005cc:	2a01      	cmp	r2, #1
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0xb6>
 80005d0:	e12f      	b.n	8000832 <__aeabi_fadd+0x316>
 80005d2:	2aff      	cmp	r2, #255	; 0xff
 80005d4:	d069      	beq.n	80006aa <__aeabi_fadd+0x18e>
 80005d6:	001a      	movs	r2, r3
 80005d8:	e0aa      	b.n	8000730 <__aeabi_fadd+0x214>
 80005da:	1be9      	subs	r1, r5, r7
 80005dc:	2900      	cmp	r1, #0
 80005de:	dd70      	ble.n	80006c2 <__aeabi_fadd+0x1a6>
 80005e0:	2f00      	cmp	r7, #0
 80005e2:	d037      	beq.n	8000654 <__aeabi_fadd+0x138>
 80005e4:	2dff      	cmp	r5, #255	; 0xff
 80005e6:	d062      	beq.n	80006ae <__aeabi_fadd+0x192>
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	04db      	lsls	r3, r3, #19
 80005ec:	431e      	orrs	r6, r3
 80005ee:	291b      	cmp	r1, #27
 80005f0:	dc00      	bgt.n	80005f4 <__aeabi_fadd+0xd8>
 80005f2:	e0b0      	b.n	8000756 <__aeabi_fadd+0x23a>
 80005f4:	2001      	movs	r0, #1
 80005f6:	4440      	add	r0, r8
 80005f8:	0143      	lsls	r3, r0, #5
 80005fa:	d543      	bpl.n	8000684 <__aeabi_fadd+0x168>
 80005fc:	3501      	adds	r5, #1
 80005fe:	2dff      	cmp	r5, #255	; 0xff
 8000600:	d033      	beq.n	800066a <__aeabi_fadd+0x14e>
 8000602:	2301      	movs	r3, #1
 8000604:	4a93      	ldr	r2, [pc, #588]	; (8000854 <__aeabi_fadd+0x338>)
 8000606:	4003      	ands	r3, r0
 8000608:	0840      	lsrs	r0, r0, #1
 800060a:	4010      	ands	r0, r2
 800060c:	4318      	orrs	r0, r3
 800060e:	e7b9      	b.n	8000584 <__aeabi_fadd+0x68>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0xfa>
 8000614:	e083      	b.n	800071e <__aeabi_fadd+0x202>
 8000616:	1e51      	subs	r1, r2, #1
 8000618:	2a01      	cmp	r2, #1
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0x102>
 800061c:	e0d8      	b.n	80007d0 <__aeabi_fadd+0x2b4>
 800061e:	2aff      	cmp	r2, #255	; 0xff
 8000620:	d045      	beq.n	80006ae <__aeabi_fadd+0x192>
 8000622:	000a      	movs	r2, r1
 8000624:	e798      	b.n	8000558 <__aeabi_fadd+0x3c>
 8000626:	27fe      	movs	r7, #254	; 0xfe
 8000628:	1c6a      	adds	r2, r5, #1
 800062a:	4217      	tst	r7, r2
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x114>
 800062e:	e086      	b.n	800073e <__aeabi_fadd+0x222>
 8000630:	2d00      	cmp	r5, #0
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0x11a>
 8000634:	e0b7      	b.n	80007a6 <__aeabi_fadd+0x28a>
 8000636:	4643      	mov	r3, r8
 8000638:	2b00      	cmp	r3, #0
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x122>
 800063c:	e0f3      	b.n	8000826 <__aeabi_fadd+0x30a>
 800063e:	2200      	movs	r2, #0
 8000640:	2e00      	cmp	r6, #0
 8000642:	d0b0      	beq.n	80005a6 <__aeabi_fadd+0x8a>
 8000644:	1b98      	subs	r0, r3, r6
 8000646:	0143      	lsls	r3, r0, #5
 8000648:	d400      	bmi.n	800064c <__aeabi_fadd+0x130>
 800064a:	e0fa      	b.n	8000842 <__aeabi_fadd+0x326>
 800064c:	4643      	mov	r3, r8
 800064e:	000c      	movs	r4, r1
 8000650:	1af0      	subs	r0, r6, r3
 8000652:	e797      	b.n	8000584 <__aeabi_fadd+0x68>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d100      	bne.n	800065a <__aeabi_fadd+0x13e>
 8000658:	e0c8      	b.n	80007ec <__aeabi_fadd+0x2d0>
 800065a:	1e4a      	subs	r2, r1, #1
 800065c:	2901      	cmp	r1, #1
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x146>
 8000660:	e0ae      	b.n	80007c0 <__aeabi_fadd+0x2a4>
 8000662:	29ff      	cmp	r1, #255	; 0xff
 8000664:	d023      	beq.n	80006ae <__aeabi_fadd+0x192>
 8000666:	0011      	movs	r1, r2
 8000668:	e7c1      	b.n	80005ee <__aeabi_fadd+0xd2>
 800066a:	2300      	movs	r3, #0
 800066c:	22ff      	movs	r2, #255	; 0xff
 800066e:	469c      	mov	ip, r3
 8000670:	e799      	b.n	80005a6 <__aeabi_fadd+0x8a>
 8000672:	21fe      	movs	r1, #254	; 0xfe
 8000674:	1c6a      	adds	r2, r5, #1
 8000676:	4211      	tst	r1, r2
 8000678:	d077      	beq.n	800076a <__aeabi_fadd+0x24e>
 800067a:	2aff      	cmp	r2, #255	; 0xff
 800067c:	d0f5      	beq.n	800066a <__aeabi_fadd+0x14e>
 800067e:	0015      	movs	r5, r2
 8000680:	4446      	add	r6, r8
 8000682:	0870      	lsrs	r0, r6, #1
 8000684:	0743      	lsls	r3, r0, #29
 8000686:	d000      	beq.n	800068a <__aeabi_fadd+0x16e>
 8000688:	e77e      	b.n	8000588 <__aeabi_fadd+0x6c>
 800068a:	08c3      	lsrs	r3, r0, #3
 800068c:	2dff      	cmp	r5, #255	; 0xff
 800068e:	d00e      	beq.n	80006ae <__aeabi_fadd+0x192>
 8000690:	025b      	lsls	r3, r3, #9
 8000692:	0a5b      	lsrs	r3, r3, #9
 8000694:	469c      	mov	ip, r3
 8000696:	b2ea      	uxtb	r2, r5
 8000698:	e785      	b.n	80005a6 <__aeabi_fadd+0x8a>
 800069a:	2e00      	cmp	r6, #0
 800069c:	d007      	beq.n	80006ae <__aeabi_fadd+0x192>
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	03d2      	lsls	r2, r2, #15
 80006a2:	4213      	tst	r3, r2
 80006a4:	d003      	beq.n	80006ae <__aeabi_fadd+0x192>
 80006a6:	4210      	tst	r0, r2
 80006a8:	d101      	bne.n	80006ae <__aeabi_fadd+0x192>
 80006aa:	000c      	movs	r4, r1
 80006ac:	0003      	movs	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0db      	beq.n	800066a <__aeabi_fadd+0x14e>
 80006b2:	2080      	movs	r0, #128	; 0x80
 80006b4:	03c0      	lsls	r0, r0, #15
 80006b6:	4318      	orrs	r0, r3
 80006b8:	0240      	lsls	r0, r0, #9
 80006ba:	0a43      	lsrs	r3, r0, #9
 80006bc:	469c      	mov	ip, r3
 80006be:	22ff      	movs	r2, #255	; 0xff
 80006c0:	e771      	b.n	80005a6 <__aeabi_fadd+0x8a>
 80006c2:	2900      	cmp	r1, #0
 80006c4:	d0d5      	beq.n	8000672 <__aeabi_fadd+0x156>
 80006c6:	1b7a      	subs	r2, r7, r5
 80006c8:	2d00      	cmp	r5, #0
 80006ca:	d160      	bne.n	800078e <__aeabi_fadd+0x272>
 80006cc:	4643      	mov	r3, r8
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d024      	beq.n	800071c <__aeabi_fadd+0x200>
 80006d2:	1e53      	subs	r3, r2, #1
 80006d4:	2a01      	cmp	r2, #1
 80006d6:	d073      	beq.n	80007c0 <__aeabi_fadd+0x2a4>
 80006d8:	2aff      	cmp	r2, #255	; 0xff
 80006da:	d0e7      	beq.n	80006ac <__aeabi_fadd+0x190>
 80006dc:	001a      	movs	r2, r3
 80006de:	2a1b      	cmp	r2, #27
 80006e0:	dc00      	bgt.n	80006e4 <__aeabi_fadd+0x1c8>
 80006e2:	e085      	b.n	80007f0 <__aeabi_fadd+0x2d4>
 80006e4:	2001      	movs	r0, #1
 80006e6:	003d      	movs	r5, r7
 80006e8:	1980      	adds	r0, r0, r6
 80006ea:	e785      	b.n	80005f8 <__aeabi_fadd+0xdc>
 80006ec:	2320      	movs	r3, #32
 80006ee:	003a      	movs	r2, r7
 80006f0:	1b45      	subs	r5, r0, r5
 80006f2:	0038      	movs	r0, r7
 80006f4:	3501      	adds	r5, #1
 80006f6:	40ea      	lsrs	r2, r5
 80006f8:	1b5d      	subs	r5, r3, r5
 80006fa:	40a8      	lsls	r0, r5
 80006fc:	1e43      	subs	r3, r0, #1
 80006fe:	4198      	sbcs	r0, r3
 8000700:	2500      	movs	r5, #0
 8000702:	4310      	orrs	r0, r2
 8000704:	e73e      	b.n	8000584 <__aeabi_fadd+0x68>
 8000706:	2320      	movs	r3, #32
 8000708:	0030      	movs	r0, r6
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	0031      	movs	r1, r6
 800070e:	4098      	lsls	r0, r3
 8000710:	40d1      	lsrs	r1, r2
 8000712:	1e43      	subs	r3, r0, #1
 8000714:	4198      	sbcs	r0, r3
 8000716:	4308      	orrs	r0, r1
 8000718:	e722      	b.n	8000560 <__aeabi_fadd+0x44>
 800071a:	000c      	movs	r4, r1
 800071c:	0003      	movs	r3, r0
 800071e:	0015      	movs	r5, r2
 8000720:	e7b4      	b.n	800068c <__aeabi_fadd+0x170>
 8000722:	2fff      	cmp	r7, #255	; 0xff
 8000724:	d0c1      	beq.n	80006aa <__aeabi_fadd+0x18e>
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	4640      	mov	r0, r8
 800072a:	04db      	lsls	r3, r3, #19
 800072c:	4318      	orrs	r0, r3
 800072e:	4680      	mov	r8, r0
 8000730:	2a1b      	cmp	r2, #27
 8000732:	dd51      	ble.n	80007d8 <__aeabi_fadd+0x2bc>
 8000734:	2001      	movs	r0, #1
 8000736:	000c      	movs	r4, r1
 8000738:	003d      	movs	r5, r7
 800073a:	1a30      	subs	r0, r6, r0
 800073c:	e712      	b.n	8000564 <__aeabi_fadd+0x48>
 800073e:	4643      	mov	r3, r8
 8000740:	1b9f      	subs	r7, r3, r6
 8000742:	017b      	lsls	r3, r7, #5
 8000744:	d42b      	bmi.n	800079e <__aeabi_fadd+0x282>
 8000746:	2f00      	cmp	r7, #0
 8000748:	d000      	beq.n	800074c <__aeabi_fadd+0x230>
 800074a:	e710      	b.n	800056e <__aeabi_fadd+0x52>
 800074c:	2300      	movs	r3, #0
 800074e:	2400      	movs	r4, #0
 8000750:	2200      	movs	r2, #0
 8000752:	469c      	mov	ip, r3
 8000754:	e727      	b.n	80005a6 <__aeabi_fadd+0x8a>
 8000756:	2320      	movs	r3, #32
 8000758:	0032      	movs	r2, r6
 800075a:	0030      	movs	r0, r6
 800075c:	40ca      	lsrs	r2, r1
 800075e:	1a59      	subs	r1, r3, r1
 8000760:	4088      	lsls	r0, r1
 8000762:	1e43      	subs	r3, r0, #1
 8000764:	4198      	sbcs	r0, r3
 8000766:	4310      	orrs	r0, r2
 8000768:	e745      	b.n	80005f6 <__aeabi_fadd+0xda>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d14a      	bne.n	8000804 <__aeabi_fadd+0x2e8>
 800076e:	4643      	mov	r3, r8
 8000770:	2b00      	cmp	r3, #0
 8000772:	d063      	beq.n	800083c <__aeabi_fadd+0x320>
 8000774:	2200      	movs	r2, #0
 8000776:	2e00      	cmp	r6, #0
 8000778:	d100      	bne.n	800077c <__aeabi_fadd+0x260>
 800077a:	e714      	b.n	80005a6 <__aeabi_fadd+0x8a>
 800077c:	0030      	movs	r0, r6
 800077e:	4440      	add	r0, r8
 8000780:	0143      	lsls	r3, r0, #5
 8000782:	d400      	bmi.n	8000786 <__aeabi_fadd+0x26a>
 8000784:	e77e      	b.n	8000684 <__aeabi_fadd+0x168>
 8000786:	4b32      	ldr	r3, [pc, #200]	; (8000850 <__aeabi_fadd+0x334>)
 8000788:	3501      	adds	r5, #1
 800078a:	4018      	ands	r0, r3
 800078c:	e77a      	b.n	8000684 <__aeabi_fadd+0x168>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d08c      	beq.n	80006ac <__aeabi_fadd+0x190>
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	4641      	mov	r1, r8
 8000796:	04db      	lsls	r3, r3, #19
 8000798:	4319      	orrs	r1, r3
 800079a:	4688      	mov	r8, r1
 800079c:	e79f      	b.n	80006de <__aeabi_fadd+0x1c2>
 800079e:	4643      	mov	r3, r8
 80007a0:	000c      	movs	r4, r1
 80007a2:	1af7      	subs	r7, r6, r3
 80007a4:	e6e3      	b.n	800056e <__aeabi_fadd+0x52>
 80007a6:	4642      	mov	r2, r8
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0x292>
 80007ac:	e775      	b.n	800069a <__aeabi_fadd+0x17e>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x298>
 80007b2:	e77a      	b.n	80006aa <__aeabi_fadd+0x18e>
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	03db      	lsls	r3, r3, #15
 80007b8:	2400      	movs	r4, #0
 80007ba:	469c      	mov	ip, r3
 80007bc:	22ff      	movs	r2, #255	; 0xff
 80007be:	e6f2      	b.n	80005a6 <__aeabi_fadd+0x8a>
 80007c0:	0030      	movs	r0, r6
 80007c2:	4440      	add	r0, r8
 80007c4:	2501      	movs	r5, #1
 80007c6:	0143      	lsls	r3, r0, #5
 80007c8:	d400      	bmi.n	80007cc <__aeabi_fadd+0x2b0>
 80007ca:	e75b      	b.n	8000684 <__aeabi_fadd+0x168>
 80007cc:	2502      	movs	r5, #2
 80007ce:	e718      	b.n	8000602 <__aeabi_fadd+0xe6>
 80007d0:	4643      	mov	r3, r8
 80007d2:	2501      	movs	r5, #1
 80007d4:	1b98      	subs	r0, r3, r6
 80007d6:	e6c5      	b.n	8000564 <__aeabi_fadd+0x48>
 80007d8:	2320      	movs	r3, #32
 80007da:	4644      	mov	r4, r8
 80007dc:	4640      	mov	r0, r8
 80007de:	40d4      	lsrs	r4, r2
 80007e0:	1a9a      	subs	r2, r3, r2
 80007e2:	4090      	lsls	r0, r2
 80007e4:	1e43      	subs	r3, r0, #1
 80007e6:	4198      	sbcs	r0, r3
 80007e8:	4320      	orrs	r0, r4
 80007ea:	e7a4      	b.n	8000736 <__aeabi_fadd+0x21a>
 80007ec:	000d      	movs	r5, r1
 80007ee:	e74d      	b.n	800068c <__aeabi_fadd+0x170>
 80007f0:	2320      	movs	r3, #32
 80007f2:	4641      	mov	r1, r8
 80007f4:	4640      	mov	r0, r8
 80007f6:	40d1      	lsrs	r1, r2
 80007f8:	1a9a      	subs	r2, r3, r2
 80007fa:	4090      	lsls	r0, r2
 80007fc:	1e43      	subs	r3, r0, #1
 80007fe:	4198      	sbcs	r0, r3
 8000800:	4308      	orrs	r0, r1
 8000802:	e770      	b.n	80006e6 <__aeabi_fadd+0x1ca>
 8000804:	4642      	mov	r2, r8
 8000806:	2a00      	cmp	r2, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0x2f0>
 800080a:	e74f      	b.n	80006ac <__aeabi_fadd+0x190>
 800080c:	2e00      	cmp	r6, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0x2f6>
 8000810:	e74d      	b.n	80006ae <__aeabi_fadd+0x192>
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	03d2      	lsls	r2, r2, #15
 8000816:	4213      	tst	r3, r2
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x300>
 800081a:	e748      	b.n	80006ae <__aeabi_fadd+0x192>
 800081c:	4210      	tst	r0, r2
 800081e:	d000      	beq.n	8000822 <__aeabi_fadd+0x306>
 8000820:	e745      	b.n	80006ae <__aeabi_fadd+0x192>
 8000822:	0003      	movs	r3, r0
 8000824:	e743      	b.n	80006ae <__aeabi_fadd+0x192>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d090      	beq.n	800074c <__aeabi_fadd+0x230>
 800082a:	000c      	movs	r4, r1
 800082c:	4684      	mov	ip, r0
 800082e:	2200      	movs	r2, #0
 8000830:	e6b9      	b.n	80005a6 <__aeabi_fadd+0x8a>
 8000832:	4643      	mov	r3, r8
 8000834:	000c      	movs	r4, r1
 8000836:	1af0      	subs	r0, r6, r3
 8000838:	3501      	adds	r5, #1
 800083a:	e693      	b.n	8000564 <__aeabi_fadd+0x48>
 800083c:	4684      	mov	ip, r0
 800083e:	2200      	movs	r2, #0
 8000840:	e6b1      	b.n	80005a6 <__aeabi_fadd+0x8a>
 8000842:	2800      	cmp	r0, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_fadd+0x32c>
 8000846:	e71d      	b.n	8000684 <__aeabi_fadd+0x168>
 8000848:	2300      	movs	r3, #0
 800084a:	2400      	movs	r4, #0
 800084c:	469c      	mov	ip, r3
 800084e:	e6aa      	b.n	80005a6 <__aeabi_fadd+0x8a>
 8000850:	fbffffff 	.word	0xfbffffff
 8000854:	7dffffff 	.word	0x7dffffff

08000858 <__aeabi_fdiv>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	464f      	mov	r7, r9
 800085c:	4646      	mov	r6, r8
 800085e:	46d6      	mov	lr, sl
 8000860:	0245      	lsls	r5, r0, #9
 8000862:	b5c0      	push	{r6, r7, lr}
 8000864:	0047      	lsls	r7, r0, #1
 8000866:	1c0c      	adds	r4, r1, #0
 8000868:	0a6d      	lsrs	r5, r5, #9
 800086a:	0e3f      	lsrs	r7, r7, #24
 800086c:	0fc6      	lsrs	r6, r0, #31
 800086e:	2f00      	cmp	r7, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_fdiv+0x1c>
 8000872:	e070      	b.n	8000956 <__aeabi_fdiv+0xfe>
 8000874:	2fff      	cmp	r7, #255	; 0xff
 8000876:	d100      	bne.n	800087a <__aeabi_fdiv+0x22>
 8000878:	e075      	b.n	8000966 <__aeabi_fdiv+0x10e>
 800087a:	00eb      	lsls	r3, r5, #3
 800087c:	2580      	movs	r5, #128	; 0x80
 800087e:	04ed      	lsls	r5, r5, #19
 8000880:	431d      	orrs	r5, r3
 8000882:	2300      	movs	r3, #0
 8000884:	4699      	mov	r9, r3
 8000886:	469a      	mov	sl, r3
 8000888:	3f7f      	subs	r7, #127	; 0x7f
 800088a:	0260      	lsls	r0, r4, #9
 800088c:	0a43      	lsrs	r3, r0, #9
 800088e:	4698      	mov	r8, r3
 8000890:	0063      	lsls	r3, r4, #1
 8000892:	0e1b      	lsrs	r3, r3, #24
 8000894:	0fe4      	lsrs	r4, r4, #31
 8000896:	2b00      	cmp	r3, #0
 8000898:	d04e      	beq.n	8000938 <__aeabi_fdiv+0xe0>
 800089a:	2bff      	cmp	r3, #255	; 0xff
 800089c:	d046      	beq.n	800092c <__aeabi_fdiv+0xd4>
 800089e:	4642      	mov	r2, r8
 80008a0:	00d0      	lsls	r0, r2, #3
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	04d2      	lsls	r2, r2, #19
 80008a6:	4302      	orrs	r2, r0
 80008a8:	4690      	mov	r8, r2
 80008aa:	2200      	movs	r2, #0
 80008ac:	3b7f      	subs	r3, #127	; 0x7f
 80008ae:	0031      	movs	r1, r6
 80008b0:	1aff      	subs	r7, r7, r3
 80008b2:	464b      	mov	r3, r9
 80008b4:	4061      	eors	r1, r4
 80008b6:	b2c9      	uxtb	r1, r1
 80008b8:	4313      	orrs	r3, r2
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d900      	bls.n	80008c0 <__aeabi_fdiv+0x68>
 80008be:	e0b5      	b.n	8000a2c <__aeabi_fdiv+0x1d4>
 80008c0:	486e      	ldr	r0, [pc, #440]	; (8000a7c <__aeabi_fdiv+0x224>)
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	58c3      	ldr	r3, [r0, r3]
 80008c6:	469f      	mov	pc, r3
 80008c8:	2300      	movs	r3, #0
 80008ca:	4698      	mov	r8, r3
 80008cc:	0026      	movs	r6, r4
 80008ce:	4645      	mov	r5, r8
 80008d0:	4692      	mov	sl, r2
 80008d2:	4653      	mov	r3, sl
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d100      	bne.n	80008da <__aeabi_fdiv+0x82>
 80008d8:	e089      	b.n	80009ee <__aeabi_fdiv+0x196>
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fdiv+0x88>
 80008de:	e09e      	b.n	8000a1e <__aeabi_fdiv+0x1c6>
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d018      	beq.n	8000916 <__aeabi_fdiv+0xbe>
 80008e4:	003b      	movs	r3, r7
 80008e6:	337f      	adds	r3, #127	; 0x7f
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	dd69      	ble.n	80009c0 <__aeabi_fdiv+0x168>
 80008ec:	076a      	lsls	r2, r5, #29
 80008ee:	d004      	beq.n	80008fa <__aeabi_fdiv+0xa2>
 80008f0:	220f      	movs	r2, #15
 80008f2:	402a      	ands	r2, r5
 80008f4:	2a04      	cmp	r2, #4
 80008f6:	d000      	beq.n	80008fa <__aeabi_fdiv+0xa2>
 80008f8:	3504      	adds	r5, #4
 80008fa:	012a      	lsls	r2, r5, #4
 80008fc:	d503      	bpl.n	8000906 <__aeabi_fdiv+0xae>
 80008fe:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <__aeabi_fdiv+0x228>)
 8000900:	401d      	ands	r5, r3
 8000902:	003b      	movs	r3, r7
 8000904:	3380      	adds	r3, #128	; 0x80
 8000906:	2bfe      	cmp	r3, #254	; 0xfe
 8000908:	dd00      	ble.n	800090c <__aeabi_fdiv+0xb4>
 800090a:	e070      	b.n	80009ee <__aeabi_fdiv+0x196>
 800090c:	01ad      	lsls	r5, r5, #6
 800090e:	0a6d      	lsrs	r5, r5, #9
 8000910:	b2d8      	uxtb	r0, r3
 8000912:	e002      	b.n	800091a <__aeabi_fdiv+0xc2>
 8000914:	000e      	movs	r6, r1
 8000916:	2000      	movs	r0, #0
 8000918:	2500      	movs	r5, #0
 800091a:	05c0      	lsls	r0, r0, #23
 800091c:	4328      	orrs	r0, r5
 800091e:	07f6      	lsls	r6, r6, #31
 8000920:	4330      	orrs	r0, r6
 8000922:	bce0      	pop	{r5, r6, r7}
 8000924:	46ba      	mov	sl, r7
 8000926:	46b1      	mov	r9, r6
 8000928:	46a8      	mov	r8, r5
 800092a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092c:	4643      	mov	r3, r8
 800092e:	2b00      	cmp	r3, #0
 8000930:	d13f      	bne.n	80009b2 <__aeabi_fdiv+0x15a>
 8000932:	2202      	movs	r2, #2
 8000934:	3fff      	subs	r7, #255	; 0xff
 8000936:	e003      	b.n	8000940 <__aeabi_fdiv+0xe8>
 8000938:	4643      	mov	r3, r8
 800093a:	2b00      	cmp	r3, #0
 800093c:	d12d      	bne.n	800099a <__aeabi_fdiv+0x142>
 800093e:	2201      	movs	r2, #1
 8000940:	0031      	movs	r1, r6
 8000942:	464b      	mov	r3, r9
 8000944:	4061      	eors	r1, r4
 8000946:	b2c9      	uxtb	r1, r1
 8000948:	4313      	orrs	r3, r2
 800094a:	2b0f      	cmp	r3, #15
 800094c:	d834      	bhi.n	80009b8 <__aeabi_fdiv+0x160>
 800094e:	484d      	ldr	r0, [pc, #308]	; (8000a84 <__aeabi_fdiv+0x22c>)
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	58c3      	ldr	r3, [r0, r3]
 8000954:	469f      	mov	pc, r3
 8000956:	2d00      	cmp	r5, #0
 8000958:	d113      	bne.n	8000982 <__aeabi_fdiv+0x12a>
 800095a:	2304      	movs	r3, #4
 800095c:	4699      	mov	r9, r3
 800095e:	3b03      	subs	r3, #3
 8000960:	2700      	movs	r7, #0
 8000962:	469a      	mov	sl, r3
 8000964:	e791      	b.n	800088a <__aeabi_fdiv+0x32>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d105      	bne.n	8000976 <__aeabi_fdiv+0x11e>
 800096a:	2308      	movs	r3, #8
 800096c:	4699      	mov	r9, r3
 800096e:	3b06      	subs	r3, #6
 8000970:	27ff      	movs	r7, #255	; 0xff
 8000972:	469a      	mov	sl, r3
 8000974:	e789      	b.n	800088a <__aeabi_fdiv+0x32>
 8000976:	230c      	movs	r3, #12
 8000978:	4699      	mov	r9, r3
 800097a:	3b09      	subs	r3, #9
 800097c:	27ff      	movs	r7, #255	; 0xff
 800097e:	469a      	mov	sl, r3
 8000980:	e783      	b.n	800088a <__aeabi_fdiv+0x32>
 8000982:	0028      	movs	r0, r5
 8000984:	f002 fb4a 	bl	800301c <__clzsi2>
 8000988:	2776      	movs	r7, #118	; 0x76
 800098a:	1f43      	subs	r3, r0, #5
 800098c:	409d      	lsls	r5, r3
 800098e:	2300      	movs	r3, #0
 8000990:	427f      	negs	r7, r7
 8000992:	4699      	mov	r9, r3
 8000994:	469a      	mov	sl, r3
 8000996:	1a3f      	subs	r7, r7, r0
 8000998:	e777      	b.n	800088a <__aeabi_fdiv+0x32>
 800099a:	4640      	mov	r0, r8
 800099c:	f002 fb3e 	bl	800301c <__clzsi2>
 80009a0:	4642      	mov	r2, r8
 80009a2:	1f43      	subs	r3, r0, #5
 80009a4:	409a      	lsls	r2, r3
 80009a6:	2376      	movs	r3, #118	; 0x76
 80009a8:	425b      	negs	r3, r3
 80009aa:	4690      	mov	r8, r2
 80009ac:	1a1b      	subs	r3, r3, r0
 80009ae:	2200      	movs	r2, #0
 80009b0:	e77d      	b.n	80008ae <__aeabi_fdiv+0x56>
 80009b2:	23ff      	movs	r3, #255	; 0xff
 80009b4:	2203      	movs	r2, #3
 80009b6:	e77a      	b.n	80008ae <__aeabi_fdiv+0x56>
 80009b8:	000e      	movs	r6, r1
 80009ba:	20ff      	movs	r0, #255	; 0xff
 80009bc:	2500      	movs	r5, #0
 80009be:	e7ac      	b.n	800091a <__aeabi_fdiv+0xc2>
 80009c0:	2001      	movs	r0, #1
 80009c2:	1ac0      	subs	r0, r0, r3
 80009c4:	281b      	cmp	r0, #27
 80009c6:	dca6      	bgt.n	8000916 <__aeabi_fdiv+0xbe>
 80009c8:	379e      	adds	r7, #158	; 0x9e
 80009ca:	002a      	movs	r2, r5
 80009cc:	40bd      	lsls	r5, r7
 80009ce:	40c2      	lsrs	r2, r0
 80009d0:	1e6b      	subs	r3, r5, #1
 80009d2:	419d      	sbcs	r5, r3
 80009d4:	4315      	orrs	r5, r2
 80009d6:	076b      	lsls	r3, r5, #29
 80009d8:	d004      	beq.n	80009e4 <__aeabi_fdiv+0x18c>
 80009da:	230f      	movs	r3, #15
 80009dc:	402b      	ands	r3, r5
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d000      	beq.n	80009e4 <__aeabi_fdiv+0x18c>
 80009e2:	3504      	adds	r5, #4
 80009e4:	016b      	lsls	r3, r5, #5
 80009e6:	d544      	bpl.n	8000a72 <__aeabi_fdiv+0x21a>
 80009e8:	2001      	movs	r0, #1
 80009ea:	2500      	movs	r5, #0
 80009ec:	e795      	b.n	800091a <__aeabi_fdiv+0xc2>
 80009ee:	20ff      	movs	r0, #255	; 0xff
 80009f0:	2500      	movs	r5, #0
 80009f2:	e792      	b.n	800091a <__aeabi_fdiv+0xc2>
 80009f4:	2580      	movs	r5, #128	; 0x80
 80009f6:	2600      	movs	r6, #0
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	03ed      	lsls	r5, r5, #15
 80009fc:	e78d      	b.n	800091a <__aeabi_fdiv+0xc2>
 80009fe:	2300      	movs	r3, #0
 8000a00:	4698      	mov	r8, r3
 8000a02:	2080      	movs	r0, #128	; 0x80
 8000a04:	03c0      	lsls	r0, r0, #15
 8000a06:	4205      	tst	r5, r0
 8000a08:	d009      	beq.n	8000a1e <__aeabi_fdiv+0x1c6>
 8000a0a:	4643      	mov	r3, r8
 8000a0c:	4203      	tst	r3, r0
 8000a0e:	d106      	bne.n	8000a1e <__aeabi_fdiv+0x1c6>
 8000a10:	4645      	mov	r5, r8
 8000a12:	4305      	orrs	r5, r0
 8000a14:	026d      	lsls	r5, r5, #9
 8000a16:	0026      	movs	r6, r4
 8000a18:	20ff      	movs	r0, #255	; 0xff
 8000a1a:	0a6d      	lsrs	r5, r5, #9
 8000a1c:	e77d      	b.n	800091a <__aeabi_fdiv+0xc2>
 8000a1e:	2080      	movs	r0, #128	; 0x80
 8000a20:	03c0      	lsls	r0, r0, #15
 8000a22:	4305      	orrs	r5, r0
 8000a24:	026d      	lsls	r5, r5, #9
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	e776      	b.n	800091a <__aeabi_fdiv+0xc2>
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	016b      	lsls	r3, r5, #5
 8000a30:	0150      	lsls	r0, r2, #5
 8000a32:	4283      	cmp	r3, r0
 8000a34:	d219      	bcs.n	8000a6a <__aeabi_fdiv+0x212>
 8000a36:	221b      	movs	r2, #27
 8000a38:	2500      	movs	r5, #0
 8000a3a:	3f01      	subs	r7, #1
 8000a3c:	2601      	movs	r6, #1
 8000a3e:	001c      	movs	r4, r3
 8000a40:	006d      	lsls	r5, r5, #1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	db01      	blt.n	8000a4c <__aeabi_fdiv+0x1f4>
 8000a48:	4298      	cmp	r0, r3
 8000a4a:	d801      	bhi.n	8000a50 <__aeabi_fdiv+0x1f8>
 8000a4c:	1a1b      	subs	r3, r3, r0
 8000a4e:	4335      	orrs	r5, r6
 8000a50:	3a01      	subs	r2, #1
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d1f3      	bne.n	8000a3e <__aeabi_fdiv+0x1e6>
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	4193      	sbcs	r3, r2
 8000a5a:	431d      	orrs	r5, r3
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	337f      	adds	r3, #127	; 0x7f
 8000a60:	000e      	movs	r6, r1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	dd00      	ble.n	8000a68 <__aeabi_fdiv+0x210>
 8000a66:	e741      	b.n	80008ec <__aeabi_fdiv+0x94>
 8000a68:	e7aa      	b.n	80009c0 <__aeabi_fdiv+0x168>
 8000a6a:	221a      	movs	r2, #26
 8000a6c:	2501      	movs	r5, #1
 8000a6e:	1a1b      	subs	r3, r3, r0
 8000a70:	e7e4      	b.n	8000a3c <__aeabi_fdiv+0x1e4>
 8000a72:	01ad      	lsls	r5, r5, #6
 8000a74:	2000      	movs	r0, #0
 8000a76:	0a6d      	lsrs	r5, r5, #9
 8000a78:	e74f      	b.n	800091a <__aeabi_fdiv+0xc2>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	0800b098 	.word	0x0800b098
 8000a80:	f7ffffff 	.word	0xf7ffffff
 8000a84:	0800b0d8 	.word	0x0800b0d8

08000a88 <__eqsf2>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	0245      	lsls	r5, r0, #9
 8000a8e:	024e      	lsls	r6, r1, #9
 8000a90:	004c      	lsls	r4, r1, #1
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a6d      	lsrs	r5, r5, #9
 8000a96:	2001      	movs	r0, #1
 8000a98:	0e12      	lsrs	r2, r2, #24
 8000a9a:	0a76      	lsrs	r6, r6, #9
 8000a9c:	0e24      	lsrs	r4, r4, #24
 8000a9e:	0fc9      	lsrs	r1, r1, #31
 8000aa0:	2aff      	cmp	r2, #255	; 0xff
 8000aa2:	d006      	beq.n	8000ab2 <__eqsf2+0x2a>
 8000aa4:	2cff      	cmp	r4, #255	; 0xff
 8000aa6:	d003      	beq.n	8000ab0 <__eqsf2+0x28>
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d101      	bne.n	8000ab0 <__eqsf2+0x28>
 8000aac:	42b5      	cmp	r5, r6
 8000aae:	d006      	beq.n	8000abe <__eqsf2+0x36>
 8000ab0:	bd70      	pop	{r4, r5, r6, pc}
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d1fc      	bne.n	8000ab0 <__eqsf2+0x28>
 8000ab6:	2cff      	cmp	r4, #255	; 0xff
 8000ab8:	d1fa      	bne.n	8000ab0 <__eqsf2+0x28>
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d1f8      	bne.n	8000ab0 <__eqsf2+0x28>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d006      	beq.n	8000ad0 <__eqsf2+0x48>
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d1f3      	bne.n	8000ab0 <__eqsf2+0x28>
 8000ac8:	0028      	movs	r0, r5
 8000aca:	1e43      	subs	r3, r0, #1
 8000acc:	4198      	sbcs	r0, r3
 8000ace:	e7ef      	b.n	8000ab0 <__eqsf2+0x28>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e7ed      	b.n	8000ab0 <__eqsf2+0x28>

08000ad4 <__gesf2>:
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0245      	lsls	r5, r0, #9
 8000ada:	024e      	lsls	r6, r1, #9
 8000adc:	004c      	lsls	r4, r1, #1
 8000ade:	0fc3      	lsrs	r3, r0, #31
 8000ae0:	0a6d      	lsrs	r5, r5, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0a76      	lsrs	r6, r6, #9
 8000ae6:	0e24      	lsrs	r4, r4, #24
 8000ae8:	0fc8      	lsrs	r0, r1, #31
 8000aea:	2aff      	cmp	r2, #255	; 0xff
 8000aec:	d01b      	beq.n	8000b26 <__gesf2+0x52>
 8000aee:	2cff      	cmp	r4, #255	; 0xff
 8000af0:	d00e      	beq.n	8000b10 <__gesf2+0x3c>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d11b      	bne.n	8000b2e <__gesf2+0x5a>
 8000af6:	2c00      	cmp	r4, #0
 8000af8:	d101      	bne.n	8000afe <__gesf2+0x2a>
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d01c      	beq.n	8000b38 <__gesf2+0x64>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d00c      	beq.n	8000b1c <__gesf2+0x48>
 8000b02:	4283      	cmp	r3, r0
 8000b04:	d01c      	beq.n	8000b40 <__gesf2+0x6c>
 8000b06:	2102      	movs	r1, #2
 8000b08:	1e58      	subs	r0, r3, #1
 8000b0a:	4008      	ands	r0, r1
 8000b0c:	3801      	subs	r0, #1
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d122      	bne.n	8000b5a <__gesf2+0x86>
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d1f4      	bne.n	8000b02 <__gesf2+0x2e>
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d1f2      	bne.n	8000b02 <__gesf2+0x2e>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d1f6      	bne.n	8000b0e <__gesf2+0x3a>
 8000b20:	2001      	movs	r0, #1
 8000b22:	4240      	negs	r0, r0
 8000b24:	e7f3      	b.n	8000b0e <__gesf2+0x3a>
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d117      	bne.n	8000b5a <__gesf2+0x86>
 8000b2a:	2cff      	cmp	r4, #255	; 0xff
 8000b2c:	d0f0      	beq.n	8000b10 <__gesf2+0x3c>
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d1e7      	bne.n	8000b02 <__gesf2+0x2e>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d1e5      	bne.n	8000b02 <__gesf2+0x2e>
 8000b36:	e7e6      	b.n	8000b06 <__gesf2+0x32>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d0e7      	beq.n	8000b0e <__gesf2+0x3a>
 8000b3e:	e7e2      	b.n	8000b06 <__gesf2+0x32>
 8000b40:	42a2      	cmp	r2, r4
 8000b42:	dc05      	bgt.n	8000b50 <__gesf2+0x7c>
 8000b44:	dbea      	blt.n	8000b1c <__gesf2+0x48>
 8000b46:	42b5      	cmp	r5, r6
 8000b48:	d802      	bhi.n	8000b50 <__gesf2+0x7c>
 8000b4a:	d3e7      	bcc.n	8000b1c <__gesf2+0x48>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e7de      	b.n	8000b0e <__gesf2+0x3a>
 8000b50:	4243      	negs	r3, r0
 8000b52:	4158      	adcs	r0, r3
 8000b54:	0040      	lsls	r0, r0, #1
 8000b56:	3801      	subs	r0, #1
 8000b58:	e7d9      	b.n	8000b0e <__gesf2+0x3a>
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	4240      	negs	r0, r0
 8000b5e:	e7d6      	b.n	8000b0e <__gesf2+0x3a>

08000b60 <__lesf2>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	0042      	lsls	r2, r0, #1
 8000b64:	0245      	lsls	r5, r0, #9
 8000b66:	024e      	lsls	r6, r1, #9
 8000b68:	004c      	lsls	r4, r1, #1
 8000b6a:	0fc3      	lsrs	r3, r0, #31
 8000b6c:	0a6d      	lsrs	r5, r5, #9
 8000b6e:	0e12      	lsrs	r2, r2, #24
 8000b70:	0a76      	lsrs	r6, r6, #9
 8000b72:	0e24      	lsrs	r4, r4, #24
 8000b74:	0fc8      	lsrs	r0, r1, #31
 8000b76:	2aff      	cmp	r2, #255	; 0xff
 8000b78:	d00b      	beq.n	8000b92 <__lesf2+0x32>
 8000b7a:	2cff      	cmp	r4, #255	; 0xff
 8000b7c:	d00d      	beq.n	8000b9a <__lesf2+0x3a>
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d11f      	bne.n	8000bc2 <__lesf2+0x62>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d116      	bne.n	8000bb4 <__lesf2+0x54>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d114      	bne.n	8000bb4 <__lesf2+0x54>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d010      	beq.n	8000bb2 <__lesf2+0x52>
 8000b90:	e009      	b.n	8000ba6 <__lesf2+0x46>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d10c      	bne.n	8000bb0 <__lesf2+0x50>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d113      	bne.n	8000bc2 <__lesf2+0x62>
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d108      	bne.n	8000bb0 <__lesf2+0x50>
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d008      	beq.n	8000bb4 <__lesf2+0x54>
 8000ba2:	4283      	cmp	r3, r0
 8000ba4:	d012      	beq.n	8000bcc <__lesf2+0x6c>
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	1e58      	subs	r0, r3, #1
 8000baa:	4008      	ands	r0, r1
 8000bac:	3801      	subs	r0, #1
 8000bae:	e000      	b.n	8000bb2 <__lesf2+0x52>
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d1f4      	bne.n	8000ba2 <__lesf2+0x42>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d1fa      	bne.n	8000bb2 <__lesf2+0x52>
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	4240      	negs	r0, r0
 8000bc0:	e7f7      	b.n	8000bb2 <__lesf2+0x52>
 8000bc2:	2c00      	cmp	r4, #0
 8000bc4:	d1ed      	bne.n	8000ba2 <__lesf2+0x42>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d1eb      	bne.n	8000ba2 <__lesf2+0x42>
 8000bca:	e7ec      	b.n	8000ba6 <__lesf2+0x46>
 8000bcc:	42a2      	cmp	r2, r4
 8000bce:	dc05      	bgt.n	8000bdc <__lesf2+0x7c>
 8000bd0:	dbf2      	blt.n	8000bb8 <__lesf2+0x58>
 8000bd2:	42b5      	cmp	r5, r6
 8000bd4:	d802      	bhi.n	8000bdc <__lesf2+0x7c>
 8000bd6:	d3ef      	bcc.n	8000bb8 <__lesf2+0x58>
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e7ea      	b.n	8000bb2 <__lesf2+0x52>
 8000bdc:	4243      	negs	r3, r0
 8000bde:	4158      	adcs	r0, r3
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	3801      	subs	r0, #1
 8000be4:	e7e5      	b.n	8000bb2 <__lesf2+0x52>
 8000be6:	46c0      	nop			; (mov r8, r8)

08000be8 <__aeabi_fmul>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	464f      	mov	r7, r9
 8000bec:	4646      	mov	r6, r8
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	0244      	lsls	r4, r0, #9
 8000bf2:	0045      	lsls	r5, r0, #1
 8000bf4:	b5c0      	push	{r6, r7, lr}
 8000bf6:	0a64      	lsrs	r4, r4, #9
 8000bf8:	1c0f      	adds	r7, r1, #0
 8000bfa:	0e2d      	lsrs	r5, r5, #24
 8000bfc:	0fc6      	lsrs	r6, r0, #31
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fmul+0x1c>
 8000c02:	e08d      	b.n	8000d20 <__aeabi_fmul+0x138>
 8000c04:	2dff      	cmp	r5, #255	; 0xff
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fmul+0x22>
 8000c08:	e092      	b.n	8000d30 <__aeabi_fmul+0x148>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2080      	movs	r0, #128	; 0x80
 8000c0e:	4699      	mov	r9, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	00e4      	lsls	r4, r4, #3
 8000c14:	04c0      	lsls	r0, r0, #19
 8000c16:	4304      	orrs	r4, r0
 8000c18:	3d7f      	subs	r5, #127	; 0x7f
 8000c1a:	0278      	lsls	r0, r7, #9
 8000c1c:	0a43      	lsrs	r3, r0, #9
 8000c1e:	4698      	mov	r8, r3
 8000c20:	007b      	lsls	r3, r7, #1
 8000c22:	0e1b      	lsrs	r3, r3, #24
 8000c24:	0fff      	lsrs	r7, r7, #31
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fmul+0x44>
 8000c2a:	e070      	b.n	8000d0e <__aeabi_fmul+0x126>
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_fmul+0x4a>
 8000c30:	e086      	b.n	8000d40 <__aeabi_fmul+0x158>
 8000c32:	4642      	mov	r2, r8
 8000c34:	00d0      	lsls	r0, r2, #3
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	3b7f      	subs	r3, #127	; 0x7f
 8000c3a:	18ed      	adds	r5, r5, r3
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	04d2      	lsls	r2, r2, #19
 8000c40:	4302      	orrs	r2, r0
 8000c42:	4690      	mov	r8, r2
 8000c44:	469c      	mov	ip, r3
 8000c46:	0031      	movs	r1, r6
 8000c48:	464b      	mov	r3, r9
 8000c4a:	4079      	eors	r1, r7
 8000c4c:	1c68      	adds	r0, r5, #1
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	d81c      	bhi.n	8000c8c <__aeabi_fmul+0xa4>
 8000c52:	4a76      	ldr	r2, [pc, #472]	; (8000e2c <__aeabi_fmul+0x244>)
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	58d3      	ldr	r3, [r2, r3]
 8000c58:	469f      	mov	pc, r3
 8000c5a:	0039      	movs	r1, r7
 8000c5c:	4644      	mov	r4, r8
 8000c5e:	46e2      	mov	sl, ip
 8000c60:	4653      	mov	r3, sl
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d00f      	beq.n	8000c86 <__aeabi_fmul+0x9e>
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fmul+0x84>
 8000c6a:	e0d7      	b.n	8000e1c <__aeabi_fmul+0x234>
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d137      	bne.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c70:	2000      	movs	r0, #0
 8000c72:	2400      	movs	r4, #0
 8000c74:	05c0      	lsls	r0, r0, #23
 8000c76:	4320      	orrs	r0, r4
 8000c78:	07c9      	lsls	r1, r1, #31
 8000c7a:	4308      	orrs	r0, r1
 8000c7c:	bce0      	pop	{r5, r6, r7}
 8000c7e:	46ba      	mov	sl, r7
 8000c80:	46b1      	mov	r9, r6
 8000c82:	46a8      	mov	r8, r5
 8000c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c86:	20ff      	movs	r0, #255	; 0xff
 8000c88:	2400      	movs	r4, #0
 8000c8a:	e7f3      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000c8c:	0c26      	lsrs	r6, r4, #16
 8000c8e:	0424      	lsls	r4, r4, #16
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	4644      	mov	r4, r8
 8000c94:	0424      	lsls	r4, r4, #16
 8000c96:	0c24      	lsrs	r4, r4, #16
 8000c98:	4643      	mov	r3, r8
 8000c9a:	0027      	movs	r7, r4
 8000c9c:	0c1b      	lsrs	r3, r3, #16
 8000c9e:	4357      	muls	r7, r2
 8000ca0:	4374      	muls	r4, r6
 8000ca2:	435a      	muls	r2, r3
 8000ca4:	435e      	muls	r6, r3
 8000ca6:	1912      	adds	r2, r2, r4
 8000ca8:	0c3b      	lsrs	r3, r7, #16
 8000caa:	189b      	adds	r3, r3, r2
 8000cac:	429c      	cmp	r4, r3
 8000cae:	d903      	bls.n	8000cb8 <__aeabi_fmul+0xd0>
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0252      	lsls	r2, r2, #9
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	4466      	add	r6, ip
 8000cb8:	043f      	lsls	r7, r7, #16
 8000cba:	041a      	lsls	r2, r3, #16
 8000cbc:	0c3f      	lsrs	r7, r7, #16
 8000cbe:	19d2      	adds	r2, r2, r7
 8000cc0:	0194      	lsls	r4, r2, #6
 8000cc2:	1e67      	subs	r7, r4, #1
 8000cc4:	41bc      	sbcs	r4, r7
 8000cc6:	0c1b      	lsrs	r3, r3, #16
 8000cc8:	0e92      	lsrs	r2, r2, #26
 8000cca:	199b      	adds	r3, r3, r6
 8000ccc:	4314      	orrs	r4, r2
 8000cce:	019b      	lsls	r3, r3, #6
 8000cd0:	431c      	orrs	r4, r3
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	d400      	bmi.n	8000cd8 <__aeabi_fmul+0xf0>
 8000cd6:	e09b      	b.n	8000e10 <__aeabi_fmul+0x228>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	0862      	lsrs	r2, r4, #1
 8000cdc:	401c      	ands	r4, r3
 8000cde:	4314      	orrs	r4, r2
 8000ce0:	0002      	movs	r2, r0
 8000ce2:	327f      	adds	r2, #127	; 0x7f
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	dd64      	ble.n	8000db2 <__aeabi_fmul+0x1ca>
 8000ce8:	0763      	lsls	r3, r4, #29
 8000cea:	d004      	beq.n	8000cf6 <__aeabi_fmul+0x10e>
 8000cec:	230f      	movs	r3, #15
 8000cee:	4023      	ands	r3, r4
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fmul+0x10e>
 8000cf4:	3404      	adds	r4, #4
 8000cf6:	0123      	lsls	r3, r4, #4
 8000cf8:	d503      	bpl.n	8000d02 <__aeabi_fmul+0x11a>
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <__aeabi_fmul+0x248>)
 8000cfe:	3280      	adds	r2, #128	; 0x80
 8000d00:	401c      	ands	r4, r3
 8000d02:	2afe      	cmp	r2, #254	; 0xfe
 8000d04:	dcbf      	bgt.n	8000c86 <__aeabi_fmul+0x9e>
 8000d06:	01a4      	lsls	r4, r4, #6
 8000d08:	0a64      	lsrs	r4, r4, #9
 8000d0a:	b2d0      	uxtb	r0, r2
 8000d0c:	e7b2      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d13d      	bne.n	8000d90 <__aeabi_fmul+0x1a8>
 8000d14:	464a      	mov	r2, r9
 8000d16:	3301      	adds	r3, #1
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	469c      	mov	ip, r3
 8000d1e:	e792      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d20:	2c00      	cmp	r4, #0
 8000d22:	d129      	bne.n	8000d78 <__aeabi_fmul+0x190>
 8000d24:	2304      	movs	r3, #4
 8000d26:	4699      	mov	r9, r3
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	469a      	mov	sl, r3
 8000d2e:	e774      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d11b      	bne.n	8000d6c <__aeabi_fmul+0x184>
 8000d34:	2308      	movs	r3, #8
 8000d36:	4699      	mov	r9, r3
 8000d38:	3b06      	subs	r3, #6
 8000d3a:	25ff      	movs	r5, #255	; 0xff
 8000d3c:	469a      	mov	sl, r3
 8000d3e:	e76c      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d40:	4643      	mov	r3, r8
 8000d42:	35ff      	adds	r5, #255	; 0xff
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10b      	bne.n	8000d60 <__aeabi_fmul+0x178>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	464a      	mov	r2, r9
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	469c      	mov	ip, r3
 8000d52:	e778      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d54:	4653      	mov	r3, sl
 8000d56:	0031      	movs	r1, r6
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fmul+0x176>
 8000d5c:	e783      	b.n	8000c66 <__aeabi_fmul+0x7e>
 8000d5e:	e792      	b.n	8000c86 <__aeabi_fmul+0x9e>
 8000d60:	2303      	movs	r3, #3
 8000d62:	464a      	mov	r2, r9
 8000d64:	431a      	orrs	r2, r3
 8000d66:	4691      	mov	r9, r2
 8000d68:	469c      	mov	ip, r3
 8000d6a:	e76c      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	4699      	mov	r9, r3
 8000d70:	3b09      	subs	r3, #9
 8000d72:	25ff      	movs	r5, #255	; 0xff
 8000d74:	469a      	mov	sl, r3
 8000d76:	e750      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f002 f94f 	bl	800301c <__clzsi2>
 8000d7e:	2576      	movs	r5, #118	; 0x76
 8000d80:	1f43      	subs	r3, r0, #5
 8000d82:	409c      	lsls	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	426d      	negs	r5, r5
 8000d88:	4699      	mov	r9, r3
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	1a2d      	subs	r5, r5, r0
 8000d8e:	e744      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d90:	4640      	mov	r0, r8
 8000d92:	f002 f943 	bl	800301c <__clzsi2>
 8000d96:	4642      	mov	r2, r8
 8000d98:	1f43      	subs	r3, r0, #5
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	1a2d      	subs	r5, r5, r0
 8000da0:	4690      	mov	r8, r2
 8000da2:	469c      	mov	ip, r3
 8000da4:	3d76      	subs	r5, #118	; 0x76
 8000da6:	e74e      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000da8:	2480      	movs	r4, #128	; 0x80
 8000daa:	2100      	movs	r1, #0
 8000dac:	20ff      	movs	r0, #255	; 0xff
 8000dae:	03e4      	lsls	r4, r4, #15
 8000db0:	e760      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000db2:	2301      	movs	r3, #1
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	2b1b      	cmp	r3, #27
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_fmul+0x1d4>
 8000dba:	e759      	b.n	8000c70 <__aeabi_fmul+0x88>
 8000dbc:	0022      	movs	r2, r4
 8000dbe:	309e      	adds	r0, #158	; 0x9e
 8000dc0:	40da      	lsrs	r2, r3
 8000dc2:	4084      	lsls	r4, r0
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	1e62      	subs	r2, r4, #1
 8000dc8:	4194      	sbcs	r4, r2
 8000dca:	431c      	orrs	r4, r3
 8000dcc:	0763      	lsls	r3, r4, #29
 8000dce:	d004      	beq.n	8000dda <__aeabi_fmul+0x1f2>
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	4023      	ands	r3, r4
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d000      	beq.n	8000dda <__aeabi_fmul+0x1f2>
 8000dd8:	3404      	adds	r4, #4
 8000dda:	0163      	lsls	r3, r4, #5
 8000ddc:	d51a      	bpl.n	8000e14 <__aeabi_fmul+0x22c>
 8000dde:	2001      	movs	r0, #1
 8000de0:	2400      	movs	r4, #0
 8000de2:	e747      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000de4:	2080      	movs	r0, #128	; 0x80
 8000de6:	03c0      	lsls	r0, r0, #15
 8000de8:	4204      	tst	r4, r0
 8000dea:	d009      	beq.n	8000e00 <__aeabi_fmul+0x218>
 8000dec:	4643      	mov	r3, r8
 8000dee:	4203      	tst	r3, r0
 8000df0:	d106      	bne.n	8000e00 <__aeabi_fmul+0x218>
 8000df2:	4644      	mov	r4, r8
 8000df4:	4304      	orrs	r4, r0
 8000df6:	0264      	lsls	r4, r4, #9
 8000df8:	0039      	movs	r1, r7
 8000dfa:	20ff      	movs	r0, #255	; 0xff
 8000dfc:	0a64      	lsrs	r4, r4, #9
 8000dfe:	e739      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	03c0      	lsls	r0, r0, #15
 8000e04:	4304      	orrs	r4, r0
 8000e06:	0264      	lsls	r4, r4, #9
 8000e08:	0031      	movs	r1, r6
 8000e0a:	20ff      	movs	r0, #255	; 0xff
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	e731      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e10:	0028      	movs	r0, r5
 8000e12:	e765      	b.n	8000ce0 <__aeabi_fmul+0xf8>
 8000e14:	01a4      	lsls	r4, r4, #6
 8000e16:	2000      	movs	r0, #0
 8000e18:	0a64      	lsrs	r4, r4, #9
 8000e1a:	e72b      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e1c:	2080      	movs	r0, #128	; 0x80
 8000e1e:	03c0      	lsls	r0, r0, #15
 8000e20:	4304      	orrs	r4, r0
 8000e22:	0264      	lsls	r4, r4, #9
 8000e24:	20ff      	movs	r0, #255	; 0xff
 8000e26:	0a64      	lsrs	r4, r4, #9
 8000e28:	e724      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	0800b118 	.word	0x0800b118
 8000e30:	f7ffffff 	.word	0xf7ffffff

08000e34 <__aeabi_fsub>:
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	46ce      	mov	lr, r9
 8000e38:	4647      	mov	r7, r8
 8000e3a:	0243      	lsls	r3, r0, #9
 8000e3c:	0a5b      	lsrs	r3, r3, #9
 8000e3e:	024e      	lsls	r6, r1, #9
 8000e40:	00da      	lsls	r2, r3, #3
 8000e42:	4694      	mov	ip, r2
 8000e44:	0a72      	lsrs	r2, r6, #9
 8000e46:	4691      	mov	r9, r2
 8000e48:	0045      	lsls	r5, r0, #1
 8000e4a:	004a      	lsls	r2, r1, #1
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	0e2d      	lsrs	r5, r5, #24
 8000e50:	001f      	movs	r7, r3
 8000e52:	0fc4      	lsrs	r4, r0, #31
 8000e54:	0e12      	lsrs	r2, r2, #24
 8000e56:	0fc9      	lsrs	r1, r1, #31
 8000e58:	09b6      	lsrs	r6, r6, #6
 8000e5a:	2aff      	cmp	r2, #255	; 0xff
 8000e5c:	d05b      	beq.n	8000f16 <__aeabi_fsub+0xe2>
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4041      	eors	r1, r0
 8000e62:	428c      	cmp	r4, r1
 8000e64:	d039      	beq.n	8000eda <__aeabi_fsub+0xa6>
 8000e66:	1aa8      	subs	r0, r5, r2
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	dd5a      	ble.n	8000f22 <__aeabi_fsub+0xee>
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d06a      	beq.n	8000f46 <__aeabi_fsub+0x112>
 8000e70:	2dff      	cmp	r5, #255	; 0xff
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x42>
 8000e74:	e0d9      	b.n	800102a <__aeabi_fsub+0x1f6>
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	04d2      	lsls	r2, r2, #19
 8000e7a:	4316      	orrs	r6, r2
 8000e7c:	281b      	cmp	r0, #27
 8000e7e:	dc00      	bgt.n	8000e82 <__aeabi_fsub+0x4e>
 8000e80:	e0e9      	b.n	8001056 <__aeabi_fsub+0x222>
 8000e82:	2001      	movs	r0, #1
 8000e84:	4663      	mov	r3, ip
 8000e86:	1a18      	subs	r0, r3, r0
 8000e88:	0143      	lsls	r3, r0, #5
 8000e8a:	d400      	bmi.n	8000e8e <__aeabi_fsub+0x5a>
 8000e8c:	e0b4      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 8000e8e:	0180      	lsls	r0, r0, #6
 8000e90:	0987      	lsrs	r7, r0, #6
 8000e92:	0038      	movs	r0, r7
 8000e94:	f002 f8c2 	bl	800301c <__clzsi2>
 8000e98:	3805      	subs	r0, #5
 8000e9a:	4087      	lsls	r7, r0
 8000e9c:	4285      	cmp	r5, r0
 8000e9e:	dc00      	bgt.n	8000ea2 <__aeabi_fsub+0x6e>
 8000ea0:	e0cc      	b.n	800103c <__aeabi_fsub+0x208>
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	48b5      	ldr	r0, [pc, #724]	; (800117c <__aeabi_fsub+0x348>)
 8000ea6:	4038      	ands	r0, r7
 8000ea8:	0743      	lsls	r3, r0, #29
 8000eaa:	d004      	beq.n	8000eb6 <__aeabi_fsub+0x82>
 8000eac:	230f      	movs	r3, #15
 8000eae:	4003      	ands	r3, r0
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d000      	beq.n	8000eb6 <__aeabi_fsub+0x82>
 8000eb4:	3004      	adds	r0, #4
 8000eb6:	0143      	lsls	r3, r0, #5
 8000eb8:	d400      	bmi.n	8000ebc <__aeabi_fsub+0x88>
 8000eba:	e0a0      	b.n	8000ffe <__aeabi_fsub+0x1ca>
 8000ebc:	1c6a      	adds	r2, r5, #1
 8000ebe:	2dfe      	cmp	r5, #254	; 0xfe
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_fsub+0x90>
 8000ec2:	e08d      	b.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000ec4:	0180      	lsls	r0, r0, #6
 8000ec6:	0a47      	lsrs	r7, r0, #9
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	05d0      	lsls	r0, r2, #23
 8000ecc:	4338      	orrs	r0, r7
 8000ece:	07e4      	lsls	r4, r4, #31
 8000ed0:	4320      	orrs	r0, r4
 8000ed2:	bcc0      	pop	{r6, r7}
 8000ed4:	46b9      	mov	r9, r7
 8000ed6:	46b0      	mov	r8, r6
 8000ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eda:	1aa8      	subs	r0, r5, r2
 8000edc:	4680      	mov	r8, r0
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	dd45      	ble.n	8000f6e <__aeabi_fsub+0x13a>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d070      	beq.n	8000fc8 <__aeabi_fsub+0x194>
 8000ee6:	2dff      	cmp	r5, #255	; 0xff
 8000ee8:	d100      	bne.n	8000eec <__aeabi_fsub+0xb8>
 8000eea:	e09e      	b.n	800102a <__aeabi_fsub+0x1f6>
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	04db      	lsls	r3, r3, #19
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	4643      	mov	r3, r8
 8000ef4:	2b1b      	cmp	r3, #27
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_fsub+0xc6>
 8000ef8:	e0d2      	b.n	80010a0 <__aeabi_fsub+0x26c>
 8000efa:	2001      	movs	r0, #1
 8000efc:	4460      	add	r0, ip
 8000efe:	0143      	lsls	r3, r0, #5
 8000f00:	d57a      	bpl.n	8000ff8 <__aeabi_fsub+0x1c4>
 8000f02:	3501      	adds	r5, #1
 8000f04:	2dff      	cmp	r5, #255	; 0xff
 8000f06:	d06b      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4a9d      	ldr	r2, [pc, #628]	; (8001180 <__aeabi_fsub+0x34c>)
 8000f0c:	4003      	ands	r3, r0
 8000f0e:	0840      	lsrs	r0, r0, #1
 8000f10:	4010      	ands	r0, r2
 8000f12:	4318      	orrs	r0, r3
 8000f14:	e7c8      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d020      	beq.n	8000f5c <__aeabi_fsub+0x128>
 8000f1a:	428c      	cmp	r4, r1
 8000f1c:	d023      	beq.n	8000f66 <__aeabi_fsub+0x132>
 8000f1e:	0028      	movs	r0, r5
 8000f20:	38ff      	subs	r0, #255	; 0xff
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d039      	beq.n	8000f9a <__aeabi_fsub+0x166>
 8000f26:	1b57      	subs	r7, r2, r5
 8000f28:	2d00      	cmp	r5, #0
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0xfa>
 8000f2c:	e09d      	b.n	800106a <__aeabi_fsub+0x236>
 8000f2e:	4663      	mov	r3, ip
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x102>
 8000f34:	e0db      	b.n	80010ee <__aeabi_fsub+0x2ba>
 8000f36:	1e7b      	subs	r3, r7, #1
 8000f38:	2f01      	cmp	r7, #1
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x10a>
 8000f3c:	e10d      	b.n	800115a <__aeabi_fsub+0x326>
 8000f3e:	2fff      	cmp	r7, #255	; 0xff
 8000f40:	d071      	beq.n	8001026 <__aeabi_fsub+0x1f2>
 8000f42:	001f      	movs	r7, r3
 8000f44:	e098      	b.n	8001078 <__aeabi_fsub+0x244>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x118>
 8000f4a:	e0a7      	b.n	800109c <__aeabi_fsub+0x268>
 8000f4c:	1e42      	subs	r2, r0, #1
 8000f4e:	2801      	cmp	r0, #1
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x120>
 8000f52:	e0e6      	b.n	8001122 <__aeabi_fsub+0x2ee>
 8000f54:	28ff      	cmp	r0, #255	; 0xff
 8000f56:	d068      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8000f58:	0010      	movs	r0, r2
 8000f5a:	e78f      	b.n	8000e7c <__aeabi_fsub+0x48>
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	4041      	eors	r1, r0
 8000f60:	42a1      	cmp	r1, r4
 8000f62:	d000      	beq.n	8000f66 <__aeabi_fsub+0x132>
 8000f64:	e77f      	b.n	8000e66 <__aeabi_fsub+0x32>
 8000f66:	20ff      	movs	r0, #255	; 0xff
 8000f68:	4240      	negs	r0, r0
 8000f6a:	4680      	mov	r8, r0
 8000f6c:	44a8      	add	r8, r5
 8000f6e:	4640      	mov	r0, r8
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d038      	beq.n	8000fe6 <__aeabi_fsub+0x1b2>
 8000f74:	1b51      	subs	r1, r2, r5
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x148>
 8000f7a:	e0ae      	b.n	80010da <__aeabi_fsub+0x2a6>
 8000f7c:	2aff      	cmp	r2, #255	; 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x14e>
 8000f80:	e0df      	b.n	8001142 <__aeabi_fsub+0x30e>
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	4660      	mov	r0, ip
 8000f86:	04db      	lsls	r3, r3, #19
 8000f88:	4318      	orrs	r0, r3
 8000f8a:	4684      	mov	ip, r0
 8000f8c:	291b      	cmp	r1, #27
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_fsub+0x15e>
 8000f90:	e0d9      	b.n	8001146 <__aeabi_fsub+0x312>
 8000f92:	2001      	movs	r0, #1
 8000f94:	0015      	movs	r5, r2
 8000f96:	1980      	adds	r0, r0, r6
 8000f98:	e7b1      	b.n	8000efe <__aeabi_fsub+0xca>
 8000f9a:	20fe      	movs	r0, #254	; 0xfe
 8000f9c:	1c6a      	adds	r2, r5, #1
 8000f9e:	4210      	tst	r0, r2
 8000fa0:	d171      	bne.n	8001086 <__aeabi_fsub+0x252>
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fsub+0x174>
 8000fa6:	e0a6      	b.n	80010f6 <__aeabi_fsub+0x2c2>
 8000fa8:	4663      	mov	r3, ip
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fsub+0x17c>
 8000fae:	e0d9      	b.n	8001164 <__aeabi_fsub+0x330>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0x184>
 8000fb6:	e788      	b.n	8000eca <__aeabi_fsub+0x96>
 8000fb8:	1b98      	subs	r0, r3, r6
 8000fba:	0143      	lsls	r3, r0, #5
 8000fbc:	d400      	bmi.n	8000fc0 <__aeabi_fsub+0x18c>
 8000fbe:	e0e1      	b.n	8001184 <__aeabi_fsub+0x350>
 8000fc0:	4663      	mov	r3, ip
 8000fc2:	000c      	movs	r4, r1
 8000fc4:	1af0      	subs	r0, r6, r3
 8000fc6:	e76f      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x19a>
 8000fcc:	e0b7      	b.n	800113e <__aeabi_fsub+0x30a>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	3a01      	subs	r2, #1
 8000fd2:	2801      	cmp	r0, #1
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_fsub+0x1a4>
 8000fd6:	e09c      	b.n	8001112 <__aeabi_fsub+0x2de>
 8000fd8:	28ff      	cmp	r0, #255	; 0xff
 8000fda:	d026      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8000fdc:	4690      	mov	r8, r2
 8000fde:	e788      	b.n	8000ef2 <__aeabi_fsub+0xbe>
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	2700      	movs	r7, #0
 8000fe4:	e771      	b.n	8000eca <__aeabi_fsub+0x96>
 8000fe6:	20fe      	movs	r0, #254	; 0xfe
 8000fe8:	1c6a      	adds	r2, r5, #1
 8000fea:	4210      	tst	r0, r2
 8000fec:	d064      	beq.n	80010b8 <__aeabi_fsub+0x284>
 8000fee:	2aff      	cmp	r2, #255	; 0xff
 8000ff0:	d0f6      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000ff2:	0015      	movs	r5, r2
 8000ff4:	4466      	add	r6, ip
 8000ff6:	0870      	lsrs	r0, r6, #1
 8000ff8:	0743      	lsls	r3, r0, #29
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_fsub+0x1ca>
 8000ffc:	e756      	b.n	8000eac <__aeabi_fsub+0x78>
 8000ffe:	08c3      	lsrs	r3, r0, #3
 8001000:	2dff      	cmp	r5, #255	; 0xff
 8001002:	d012      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	0a5f      	lsrs	r7, r3, #9
 8001008:	b2ea      	uxtb	r2, r5
 800100a:	e75e      	b.n	8000eca <__aeabi_fsub+0x96>
 800100c:	4662      	mov	r2, ip
 800100e:	2a00      	cmp	r2, #0
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x1e0>
 8001012:	e096      	b.n	8001142 <__aeabi_fsub+0x30e>
 8001014:	2e00      	cmp	r6, #0
 8001016:	d008      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	03d2      	lsls	r2, r2, #15
 800101c:	4213      	tst	r3, r2
 800101e:	d004      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001020:	4648      	mov	r0, r9
 8001022:	4210      	tst	r0, r2
 8001024:	d101      	bne.n	800102a <__aeabi_fsub+0x1f6>
 8001026:	000c      	movs	r4, r1
 8001028:	464b      	mov	r3, r9
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0d8      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 800102e:	2780      	movs	r7, #128	; 0x80
 8001030:	03ff      	lsls	r7, r7, #15
 8001032:	431f      	orrs	r7, r3
 8001034:	027f      	lsls	r7, r7, #9
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	0a7f      	lsrs	r7, r7, #9
 800103a:	e746      	b.n	8000eca <__aeabi_fsub+0x96>
 800103c:	2320      	movs	r3, #32
 800103e:	003a      	movs	r2, r7
 8001040:	1b45      	subs	r5, r0, r5
 8001042:	0038      	movs	r0, r7
 8001044:	3501      	adds	r5, #1
 8001046:	40ea      	lsrs	r2, r5
 8001048:	1b5d      	subs	r5, r3, r5
 800104a:	40a8      	lsls	r0, r5
 800104c:	1e43      	subs	r3, r0, #1
 800104e:	4198      	sbcs	r0, r3
 8001050:	2500      	movs	r5, #0
 8001052:	4310      	orrs	r0, r2
 8001054:	e728      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8001056:	2320      	movs	r3, #32
 8001058:	1a1b      	subs	r3, r3, r0
 800105a:	0032      	movs	r2, r6
 800105c:	409e      	lsls	r6, r3
 800105e:	40c2      	lsrs	r2, r0
 8001060:	0030      	movs	r0, r6
 8001062:	1e43      	subs	r3, r0, #1
 8001064:	4198      	sbcs	r0, r3
 8001066:	4310      	orrs	r0, r2
 8001068:	e70c      	b.n	8000e84 <__aeabi_fsub+0x50>
 800106a:	2aff      	cmp	r2, #255	; 0xff
 800106c:	d0db      	beq.n	8001026 <__aeabi_fsub+0x1f2>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	4660      	mov	r0, ip
 8001072:	04db      	lsls	r3, r3, #19
 8001074:	4318      	orrs	r0, r3
 8001076:	4684      	mov	ip, r0
 8001078:	2f1b      	cmp	r7, #27
 800107a:	dd56      	ble.n	800112a <__aeabi_fsub+0x2f6>
 800107c:	2001      	movs	r0, #1
 800107e:	000c      	movs	r4, r1
 8001080:	0015      	movs	r5, r2
 8001082:	1a30      	subs	r0, r6, r0
 8001084:	e700      	b.n	8000e88 <__aeabi_fsub+0x54>
 8001086:	4663      	mov	r3, ip
 8001088:	1b9f      	subs	r7, r3, r6
 800108a:	017b      	lsls	r3, r7, #5
 800108c:	d43d      	bmi.n	800110a <__aeabi_fsub+0x2d6>
 800108e:	2f00      	cmp	r7, #0
 8001090:	d000      	beq.n	8001094 <__aeabi_fsub+0x260>
 8001092:	e6fe      	b.n	8000e92 <__aeabi_fsub+0x5e>
 8001094:	2400      	movs	r4, #0
 8001096:	2200      	movs	r2, #0
 8001098:	2700      	movs	r7, #0
 800109a:	e716      	b.n	8000eca <__aeabi_fsub+0x96>
 800109c:	0005      	movs	r5, r0
 800109e:	e7af      	b.n	8001000 <__aeabi_fsub+0x1cc>
 80010a0:	0032      	movs	r2, r6
 80010a2:	4643      	mov	r3, r8
 80010a4:	4641      	mov	r1, r8
 80010a6:	40da      	lsrs	r2, r3
 80010a8:	2320      	movs	r3, #32
 80010aa:	1a5b      	subs	r3, r3, r1
 80010ac:	409e      	lsls	r6, r3
 80010ae:	0030      	movs	r0, r6
 80010b0:	1e43      	subs	r3, r0, #1
 80010b2:	4198      	sbcs	r0, r3
 80010b4:	4310      	orrs	r0, r2
 80010b6:	e721      	b.n	8000efc <__aeabi_fsub+0xc8>
 80010b8:	2d00      	cmp	r5, #0
 80010ba:	d1a7      	bne.n	800100c <__aeabi_fsub+0x1d8>
 80010bc:	4663      	mov	r3, ip
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d059      	beq.n	8001176 <__aeabi_fsub+0x342>
 80010c2:	2200      	movs	r2, #0
 80010c4:	2e00      	cmp	r6, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_fsub+0x296>
 80010c8:	e6ff      	b.n	8000eca <__aeabi_fsub+0x96>
 80010ca:	0030      	movs	r0, r6
 80010cc:	4460      	add	r0, ip
 80010ce:	0143      	lsls	r3, r0, #5
 80010d0:	d592      	bpl.n	8000ff8 <__aeabi_fsub+0x1c4>
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <__aeabi_fsub+0x348>)
 80010d4:	3501      	adds	r5, #1
 80010d6:	4018      	ands	r0, r3
 80010d8:	e78e      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 80010da:	4663      	mov	r3, ip
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d047      	beq.n	8001170 <__aeabi_fsub+0x33c>
 80010e0:	1e4b      	subs	r3, r1, #1
 80010e2:	2901      	cmp	r1, #1
 80010e4:	d015      	beq.n	8001112 <__aeabi_fsub+0x2de>
 80010e6:	29ff      	cmp	r1, #255	; 0xff
 80010e8:	d02b      	beq.n	8001142 <__aeabi_fsub+0x30e>
 80010ea:	0019      	movs	r1, r3
 80010ec:	e74e      	b.n	8000f8c <__aeabi_fsub+0x158>
 80010ee:	000c      	movs	r4, r1
 80010f0:	464b      	mov	r3, r9
 80010f2:	003d      	movs	r5, r7
 80010f4:	e784      	b.n	8001000 <__aeabi_fsub+0x1cc>
 80010f6:	4662      	mov	r2, ip
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d18b      	bne.n	8001014 <__aeabi_fsub+0x1e0>
 80010fc:	2e00      	cmp	r6, #0
 80010fe:	d192      	bne.n	8001026 <__aeabi_fsub+0x1f2>
 8001100:	2780      	movs	r7, #128	; 0x80
 8001102:	2400      	movs	r4, #0
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	03ff      	lsls	r7, r7, #15
 8001108:	e6df      	b.n	8000eca <__aeabi_fsub+0x96>
 800110a:	4663      	mov	r3, ip
 800110c:	000c      	movs	r4, r1
 800110e:	1af7      	subs	r7, r6, r3
 8001110:	e6bf      	b.n	8000e92 <__aeabi_fsub+0x5e>
 8001112:	0030      	movs	r0, r6
 8001114:	4460      	add	r0, ip
 8001116:	2501      	movs	r5, #1
 8001118:	0143      	lsls	r3, r0, #5
 800111a:	d400      	bmi.n	800111e <__aeabi_fsub+0x2ea>
 800111c:	e76c      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 800111e:	2502      	movs	r5, #2
 8001120:	e6f2      	b.n	8000f08 <__aeabi_fsub+0xd4>
 8001122:	4663      	mov	r3, ip
 8001124:	2501      	movs	r5, #1
 8001126:	1b98      	subs	r0, r3, r6
 8001128:	e6ae      	b.n	8000e88 <__aeabi_fsub+0x54>
 800112a:	2320      	movs	r3, #32
 800112c:	4664      	mov	r4, ip
 800112e:	4660      	mov	r0, ip
 8001130:	40fc      	lsrs	r4, r7
 8001132:	1bdf      	subs	r7, r3, r7
 8001134:	40b8      	lsls	r0, r7
 8001136:	1e43      	subs	r3, r0, #1
 8001138:	4198      	sbcs	r0, r3
 800113a:	4320      	orrs	r0, r4
 800113c:	e79f      	b.n	800107e <__aeabi_fsub+0x24a>
 800113e:	0005      	movs	r5, r0
 8001140:	e75e      	b.n	8001000 <__aeabi_fsub+0x1cc>
 8001142:	464b      	mov	r3, r9
 8001144:	e771      	b.n	800102a <__aeabi_fsub+0x1f6>
 8001146:	2320      	movs	r3, #32
 8001148:	4665      	mov	r5, ip
 800114a:	4660      	mov	r0, ip
 800114c:	40cd      	lsrs	r5, r1
 800114e:	1a59      	subs	r1, r3, r1
 8001150:	4088      	lsls	r0, r1
 8001152:	1e43      	subs	r3, r0, #1
 8001154:	4198      	sbcs	r0, r3
 8001156:	4328      	orrs	r0, r5
 8001158:	e71c      	b.n	8000f94 <__aeabi_fsub+0x160>
 800115a:	4663      	mov	r3, ip
 800115c:	000c      	movs	r4, r1
 800115e:	2501      	movs	r5, #1
 8001160:	1af0      	subs	r0, r6, r3
 8001162:	e691      	b.n	8000e88 <__aeabi_fsub+0x54>
 8001164:	2e00      	cmp	r6, #0
 8001166:	d095      	beq.n	8001094 <__aeabi_fsub+0x260>
 8001168:	000c      	movs	r4, r1
 800116a:	464f      	mov	r7, r9
 800116c:	2200      	movs	r2, #0
 800116e:	e6ac      	b.n	8000eca <__aeabi_fsub+0x96>
 8001170:	464b      	mov	r3, r9
 8001172:	000d      	movs	r5, r1
 8001174:	e744      	b.n	8001000 <__aeabi_fsub+0x1cc>
 8001176:	464f      	mov	r7, r9
 8001178:	2200      	movs	r2, #0
 800117a:	e6a6      	b.n	8000eca <__aeabi_fsub+0x96>
 800117c:	fbffffff 	.word	0xfbffffff
 8001180:	7dffffff 	.word	0x7dffffff
 8001184:	2800      	cmp	r0, #0
 8001186:	d000      	beq.n	800118a <__aeabi_fsub+0x356>
 8001188:	e736      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 800118a:	2400      	movs	r4, #0
 800118c:	2700      	movs	r7, #0
 800118e:	e69c      	b.n	8000eca <__aeabi_fsub+0x96>

08001190 <__aeabi_i2f>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	2800      	cmp	r0, #0
 8001194:	d013      	beq.n	80011be <__aeabi_i2f+0x2e>
 8001196:	17c3      	asrs	r3, r0, #31
 8001198:	18c6      	adds	r6, r0, r3
 800119a:	405e      	eors	r6, r3
 800119c:	0fc4      	lsrs	r4, r0, #31
 800119e:	0030      	movs	r0, r6
 80011a0:	f001 ff3c 	bl	800301c <__clzsi2>
 80011a4:	239e      	movs	r3, #158	; 0x9e
 80011a6:	0005      	movs	r5, r0
 80011a8:	1a1b      	subs	r3, r3, r0
 80011aa:	2b96      	cmp	r3, #150	; 0x96
 80011ac:	dc0f      	bgt.n	80011ce <__aeabi_i2f+0x3e>
 80011ae:	2808      	cmp	r0, #8
 80011b0:	dd01      	ble.n	80011b6 <__aeabi_i2f+0x26>
 80011b2:	3d08      	subs	r5, #8
 80011b4:	40ae      	lsls	r6, r5
 80011b6:	0276      	lsls	r6, r6, #9
 80011b8:	0a76      	lsrs	r6, r6, #9
 80011ba:	b2d8      	uxtb	r0, r3
 80011bc:	e002      	b.n	80011c4 <__aeabi_i2f+0x34>
 80011be:	2400      	movs	r4, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	05c0      	lsls	r0, r0, #23
 80011c6:	4330      	orrs	r0, r6
 80011c8:	07e4      	lsls	r4, r4, #31
 80011ca:	4320      	orrs	r0, r4
 80011cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ce:	2b99      	cmp	r3, #153	; 0x99
 80011d0:	dd0c      	ble.n	80011ec <__aeabi_i2f+0x5c>
 80011d2:	2205      	movs	r2, #5
 80011d4:	0031      	movs	r1, r6
 80011d6:	1a12      	subs	r2, r2, r0
 80011d8:	40d1      	lsrs	r1, r2
 80011da:	000a      	movs	r2, r1
 80011dc:	0001      	movs	r1, r0
 80011de:	0030      	movs	r0, r6
 80011e0:	311b      	adds	r1, #27
 80011e2:	4088      	lsls	r0, r1
 80011e4:	1e41      	subs	r1, r0, #1
 80011e6:	4188      	sbcs	r0, r1
 80011e8:	4302      	orrs	r2, r0
 80011ea:	0016      	movs	r6, r2
 80011ec:	2d05      	cmp	r5, #5
 80011ee:	dc12      	bgt.n	8001216 <__aeabi_i2f+0x86>
 80011f0:	0031      	movs	r1, r6
 80011f2:	4f0d      	ldr	r7, [pc, #52]	; (8001228 <__aeabi_i2f+0x98>)
 80011f4:	4039      	ands	r1, r7
 80011f6:	0772      	lsls	r2, r6, #29
 80011f8:	d009      	beq.n	800120e <__aeabi_i2f+0x7e>
 80011fa:	200f      	movs	r0, #15
 80011fc:	4030      	ands	r0, r6
 80011fe:	2804      	cmp	r0, #4
 8001200:	d005      	beq.n	800120e <__aeabi_i2f+0x7e>
 8001202:	3104      	adds	r1, #4
 8001204:	014a      	lsls	r2, r1, #5
 8001206:	d502      	bpl.n	800120e <__aeabi_i2f+0x7e>
 8001208:	239f      	movs	r3, #159	; 0x9f
 800120a:	4039      	ands	r1, r7
 800120c:	1b5b      	subs	r3, r3, r5
 800120e:	0189      	lsls	r1, r1, #6
 8001210:	0a4e      	lsrs	r6, r1, #9
 8001212:	b2d8      	uxtb	r0, r3
 8001214:	e7d6      	b.n	80011c4 <__aeabi_i2f+0x34>
 8001216:	1f6a      	subs	r2, r5, #5
 8001218:	4096      	lsls	r6, r2
 800121a:	0031      	movs	r1, r6
 800121c:	4f02      	ldr	r7, [pc, #8]	; (8001228 <__aeabi_i2f+0x98>)
 800121e:	4039      	ands	r1, r7
 8001220:	0772      	lsls	r2, r6, #29
 8001222:	d0f4      	beq.n	800120e <__aeabi_i2f+0x7e>
 8001224:	e7e9      	b.n	80011fa <__aeabi_i2f+0x6a>
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	fbffffff 	.word	0xfbffffff

0800122c <__aeabi_ui2f>:
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	1e05      	subs	r5, r0, #0
 8001230:	d00e      	beq.n	8001250 <__aeabi_ui2f+0x24>
 8001232:	f001 fef3 	bl	800301c <__clzsi2>
 8001236:	239e      	movs	r3, #158	; 0x9e
 8001238:	0004      	movs	r4, r0
 800123a:	1a1b      	subs	r3, r3, r0
 800123c:	2b96      	cmp	r3, #150	; 0x96
 800123e:	dc0c      	bgt.n	800125a <__aeabi_ui2f+0x2e>
 8001240:	2808      	cmp	r0, #8
 8001242:	dd01      	ble.n	8001248 <__aeabi_ui2f+0x1c>
 8001244:	3c08      	subs	r4, #8
 8001246:	40a5      	lsls	r5, r4
 8001248:	026d      	lsls	r5, r5, #9
 800124a:	0a6d      	lsrs	r5, r5, #9
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	e001      	b.n	8001254 <__aeabi_ui2f+0x28>
 8001250:	2000      	movs	r0, #0
 8001252:	2500      	movs	r5, #0
 8001254:	05c0      	lsls	r0, r0, #23
 8001256:	4328      	orrs	r0, r5
 8001258:	bd70      	pop	{r4, r5, r6, pc}
 800125a:	2b99      	cmp	r3, #153	; 0x99
 800125c:	dd09      	ble.n	8001272 <__aeabi_ui2f+0x46>
 800125e:	0002      	movs	r2, r0
 8001260:	0029      	movs	r1, r5
 8001262:	321b      	adds	r2, #27
 8001264:	4091      	lsls	r1, r2
 8001266:	1e4a      	subs	r2, r1, #1
 8001268:	4191      	sbcs	r1, r2
 800126a:	2205      	movs	r2, #5
 800126c:	1a12      	subs	r2, r2, r0
 800126e:	40d5      	lsrs	r5, r2
 8001270:	430d      	orrs	r5, r1
 8001272:	2c05      	cmp	r4, #5
 8001274:	dc12      	bgt.n	800129c <__aeabi_ui2f+0x70>
 8001276:	0029      	movs	r1, r5
 8001278:	4e0c      	ldr	r6, [pc, #48]	; (80012ac <__aeabi_ui2f+0x80>)
 800127a:	4031      	ands	r1, r6
 800127c:	076a      	lsls	r2, r5, #29
 800127e:	d009      	beq.n	8001294 <__aeabi_ui2f+0x68>
 8001280:	200f      	movs	r0, #15
 8001282:	4028      	ands	r0, r5
 8001284:	2804      	cmp	r0, #4
 8001286:	d005      	beq.n	8001294 <__aeabi_ui2f+0x68>
 8001288:	3104      	adds	r1, #4
 800128a:	014a      	lsls	r2, r1, #5
 800128c:	d502      	bpl.n	8001294 <__aeabi_ui2f+0x68>
 800128e:	239f      	movs	r3, #159	; 0x9f
 8001290:	4031      	ands	r1, r6
 8001292:	1b1b      	subs	r3, r3, r4
 8001294:	0189      	lsls	r1, r1, #6
 8001296:	0a4d      	lsrs	r5, r1, #9
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	e7db      	b.n	8001254 <__aeabi_ui2f+0x28>
 800129c:	1f62      	subs	r2, r4, #5
 800129e:	4095      	lsls	r5, r2
 80012a0:	0029      	movs	r1, r5
 80012a2:	4e02      	ldr	r6, [pc, #8]	; (80012ac <__aeabi_ui2f+0x80>)
 80012a4:	4031      	ands	r1, r6
 80012a6:	076a      	lsls	r2, r5, #29
 80012a8:	d0f4      	beq.n	8001294 <__aeabi_ui2f+0x68>
 80012aa:	e7e9      	b.n	8001280 <__aeabi_ui2f+0x54>
 80012ac:	fbffffff 	.word	0xfbffffff

080012b0 <__aeabi_dadd>:
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	464f      	mov	r7, r9
 80012b4:	4646      	mov	r6, r8
 80012b6:	46d6      	mov	lr, sl
 80012b8:	000d      	movs	r5, r1
 80012ba:	0004      	movs	r4, r0
 80012bc:	b5c0      	push	{r6, r7, lr}
 80012be:	001f      	movs	r7, r3
 80012c0:	0011      	movs	r1, r2
 80012c2:	0328      	lsls	r0, r5, #12
 80012c4:	0f62      	lsrs	r2, r4, #29
 80012c6:	0a40      	lsrs	r0, r0, #9
 80012c8:	4310      	orrs	r0, r2
 80012ca:	007a      	lsls	r2, r7, #1
 80012cc:	0d52      	lsrs	r2, r2, #21
 80012ce:	00e3      	lsls	r3, r4, #3
 80012d0:	033c      	lsls	r4, r7, #12
 80012d2:	4691      	mov	r9, r2
 80012d4:	0a64      	lsrs	r4, r4, #9
 80012d6:	0ffa      	lsrs	r2, r7, #31
 80012d8:	0f4f      	lsrs	r7, r1, #29
 80012da:	006e      	lsls	r6, r5, #1
 80012dc:	4327      	orrs	r7, r4
 80012de:	4692      	mov	sl, r2
 80012e0:	46b8      	mov	r8, r7
 80012e2:	0d76      	lsrs	r6, r6, #21
 80012e4:	0fed      	lsrs	r5, r5, #31
 80012e6:	00c9      	lsls	r1, r1, #3
 80012e8:	4295      	cmp	r5, r2
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x3e>
 80012ec:	e099      	b.n	8001422 <__aeabi_dadd+0x172>
 80012ee:	464c      	mov	r4, r9
 80012f0:	1b34      	subs	r4, r6, r4
 80012f2:	46a4      	mov	ip, r4
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	dc00      	bgt.n	80012fa <__aeabi_dadd+0x4a>
 80012f8:	e07c      	b.n	80013f4 <__aeabi_dadd+0x144>
 80012fa:	464a      	mov	r2, r9
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_dadd+0x52>
 8001300:	e0b8      	b.n	8001474 <__aeabi_dadd+0x1c4>
 8001302:	4ac5      	ldr	r2, [pc, #788]	; (8001618 <__aeabi_dadd+0x368>)
 8001304:	4296      	cmp	r6, r2
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x5a>
 8001308:	e11c      	b.n	8001544 <__aeabi_dadd+0x294>
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	003c      	movs	r4, r7
 800130e:	0412      	lsls	r2, r2, #16
 8001310:	4314      	orrs	r4, r2
 8001312:	46a0      	mov	r8, r4
 8001314:	4662      	mov	r2, ip
 8001316:	2a38      	cmp	r2, #56	; 0x38
 8001318:	dd00      	ble.n	800131c <__aeabi_dadd+0x6c>
 800131a:	e161      	b.n	80015e0 <__aeabi_dadd+0x330>
 800131c:	2a1f      	cmp	r2, #31
 800131e:	dd00      	ble.n	8001322 <__aeabi_dadd+0x72>
 8001320:	e1cc      	b.n	80016bc <__aeabi_dadd+0x40c>
 8001322:	4664      	mov	r4, ip
 8001324:	2220      	movs	r2, #32
 8001326:	1b12      	subs	r2, r2, r4
 8001328:	4644      	mov	r4, r8
 800132a:	4094      	lsls	r4, r2
 800132c:	000f      	movs	r7, r1
 800132e:	46a1      	mov	r9, r4
 8001330:	4664      	mov	r4, ip
 8001332:	4091      	lsls	r1, r2
 8001334:	40e7      	lsrs	r7, r4
 8001336:	464c      	mov	r4, r9
 8001338:	1e4a      	subs	r2, r1, #1
 800133a:	4191      	sbcs	r1, r2
 800133c:	433c      	orrs	r4, r7
 800133e:	4642      	mov	r2, r8
 8001340:	4321      	orrs	r1, r4
 8001342:	4664      	mov	r4, ip
 8001344:	40e2      	lsrs	r2, r4
 8001346:	1a80      	subs	r0, r0, r2
 8001348:	1a5c      	subs	r4, r3, r1
 800134a:	42a3      	cmp	r3, r4
 800134c:	419b      	sbcs	r3, r3
 800134e:	425f      	negs	r7, r3
 8001350:	1bc7      	subs	r7, r0, r7
 8001352:	023b      	lsls	r3, r7, #8
 8001354:	d400      	bmi.n	8001358 <__aeabi_dadd+0xa8>
 8001356:	e0d0      	b.n	80014fa <__aeabi_dadd+0x24a>
 8001358:	027f      	lsls	r7, r7, #9
 800135a:	0a7f      	lsrs	r7, r7, #9
 800135c:	2f00      	cmp	r7, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0xb2>
 8001360:	e0ff      	b.n	8001562 <__aeabi_dadd+0x2b2>
 8001362:	0038      	movs	r0, r7
 8001364:	f001 fe5a 	bl	800301c <__clzsi2>
 8001368:	0001      	movs	r1, r0
 800136a:	3908      	subs	r1, #8
 800136c:	2320      	movs	r3, #32
 800136e:	0022      	movs	r2, r4
 8001370:	1a5b      	subs	r3, r3, r1
 8001372:	408f      	lsls	r7, r1
 8001374:	40da      	lsrs	r2, r3
 8001376:	408c      	lsls	r4, r1
 8001378:	4317      	orrs	r7, r2
 800137a:	42b1      	cmp	r1, r6
 800137c:	da00      	bge.n	8001380 <__aeabi_dadd+0xd0>
 800137e:	e0ff      	b.n	8001580 <__aeabi_dadd+0x2d0>
 8001380:	1b89      	subs	r1, r1, r6
 8001382:	1c4b      	adds	r3, r1, #1
 8001384:	2b1f      	cmp	r3, #31
 8001386:	dd00      	ble.n	800138a <__aeabi_dadd+0xda>
 8001388:	e0a8      	b.n	80014dc <__aeabi_dadd+0x22c>
 800138a:	2220      	movs	r2, #32
 800138c:	0039      	movs	r1, r7
 800138e:	1ad2      	subs	r2, r2, r3
 8001390:	0020      	movs	r0, r4
 8001392:	4094      	lsls	r4, r2
 8001394:	4091      	lsls	r1, r2
 8001396:	40d8      	lsrs	r0, r3
 8001398:	1e62      	subs	r2, r4, #1
 800139a:	4194      	sbcs	r4, r2
 800139c:	40df      	lsrs	r7, r3
 800139e:	2600      	movs	r6, #0
 80013a0:	4301      	orrs	r1, r0
 80013a2:	430c      	orrs	r4, r1
 80013a4:	0763      	lsls	r3, r4, #29
 80013a6:	d009      	beq.n	80013bc <__aeabi_dadd+0x10c>
 80013a8:	230f      	movs	r3, #15
 80013aa:	4023      	ands	r3, r4
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d005      	beq.n	80013bc <__aeabi_dadd+0x10c>
 80013b0:	1d23      	adds	r3, r4, #4
 80013b2:	42a3      	cmp	r3, r4
 80013b4:	41a4      	sbcs	r4, r4
 80013b6:	4264      	negs	r4, r4
 80013b8:	193f      	adds	r7, r7, r4
 80013ba:	001c      	movs	r4, r3
 80013bc:	023b      	lsls	r3, r7, #8
 80013be:	d400      	bmi.n	80013c2 <__aeabi_dadd+0x112>
 80013c0:	e09e      	b.n	8001500 <__aeabi_dadd+0x250>
 80013c2:	4b95      	ldr	r3, [pc, #596]	; (8001618 <__aeabi_dadd+0x368>)
 80013c4:	3601      	adds	r6, #1
 80013c6:	429e      	cmp	r6, r3
 80013c8:	d100      	bne.n	80013cc <__aeabi_dadd+0x11c>
 80013ca:	e0b7      	b.n	800153c <__aeabi_dadd+0x28c>
 80013cc:	4a93      	ldr	r2, [pc, #588]	; (800161c <__aeabi_dadd+0x36c>)
 80013ce:	08e4      	lsrs	r4, r4, #3
 80013d0:	4017      	ands	r7, r2
 80013d2:	077b      	lsls	r3, r7, #29
 80013d4:	0571      	lsls	r1, r6, #21
 80013d6:	027f      	lsls	r7, r7, #9
 80013d8:	4323      	orrs	r3, r4
 80013da:	0b3f      	lsrs	r7, r7, #12
 80013dc:	0d4a      	lsrs	r2, r1, #21
 80013de:	0512      	lsls	r2, r2, #20
 80013e0:	433a      	orrs	r2, r7
 80013e2:	07ed      	lsls	r5, r5, #31
 80013e4:	432a      	orrs	r2, r5
 80013e6:	0018      	movs	r0, r3
 80013e8:	0011      	movs	r1, r2
 80013ea:	bce0      	pop	{r5, r6, r7}
 80013ec:	46ba      	mov	sl, r7
 80013ee:	46b1      	mov	r9, r6
 80013f0:	46a8      	mov	r8, r5
 80013f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f4:	2c00      	cmp	r4, #0
 80013f6:	d04b      	beq.n	8001490 <__aeabi_dadd+0x1e0>
 80013f8:	464c      	mov	r4, r9
 80013fa:	1ba4      	subs	r4, r4, r6
 80013fc:	46a4      	mov	ip, r4
 80013fe:	2e00      	cmp	r6, #0
 8001400:	d000      	beq.n	8001404 <__aeabi_dadd+0x154>
 8001402:	e123      	b.n	800164c <__aeabi_dadd+0x39c>
 8001404:	0004      	movs	r4, r0
 8001406:	431c      	orrs	r4, r3
 8001408:	d100      	bne.n	800140c <__aeabi_dadd+0x15c>
 800140a:	e1af      	b.n	800176c <__aeabi_dadd+0x4bc>
 800140c:	4662      	mov	r2, ip
 800140e:	1e54      	subs	r4, r2, #1
 8001410:	2a01      	cmp	r2, #1
 8001412:	d100      	bne.n	8001416 <__aeabi_dadd+0x166>
 8001414:	e215      	b.n	8001842 <__aeabi_dadd+0x592>
 8001416:	4d80      	ldr	r5, [pc, #512]	; (8001618 <__aeabi_dadd+0x368>)
 8001418:	45ac      	cmp	ip, r5
 800141a:	d100      	bne.n	800141e <__aeabi_dadd+0x16e>
 800141c:	e1c8      	b.n	80017b0 <__aeabi_dadd+0x500>
 800141e:	46a4      	mov	ip, r4
 8001420:	e11b      	b.n	800165a <__aeabi_dadd+0x3aa>
 8001422:	464a      	mov	r2, r9
 8001424:	1ab2      	subs	r2, r6, r2
 8001426:	4694      	mov	ip, r2
 8001428:	2a00      	cmp	r2, #0
 800142a:	dc00      	bgt.n	800142e <__aeabi_dadd+0x17e>
 800142c:	e0ac      	b.n	8001588 <__aeabi_dadd+0x2d8>
 800142e:	464a      	mov	r2, r9
 8001430:	2a00      	cmp	r2, #0
 8001432:	d043      	beq.n	80014bc <__aeabi_dadd+0x20c>
 8001434:	4a78      	ldr	r2, [pc, #480]	; (8001618 <__aeabi_dadd+0x368>)
 8001436:	4296      	cmp	r6, r2
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x18c>
 800143a:	e1af      	b.n	800179c <__aeabi_dadd+0x4ec>
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	003c      	movs	r4, r7
 8001440:	0412      	lsls	r2, r2, #16
 8001442:	4314      	orrs	r4, r2
 8001444:	46a0      	mov	r8, r4
 8001446:	4662      	mov	r2, ip
 8001448:	2a38      	cmp	r2, #56	; 0x38
 800144a:	dc67      	bgt.n	800151c <__aeabi_dadd+0x26c>
 800144c:	2a1f      	cmp	r2, #31
 800144e:	dc00      	bgt.n	8001452 <__aeabi_dadd+0x1a2>
 8001450:	e15f      	b.n	8001712 <__aeabi_dadd+0x462>
 8001452:	4647      	mov	r7, r8
 8001454:	3a20      	subs	r2, #32
 8001456:	40d7      	lsrs	r7, r2
 8001458:	4662      	mov	r2, ip
 800145a:	2a20      	cmp	r2, #32
 800145c:	d005      	beq.n	800146a <__aeabi_dadd+0x1ba>
 800145e:	4664      	mov	r4, ip
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	1b12      	subs	r2, r2, r4
 8001464:	4644      	mov	r4, r8
 8001466:	4094      	lsls	r4, r2
 8001468:	4321      	orrs	r1, r4
 800146a:	1e4a      	subs	r2, r1, #1
 800146c:	4191      	sbcs	r1, r2
 800146e:	000c      	movs	r4, r1
 8001470:	433c      	orrs	r4, r7
 8001472:	e057      	b.n	8001524 <__aeabi_dadd+0x274>
 8001474:	003a      	movs	r2, r7
 8001476:	430a      	orrs	r2, r1
 8001478:	d100      	bne.n	800147c <__aeabi_dadd+0x1cc>
 800147a:	e105      	b.n	8001688 <__aeabi_dadd+0x3d8>
 800147c:	0022      	movs	r2, r4
 800147e:	3a01      	subs	r2, #1
 8001480:	2c01      	cmp	r4, #1
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x1d6>
 8001484:	e182      	b.n	800178c <__aeabi_dadd+0x4dc>
 8001486:	4c64      	ldr	r4, [pc, #400]	; (8001618 <__aeabi_dadd+0x368>)
 8001488:	45a4      	cmp	ip, r4
 800148a:	d05b      	beq.n	8001544 <__aeabi_dadd+0x294>
 800148c:	4694      	mov	ip, r2
 800148e:	e741      	b.n	8001314 <__aeabi_dadd+0x64>
 8001490:	4c63      	ldr	r4, [pc, #396]	; (8001620 <__aeabi_dadd+0x370>)
 8001492:	1c77      	adds	r7, r6, #1
 8001494:	4227      	tst	r7, r4
 8001496:	d000      	beq.n	800149a <__aeabi_dadd+0x1ea>
 8001498:	e0c4      	b.n	8001624 <__aeabi_dadd+0x374>
 800149a:	0004      	movs	r4, r0
 800149c:	431c      	orrs	r4, r3
 800149e:	2e00      	cmp	r6, #0
 80014a0:	d000      	beq.n	80014a4 <__aeabi_dadd+0x1f4>
 80014a2:	e169      	b.n	8001778 <__aeabi_dadd+0x4c8>
 80014a4:	2c00      	cmp	r4, #0
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x1fa>
 80014a8:	e1bf      	b.n	800182a <__aeabi_dadd+0x57a>
 80014aa:	4644      	mov	r4, r8
 80014ac:	430c      	orrs	r4, r1
 80014ae:	d000      	beq.n	80014b2 <__aeabi_dadd+0x202>
 80014b0:	e1d0      	b.n	8001854 <__aeabi_dadd+0x5a4>
 80014b2:	0742      	lsls	r2, r0, #29
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	08c0      	lsrs	r0, r0, #3
 80014ba:	e029      	b.n	8001510 <__aeabi_dadd+0x260>
 80014bc:	003a      	movs	r2, r7
 80014be:	430a      	orrs	r2, r1
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x214>
 80014c2:	e170      	b.n	80017a6 <__aeabi_dadd+0x4f6>
 80014c4:	4662      	mov	r2, ip
 80014c6:	4664      	mov	r4, ip
 80014c8:	3a01      	subs	r2, #1
 80014ca:	2c01      	cmp	r4, #1
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0x220>
 80014ce:	e0e0      	b.n	8001692 <__aeabi_dadd+0x3e2>
 80014d0:	4c51      	ldr	r4, [pc, #324]	; (8001618 <__aeabi_dadd+0x368>)
 80014d2:	45a4      	cmp	ip, r4
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dadd+0x228>
 80014d6:	e161      	b.n	800179c <__aeabi_dadd+0x4ec>
 80014d8:	4694      	mov	ip, r2
 80014da:	e7b4      	b.n	8001446 <__aeabi_dadd+0x196>
 80014dc:	003a      	movs	r2, r7
 80014de:	391f      	subs	r1, #31
 80014e0:	40ca      	lsrs	r2, r1
 80014e2:	0011      	movs	r1, r2
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d003      	beq.n	80014f0 <__aeabi_dadd+0x240>
 80014e8:	2240      	movs	r2, #64	; 0x40
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	409f      	lsls	r7, r3
 80014ee:	433c      	orrs	r4, r7
 80014f0:	1e63      	subs	r3, r4, #1
 80014f2:	419c      	sbcs	r4, r3
 80014f4:	2700      	movs	r7, #0
 80014f6:	2600      	movs	r6, #0
 80014f8:	430c      	orrs	r4, r1
 80014fa:	0763      	lsls	r3, r4, #29
 80014fc:	d000      	beq.n	8001500 <__aeabi_dadd+0x250>
 80014fe:	e753      	b.n	80013a8 <__aeabi_dadd+0xf8>
 8001500:	46b4      	mov	ip, r6
 8001502:	08e4      	lsrs	r4, r4, #3
 8001504:	077b      	lsls	r3, r7, #29
 8001506:	4323      	orrs	r3, r4
 8001508:	08f8      	lsrs	r0, r7, #3
 800150a:	4a43      	ldr	r2, [pc, #268]	; (8001618 <__aeabi_dadd+0x368>)
 800150c:	4594      	cmp	ip, r2
 800150e:	d01d      	beq.n	800154c <__aeabi_dadd+0x29c>
 8001510:	4662      	mov	r2, ip
 8001512:	0307      	lsls	r7, r0, #12
 8001514:	0552      	lsls	r2, r2, #21
 8001516:	0b3f      	lsrs	r7, r7, #12
 8001518:	0d52      	lsrs	r2, r2, #21
 800151a:	e760      	b.n	80013de <__aeabi_dadd+0x12e>
 800151c:	4644      	mov	r4, r8
 800151e:	430c      	orrs	r4, r1
 8001520:	1e62      	subs	r2, r4, #1
 8001522:	4194      	sbcs	r4, r2
 8001524:	18e4      	adds	r4, r4, r3
 8001526:	429c      	cmp	r4, r3
 8001528:	419b      	sbcs	r3, r3
 800152a:	425f      	negs	r7, r3
 800152c:	183f      	adds	r7, r7, r0
 800152e:	023b      	lsls	r3, r7, #8
 8001530:	d5e3      	bpl.n	80014fa <__aeabi_dadd+0x24a>
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <__aeabi_dadd+0x368>)
 8001534:	3601      	adds	r6, #1
 8001536:	429e      	cmp	r6, r3
 8001538:	d000      	beq.n	800153c <__aeabi_dadd+0x28c>
 800153a:	e0b5      	b.n	80016a8 <__aeabi_dadd+0x3f8>
 800153c:	0032      	movs	r2, r6
 800153e:	2700      	movs	r7, #0
 8001540:	2300      	movs	r3, #0
 8001542:	e74c      	b.n	80013de <__aeabi_dadd+0x12e>
 8001544:	0742      	lsls	r2, r0, #29
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	4313      	orrs	r3, r2
 800154a:	08c0      	lsrs	r0, r0, #3
 800154c:	001a      	movs	r2, r3
 800154e:	4302      	orrs	r2, r0
 8001550:	d100      	bne.n	8001554 <__aeabi_dadd+0x2a4>
 8001552:	e1e1      	b.n	8001918 <__aeabi_dadd+0x668>
 8001554:	2780      	movs	r7, #128	; 0x80
 8001556:	033f      	lsls	r7, r7, #12
 8001558:	4307      	orrs	r7, r0
 800155a:	033f      	lsls	r7, r7, #12
 800155c:	4a2e      	ldr	r2, [pc, #184]	; (8001618 <__aeabi_dadd+0x368>)
 800155e:	0b3f      	lsrs	r7, r7, #12
 8001560:	e73d      	b.n	80013de <__aeabi_dadd+0x12e>
 8001562:	0020      	movs	r0, r4
 8001564:	f001 fd5a 	bl	800301c <__clzsi2>
 8001568:	0001      	movs	r1, r0
 800156a:	3118      	adds	r1, #24
 800156c:	291f      	cmp	r1, #31
 800156e:	dc00      	bgt.n	8001572 <__aeabi_dadd+0x2c2>
 8001570:	e6fc      	b.n	800136c <__aeabi_dadd+0xbc>
 8001572:	3808      	subs	r0, #8
 8001574:	4084      	lsls	r4, r0
 8001576:	0027      	movs	r7, r4
 8001578:	2400      	movs	r4, #0
 800157a:	42b1      	cmp	r1, r6
 800157c:	db00      	blt.n	8001580 <__aeabi_dadd+0x2d0>
 800157e:	e6ff      	b.n	8001380 <__aeabi_dadd+0xd0>
 8001580:	4a26      	ldr	r2, [pc, #152]	; (800161c <__aeabi_dadd+0x36c>)
 8001582:	1a76      	subs	r6, r6, r1
 8001584:	4017      	ands	r7, r2
 8001586:	e70d      	b.n	80013a4 <__aeabi_dadd+0xf4>
 8001588:	2a00      	cmp	r2, #0
 800158a:	d02f      	beq.n	80015ec <__aeabi_dadd+0x33c>
 800158c:	464a      	mov	r2, r9
 800158e:	1b92      	subs	r2, r2, r6
 8001590:	4694      	mov	ip, r2
 8001592:	2e00      	cmp	r6, #0
 8001594:	d100      	bne.n	8001598 <__aeabi_dadd+0x2e8>
 8001596:	e0ad      	b.n	80016f4 <__aeabi_dadd+0x444>
 8001598:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <__aeabi_dadd+0x368>)
 800159a:	4591      	cmp	r9, r2
 800159c:	d100      	bne.n	80015a0 <__aeabi_dadd+0x2f0>
 800159e:	e10f      	b.n	80017c0 <__aeabi_dadd+0x510>
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	0412      	lsls	r2, r2, #16
 80015a4:	4310      	orrs	r0, r2
 80015a6:	4662      	mov	r2, ip
 80015a8:	2a38      	cmp	r2, #56	; 0x38
 80015aa:	dd00      	ble.n	80015ae <__aeabi_dadd+0x2fe>
 80015ac:	e10f      	b.n	80017ce <__aeabi_dadd+0x51e>
 80015ae:	2a1f      	cmp	r2, #31
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dadd+0x304>
 80015b2:	e180      	b.n	80018b6 <__aeabi_dadd+0x606>
 80015b4:	4664      	mov	r4, ip
 80015b6:	2220      	movs	r2, #32
 80015b8:	001e      	movs	r6, r3
 80015ba:	1b12      	subs	r2, r2, r4
 80015bc:	4667      	mov	r7, ip
 80015be:	0004      	movs	r4, r0
 80015c0:	4093      	lsls	r3, r2
 80015c2:	4094      	lsls	r4, r2
 80015c4:	40fe      	lsrs	r6, r7
 80015c6:	1e5a      	subs	r2, r3, #1
 80015c8:	4193      	sbcs	r3, r2
 80015ca:	40f8      	lsrs	r0, r7
 80015cc:	4334      	orrs	r4, r6
 80015ce:	431c      	orrs	r4, r3
 80015d0:	4480      	add	r8, r0
 80015d2:	1864      	adds	r4, r4, r1
 80015d4:	428c      	cmp	r4, r1
 80015d6:	41bf      	sbcs	r7, r7
 80015d8:	427f      	negs	r7, r7
 80015da:	464e      	mov	r6, r9
 80015dc:	4447      	add	r7, r8
 80015de:	e7a6      	b.n	800152e <__aeabi_dadd+0x27e>
 80015e0:	4642      	mov	r2, r8
 80015e2:	430a      	orrs	r2, r1
 80015e4:	0011      	movs	r1, r2
 80015e6:	1e4a      	subs	r2, r1, #1
 80015e8:	4191      	sbcs	r1, r2
 80015ea:	e6ad      	b.n	8001348 <__aeabi_dadd+0x98>
 80015ec:	4c0c      	ldr	r4, [pc, #48]	; (8001620 <__aeabi_dadd+0x370>)
 80015ee:	1c72      	adds	r2, r6, #1
 80015f0:	4222      	tst	r2, r4
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x346>
 80015f4:	e0a1      	b.n	800173a <__aeabi_dadd+0x48a>
 80015f6:	0002      	movs	r2, r0
 80015f8:	431a      	orrs	r2, r3
 80015fa:	2e00      	cmp	r6, #0
 80015fc:	d000      	beq.n	8001600 <__aeabi_dadd+0x350>
 80015fe:	e0fa      	b.n	80017f6 <__aeabi_dadd+0x546>
 8001600:	2a00      	cmp	r2, #0
 8001602:	d100      	bne.n	8001606 <__aeabi_dadd+0x356>
 8001604:	e145      	b.n	8001892 <__aeabi_dadd+0x5e2>
 8001606:	003a      	movs	r2, r7
 8001608:	430a      	orrs	r2, r1
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x35e>
 800160c:	e146      	b.n	800189c <__aeabi_dadd+0x5ec>
 800160e:	0742      	lsls	r2, r0, #29
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	4313      	orrs	r3, r2
 8001614:	08c0      	lsrs	r0, r0, #3
 8001616:	e77b      	b.n	8001510 <__aeabi_dadd+0x260>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff
 8001620:	000007fe 	.word	0x000007fe
 8001624:	4647      	mov	r7, r8
 8001626:	1a5c      	subs	r4, r3, r1
 8001628:	1bc2      	subs	r2, r0, r7
 800162a:	42a3      	cmp	r3, r4
 800162c:	41bf      	sbcs	r7, r7
 800162e:	427f      	negs	r7, r7
 8001630:	46b9      	mov	r9, r7
 8001632:	0017      	movs	r7, r2
 8001634:	464a      	mov	r2, r9
 8001636:	1abf      	subs	r7, r7, r2
 8001638:	023a      	lsls	r2, r7, #8
 800163a:	d500      	bpl.n	800163e <__aeabi_dadd+0x38e>
 800163c:	e08d      	b.n	800175a <__aeabi_dadd+0x4aa>
 800163e:	0023      	movs	r3, r4
 8001640:	433b      	orrs	r3, r7
 8001642:	d000      	beq.n	8001646 <__aeabi_dadd+0x396>
 8001644:	e68a      	b.n	800135c <__aeabi_dadd+0xac>
 8001646:	2000      	movs	r0, #0
 8001648:	2500      	movs	r5, #0
 800164a:	e761      	b.n	8001510 <__aeabi_dadd+0x260>
 800164c:	4cb4      	ldr	r4, [pc, #720]	; (8001920 <__aeabi_dadd+0x670>)
 800164e:	45a1      	cmp	r9, r4
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x3a4>
 8001652:	e0ad      	b.n	80017b0 <__aeabi_dadd+0x500>
 8001654:	2480      	movs	r4, #128	; 0x80
 8001656:	0424      	lsls	r4, r4, #16
 8001658:	4320      	orrs	r0, r4
 800165a:	4664      	mov	r4, ip
 800165c:	2c38      	cmp	r4, #56	; 0x38
 800165e:	dc3d      	bgt.n	80016dc <__aeabi_dadd+0x42c>
 8001660:	4662      	mov	r2, ip
 8001662:	2c1f      	cmp	r4, #31
 8001664:	dd00      	ble.n	8001668 <__aeabi_dadd+0x3b8>
 8001666:	e0b7      	b.n	80017d8 <__aeabi_dadd+0x528>
 8001668:	2520      	movs	r5, #32
 800166a:	001e      	movs	r6, r3
 800166c:	1b2d      	subs	r5, r5, r4
 800166e:	0004      	movs	r4, r0
 8001670:	40ab      	lsls	r3, r5
 8001672:	40ac      	lsls	r4, r5
 8001674:	40d6      	lsrs	r6, r2
 8001676:	40d0      	lsrs	r0, r2
 8001678:	4642      	mov	r2, r8
 800167a:	1e5d      	subs	r5, r3, #1
 800167c:	41ab      	sbcs	r3, r5
 800167e:	4334      	orrs	r4, r6
 8001680:	1a12      	subs	r2, r2, r0
 8001682:	4690      	mov	r8, r2
 8001684:	4323      	orrs	r3, r4
 8001686:	e02c      	b.n	80016e2 <__aeabi_dadd+0x432>
 8001688:	0742      	lsls	r2, r0, #29
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	4313      	orrs	r3, r2
 800168e:	08c0      	lsrs	r0, r0, #3
 8001690:	e73b      	b.n	800150a <__aeabi_dadd+0x25a>
 8001692:	185c      	adds	r4, r3, r1
 8001694:	429c      	cmp	r4, r3
 8001696:	419b      	sbcs	r3, r3
 8001698:	4440      	add	r0, r8
 800169a:	425b      	negs	r3, r3
 800169c:	18c7      	adds	r7, r0, r3
 800169e:	2601      	movs	r6, #1
 80016a0:	023b      	lsls	r3, r7, #8
 80016a2:	d400      	bmi.n	80016a6 <__aeabi_dadd+0x3f6>
 80016a4:	e729      	b.n	80014fa <__aeabi_dadd+0x24a>
 80016a6:	2602      	movs	r6, #2
 80016a8:	4a9e      	ldr	r2, [pc, #632]	; (8001924 <__aeabi_dadd+0x674>)
 80016aa:	0863      	lsrs	r3, r4, #1
 80016ac:	4017      	ands	r7, r2
 80016ae:	2201      	movs	r2, #1
 80016b0:	4014      	ands	r4, r2
 80016b2:	431c      	orrs	r4, r3
 80016b4:	07fb      	lsls	r3, r7, #31
 80016b6:	431c      	orrs	r4, r3
 80016b8:	087f      	lsrs	r7, r7, #1
 80016ba:	e673      	b.n	80013a4 <__aeabi_dadd+0xf4>
 80016bc:	4644      	mov	r4, r8
 80016be:	3a20      	subs	r2, #32
 80016c0:	40d4      	lsrs	r4, r2
 80016c2:	4662      	mov	r2, ip
 80016c4:	2a20      	cmp	r2, #32
 80016c6:	d005      	beq.n	80016d4 <__aeabi_dadd+0x424>
 80016c8:	4667      	mov	r7, ip
 80016ca:	2240      	movs	r2, #64	; 0x40
 80016cc:	1bd2      	subs	r2, r2, r7
 80016ce:	4647      	mov	r7, r8
 80016d0:	4097      	lsls	r7, r2
 80016d2:	4339      	orrs	r1, r7
 80016d4:	1e4a      	subs	r2, r1, #1
 80016d6:	4191      	sbcs	r1, r2
 80016d8:	4321      	orrs	r1, r4
 80016da:	e635      	b.n	8001348 <__aeabi_dadd+0x98>
 80016dc:	4303      	orrs	r3, r0
 80016de:	1e58      	subs	r0, r3, #1
 80016e0:	4183      	sbcs	r3, r0
 80016e2:	1acc      	subs	r4, r1, r3
 80016e4:	42a1      	cmp	r1, r4
 80016e6:	41bf      	sbcs	r7, r7
 80016e8:	4643      	mov	r3, r8
 80016ea:	427f      	negs	r7, r7
 80016ec:	4655      	mov	r5, sl
 80016ee:	464e      	mov	r6, r9
 80016f0:	1bdf      	subs	r7, r3, r7
 80016f2:	e62e      	b.n	8001352 <__aeabi_dadd+0xa2>
 80016f4:	0002      	movs	r2, r0
 80016f6:	431a      	orrs	r2, r3
 80016f8:	d100      	bne.n	80016fc <__aeabi_dadd+0x44c>
 80016fa:	e0bd      	b.n	8001878 <__aeabi_dadd+0x5c8>
 80016fc:	4662      	mov	r2, ip
 80016fe:	4664      	mov	r4, ip
 8001700:	3a01      	subs	r2, #1
 8001702:	2c01      	cmp	r4, #1
 8001704:	d100      	bne.n	8001708 <__aeabi_dadd+0x458>
 8001706:	e0e5      	b.n	80018d4 <__aeabi_dadd+0x624>
 8001708:	4c85      	ldr	r4, [pc, #532]	; (8001920 <__aeabi_dadd+0x670>)
 800170a:	45a4      	cmp	ip, r4
 800170c:	d058      	beq.n	80017c0 <__aeabi_dadd+0x510>
 800170e:	4694      	mov	ip, r2
 8001710:	e749      	b.n	80015a6 <__aeabi_dadd+0x2f6>
 8001712:	4664      	mov	r4, ip
 8001714:	2220      	movs	r2, #32
 8001716:	1b12      	subs	r2, r2, r4
 8001718:	4644      	mov	r4, r8
 800171a:	4094      	lsls	r4, r2
 800171c:	000f      	movs	r7, r1
 800171e:	46a1      	mov	r9, r4
 8001720:	4664      	mov	r4, ip
 8001722:	4091      	lsls	r1, r2
 8001724:	40e7      	lsrs	r7, r4
 8001726:	464c      	mov	r4, r9
 8001728:	1e4a      	subs	r2, r1, #1
 800172a:	4191      	sbcs	r1, r2
 800172c:	433c      	orrs	r4, r7
 800172e:	4642      	mov	r2, r8
 8001730:	430c      	orrs	r4, r1
 8001732:	4661      	mov	r1, ip
 8001734:	40ca      	lsrs	r2, r1
 8001736:	1880      	adds	r0, r0, r2
 8001738:	e6f4      	b.n	8001524 <__aeabi_dadd+0x274>
 800173a:	4c79      	ldr	r4, [pc, #484]	; (8001920 <__aeabi_dadd+0x670>)
 800173c:	42a2      	cmp	r2, r4
 800173e:	d100      	bne.n	8001742 <__aeabi_dadd+0x492>
 8001740:	e6fd      	b.n	800153e <__aeabi_dadd+0x28e>
 8001742:	1859      	adds	r1, r3, r1
 8001744:	4299      	cmp	r1, r3
 8001746:	419b      	sbcs	r3, r3
 8001748:	4440      	add	r0, r8
 800174a:	425f      	negs	r7, r3
 800174c:	19c7      	adds	r7, r0, r7
 800174e:	07fc      	lsls	r4, r7, #31
 8001750:	0849      	lsrs	r1, r1, #1
 8001752:	0016      	movs	r6, r2
 8001754:	430c      	orrs	r4, r1
 8001756:	087f      	lsrs	r7, r7, #1
 8001758:	e6cf      	b.n	80014fa <__aeabi_dadd+0x24a>
 800175a:	1acc      	subs	r4, r1, r3
 800175c:	42a1      	cmp	r1, r4
 800175e:	41bf      	sbcs	r7, r7
 8001760:	4643      	mov	r3, r8
 8001762:	427f      	negs	r7, r7
 8001764:	1a18      	subs	r0, r3, r0
 8001766:	4655      	mov	r5, sl
 8001768:	1bc7      	subs	r7, r0, r7
 800176a:	e5f7      	b.n	800135c <__aeabi_dadd+0xac>
 800176c:	08c9      	lsrs	r1, r1, #3
 800176e:	077b      	lsls	r3, r7, #29
 8001770:	4655      	mov	r5, sl
 8001772:	430b      	orrs	r3, r1
 8001774:	08f8      	lsrs	r0, r7, #3
 8001776:	e6c8      	b.n	800150a <__aeabi_dadd+0x25a>
 8001778:	2c00      	cmp	r4, #0
 800177a:	d000      	beq.n	800177e <__aeabi_dadd+0x4ce>
 800177c:	e081      	b.n	8001882 <__aeabi_dadd+0x5d2>
 800177e:	4643      	mov	r3, r8
 8001780:	430b      	orrs	r3, r1
 8001782:	d115      	bne.n	80017b0 <__aeabi_dadd+0x500>
 8001784:	2080      	movs	r0, #128	; 0x80
 8001786:	2500      	movs	r5, #0
 8001788:	0300      	lsls	r0, r0, #12
 800178a:	e6e3      	b.n	8001554 <__aeabi_dadd+0x2a4>
 800178c:	1a5c      	subs	r4, r3, r1
 800178e:	42a3      	cmp	r3, r4
 8001790:	419b      	sbcs	r3, r3
 8001792:	1bc7      	subs	r7, r0, r7
 8001794:	425b      	negs	r3, r3
 8001796:	2601      	movs	r6, #1
 8001798:	1aff      	subs	r7, r7, r3
 800179a:	e5da      	b.n	8001352 <__aeabi_dadd+0xa2>
 800179c:	0742      	lsls	r2, r0, #29
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	08c0      	lsrs	r0, r0, #3
 80017a4:	e6d2      	b.n	800154c <__aeabi_dadd+0x29c>
 80017a6:	0742      	lsls	r2, r0, #29
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	08c0      	lsrs	r0, r0, #3
 80017ae:	e6ac      	b.n	800150a <__aeabi_dadd+0x25a>
 80017b0:	4643      	mov	r3, r8
 80017b2:	4642      	mov	r2, r8
 80017b4:	08c9      	lsrs	r1, r1, #3
 80017b6:	075b      	lsls	r3, r3, #29
 80017b8:	4655      	mov	r5, sl
 80017ba:	430b      	orrs	r3, r1
 80017bc:	08d0      	lsrs	r0, r2, #3
 80017be:	e6c5      	b.n	800154c <__aeabi_dadd+0x29c>
 80017c0:	4643      	mov	r3, r8
 80017c2:	4642      	mov	r2, r8
 80017c4:	075b      	lsls	r3, r3, #29
 80017c6:	08c9      	lsrs	r1, r1, #3
 80017c8:	430b      	orrs	r3, r1
 80017ca:	08d0      	lsrs	r0, r2, #3
 80017cc:	e6be      	b.n	800154c <__aeabi_dadd+0x29c>
 80017ce:	4303      	orrs	r3, r0
 80017d0:	001c      	movs	r4, r3
 80017d2:	1e63      	subs	r3, r4, #1
 80017d4:	419c      	sbcs	r4, r3
 80017d6:	e6fc      	b.n	80015d2 <__aeabi_dadd+0x322>
 80017d8:	0002      	movs	r2, r0
 80017da:	3c20      	subs	r4, #32
 80017dc:	40e2      	lsrs	r2, r4
 80017de:	0014      	movs	r4, r2
 80017e0:	4662      	mov	r2, ip
 80017e2:	2a20      	cmp	r2, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dadd+0x53e>
 80017e6:	2540      	movs	r5, #64	; 0x40
 80017e8:	1aad      	subs	r5, r5, r2
 80017ea:	40a8      	lsls	r0, r5
 80017ec:	4303      	orrs	r3, r0
 80017ee:	1e58      	subs	r0, r3, #1
 80017f0:	4183      	sbcs	r3, r0
 80017f2:	4323      	orrs	r3, r4
 80017f4:	e775      	b.n	80016e2 <__aeabi_dadd+0x432>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d0e2      	beq.n	80017c0 <__aeabi_dadd+0x510>
 80017fa:	003a      	movs	r2, r7
 80017fc:	430a      	orrs	r2, r1
 80017fe:	d0cd      	beq.n	800179c <__aeabi_dadd+0x4ec>
 8001800:	0742      	lsls	r2, r0, #29
 8001802:	08db      	lsrs	r3, r3, #3
 8001804:	4313      	orrs	r3, r2
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	08c0      	lsrs	r0, r0, #3
 800180a:	0312      	lsls	r2, r2, #12
 800180c:	4210      	tst	r0, r2
 800180e:	d006      	beq.n	800181e <__aeabi_dadd+0x56e>
 8001810:	08fc      	lsrs	r4, r7, #3
 8001812:	4214      	tst	r4, r2
 8001814:	d103      	bne.n	800181e <__aeabi_dadd+0x56e>
 8001816:	0020      	movs	r0, r4
 8001818:	08cb      	lsrs	r3, r1, #3
 800181a:	077a      	lsls	r2, r7, #29
 800181c:	4313      	orrs	r3, r2
 800181e:	0f5a      	lsrs	r2, r3, #29
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	0752      	lsls	r2, r2, #29
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	4313      	orrs	r3, r2
 8001828:	e690      	b.n	800154c <__aeabi_dadd+0x29c>
 800182a:	4643      	mov	r3, r8
 800182c:	430b      	orrs	r3, r1
 800182e:	d100      	bne.n	8001832 <__aeabi_dadd+0x582>
 8001830:	e709      	b.n	8001646 <__aeabi_dadd+0x396>
 8001832:	4643      	mov	r3, r8
 8001834:	4642      	mov	r2, r8
 8001836:	08c9      	lsrs	r1, r1, #3
 8001838:	075b      	lsls	r3, r3, #29
 800183a:	4655      	mov	r5, sl
 800183c:	430b      	orrs	r3, r1
 800183e:	08d0      	lsrs	r0, r2, #3
 8001840:	e666      	b.n	8001510 <__aeabi_dadd+0x260>
 8001842:	1acc      	subs	r4, r1, r3
 8001844:	42a1      	cmp	r1, r4
 8001846:	4189      	sbcs	r1, r1
 8001848:	1a3f      	subs	r7, r7, r0
 800184a:	4249      	negs	r1, r1
 800184c:	4655      	mov	r5, sl
 800184e:	2601      	movs	r6, #1
 8001850:	1a7f      	subs	r7, r7, r1
 8001852:	e57e      	b.n	8001352 <__aeabi_dadd+0xa2>
 8001854:	4642      	mov	r2, r8
 8001856:	1a5c      	subs	r4, r3, r1
 8001858:	1a87      	subs	r7, r0, r2
 800185a:	42a3      	cmp	r3, r4
 800185c:	4192      	sbcs	r2, r2
 800185e:	4252      	negs	r2, r2
 8001860:	1abf      	subs	r7, r7, r2
 8001862:	023a      	lsls	r2, r7, #8
 8001864:	d53d      	bpl.n	80018e2 <__aeabi_dadd+0x632>
 8001866:	1acc      	subs	r4, r1, r3
 8001868:	42a1      	cmp	r1, r4
 800186a:	4189      	sbcs	r1, r1
 800186c:	4643      	mov	r3, r8
 800186e:	4249      	negs	r1, r1
 8001870:	1a1f      	subs	r7, r3, r0
 8001872:	4655      	mov	r5, sl
 8001874:	1a7f      	subs	r7, r7, r1
 8001876:	e595      	b.n	80013a4 <__aeabi_dadd+0xf4>
 8001878:	077b      	lsls	r3, r7, #29
 800187a:	08c9      	lsrs	r1, r1, #3
 800187c:	430b      	orrs	r3, r1
 800187e:	08f8      	lsrs	r0, r7, #3
 8001880:	e643      	b.n	800150a <__aeabi_dadd+0x25a>
 8001882:	4644      	mov	r4, r8
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	430c      	orrs	r4, r1
 8001888:	d130      	bne.n	80018ec <__aeabi_dadd+0x63c>
 800188a:	0742      	lsls	r2, r0, #29
 800188c:	4313      	orrs	r3, r2
 800188e:	08c0      	lsrs	r0, r0, #3
 8001890:	e65c      	b.n	800154c <__aeabi_dadd+0x29c>
 8001892:	077b      	lsls	r3, r7, #29
 8001894:	08c9      	lsrs	r1, r1, #3
 8001896:	430b      	orrs	r3, r1
 8001898:	08f8      	lsrs	r0, r7, #3
 800189a:	e639      	b.n	8001510 <__aeabi_dadd+0x260>
 800189c:	185c      	adds	r4, r3, r1
 800189e:	429c      	cmp	r4, r3
 80018a0:	419b      	sbcs	r3, r3
 80018a2:	4440      	add	r0, r8
 80018a4:	425b      	negs	r3, r3
 80018a6:	18c7      	adds	r7, r0, r3
 80018a8:	023b      	lsls	r3, r7, #8
 80018aa:	d400      	bmi.n	80018ae <__aeabi_dadd+0x5fe>
 80018ac:	e625      	b.n	80014fa <__aeabi_dadd+0x24a>
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <__aeabi_dadd+0x674>)
 80018b0:	2601      	movs	r6, #1
 80018b2:	401f      	ands	r7, r3
 80018b4:	e621      	b.n	80014fa <__aeabi_dadd+0x24a>
 80018b6:	0004      	movs	r4, r0
 80018b8:	3a20      	subs	r2, #32
 80018ba:	40d4      	lsrs	r4, r2
 80018bc:	4662      	mov	r2, ip
 80018be:	2a20      	cmp	r2, #32
 80018c0:	d004      	beq.n	80018cc <__aeabi_dadd+0x61c>
 80018c2:	2240      	movs	r2, #64	; 0x40
 80018c4:	4666      	mov	r6, ip
 80018c6:	1b92      	subs	r2, r2, r6
 80018c8:	4090      	lsls	r0, r2
 80018ca:	4303      	orrs	r3, r0
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	4193      	sbcs	r3, r2
 80018d0:	431c      	orrs	r4, r3
 80018d2:	e67e      	b.n	80015d2 <__aeabi_dadd+0x322>
 80018d4:	185c      	adds	r4, r3, r1
 80018d6:	428c      	cmp	r4, r1
 80018d8:	4189      	sbcs	r1, r1
 80018da:	4440      	add	r0, r8
 80018dc:	4249      	negs	r1, r1
 80018de:	1847      	adds	r7, r0, r1
 80018e0:	e6dd      	b.n	800169e <__aeabi_dadd+0x3ee>
 80018e2:	0023      	movs	r3, r4
 80018e4:	433b      	orrs	r3, r7
 80018e6:	d100      	bne.n	80018ea <__aeabi_dadd+0x63a>
 80018e8:	e6ad      	b.n	8001646 <__aeabi_dadd+0x396>
 80018ea:	e606      	b.n	80014fa <__aeabi_dadd+0x24a>
 80018ec:	0744      	lsls	r4, r0, #29
 80018ee:	4323      	orrs	r3, r4
 80018f0:	2480      	movs	r4, #128	; 0x80
 80018f2:	08c0      	lsrs	r0, r0, #3
 80018f4:	0324      	lsls	r4, r4, #12
 80018f6:	4220      	tst	r0, r4
 80018f8:	d008      	beq.n	800190c <__aeabi_dadd+0x65c>
 80018fa:	4642      	mov	r2, r8
 80018fc:	08d6      	lsrs	r6, r2, #3
 80018fe:	4226      	tst	r6, r4
 8001900:	d104      	bne.n	800190c <__aeabi_dadd+0x65c>
 8001902:	4655      	mov	r5, sl
 8001904:	0030      	movs	r0, r6
 8001906:	08cb      	lsrs	r3, r1, #3
 8001908:	0751      	lsls	r1, r2, #29
 800190a:	430b      	orrs	r3, r1
 800190c:	0f5a      	lsrs	r2, r3, #29
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	08db      	lsrs	r3, r3, #3
 8001912:	0752      	lsls	r2, r2, #29
 8001914:	4313      	orrs	r3, r2
 8001916:	e619      	b.n	800154c <__aeabi_dadd+0x29c>
 8001918:	2300      	movs	r3, #0
 800191a:	4a01      	ldr	r2, [pc, #4]	; (8001920 <__aeabi_dadd+0x670>)
 800191c:	001f      	movs	r7, r3
 800191e:	e55e      	b.n	80013de <__aeabi_dadd+0x12e>
 8001920:	000007ff 	.word	0x000007ff
 8001924:	ff7fffff 	.word	0xff7fffff

08001928 <__aeabi_ddiv>:
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	4657      	mov	r7, sl
 800192c:	464e      	mov	r6, r9
 800192e:	4645      	mov	r5, r8
 8001930:	46de      	mov	lr, fp
 8001932:	b5e0      	push	{r5, r6, r7, lr}
 8001934:	4681      	mov	r9, r0
 8001936:	0005      	movs	r5, r0
 8001938:	030c      	lsls	r4, r1, #12
 800193a:	0048      	lsls	r0, r1, #1
 800193c:	4692      	mov	sl, r2
 800193e:	001f      	movs	r7, r3
 8001940:	b085      	sub	sp, #20
 8001942:	0b24      	lsrs	r4, r4, #12
 8001944:	0d40      	lsrs	r0, r0, #21
 8001946:	0fce      	lsrs	r6, r1, #31
 8001948:	2800      	cmp	r0, #0
 800194a:	d100      	bne.n	800194e <__aeabi_ddiv+0x26>
 800194c:	e156      	b.n	8001bfc <__aeabi_ddiv+0x2d4>
 800194e:	4bd4      	ldr	r3, [pc, #848]	; (8001ca0 <__aeabi_ddiv+0x378>)
 8001950:	4298      	cmp	r0, r3
 8001952:	d100      	bne.n	8001956 <__aeabi_ddiv+0x2e>
 8001954:	e172      	b.n	8001c3c <__aeabi_ddiv+0x314>
 8001956:	0f6b      	lsrs	r3, r5, #29
 8001958:	00e4      	lsls	r4, r4, #3
 800195a:	431c      	orrs	r4, r3
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	041b      	lsls	r3, r3, #16
 8001960:	4323      	orrs	r3, r4
 8001962:	4698      	mov	r8, r3
 8001964:	4bcf      	ldr	r3, [pc, #828]	; (8001ca4 <__aeabi_ddiv+0x37c>)
 8001966:	00ed      	lsls	r5, r5, #3
 8001968:	469b      	mov	fp, r3
 800196a:	2300      	movs	r3, #0
 800196c:	4699      	mov	r9, r3
 800196e:	4483      	add	fp, r0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	033c      	lsls	r4, r7, #12
 8001974:	007b      	lsls	r3, r7, #1
 8001976:	4650      	mov	r0, sl
 8001978:	0b24      	lsrs	r4, r4, #12
 800197a:	0d5b      	lsrs	r3, r3, #21
 800197c:	0fff      	lsrs	r7, r7, #31
 800197e:	2b00      	cmp	r3, #0
 8001980:	d100      	bne.n	8001984 <__aeabi_ddiv+0x5c>
 8001982:	e11f      	b.n	8001bc4 <__aeabi_ddiv+0x29c>
 8001984:	4ac6      	ldr	r2, [pc, #792]	; (8001ca0 <__aeabi_ddiv+0x378>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d100      	bne.n	800198c <__aeabi_ddiv+0x64>
 800198a:	e162      	b.n	8001c52 <__aeabi_ddiv+0x32a>
 800198c:	49c5      	ldr	r1, [pc, #788]	; (8001ca4 <__aeabi_ddiv+0x37c>)
 800198e:	0f42      	lsrs	r2, r0, #29
 8001990:	468c      	mov	ip, r1
 8001992:	00e4      	lsls	r4, r4, #3
 8001994:	4659      	mov	r1, fp
 8001996:	4314      	orrs	r4, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	4463      	add	r3, ip
 800199c:	0412      	lsls	r2, r2, #16
 800199e:	1acb      	subs	r3, r1, r3
 80019a0:	4314      	orrs	r4, r2
 80019a2:	469b      	mov	fp, r3
 80019a4:	00c2      	lsls	r2, r0, #3
 80019a6:	2000      	movs	r0, #0
 80019a8:	0033      	movs	r3, r6
 80019aa:	407b      	eors	r3, r7
 80019ac:	469a      	mov	sl, r3
 80019ae:	464b      	mov	r3, r9
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d827      	bhi.n	8001a04 <__aeabi_ddiv+0xdc>
 80019b4:	49bc      	ldr	r1, [pc, #752]	; (8001ca8 <__aeabi_ddiv+0x380>)
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	58cb      	ldr	r3, [r1, r3]
 80019ba:	469f      	mov	pc, r3
 80019bc:	46b2      	mov	sl, r6
 80019be:	9b00      	ldr	r3, [sp, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d016      	beq.n	80019f2 <__aeabi_ddiv+0xca>
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d100      	bne.n	80019ca <__aeabi_ddiv+0xa2>
 80019c8:	e28e      	b.n	8001ee8 <__aeabi_ddiv+0x5c0>
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d000      	beq.n	80019d0 <__aeabi_ddiv+0xa8>
 80019ce:	e0d9      	b.n	8001b84 <__aeabi_ddiv+0x25c>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2400      	movs	r4, #0
 80019d4:	2500      	movs	r5, #0
 80019d6:	4652      	mov	r2, sl
 80019d8:	051b      	lsls	r3, r3, #20
 80019da:	4323      	orrs	r3, r4
 80019dc:	07d2      	lsls	r2, r2, #31
 80019de:	4313      	orrs	r3, r2
 80019e0:	0028      	movs	r0, r5
 80019e2:	0019      	movs	r1, r3
 80019e4:	b005      	add	sp, #20
 80019e6:	bcf0      	pop	{r4, r5, r6, r7}
 80019e8:	46bb      	mov	fp, r7
 80019ea:	46b2      	mov	sl, r6
 80019ec:	46a9      	mov	r9, r5
 80019ee:	46a0      	mov	r8, r4
 80019f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f2:	2400      	movs	r4, #0
 80019f4:	2500      	movs	r5, #0
 80019f6:	4baa      	ldr	r3, [pc, #680]	; (8001ca0 <__aeabi_ddiv+0x378>)
 80019f8:	e7ed      	b.n	80019d6 <__aeabi_ddiv+0xae>
 80019fa:	46ba      	mov	sl, r7
 80019fc:	46a0      	mov	r8, r4
 80019fe:	0015      	movs	r5, r2
 8001a00:	9000      	str	r0, [sp, #0]
 8001a02:	e7dc      	b.n	80019be <__aeabi_ddiv+0x96>
 8001a04:	4544      	cmp	r4, r8
 8001a06:	d200      	bcs.n	8001a0a <__aeabi_ddiv+0xe2>
 8001a08:	e1c7      	b.n	8001d9a <__aeabi_ddiv+0x472>
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_ddiv+0xe6>
 8001a0c:	e1c2      	b.n	8001d94 <__aeabi_ddiv+0x46c>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	425b      	negs	r3, r3
 8001a12:	469c      	mov	ip, r3
 8001a14:	002e      	movs	r6, r5
 8001a16:	4640      	mov	r0, r8
 8001a18:	2500      	movs	r5, #0
 8001a1a:	44e3      	add	fp, ip
 8001a1c:	0223      	lsls	r3, r4, #8
 8001a1e:	0e14      	lsrs	r4, r2, #24
 8001a20:	431c      	orrs	r4, r3
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	4699      	mov	r9, r3
 8001a26:	0423      	lsls	r3, r4, #16
 8001a28:	0c1f      	lsrs	r7, r3, #16
 8001a2a:	0212      	lsls	r2, r2, #8
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	9701      	str	r7, [sp, #4]
 8001a32:	f7fe fc0b 	bl	800024c <__aeabi_uidivmod>
 8001a36:	0002      	movs	r2, r0
 8001a38:	437a      	muls	r2, r7
 8001a3a:	040b      	lsls	r3, r1, #16
 8001a3c:	0c31      	lsrs	r1, r6, #16
 8001a3e:	4680      	mov	r8, r0
 8001a40:	4319      	orrs	r1, r3
 8001a42:	428a      	cmp	r2, r1
 8001a44:	d907      	bls.n	8001a56 <__aeabi_ddiv+0x12e>
 8001a46:	2301      	movs	r3, #1
 8001a48:	425b      	negs	r3, r3
 8001a4a:	469c      	mov	ip, r3
 8001a4c:	1909      	adds	r1, r1, r4
 8001a4e:	44e0      	add	r8, ip
 8001a50:	428c      	cmp	r4, r1
 8001a52:	d800      	bhi.n	8001a56 <__aeabi_ddiv+0x12e>
 8001a54:	e207      	b.n	8001e66 <__aeabi_ddiv+0x53e>
 8001a56:	1a88      	subs	r0, r1, r2
 8001a58:	4649      	mov	r1, r9
 8001a5a:	f7fe fbf7 	bl	800024c <__aeabi_uidivmod>
 8001a5e:	0409      	lsls	r1, r1, #16
 8001a60:	468c      	mov	ip, r1
 8001a62:	0431      	lsls	r1, r6, #16
 8001a64:	4666      	mov	r6, ip
 8001a66:	9a01      	ldr	r2, [sp, #4]
 8001a68:	0c09      	lsrs	r1, r1, #16
 8001a6a:	4342      	muls	r2, r0
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	4331      	orrs	r1, r6
 8001a70:	428a      	cmp	r2, r1
 8001a72:	d904      	bls.n	8001a7e <__aeabi_ddiv+0x156>
 8001a74:	1909      	adds	r1, r1, r4
 8001a76:	3b01      	subs	r3, #1
 8001a78:	428c      	cmp	r4, r1
 8001a7a:	d800      	bhi.n	8001a7e <__aeabi_ddiv+0x156>
 8001a7c:	e1ed      	b.n	8001e5a <__aeabi_ddiv+0x532>
 8001a7e:	1a88      	subs	r0, r1, r2
 8001a80:	4642      	mov	r2, r8
 8001a82:	0412      	lsls	r2, r2, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	4690      	mov	r8, r2
 8001a88:	4641      	mov	r1, r8
 8001a8a:	9b00      	ldr	r3, [sp, #0]
 8001a8c:	040e      	lsls	r6, r1, #16
 8001a8e:	0c1b      	lsrs	r3, r3, #16
 8001a90:	001f      	movs	r7, r3
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	0c36      	lsrs	r6, r6, #16
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	0c19      	lsrs	r1, r3, #16
 8001a9c:	000b      	movs	r3, r1
 8001a9e:	4373      	muls	r3, r6
 8001aa0:	0c12      	lsrs	r2, r2, #16
 8001aa2:	437e      	muls	r6, r7
 8001aa4:	9103      	str	r1, [sp, #12]
 8001aa6:	4351      	muls	r1, r2
 8001aa8:	437a      	muls	r2, r7
 8001aaa:	0c1f      	lsrs	r7, r3, #16
 8001aac:	46bc      	mov	ip, r7
 8001aae:	1876      	adds	r6, r6, r1
 8001ab0:	4466      	add	r6, ip
 8001ab2:	42b1      	cmp	r1, r6
 8001ab4:	d903      	bls.n	8001abe <__aeabi_ddiv+0x196>
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0249      	lsls	r1, r1, #9
 8001aba:	468c      	mov	ip, r1
 8001abc:	4462      	add	r2, ip
 8001abe:	0c31      	lsrs	r1, r6, #16
 8001ac0:	188a      	adds	r2, r1, r2
 8001ac2:	0431      	lsls	r1, r6, #16
 8001ac4:	041e      	lsls	r6, r3, #16
 8001ac6:	0c36      	lsrs	r6, r6, #16
 8001ac8:	198e      	adds	r6, r1, r6
 8001aca:	4290      	cmp	r0, r2
 8001acc:	d302      	bcc.n	8001ad4 <__aeabi_ddiv+0x1ac>
 8001ace:	d112      	bne.n	8001af6 <__aeabi_ddiv+0x1ce>
 8001ad0:	42b5      	cmp	r5, r6
 8001ad2:	d210      	bcs.n	8001af6 <__aeabi_ddiv+0x1ce>
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	1e59      	subs	r1, r3, #1
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	469c      	mov	ip, r3
 8001adc:	4465      	add	r5, ip
 8001ade:	001f      	movs	r7, r3
 8001ae0:	429d      	cmp	r5, r3
 8001ae2:	419b      	sbcs	r3, r3
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	191b      	adds	r3, r3, r4
 8001ae8:	18c0      	adds	r0, r0, r3
 8001aea:	4284      	cmp	r4, r0
 8001aec:	d200      	bcs.n	8001af0 <__aeabi_ddiv+0x1c8>
 8001aee:	e1a0      	b.n	8001e32 <__aeabi_ddiv+0x50a>
 8001af0:	d100      	bne.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001af2:	e19b      	b.n	8001e2c <__aeabi_ddiv+0x504>
 8001af4:	4688      	mov	r8, r1
 8001af6:	1bae      	subs	r6, r5, r6
 8001af8:	42b5      	cmp	r5, r6
 8001afa:	41ad      	sbcs	r5, r5
 8001afc:	1a80      	subs	r0, r0, r2
 8001afe:	426d      	negs	r5, r5
 8001b00:	1b40      	subs	r0, r0, r5
 8001b02:	4284      	cmp	r4, r0
 8001b04:	d100      	bne.n	8001b08 <__aeabi_ddiv+0x1e0>
 8001b06:	e1d5      	b.n	8001eb4 <__aeabi_ddiv+0x58c>
 8001b08:	4649      	mov	r1, r9
 8001b0a:	f7fe fb9f 	bl	800024c <__aeabi_uidivmod>
 8001b0e:	9a01      	ldr	r2, [sp, #4]
 8001b10:	040b      	lsls	r3, r1, #16
 8001b12:	4342      	muls	r2, r0
 8001b14:	0c31      	lsrs	r1, r6, #16
 8001b16:	0005      	movs	r5, r0
 8001b18:	4319      	orrs	r1, r3
 8001b1a:	428a      	cmp	r2, r1
 8001b1c:	d900      	bls.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001b1e:	e16c      	b.n	8001dfa <__aeabi_ddiv+0x4d2>
 8001b20:	1a88      	subs	r0, r1, r2
 8001b22:	4649      	mov	r1, r9
 8001b24:	f7fe fb92 	bl	800024c <__aeabi_uidivmod>
 8001b28:	9a01      	ldr	r2, [sp, #4]
 8001b2a:	0436      	lsls	r6, r6, #16
 8001b2c:	4342      	muls	r2, r0
 8001b2e:	0409      	lsls	r1, r1, #16
 8001b30:	0c36      	lsrs	r6, r6, #16
 8001b32:	0003      	movs	r3, r0
 8001b34:	430e      	orrs	r6, r1
 8001b36:	42b2      	cmp	r2, r6
 8001b38:	d900      	bls.n	8001b3c <__aeabi_ddiv+0x214>
 8001b3a:	e153      	b.n	8001de4 <__aeabi_ddiv+0x4bc>
 8001b3c:	9803      	ldr	r0, [sp, #12]
 8001b3e:	1ab6      	subs	r6, r6, r2
 8001b40:	0002      	movs	r2, r0
 8001b42:	042d      	lsls	r5, r5, #16
 8001b44:	431d      	orrs	r5, r3
 8001b46:	9f02      	ldr	r7, [sp, #8]
 8001b48:	042b      	lsls	r3, r5, #16
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	435a      	muls	r2, r3
 8001b4e:	437b      	muls	r3, r7
 8001b50:	469c      	mov	ip, r3
 8001b52:	0c29      	lsrs	r1, r5, #16
 8001b54:	4348      	muls	r0, r1
 8001b56:	0c13      	lsrs	r3, r2, #16
 8001b58:	4484      	add	ip, r0
 8001b5a:	4463      	add	r3, ip
 8001b5c:	4379      	muls	r1, r7
 8001b5e:	4298      	cmp	r0, r3
 8001b60:	d903      	bls.n	8001b6a <__aeabi_ddiv+0x242>
 8001b62:	2080      	movs	r0, #128	; 0x80
 8001b64:	0240      	lsls	r0, r0, #9
 8001b66:	4684      	mov	ip, r0
 8001b68:	4461      	add	r1, ip
 8001b6a:	0c18      	lsrs	r0, r3, #16
 8001b6c:	0412      	lsls	r2, r2, #16
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	0c12      	lsrs	r2, r2, #16
 8001b72:	1841      	adds	r1, r0, r1
 8001b74:	189b      	adds	r3, r3, r2
 8001b76:	428e      	cmp	r6, r1
 8001b78:	d200      	bcs.n	8001b7c <__aeabi_ddiv+0x254>
 8001b7a:	e0ff      	b.n	8001d7c <__aeabi_ddiv+0x454>
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_ddiv+0x258>
 8001b7e:	e0fa      	b.n	8001d76 <__aeabi_ddiv+0x44e>
 8001b80:	2301      	movs	r3, #1
 8001b82:	431d      	orrs	r5, r3
 8001b84:	4a49      	ldr	r2, [pc, #292]	; (8001cac <__aeabi_ddiv+0x384>)
 8001b86:	445a      	add	r2, fp
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	dc00      	bgt.n	8001b8e <__aeabi_ddiv+0x266>
 8001b8c:	e0aa      	b.n	8001ce4 <__aeabi_ddiv+0x3bc>
 8001b8e:	076b      	lsls	r3, r5, #29
 8001b90:	d000      	beq.n	8001b94 <__aeabi_ddiv+0x26c>
 8001b92:	e13d      	b.n	8001e10 <__aeabi_ddiv+0x4e8>
 8001b94:	08ed      	lsrs	r5, r5, #3
 8001b96:	4643      	mov	r3, r8
 8001b98:	01db      	lsls	r3, r3, #7
 8001b9a:	d506      	bpl.n	8001baa <__aeabi_ddiv+0x282>
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <__aeabi_ddiv+0x388>)
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	4690      	mov	r8, r2
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	00d2      	lsls	r2, r2, #3
 8001ba8:	445a      	add	r2, fp
 8001baa:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <__aeabi_ddiv+0x38c>)
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dd00      	ble.n	8001bb2 <__aeabi_ddiv+0x28a>
 8001bb0:	e71f      	b.n	80019f2 <__aeabi_ddiv+0xca>
 8001bb2:	4643      	mov	r3, r8
 8001bb4:	075b      	lsls	r3, r3, #29
 8001bb6:	431d      	orrs	r5, r3
 8001bb8:	4643      	mov	r3, r8
 8001bba:	0552      	lsls	r2, r2, #21
 8001bbc:	025c      	lsls	r4, r3, #9
 8001bbe:	0b24      	lsrs	r4, r4, #12
 8001bc0:	0d53      	lsrs	r3, r2, #21
 8001bc2:	e708      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	4322      	orrs	r2, r4
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_ddiv+0x2a4>
 8001bca:	e07b      	b.n	8001cc4 <__aeabi_ddiv+0x39c>
 8001bcc:	2c00      	cmp	r4, #0
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0x2aa>
 8001bd0:	e0fa      	b.n	8001dc8 <__aeabi_ddiv+0x4a0>
 8001bd2:	0020      	movs	r0, r4
 8001bd4:	f001 fa22 	bl	800301c <__clzsi2>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	3a0b      	subs	r2, #11
 8001bdc:	231d      	movs	r3, #29
 8001bde:	0001      	movs	r1, r0
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	4652      	mov	r2, sl
 8001be4:	3908      	subs	r1, #8
 8001be6:	40da      	lsrs	r2, r3
 8001be8:	408c      	lsls	r4, r1
 8001bea:	4314      	orrs	r4, r2
 8001bec:	4652      	mov	r2, sl
 8001bee:	408a      	lsls	r2, r1
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <__aeabi_ddiv+0x390>)
 8001bf2:	4458      	add	r0, fp
 8001bf4:	469b      	mov	fp, r3
 8001bf6:	4483      	add	fp, r0
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	e6d5      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	4698      	mov	r8, r3
 8001c02:	d044      	beq.n	8001c8e <__aeabi_ddiv+0x366>
 8001c04:	2c00      	cmp	r4, #0
 8001c06:	d100      	bne.n	8001c0a <__aeabi_ddiv+0x2e2>
 8001c08:	e0ce      	b.n	8001da8 <__aeabi_ddiv+0x480>
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	f001 fa06 	bl	800301c <__clzsi2>
 8001c10:	0001      	movs	r1, r0
 8001c12:	0002      	movs	r2, r0
 8001c14:	390b      	subs	r1, #11
 8001c16:	231d      	movs	r3, #29
 8001c18:	1a5b      	subs	r3, r3, r1
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	0010      	movs	r0, r2
 8001c1e:	40d9      	lsrs	r1, r3
 8001c20:	3808      	subs	r0, #8
 8001c22:	4084      	lsls	r4, r0
 8001c24:	000b      	movs	r3, r1
 8001c26:	464d      	mov	r5, r9
 8001c28:	4323      	orrs	r3, r4
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	4085      	lsls	r5, r0
 8001c2e:	4823      	ldr	r0, [pc, #140]	; (8001cbc <__aeabi_ddiv+0x394>)
 8001c30:	1a83      	subs	r3, r0, r2
 8001c32:	469b      	mov	fp, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	4699      	mov	r9, r3
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	e69a      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	4323      	orrs	r3, r4
 8001c40:	4698      	mov	r8, r3
 8001c42:	d11d      	bne.n	8001c80 <__aeabi_ddiv+0x358>
 8001c44:	2308      	movs	r3, #8
 8001c46:	4699      	mov	r9, r3
 8001c48:	3b06      	subs	r3, #6
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	4683      	mov	fp, r0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	e68f      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c52:	4652      	mov	r2, sl
 8001c54:	4322      	orrs	r2, r4
 8001c56:	d109      	bne.n	8001c6c <__aeabi_ddiv+0x344>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	4319      	orrs	r1, r3
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <__aeabi_ddiv+0x398>)
 8001c60:	4689      	mov	r9, r1
 8001c62:	469c      	mov	ip, r3
 8001c64:	2400      	movs	r4, #0
 8001c66:	2002      	movs	r0, #2
 8001c68:	44e3      	add	fp, ip
 8001c6a:	e69d      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	464a      	mov	r2, r9
 8001c70:	431a      	orrs	r2, r3
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <__aeabi_ddiv+0x398>)
 8001c74:	4691      	mov	r9, r2
 8001c76:	469c      	mov	ip, r3
 8001c78:	4652      	mov	r2, sl
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	44e3      	add	fp, ip
 8001c7e:	e693      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001c80:	230c      	movs	r3, #12
 8001c82:	4699      	mov	r9, r3
 8001c84:	3b09      	subs	r3, #9
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4683      	mov	fp, r0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	e671      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	4699      	mov	r9, r3
 8001c92:	2300      	movs	r3, #0
 8001c94:	469b      	mov	fp, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	2500      	movs	r5, #0
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	e669      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	000007ff 	.word	0x000007ff
 8001ca4:	fffffc01 	.word	0xfffffc01
 8001ca8:	0800b158 	.word	0x0800b158
 8001cac:	000003ff 	.word	0x000003ff
 8001cb0:	feffffff 	.word	0xfeffffff
 8001cb4:	000007fe 	.word	0x000007fe
 8001cb8:	000003f3 	.word	0x000003f3
 8001cbc:	fffffc0d 	.word	0xfffffc0d
 8001cc0:	fffff801 	.word	0xfffff801
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	4689      	mov	r9, r1
 8001ccc:	2400      	movs	r4, #0
 8001cce:	2001      	movs	r0, #1
 8001cd0:	e66a      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2480      	movs	r4, #128	; 0x80
 8001cd6:	469a      	mov	sl, r3
 8001cd8:	2500      	movs	r5, #0
 8001cda:	4b8a      	ldr	r3, [pc, #552]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001cdc:	0324      	lsls	r4, r4, #12
 8001cde:	e67a      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001ce0:	2501      	movs	r5, #1
 8001ce2:	426d      	negs	r5, r5
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	2b38      	cmp	r3, #56	; 0x38
 8001cea:	dd00      	ble.n	8001cee <__aeabi_ddiv+0x3c6>
 8001cec:	e670      	b.n	80019d0 <__aeabi_ddiv+0xa8>
 8001cee:	2b1f      	cmp	r3, #31
 8001cf0:	dc00      	bgt.n	8001cf4 <__aeabi_ddiv+0x3cc>
 8001cf2:	e0bf      	b.n	8001e74 <__aeabi_ddiv+0x54c>
 8001cf4:	211f      	movs	r1, #31
 8001cf6:	4249      	negs	r1, r1
 8001cf8:	1a8a      	subs	r2, r1, r2
 8001cfa:	4641      	mov	r1, r8
 8001cfc:	40d1      	lsrs	r1, r2
 8001cfe:	000a      	movs	r2, r1
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d004      	beq.n	8001d0e <__aeabi_ddiv+0x3e6>
 8001d04:	4641      	mov	r1, r8
 8001d06:	4b80      	ldr	r3, [pc, #512]	; (8001f08 <__aeabi_ddiv+0x5e0>)
 8001d08:	445b      	add	r3, fp
 8001d0a:	4099      	lsls	r1, r3
 8001d0c:	430d      	orrs	r5, r1
 8001d0e:	1e6b      	subs	r3, r5, #1
 8001d10:	419d      	sbcs	r5, r3
 8001d12:	2307      	movs	r3, #7
 8001d14:	432a      	orrs	r2, r5
 8001d16:	001d      	movs	r5, r3
 8001d18:	2400      	movs	r4, #0
 8001d1a:	4015      	ands	r5, r2
 8001d1c:	4213      	tst	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_ddiv+0x3fa>
 8001d20:	e0d4      	b.n	8001ecc <__aeabi_ddiv+0x5a4>
 8001d22:	210f      	movs	r1, #15
 8001d24:	2300      	movs	r3, #0
 8001d26:	4011      	ands	r1, r2
 8001d28:	2904      	cmp	r1, #4
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_ddiv+0x406>
 8001d2c:	e0cb      	b.n	8001ec6 <__aeabi_ddiv+0x59e>
 8001d2e:	1d11      	adds	r1, r2, #4
 8001d30:	4291      	cmp	r1, r2
 8001d32:	4192      	sbcs	r2, r2
 8001d34:	4252      	negs	r2, r2
 8001d36:	189b      	adds	r3, r3, r2
 8001d38:	000a      	movs	r2, r1
 8001d3a:	0219      	lsls	r1, r3, #8
 8001d3c:	d400      	bmi.n	8001d40 <__aeabi_ddiv+0x418>
 8001d3e:	e0c2      	b.n	8001ec6 <__aeabi_ddiv+0x59e>
 8001d40:	2301      	movs	r3, #1
 8001d42:	2400      	movs	r4, #0
 8001d44:	2500      	movs	r5, #0
 8001d46:	e646      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	4641      	mov	r1, r8
 8001d4c:	031b      	lsls	r3, r3, #12
 8001d4e:	4219      	tst	r1, r3
 8001d50:	d008      	beq.n	8001d64 <__aeabi_ddiv+0x43c>
 8001d52:	421c      	tst	r4, r3
 8001d54:	d106      	bne.n	8001d64 <__aeabi_ddiv+0x43c>
 8001d56:	431c      	orrs	r4, r3
 8001d58:	0324      	lsls	r4, r4, #12
 8001d5a:	46ba      	mov	sl, r7
 8001d5c:	0015      	movs	r5, r2
 8001d5e:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001d60:	0b24      	lsrs	r4, r4, #12
 8001d62:	e638      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001d64:	2480      	movs	r4, #128	; 0x80
 8001d66:	4643      	mov	r3, r8
 8001d68:	0324      	lsls	r4, r4, #12
 8001d6a:	431c      	orrs	r4, r3
 8001d6c:	0324      	lsls	r4, r4, #12
 8001d6e:	46b2      	mov	sl, r6
 8001d70:	4b64      	ldr	r3, [pc, #400]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001d72:	0b24      	lsrs	r4, r4, #12
 8001d74:	e62f      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d100      	bne.n	8001d7c <__aeabi_ddiv+0x454>
 8001d7a:	e703      	b.n	8001b84 <__aeabi_ddiv+0x25c>
 8001d7c:	19a6      	adds	r6, r4, r6
 8001d7e:	1e68      	subs	r0, r5, #1
 8001d80:	42a6      	cmp	r6, r4
 8001d82:	d200      	bcs.n	8001d86 <__aeabi_ddiv+0x45e>
 8001d84:	e08d      	b.n	8001ea2 <__aeabi_ddiv+0x57a>
 8001d86:	428e      	cmp	r6, r1
 8001d88:	d200      	bcs.n	8001d8c <__aeabi_ddiv+0x464>
 8001d8a:	e0a3      	b.n	8001ed4 <__aeabi_ddiv+0x5ac>
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x468>
 8001d8e:	e0b3      	b.n	8001ef8 <__aeabi_ddiv+0x5d0>
 8001d90:	0005      	movs	r5, r0
 8001d92:	e6f5      	b.n	8001b80 <__aeabi_ddiv+0x258>
 8001d94:	42aa      	cmp	r2, r5
 8001d96:	d900      	bls.n	8001d9a <__aeabi_ddiv+0x472>
 8001d98:	e639      	b.n	8001a0e <__aeabi_ddiv+0xe6>
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	07de      	lsls	r6, r3, #31
 8001d9e:	0858      	lsrs	r0, r3, #1
 8001da0:	086b      	lsrs	r3, r5, #1
 8001da2:	431e      	orrs	r6, r3
 8001da4:	07ed      	lsls	r5, r5, #31
 8001da6:	e639      	b.n	8001a1c <__aeabi_ddiv+0xf4>
 8001da8:	4648      	mov	r0, r9
 8001daa:	f001 f937 	bl	800301c <__clzsi2>
 8001dae:	0001      	movs	r1, r0
 8001db0:	0002      	movs	r2, r0
 8001db2:	3115      	adds	r1, #21
 8001db4:	3220      	adds	r2, #32
 8001db6:	291c      	cmp	r1, #28
 8001db8:	dc00      	bgt.n	8001dbc <__aeabi_ddiv+0x494>
 8001dba:	e72c      	b.n	8001c16 <__aeabi_ddiv+0x2ee>
 8001dbc:	464b      	mov	r3, r9
 8001dbe:	3808      	subs	r0, #8
 8001dc0:	4083      	lsls	r3, r0
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	e732      	b.n	8001c2e <__aeabi_ddiv+0x306>
 8001dc8:	f001 f928 	bl	800301c <__clzsi2>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	001a      	movs	r2, r3
 8001dd0:	3215      	adds	r2, #21
 8001dd2:	3020      	adds	r0, #32
 8001dd4:	2a1c      	cmp	r2, #28
 8001dd6:	dc00      	bgt.n	8001dda <__aeabi_ddiv+0x4b2>
 8001dd8:	e700      	b.n	8001bdc <__aeabi_ddiv+0x2b4>
 8001dda:	4654      	mov	r4, sl
 8001ddc:	3b08      	subs	r3, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	409c      	lsls	r4, r3
 8001de2:	e705      	b.n	8001bf0 <__aeabi_ddiv+0x2c8>
 8001de4:	1936      	adds	r6, r6, r4
 8001de6:	3b01      	subs	r3, #1
 8001de8:	42b4      	cmp	r4, r6
 8001dea:	d900      	bls.n	8001dee <__aeabi_ddiv+0x4c6>
 8001dec:	e6a6      	b.n	8001b3c <__aeabi_ddiv+0x214>
 8001dee:	42b2      	cmp	r2, r6
 8001df0:	d800      	bhi.n	8001df4 <__aeabi_ddiv+0x4cc>
 8001df2:	e6a3      	b.n	8001b3c <__aeabi_ddiv+0x214>
 8001df4:	1e83      	subs	r3, r0, #2
 8001df6:	1936      	adds	r6, r6, r4
 8001df8:	e6a0      	b.n	8001b3c <__aeabi_ddiv+0x214>
 8001dfa:	1909      	adds	r1, r1, r4
 8001dfc:	3d01      	subs	r5, #1
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d900      	bls.n	8001e04 <__aeabi_ddiv+0x4dc>
 8001e02:	e68d      	b.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001e04:	428a      	cmp	r2, r1
 8001e06:	d800      	bhi.n	8001e0a <__aeabi_ddiv+0x4e2>
 8001e08:	e68a      	b.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001e0a:	1e85      	subs	r5, r0, #2
 8001e0c:	1909      	adds	r1, r1, r4
 8001e0e:	e687      	b.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001e10:	230f      	movs	r3, #15
 8001e12:	402b      	ands	r3, r5
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d100      	bne.n	8001e1a <__aeabi_ddiv+0x4f2>
 8001e18:	e6bc      	b.n	8001b94 <__aeabi_ddiv+0x26c>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	42ab      	cmp	r3, r5
 8001e20:	419b      	sbcs	r3, r3
 8001e22:	3504      	adds	r5, #4
 8001e24:	425b      	negs	r3, r3
 8001e26:	08ed      	lsrs	r5, r5, #3
 8001e28:	4498      	add	r8, r3
 8001e2a:	e6b4      	b.n	8001b96 <__aeabi_ddiv+0x26e>
 8001e2c:	42af      	cmp	r7, r5
 8001e2e:	d900      	bls.n	8001e32 <__aeabi_ddiv+0x50a>
 8001e30:	e660      	b.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001e32:	4282      	cmp	r2, r0
 8001e34:	d804      	bhi.n	8001e40 <__aeabi_ddiv+0x518>
 8001e36:	d000      	beq.n	8001e3a <__aeabi_ddiv+0x512>
 8001e38:	e65c      	b.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001e3a:	42ae      	cmp	r6, r5
 8001e3c:	d800      	bhi.n	8001e40 <__aeabi_ddiv+0x518>
 8001e3e:	e659      	b.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001e40:	2302      	movs	r3, #2
 8001e42:	425b      	negs	r3, r3
 8001e44:	469c      	mov	ip, r3
 8001e46:	9b00      	ldr	r3, [sp, #0]
 8001e48:	44e0      	add	r8, ip
 8001e4a:	469c      	mov	ip, r3
 8001e4c:	4465      	add	r5, ip
 8001e4e:	429d      	cmp	r5, r3
 8001e50:	419b      	sbcs	r3, r3
 8001e52:	425b      	negs	r3, r3
 8001e54:	191b      	adds	r3, r3, r4
 8001e56:	18c0      	adds	r0, r0, r3
 8001e58:	e64d      	b.n	8001af6 <__aeabi_ddiv+0x1ce>
 8001e5a:	428a      	cmp	r2, r1
 8001e5c:	d800      	bhi.n	8001e60 <__aeabi_ddiv+0x538>
 8001e5e:	e60e      	b.n	8001a7e <__aeabi_ddiv+0x156>
 8001e60:	1e83      	subs	r3, r0, #2
 8001e62:	1909      	adds	r1, r1, r4
 8001e64:	e60b      	b.n	8001a7e <__aeabi_ddiv+0x156>
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d800      	bhi.n	8001e6c <__aeabi_ddiv+0x544>
 8001e6a:	e5f4      	b.n	8001a56 <__aeabi_ddiv+0x12e>
 8001e6c:	1e83      	subs	r3, r0, #2
 8001e6e:	4698      	mov	r8, r3
 8001e70:	1909      	adds	r1, r1, r4
 8001e72:	e5f0      	b.n	8001a56 <__aeabi_ddiv+0x12e>
 8001e74:	4925      	ldr	r1, [pc, #148]	; (8001f0c <__aeabi_ddiv+0x5e4>)
 8001e76:	0028      	movs	r0, r5
 8001e78:	4459      	add	r1, fp
 8001e7a:	408d      	lsls	r5, r1
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	408a      	lsls	r2, r1
 8001e80:	1e69      	subs	r1, r5, #1
 8001e82:	418d      	sbcs	r5, r1
 8001e84:	4641      	mov	r1, r8
 8001e86:	40d8      	lsrs	r0, r3
 8001e88:	40d9      	lsrs	r1, r3
 8001e8a:	4302      	orrs	r2, r0
 8001e8c:	432a      	orrs	r2, r5
 8001e8e:	000b      	movs	r3, r1
 8001e90:	0751      	lsls	r1, r2, #29
 8001e92:	d100      	bne.n	8001e96 <__aeabi_ddiv+0x56e>
 8001e94:	e751      	b.n	8001d3a <__aeabi_ddiv+0x412>
 8001e96:	210f      	movs	r1, #15
 8001e98:	4011      	ands	r1, r2
 8001e9a:	2904      	cmp	r1, #4
 8001e9c:	d000      	beq.n	8001ea0 <__aeabi_ddiv+0x578>
 8001e9e:	e746      	b.n	8001d2e <__aeabi_ddiv+0x406>
 8001ea0:	e74b      	b.n	8001d3a <__aeabi_ddiv+0x412>
 8001ea2:	0005      	movs	r5, r0
 8001ea4:	428e      	cmp	r6, r1
 8001ea6:	d000      	beq.n	8001eaa <__aeabi_ddiv+0x582>
 8001ea8:	e66a      	b.n	8001b80 <__aeabi_ddiv+0x258>
 8001eaa:	9a00      	ldr	r2, [sp, #0]
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_ddiv+0x58a>
 8001eb0:	e666      	b.n	8001b80 <__aeabi_ddiv+0x258>
 8001eb2:	e667      	b.n	8001b84 <__aeabi_ddiv+0x25c>
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <__aeabi_ddiv+0x5e8>)
 8001eb6:	445a      	add	r2, fp
 8001eb8:	2a00      	cmp	r2, #0
 8001eba:	dc00      	bgt.n	8001ebe <__aeabi_ddiv+0x596>
 8001ebc:	e710      	b.n	8001ce0 <__aeabi_ddiv+0x3b8>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	2500      	movs	r5, #0
 8001ec2:	4498      	add	r8, r3
 8001ec4:	e667      	b.n	8001b96 <__aeabi_ddiv+0x26e>
 8001ec6:	075d      	lsls	r5, r3, #29
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	0b1c      	lsrs	r4, r3, #12
 8001ecc:	08d2      	lsrs	r2, r2, #3
 8001ece:	2300      	movs	r3, #0
 8001ed0:	4315      	orrs	r5, r2
 8001ed2:	e580      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001ed4:	9800      	ldr	r0, [sp, #0]
 8001ed6:	3d02      	subs	r5, #2
 8001ed8:	0042      	lsls	r2, r0, #1
 8001eda:	4282      	cmp	r2, r0
 8001edc:	41bf      	sbcs	r7, r7
 8001ede:	427f      	negs	r7, r7
 8001ee0:	193c      	adds	r4, r7, r4
 8001ee2:	1936      	adds	r6, r6, r4
 8001ee4:	9200      	str	r2, [sp, #0]
 8001ee6:	e7dd      	b.n	8001ea4 <__aeabi_ddiv+0x57c>
 8001ee8:	2480      	movs	r4, #128	; 0x80
 8001eea:	4643      	mov	r3, r8
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	431c      	orrs	r4, r3
 8001ef0:	0324      	lsls	r4, r4, #12
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001ef4:	0b24      	lsrs	r4, r4, #12
 8001ef6:	e56e      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001ef8:	9a00      	ldr	r2, [sp, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3ea      	bcc.n	8001ed4 <__aeabi_ddiv+0x5ac>
 8001efe:	0005      	movs	r5, r0
 8001f00:	e7d3      	b.n	8001eaa <__aeabi_ddiv+0x582>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff
 8001f08:	0000043e 	.word	0x0000043e
 8001f0c:	0000041e 	.word	0x0000041e
 8001f10:	000003ff 	.word	0x000003ff

08001f14 <__eqdf2>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	464e      	mov	r6, r9
 8001f18:	4645      	mov	r5, r8
 8001f1a:	46de      	mov	lr, fp
 8001f1c:	4657      	mov	r7, sl
 8001f1e:	4690      	mov	r8, r2
 8001f20:	b5e0      	push	{r5, r6, r7, lr}
 8001f22:	0017      	movs	r7, r2
 8001f24:	031a      	lsls	r2, r3, #12
 8001f26:	0b12      	lsrs	r2, r2, #12
 8001f28:	0005      	movs	r5, r0
 8001f2a:	4684      	mov	ip, r0
 8001f2c:	4819      	ldr	r0, [pc, #100]	; (8001f94 <__eqdf2+0x80>)
 8001f2e:	030e      	lsls	r6, r1, #12
 8001f30:	004c      	lsls	r4, r1, #1
 8001f32:	4691      	mov	r9, r2
 8001f34:	005a      	lsls	r2, r3, #1
 8001f36:	0fdb      	lsrs	r3, r3, #31
 8001f38:	469b      	mov	fp, r3
 8001f3a:	0b36      	lsrs	r6, r6, #12
 8001f3c:	0d64      	lsrs	r4, r4, #21
 8001f3e:	0fc9      	lsrs	r1, r1, #31
 8001f40:	0d52      	lsrs	r2, r2, #21
 8001f42:	4284      	cmp	r4, r0
 8001f44:	d019      	beq.n	8001f7a <__eqdf2+0x66>
 8001f46:	4282      	cmp	r2, r0
 8001f48:	d010      	beq.n	8001f6c <__eqdf2+0x58>
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	4294      	cmp	r4, r2
 8001f4e:	d10e      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f50:	454e      	cmp	r6, r9
 8001f52:	d10c      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f54:	2001      	movs	r0, #1
 8001f56:	45c4      	cmp	ip, r8
 8001f58:	d109      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f5a:	4559      	cmp	r1, fp
 8001f5c:	d017      	beq.n	8001f8e <__eqdf2+0x7a>
 8001f5e:	2c00      	cmp	r4, #0
 8001f60:	d105      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f62:	0030      	movs	r0, r6
 8001f64:	4328      	orrs	r0, r5
 8001f66:	1e43      	subs	r3, r0, #1
 8001f68:	4198      	sbcs	r0, r3
 8001f6a:	e000      	b.n	8001f6e <__eqdf2+0x5a>
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f70:	46bb      	mov	fp, r7
 8001f72:	46b2      	mov	sl, r6
 8001f74:	46a9      	mov	r9, r5
 8001f76:	46a0      	mov	r8, r4
 8001f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7a:	0033      	movs	r3, r6
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	432b      	orrs	r3, r5
 8001f80:	d1f5      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f82:	42a2      	cmp	r2, r4
 8001f84:	d1f3      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f86:	464b      	mov	r3, r9
 8001f88:	433b      	orrs	r3, r7
 8001f8a:	d1f0      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f8c:	e7e2      	b.n	8001f54 <__eqdf2+0x40>
 8001f8e:	2000      	movs	r0, #0
 8001f90:	e7ed      	b.n	8001f6e <__eqdf2+0x5a>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	000007ff 	.word	0x000007ff

08001f98 <__gedf2>:
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	4647      	mov	r7, r8
 8001f9c:	46ce      	mov	lr, r9
 8001f9e:	0004      	movs	r4, r0
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	0016      	movs	r6, r2
 8001fa4:	031b      	lsls	r3, r3, #12
 8001fa6:	0b1b      	lsrs	r3, r3, #12
 8001fa8:	4d2d      	ldr	r5, [pc, #180]	; (8002060 <__gedf2+0xc8>)
 8001faa:	004a      	lsls	r2, r1, #1
 8001fac:	4699      	mov	r9, r3
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	0043      	lsls	r3, r0, #1
 8001fb2:	030f      	lsls	r7, r1, #12
 8001fb4:	46a4      	mov	ip, r4
 8001fb6:	46b0      	mov	r8, r6
 8001fb8:	0b3f      	lsrs	r7, r7, #12
 8001fba:	0d52      	lsrs	r2, r2, #21
 8001fbc:	0fc9      	lsrs	r1, r1, #31
 8001fbe:	0d5b      	lsrs	r3, r3, #21
 8001fc0:	0fc0      	lsrs	r0, r0, #31
 8001fc2:	42aa      	cmp	r2, r5
 8001fc4:	d021      	beq.n	800200a <__gedf2+0x72>
 8001fc6:	42ab      	cmp	r3, r5
 8001fc8:	d013      	beq.n	8001ff2 <__gedf2+0x5a>
 8001fca:	2a00      	cmp	r2, #0
 8001fcc:	d122      	bne.n	8002014 <__gedf2+0x7c>
 8001fce:	433c      	orrs	r4, r7
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <__gedf2+0x42>
 8001fd4:	464d      	mov	r5, r9
 8001fd6:	432e      	orrs	r6, r5
 8001fd8:	d022      	beq.n	8002020 <__gedf2+0x88>
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	d010      	beq.n	8002000 <__gedf2+0x68>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d022      	beq.n	8002028 <__gedf2+0x90>
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	3901      	subs	r1, #1
 8001fe6:	4008      	ands	r0, r1
 8001fe8:	3801      	subs	r0, #1
 8001fea:	bcc0      	pop	{r6, r7}
 8001fec:	46b9      	mov	r9, r7
 8001fee:	46b0      	mov	r8, r6
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff2:	464d      	mov	r5, r9
 8001ff4:	432e      	orrs	r6, r5
 8001ff6:	d129      	bne.n	800204c <__gedf2+0xb4>
 8001ff8:	2a00      	cmp	r2, #0
 8001ffa:	d1f0      	bne.n	8001fde <__gedf2+0x46>
 8001ffc:	433c      	orrs	r4, r7
 8001ffe:	d1ee      	bne.n	8001fde <__gedf2+0x46>
 8002000:	2800      	cmp	r0, #0
 8002002:	d1f2      	bne.n	8001fea <__gedf2+0x52>
 8002004:	2001      	movs	r0, #1
 8002006:	4240      	negs	r0, r0
 8002008:	e7ef      	b.n	8001fea <__gedf2+0x52>
 800200a:	003d      	movs	r5, r7
 800200c:	4325      	orrs	r5, r4
 800200e:	d11d      	bne.n	800204c <__gedf2+0xb4>
 8002010:	4293      	cmp	r3, r2
 8002012:	d0ee      	beq.n	8001ff2 <__gedf2+0x5a>
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1e2      	bne.n	8001fde <__gedf2+0x46>
 8002018:	464c      	mov	r4, r9
 800201a:	4326      	orrs	r6, r4
 800201c:	d1df      	bne.n	8001fde <__gedf2+0x46>
 800201e:	e7e0      	b.n	8001fe2 <__gedf2+0x4a>
 8002020:	2000      	movs	r0, #0
 8002022:	2c00      	cmp	r4, #0
 8002024:	d0e1      	beq.n	8001fea <__gedf2+0x52>
 8002026:	e7dc      	b.n	8001fe2 <__gedf2+0x4a>
 8002028:	429a      	cmp	r2, r3
 800202a:	dc0a      	bgt.n	8002042 <__gedf2+0xaa>
 800202c:	dbe8      	blt.n	8002000 <__gedf2+0x68>
 800202e:	454f      	cmp	r7, r9
 8002030:	d8d7      	bhi.n	8001fe2 <__gedf2+0x4a>
 8002032:	d00e      	beq.n	8002052 <__gedf2+0xba>
 8002034:	2000      	movs	r0, #0
 8002036:	454f      	cmp	r7, r9
 8002038:	d2d7      	bcs.n	8001fea <__gedf2+0x52>
 800203a:	2900      	cmp	r1, #0
 800203c:	d0e2      	beq.n	8002004 <__gedf2+0x6c>
 800203e:	0008      	movs	r0, r1
 8002040:	e7d3      	b.n	8001fea <__gedf2+0x52>
 8002042:	4243      	negs	r3, r0
 8002044:	4158      	adcs	r0, r3
 8002046:	0040      	lsls	r0, r0, #1
 8002048:	3801      	subs	r0, #1
 800204a:	e7ce      	b.n	8001fea <__gedf2+0x52>
 800204c:	2002      	movs	r0, #2
 800204e:	4240      	negs	r0, r0
 8002050:	e7cb      	b.n	8001fea <__gedf2+0x52>
 8002052:	45c4      	cmp	ip, r8
 8002054:	d8c5      	bhi.n	8001fe2 <__gedf2+0x4a>
 8002056:	2000      	movs	r0, #0
 8002058:	45c4      	cmp	ip, r8
 800205a:	d2c6      	bcs.n	8001fea <__gedf2+0x52>
 800205c:	e7ed      	b.n	800203a <__gedf2+0xa2>
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	000007ff 	.word	0x000007ff

08002064 <__ledf2>:
 8002064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002066:	4647      	mov	r7, r8
 8002068:	46ce      	mov	lr, r9
 800206a:	0004      	movs	r4, r0
 800206c:	0018      	movs	r0, r3
 800206e:	0016      	movs	r6, r2
 8002070:	031b      	lsls	r3, r3, #12
 8002072:	0b1b      	lsrs	r3, r3, #12
 8002074:	4d2c      	ldr	r5, [pc, #176]	; (8002128 <__ledf2+0xc4>)
 8002076:	004a      	lsls	r2, r1, #1
 8002078:	4699      	mov	r9, r3
 800207a:	b580      	push	{r7, lr}
 800207c:	0043      	lsls	r3, r0, #1
 800207e:	030f      	lsls	r7, r1, #12
 8002080:	46a4      	mov	ip, r4
 8002082:	46b0      	mov	r8, r6
 8002084:	0b3f      	lsrs	r7, r7, #12
 8002086:	0d52      	lsrs	r2, r2, #21
 8002088:	0fc9      	lsrs	r1, r1, #31
 800208a:	0d5b      	lsrs	r3, r3, #21
 800208c:	0fc0      	lsrs	r0, r0, #31
 800208e:	42aa      	cmp	r2, r5
 8002090:	d00d      	beq.n	80020ae <__ledf2+0x4a>
 8002092:	42ab      	cmp	r3, r5
 8002094:	d010      	beq.n	80020b8 <__ledf2+0x54>
 8002096:	2a00      	cmp	r2, #0
 8002098:	d127      	bne.n	80020ea <__ledf2+0x86>
 800209a:	433c      	orrs	r4, r7
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <__ledf2+0x60>
 80020a0:	464d      	mov	r5, r9
 80020a2:	432e      	orrs	r6, r5
 80020a4:	d10e      	bne.n	80020c4 <__ledf2+0x60>
 80020a6:	2000      	movs	r0, #0
 80020a8:	2c00      	cmp	r4, #0
 80020aa:	d015      	beq.n	80020d8 <__ledf2+0x74>
 80020ac:	e00e      	b.n	80020cc <__ledf2+0x68>
 80020ae:	003d      	movs	r5, r7
 80020b0:	4325      	orrs	r5, r4
 80020b2:	d110      	bne.n	80020d6 <__ledf2+0x72>
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d118      	bne.n	80020ea <__ledf2+0x86>
 80020b8:	464d      	mov	r5, r9
 80020ba:	432e      	orrs	r6, r5
 80020bc:	d10b      	bne.n	80020d6 <__ledf2+0x72>
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d102      	bne.n	80020c8 <__ledf2+0x64>
 80020c2:	433c      	orrs	r4, r7
 80020c4:	2c00      	cmp	r4, #0
 80020c6:	d00b      	beq.n	80020e0 <__ledf2+0x7c>
 80020c8:	4281      	cmp	r1, r0
 80020ca:	d014      	beq.n	80020f6 <__ledf2+0x92>
 80020cc:	2002      	movs	r0, #2
 80020ce:	3901      	subs	r1, #1
 80020d0:	4008      	ands	r0, r1
 80020d2:	3801      	subs	r0, #1
 80020d4:	e000      	b.n	80020d8 <__ledf2+0x74>
 80020d6:	2002      	movs	r0, #2
 80020d8:	bcc0      	pop	{r6, r7}
 80020da:	46b9      	mov	r9, r7
 80020dc:	46b0      	mov	r8, r6
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d1f9      	bne.n	80020d8 <__ledf2+0x74>
 80020e4:	2001      	movs	r0, #1
 80020e6:	4240      	negs	r0, r0
 80020e8:	e7f6      	b.n	80020d8 <__ledf2+0x74>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ec      	bne.n	80020c8 <__ledf2+0x64>
 80020ee:	464c      	mov	r4, r9
 80020f0:	4326      	orrs	r6, r4
 80020f2:	d1e9      	bne.n	80020c8 <__ledf2+0x64>
 80020f4:	e7ea      	b.n	80020cc <__ledf2+0x68>
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dd04      	ble.n	8002104 <__ledf2+0xa0>
 80020fa:	4243      	negs	r3, r0
 80020fc:	4158      	adcs	r0, r3
 80020fe:	0040      	lsls	r0, r0, #1
 8002100:	3801      	subs	r0, #1
 8002102:	e7e9      	b.n	80020d8 <__ledf2+0x74>
 8002104:	429a      	cmp	r2, r3
 8002106:	dbeb      	blt.n	80020e0 <__ledf2+0x7c>
 8002108:	454f      	cmp	r7, r9
 800210a:	d8df      	bhi.n	80020cc <__ledf2+0x68>
 800210c:	d006      	beq.n	800211c <__ledf2+0xb8>
 800210e:	2000      	movs	r0, #0
 8002110:	454f      	cmp	r7, r9
 8002112:	d2e1      	bcs.n	80020d8 <__ledf2+0x74>
 8002114:	2900      	cmp	r1, #0
 8002116:	d0e5      	beq.n	80020e4 <__ledf2+0x80>
 8002118:	0008      	movs	r0, r1
 800211a:	e7dd      	b.n	80020d8 <__ledf2+0x74>
 800211c:	45c4      	cmp	ip, r8
 800211e:	d8d5      	bhi.n	80020cc <__ledf2+0x68>
 8002120:	2000      	movs	r0, #0
 8002122:	45c4      	cmp	ip, r8
 8002124:	d2d8      	bcs.n	80020d8 <__ledf2+0x74>
 8002126:	e7f5      	b.n	8002114 <__ledf2+0xb0>
 8002128:	000007ff 	.word	0x000007ff

0800212c <__aeabi_dmul>:
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	4657      	mov	r7, sl
 8002130:	464e      	mov	r6, r9
 8002132:	4645      	mov	r5, r8
 8002134:	46de      	mov	lr, fp
 8002136:	b5e0      	push	{r5, r6, r7, lr}
 8002138:	4698      	mov	r8, r3
 800213a:	030c      	lsls	r4, r1, #12
 800213c:	004b      	lsls	r3, r1, #1
 800213e:	0006      	movs	r6, r0
 8002140:	4692      	mov	sl, r2
 8002142:	b087      	sub	sp, #28
 8002144:	0b24      	lsrs	r4, r4, #12
 8002146:	0d5b      	lsrs	r3, r3, #21
 8002148:	0fcf      	lsrs	r7, r1, #31
 800214a:	2b00      	cmp	r3, #0
 800214c:	d100      	bne.n	8002150 <__aeabi_dmul+0x24>
 800214e:	e15c      	b.n	800240a <__aeabi_dmul+0x2de>
 8002150:	4ad9      	ldr	r2, [pc, #868]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d100      	bne.n	8002158 <__aeabi_dmul+0x2c>
 8002156:	e175      	b.n	8002444 <__aeabi_dmul+0x318>
 8002158:	0f42      	lsrs	r2, r0, #29
 800215a:	00e4      	lsls	r4, r4, #3
 800215c:	4314      	orrs	r4, r2
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	0412      	lsls	r2, r2, #16
 8002162:	4314      	orrs	r4, r2
 8002164:	4ad5      	ldr	r2, [pc, #852]	; (80024bc <__aeabi_dmul+0x390>)
 8002166:	00c5      	lsls	r5, r0, #3
 8002168:	4694      	mov	ip, r2
 800216a:	4463      	add	r3, ip
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	4699      	mov	r9, r3
 8002172:	469b      	mov	fp, r3
 8002174:	4643      	mov	r3, r8
 8002176:	4642      	mov	r2, r8
 8002178:	031e      	lsls	r6, r3, #12
 800217a:	0fd2      	lsrs	r2, r2, #31
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4650      	mov	r0, sl
 8002180:	4690      	mov	r8, r2
 8002182:	0b36      	lsrs	r6, r6, #12
 8002184:	0d5b      	lsrs	r3, r3, #21
 8002186:	d100      	bne.n	800218a <__aeabi_dmul+0x5e>
 8002188:	e120      	b.n	80023cc <__aeabi_dmul+0x2a0>
 800218a:	4acb      	ldr	r2, [pc, #812]	; (80024b8 <__aeabi_dmul+0x38c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d100      	bne.n	8002192 <__aeabi_dmul+0x66>
 8002190:	e162      	b.n	8002458 <__aeabi_dmul+0x32c>
 8002192:	49ca      	ldr	r1, [pc, #808]	; (80024bc <__aeabi_dmul+0x390>)
 8002194:	0f42      	lsrs	r2, r0, #29
 8002196:	468c      	mov	ip, r1
 8002198:	9900      	ldr	r1, [sp, #0]
 800219a:	4463      	add	r3, ip
 800219c:	00f6      	lsls	r6, r6, #3
 800219e:	468c      	mov	ip, r1
 80021a0:	4316      	orrs	r6, r2
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	449c      	add	ip, r3
 80021a6:	0412      	lsls	r2, r2, #16
 80021a8:	4663      	mov	r3, ip
 80021aa:	4316      	orrs	r6, r2
 80021ac:	00c2      	lsls	r2, r0, #3
 80021ae:	2000      	movs	r0, #0
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	9900      	ldr	r1, [sp, #0]
 80021b4:	4643      	mov	r3, r8
 80021b6:	3101      	adds	r1, #1
 80021b8:	468c      	mov	ip, r1
 80021ba:	4649      	mov	r1, r9
 80021bc:	407b      	eors	r3, r7
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	290f      	cmp	r1, #15
 80021c2:	d826      	bhi.n	8002212 <__aeabi_dmul+0xe6>
 80021c4:	4bbe      	ldr	r3, [pc, #760]	; (80024c0 <__aeabi_dmul+0x394>)
 80021c6:	0089      	lsls	r1, r1, #2
 80021c8:	5859      	ldr	r1, [r3, r1]
 80021ca:	468f      	mov	pc, r1
 80021cc:	4643      	mov	r3, r8
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	0034      	movs	r4, r6
 80021d2:	0015      	movs	r5, r2
 80021d4:	4683      	mov	fp, r0
 80021d6:	465b      	mov	r3, fp
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d016      	beq.n	800220a <__aeabi_dmul+0xde>
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d100      	bne.n	80021e2 <__aeabi_dmul+0xb6>
 80021e0:	e203      	b.n	80025ea <__aeabi_dmul+0x4be>
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dmul+0xbc>
 80021e6:	e0cd      	b.n	8002384 <__aeabi_dmul+0x258>
 80021e8:	2200      	movs	r2, #0
 80021ea:	2400      	movs	r4, #0
 80021ec:	2500      	movs	r5, #0
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	0512      	lsls	r2, r2, #20
 80021f2:	4322      	orrs	r2, r4
 80021f4:	07db      	lsls	r3, r3, #31
 80021f6:	431a      	orrs	r2, r3
 80021f8:	0028      	movs	r0, r5
 80021fa:	0011      	movs	r1, r2
 80021fc:	b007      	add	sp, #28
 80021fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002200:	46bb      	mov	fp, r7
 8002202:	46b2      	mov	sl, r6
 8002204:	46a9      	mov	r9, r5
 8002206:	46a0      	mov	r8, r4
 8002208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220a:	2400      	movs	r4, #0
 800220c:	2500      	movs	r5, #0
 800220e:	4aaa      	ldr	r2, [pc, #680]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002210:	e7ed      	b.n	80021ee <__aeabi_dmul+0xc2>
 8002212:	0c28      	lsrs	r0, r5, #16
 8002214:	042d      	lsls	r5, r5, #16
 8002216:	0c2d      	lsrs	r5, r5, #16
 8002218:	002b      	movs	r3, r5
 800221a:	0c11      	lsrs	r1, r2, #16
 800221c:	0412      	lsls	r2, r2, #16
 800221e:	0c12      	lsrs	r2, r2, #16
 8002220:	4353      	muls	r3, r2
 8002222:	4698      	mov	r8, r3
 8002224:	0013      	movs	r3, r2
 8002226:	002f      	movs	r7, r5
 8002228:	4343      	muls	r3, r0
 800222a:	4699      	mov	r9, r3
 800222c:	434f      	muls	r7, r1
 800222e:	444f      	add	r7, r9
 8002230:	46bb      	mov	fp, r7
 8002232:	4647      	mov	r7, r8
 8002234:	000b      	movs	r3, r1
 8002236:	0c3f      	lsrs	r7, r7, #16
 8002238:	46ba      	mov	sl, r7
 800223a:	4343      	muls	r3, r0
 800223c:	44da      	add	sl, fp
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	45d1      	cmp	r9, sl
 8002242:	d904      	bls.n	800224e <__aeabi_dmul+0x122>
 8002244:	2780      	movs	r7, #128	; 0x80
 8002246:	027f      	lsls	r7, r7, #9
 8002248:	46b9      	mov	r9, r7
 800224a:	444b      	add	r3, r9
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	4653      	mov	r3, sl
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	469b      	mov	fp, r3
 8002254:	4653      	mov	r3, sl
 8002256:	041f      	lsls	r7, r3, #16
 8002258:	4643      	mov	r3, r8
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	4698      	mov	r8, r3
 8002260:	003b      	movs	r3, r7
 8002262:	4443      	add	r3, r8
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	0c33      	lsrs	r3, r6, #16
 8002268:	0436      	lsls	r6, r6, #16
 800226a:	0c36      	lsrs	r6, r6, #16
 800226c:	4698      	mov	r8, r3
 800226e:	0033      	movs	r3, r6
 8002270:	4343      	muls	r3, r0
 8002272:	4699      	mov	r9, r3
 8002274:	4643      	mov	r3, r8
 8002276:	4343      	muls	r3, r0
 8002278:	002f      	movs	r7, r5
 800227a:	469a      	mov	sl, r3
 800227c:	4643      	mov	r3, r8
 800227e:	4377      	muls	r7, r6
 8002280:	435d      	muls	r5, r3
 8002282:	0c38      	lsrs	r0, r7, #16
 8002284:	444d      	add	r5, r9
 8002286:	1945      	adds	r5, r0, r5
 8002288:	45a9      	cmp	r9, r5
 800228a:	d903      	bls.n	8002294 <__aeabi_dmul+0x168>
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	025b      	lsls	r3, r3, #9
 8002290:	4699      	mov	r9, r3
 8002292:	44ca      	add	sl, r9
 8002294:	043f      	lsls	r7, r7, #16
 8002296:	0c28      	lsrs	r0, r5, #16
 8002298:	0c3f      	lsrs	r7, r7, #16
 800229a:	042d      	lsls	r5, r5, #16
 800229c:	19ed      	adds	r5, r5, r7
 800229e:	0c27      	lsrs	r7, r4, #16
 80022a0:	0424      	lsls	r4, r4, #16
 80022a2:	0c24      	lsrs	r4, r4, #16
 80022a4:	0003      	movs	r3, r0
 80022a6:	0020      	movs	r0, r4
 80022a8:	4350      	muls	r0, r2
 80022aa:	437a      	muls	r2, r7
 80022ac:	4691      	mov	r9, r2
 80022ae:	003a      	movs	r2, r7
 80022b0:	4453      	add	r3, sl
 80022b2:	9305      	str	r3, [sp, #20]
 80022b4:	0c03      	lsrs	r3, r0, #16
 80022b6:	469a      	mov	sl, r3
 80022b8:	434a      	muls	r2, r1
 80022ba:	4361      	muls	r1, r4
 80022bc:	4449      	add	r1, r9
 80022be:	4451      	add	r1, sl
 80022c0:	44ab      	add	fp, r5
 80022c2:	4589      	cmp	r9, r1
 80022c4:	d903      	bls.n	80022ce <__aeabi_dmul+0x1a2>
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	4699      	mov	r9, r3
 80022cc:	444a      	add	r2, r9
 80022ce:	0400      	lsls	r0, r0, #16
 80022d0:	0c0b      	lsrs	r3, r1, #16
 80022d2:	0c00      	lsrs	r0, r0, #16
 80022d4:	0409      	lsls	r1, r1, #16
 80022d6:	1809      	adds	r1, r1, r0
 80022d8:	0020      	movs	r0, r4
 80022da:	4699      	mov	r9, r3
 80022dc:	4643      	mov	r3, r8
 80022de:	4370      	muls	r0, r6
 80022e0:	435c      	muls	r4, r3
 80022e2:	437e      	muls	r6, r7
 80022e4:	435f      	muls	r7, r3
 80022e6:	0c03      	lsrs	r3, r0, #16
 80022e8:	4698      	mov	r8, r3
 80022ea:	19a4      	adds	r4, r4, r6
 80022ec:	4444      	add	r4, r8
 80022ee:	444a      	add	r2, r9
 80022f0:	9703      	str	r7, [sp, #12]
 80022f2:	42a6      	cmp	r6, r4
 80022f4:	d904      	bls.n	8002300 <__aeabi_dmul+0x1d4>
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	025b      	lsls	r3, r3, #9
 80022fa:	4698      	mov	r8, r3
 80022fc:	4447      	add	r7, r8
 80022fe:	9703      	str	r7, [sp, #12]
 8002300:	0423      	lsls	r3, r4, #16
 8002302:	9e02      	ldr	r6, [sp, #8]
 8002304:	469a      	mov	sl, r3
 8002306:	9b05      	ldr	r3, [sp, #20]
 8002308:	445e      	add	r6, fp
 800230a:	4698      	mov	r8, r3
 800230c:	42ae      	cmp	r6, r5
 800230e:	41ad      	sbcs	r5, r5
 8002310:	1876      	adds	r6, r6, r1
 8002312:	428e      	cmp	r6, r1
 8002314:	4189      	sbcs	r1, r1
 8002316:	0400      	lsls	r0, r0, #16
 8002318:	0c00      	lsrs	r0, r0, #16
 800231a:	4450      	add	r0, sl
 800231c:	4440      	add	r0, r8
 800231e:	426d      	negs	r5, r5
 8002320:	1947      	adds	r7, r0, r5
 8002322:	46b8      	mov	r8, r7
 8002324:	4693      	mov	fp, r2
 8002326:	4249      	negs	r1, r1
 8002328:	4689      	mov	r9, r1
 800232a:	44c3      	add	fp, r8
 800232c:	44d9      	add	r9, fp
 800232e:	4298      	cmp	r0, r3
 8002330:	4180      	sbcs	r0, r0
 8002332:	45a8      	cmp	r8, r5
 8002334:	41ad      	sbcs	r5, r5
 8002336:	4593      	cmp	fp, r2
 8002338:	4192      	sbcs	r2, r2
 800233a:	4589      	cmp	r9, r1
 800233c:	4189      	sbcs	r1, r1
 800233e:	426d      	negs	r5, r5
 8002340:	4240      	negs	r0, r0
 8002342:	4328      	orrs	r0, r5
 8002344:	0c24      	lsrs	r4, r4, #16
 8002346:	4252      	negs	r2, r2
 8002348:	4249      	negs	r1, r1
 800234a:	430a      	orrs	r2, r1
 800234c:	9b03      	ldr	r3, [sp, #12]
 800234e:	1900      	adds	r0, r0, r4
 8002350:	1880      	adds	r0, r0, r2
 8002352:	18c7      	adds	r7, r0, r3
 8002354:	464b      	mov	r3, r9
 8002356:	0ddc      	lsrs	r4, r3, #23
 8002358:	9b04      	ldr	r3, [sp, #16]
 800235a:	0275      	lsls	r5, r6, #9
 800235c:	431d      	orrs	r5, r3
 800235e:	1e6a      	subs	r2, r5, #1
 8002360:	4195      	sbcs	r5, r2
 8002362:	464b      	mov	r3, r9
 8002364:	0df6      	lsrs	r6, r6, #23
 8002366:	027f      	lsls	r7, r7, #9
 8002368:	4335      	orrs	r5, r6
 800236a:	025a      	lsls	r2, r3, #9
 800236c:	433c      	orrs	r4, r7
 800236e:	4315      	orrs	r5, r2
 8002370:	01fb      	lsls	r3, r7, #7
 8002372:	d400      	bmi.n	8002376 <__aeabi_dmul+0x24a>
 8002374:	e11c      	b.n	80025b0 <__aeabi_dmul+0x484>
 8002376:	2101      	movs	r1, #1
 8002378:	086a      	lsrs	r2, r5, #1
 800237a:	400d      	ands	r5, r1
 800237c:	4315      	orrs	r5, r2
 800237e:	07e2      	lsls	r2, r4, #31
 8002380:	4315      	orrs	r5, r2
 8002382:	0864      	lsrs	r4, r4, #1
 8002384:	494f      	ldr	r1, [pc, #316]	; (80024c4 <__aeabi_dmul+0x398>)
 8002386:	4461      	add	r1, ip
 8002388:	2900      	cmp	r1, #0
 800238a:	dc00      	bgt.n	800238e <__aeabi_dmul+0x262>
 800238c:	e0b0      	b.n	80024f0 <__aeabi_dmul+0x3c4>
 800238e:	076b      	lsls	r3, r5, #29
 8002390:	d009      	beq.n	80023a6 <__aeabi_dmul+0x27a>
 8002392:	220f      	movs	r2, #15
 8002394:	402a      	ands	r2, r5
 8002396:	2a04      	cmp	r2, #4
 8002398:	d005      	beq.n	80023a6 <__aeabi_dmul+0x27a>
 800239a:	1d2a      	adds	r2, r5, #4
 800239c:	42aa      	cmp	r2, r5
 800239e:	41ad      	sbcs	r5, r5
 80023a0:	426d      	negs	r5, r5
 80023a2:	1964      	adds	r4, r4, r5
 80023a4:	0015      	movs	r5, r2
 80023a6:	01e3      	lsls	r3, r4, #7
 80023a8:	d504      	bpl.n	80023b4 <__aeabi_dmul+0x288>
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	4a46      	ldr	r2, [pc, #280]	; (80024c8 <__aeabi_dmul+0x39c>)
 80023ae:	00c9      	lsls	r1, r1, #3
 80023b0:	4014      	ands	r4, r2
 80023b2:	4461      	add	r1, ip
 80023b4:	4a45      	ldr	r2, [pc, #276]	; (80024cc <__aeabi_dmul+0x3a0>)
 80023b6:	4291      	cmp	r1, r2
 80023b8:	dd00      	ble.n	80023bc <__aeabi_dmul+0x290>
 80023ba:	e726      	b.n	800220a <__aeabi_dmul+0xde>
 80023bc:	0762      	lsls	r2, r4, #29
 80023be:	08ed      	lsrs	r5, r5, #3
 80023c0:	0264      	lsls	r4, r4, #9
 80023c2:	0549      	lsls	r1, r1, #21
 80023c4:	4315      	orrs	r5, r2
 80023c6:	0b24      	lsrs	r4, r4, #12
 80023c8:	0d4a      	lsrs	r2, r1, #21
 80023ca:	e710      	b.n	80021ee <__aeabi_dmul+0xc2>
 80023cc:	4652      	mov	r2, sl
 80023ce:	4332      	orrs	r2, r6
 80023d0:	d100      	bne.n	80023d4 <__aeabi_dmul+0x2a8>
 80023d2:	e07f      	b.n	80024d4 <__aeabi_dmul+0x3a8>
 80023d4:	2e00      	cmp	r6, #0
 80023d6:	d100      	bne.n	80023da <__aeabi_dmul+0x2ae>
 80023d8:	e0dc      	b.n	8002594 <__aeabi_dmul+0x468>
 80023da:	0030      	movs	r0, r6
 80023dc:	f000 fe1e 	bl	800301c <__clzsi2>
 80023e0:	0002      	movs	r2, r0
 80023e2:	3a0b      	subs	r2, #11
 80023e4:	231d      	movs	r3, #29
 80023e6:	0001      	movs	r1, r0
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	4652      	mov	r2, sl
 80023ec:	3908      	subs	r1, #8
 80023ee:	40da      	lsrs	r2, r3
 80023f0:	408e      	lsls	r6, r1
 80023f2:	4316      	orrs	r6, r2
 80023f4:	4652      	mov	r2, sl
 80023f6:	408a      	lsls	r2, r1
 80023f8:	9b00      	ldr	r3, [sp, #0]
 80023fa:	4935      	ldr	r1, [pc, #212]	; (80024d0 <__aeabi_dmul+0x3a4>)
 80023fc:	1a18      	subs	r0, r3, r0
 80023fe:	0003      	movs	r3, r0
 8002400:	468c      	mov	ip, r1
 8002402:	4463      	add	r3, ip
 8002404:	2000      	movs	r0, #0
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	e6d3      	b.n	80021b2 <__aeabi_dmul+0x86>
 800240a:	0025      	movs	r5, r4
 800240c:	4305      	orrs	r5, r0
 800240e:	d04a      	beq.n	80024a6 <__aeabi_dmul+0x37a>
 8002410:	2c00      	cmp	r4, #0
 8002412:	d100      	bne.n	8002416 <__aeabi_dmul+0x2ea>
 8002414:	e0b0      	b.n	8002578 <__aeabi_dmul+0x44c>
 8002416:	0020      	movs	r0, r4
 8002418:	f000 fe00 	bl	800301c <__clzsi2>
 800241c:	0001      	movs	r1, r0
 800241e:	0002      	movs	r2, r0
 8002420:	390b      	subs	r1, #11
 8002422:	231d      	movs	r3, #29
 8002424:	0010      	movs	r0, r2
 8002426:	1a5b      	subs	r3, r3, r1
 8002428:	0031      	movs	r1, r6
 800242a:	0035      	movs	r5, r6
 800242c:	3808      	subs	r0, #8
 800242e:	4084      	lsls	r4, r0
 8002430:	40d9      	lsrs	r1, r3
 8002432:	4085      	lsls	r5, r0
 8002434:	430c      	orrs	r4, r1
 8002436:	4826      	ldr	r0, [pc, #152]	; (80024d0 <__aeabi_dmul+0x3a4>)
 8002438:	1a83      	subs	r3, r0, r2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2300      	movs	r3, #0
 800243e:	4699      	mov	r9, r3
 8002440:	469b      	mov	fp, r3
 8002442:	e697      	b.n	8002174 <__aeabi_dmul+0x48>
 8002444:	0005      	movs	r5, r0
 8002446:	4325      	orrs	r5, r4
 8002448:	d126      	bne.n	8002498 <__aeabi_dmul+0x36c>
 800244a:	2208      	movs	r2, #8
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2302      	movs	r3, #2
 8002450:	2400      	movs	r4, #0
 8002452:	4691      	mov	r9, r2
 8002454:	469b      	mov	fp, r3
 8002456:	e68d      	b.n	8002174 <__aeabi_dmul+0x48>
 8002458:	4652      	mov	r2, sl
 800245a:	9b00      	ldr	r3, [sp, #0]
 800245c:	4332      	orrs	r2, r6
 800245e:	d110      	bne.n	8002482 <__aeabi_dmul+0x356>
 8002460:	4915      	ldr	r1, [pc, #84]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002462:	2600      	movs	r6, #0
 8002464:	468c      	mov	ip, r1
 8002466:	4463      	add	r3, ip
 8002468:	4649      	mov	r1, r9
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2302      	movs	r3, #2
 800246e:	4319      	orrs	r1, r3
 8002470:	4689      	mov	r9, r1
 8002472:	2002      	movs	r0, #2
 8002474:	e69d      	b.n	80021b2 <__aeabi_dmul+0x86>
 8002476:	465b      	mov	r3, fp
 8002478:	9701      	str	r7, [sp, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d000      	beq.n	8002480 <__aeabi_dmul+0x354>
 800247e:	e6ad      	b.n	80021dc <__aeabi_dmul+0xb0>
 8002480:	e6c3      	b.n	800220a <__aeabi_dmul+0xde>
 8002482:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002484:	2003      	movs	r0, #3
 8002486:	4694      	mov	ip, r2
 8002488:	4463      	add	r3, ip
 800248a:	464a      	mov	r2, r9
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2303      	movs	r3, #3
 8002490:	431a      	orrs	r2, r3
 8002492:	4691      	mov	r9, r2
 8002494:	4652      	mov	r2, sl
 8002496:	e68c      	b.n	80021b2 <__aeabi_dmul+0x86>
 8002498:	220c      	movs	r2, #12
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2303      	movs	r3, #3
 800249e:	0005      	movs	r5, r0
 80024a0:	4691      	mov	r9, r2
 80024a2:	469b      	mov	fp, r3
 80024a4:	e666      	b.n	8002174 <__aeabi_dmul+0x48>
 80024a6:	2304      	movs	r3, #4
 80024a8:	4699      	mov	r9, r3
 80024aa:	2300      	movs	r3, #0
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	2400      	movs	r4, #0
 80024b2:	469b      	mov	fp, r3
 80024b4:	e65e      	b.n	8002174 <__aeabi_dmul+0x48>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	000007ff 	.word	0x000007ff
 80024bc:	fffffc01 	.word	0xfffffc01
 80024c0:	0800b198 	.word	0x0800b198
 80024c4:	000003ff 	.word	0x000003ff
 80024c8:	feffffff 	.word	0xfeffffff
 80024cc:	000007fe 	.word	0x000007fe
 80024d0:	fffffc0d 	.word	0xfffffc0d
 80024d4:	4649      	mov	r1, r9
 80024d6:	2301      	movs	r3, #1
 80024d8:	4319      	orrs	r1, r3
 80024da:	4689      	mov	r9, r1
 80024dc:	2600      	movs	r6, #0
 80024de:	2001      	movs	r0, #1
 80024e0:	e667      	b.n	80021b2 <__aeabi_dmul+0x86>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2480      	movs	r4, #128	; 0x80
 80024e6:	2500      	movs	r5, #0
 80024e8:	4a43      	ldr	r2, [pc, #268]	; (80025f8 <__aeabi_dmul+0x4cc>)
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	0324      	lsls	r4, r4, #12
 80024ee:	e67e      	b.n	80021ee <__aeabi_dmul+0xc2>
 80024f0:	2001      	movs	r0, #1
 80024f2:	1a40      	subs	r0, r0, r1
 80024f4:	2838      	cmp	r0, #56	; 0x38
 80024f6:	dd00      	ble.n	80024fa <__aeabi_dmul+0x3ce>
 80024f8:	e676      	b.n	80021e8 <__aeabi_dmul+0xbc>
 80024fa:	281f      	cmp	r0, #31
 80024fc:	dd5b      	ble.n	80025b6 <__aeabi_dmul+0x48a>
 80024fe:	221f      	movs	r2, #31
 8002500:	0023      	movs	r3, r4
 8002502:	4252      	negs	r2, r2
 8002504:	1a51      	subs	r1, r2, r1
 8002506:	40cb      	lsrs	r3, r1
 8002508:	0019      	movs	r1, r3
 800250a:	2820      	cmp	r0, #32
 800250c:	d003      	beq.n	8002516 <__aeabi_dmul+0x3ea>
 800250e:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <__aeabi_dmul+0x4d0>)
 8002510:	4462      	add	r2, ip
 8002512:	4094      	lsls	r4, r2
 8002514:	4325      	orrs	r5, r4
 8002516:	1e6a      	subs	r2, r5, #1
 8002518:	4195      	sbcs	r5, r2
 800251a:	002a      	movs	r2, r5
 800251c:	430a      	orrs	r2, r1
 800251e:	2107      	movs	r1, #7
 8002520:	000d      	movs	r5, r1
 8002522:	2400      	movs	r4, #0
 8002524:	4015      	ands	r5, r2
 8002526:	4211      	tst	r1, r2
 8002528:	d05b      	beq.n	80025e2 <__aeabi_dmul+0x4b6>
 800252a:	210f      	movs	r1, #15
 800252c:	2400      	movs	r4, #0
 800252e:	4011      	ands	r1, r2
 8002530:	2904      	cmp	r1, #4
 8002532:	d053      	beq.n	80025dc <__aeabi_dmul+0x4b0>
 8002534:	1d11      	adds	r1, r2, #4
 8002536:	4291      	cmp	r1, r2
 8002538:	4192      	sbcs	r2, r2
 800253a:	4252      	negs	r2, r2
 800253c:	18a4      	adds	r4, r4, r2
 800253e:	000a      	movs	r2, r1
 8002540:	0223      	lsls	r3, r4, #8
 8002542:	d54b      	bpl.n	80025dc <__aeabi_dmul+0x4b0>
 8002544:	2201      	movs	r2, #1
 8002546:	2400      	movs	r4, #0
 8002548:	2500      	movs	r5, #0
 800254a:	e650      	b.n	80021ee <__aeabi_dmul+0xc2>
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	031b      	lsls	r3, r3, #12
 8002550:	421c      	tst	r4, r3
 8002552:	d009      	beq.n	8002568 <__aeabi_dmul+0x43c>
 8002554:	421e      	tst	r6, r3
 8002556:	d107      	bne.n	8002568 <__aeabi_dmul+0x43c>
 8002558:	4333      	orrs	r3, r6
 800255a:	031c      	lsls	r4, r3, #12
 800255c:	4643      	mov	r3, r8
 800255e:	0015      	movs	r5, r2
 8002560:	0b24      	lsrs	r4, r4, #12
 8002562:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <__aeabi_dmul+0x4cc>)
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	e642      	b.n	80021ee <__aeabi_dmul+0xc2>
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	0312      	lsls	r2, r2, #12
 800256c:	4314      	orrs	r4, r2
 800256e:	0324      	lsls	r4, r4, #12
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <__aeabi_dmul+0x4cc>)
 8002572:	0b24      	lsrs	r4, r4, #12
 8002574:	9701      	str	r7, [sp, #4]
 8002576:	e63a      	b.n	80021ee <__aeabi_dmul+0xc2>
 8002578:	f000 fd50 	bl	800301c <__clzsi2>
 800257c:	0001      	movs	r1, r0
 800257e:	0002      	movs	r2, r0
 8002580:	3115      	adds	r1, #21
 8002582:	3220      	adds	r2, #32
 8002584:	291c      	cmp	r1, #28
 8002586:	dc00      	bgt.n	800258a <__aeabi_dmul+0x45e>
 8002588:	e74b      	b.n	8002422 <__aeabi_dmul+0x2f6>
 800258a:	0034      	movs	r4, r6
 800258c:	3808      	subs	r0, #8
 800258e:	2500      	movs	r5, #0
 8002590:	4084      	lsls	r4, r0
 8002592:	e750      	b.n	8002436 <__aeabi_dmul+0x30a>
 8002594:	f000 fd42 	bl	800301c <__clzsi2>
 8002598:	0003      	movs	r3, r0
 800259a:	001a      	movs	r2, r3
 800259c:	3215      	adds	r2, #21
 800259e:	3020      	adds	r0, #32
 80025a0:	2a1c      	cmp	r2, #28
 80025a2:	dc00      	bgt.n	80025a6 <__aeabi_dmul+0x47a>
 80025a4:	e71e      	b.n	80023e4 <__aeabi_dmul+0x2b8>
 80025a6:	4656      	mov	r6, sl
 80025a8:	3b08      	subs	r3, #8
 80025aa:	2200      	movs	r2, #0
 80025ac:	409e      	lsls	r6, r3
 80025ae:	e723      	b.n	80023f8 <__aeabi_dmul+0x2cc>
 80025b0:	9b00      	ldr	r3, [sp, #0]
 80025b2:	469c      	mov	ip, r3
 80025b4:	e6e6      	b.n	8002384 <__aeabi_dmul+0x258>
 80025b6:	4912      	ldr	r1, [pc, #72]	; (8002600 <__aeabi_dmul+0x4d4>)
 80025b8:	0022      	movs	r2, r4
 80025ba:	4461      	add	r1, ip
 80025bc:	002e      	movs	r6, r5
 80025be:	408d      	lsls	r5, r1
 80025c0:	408a      	lsls	r2, r1
 80025c2:	40c6      	lsrs	r6, r0
 80025c4:	1e69      	subs	r1, r5, #1
 80025c6:	418d      	sbcs	r5, r1
 80025c8:	4332      	orrs	r2, r6
 80025ca:	432a      	orrs	r2, r5
 80025cc:	40c4      	lsrs	r4, r0
 80025ce:	0753      	lsls	r3, r2, #29
 80025d0:	d0b6      	beq.n	8002540 <__aeabi_dmul+0x414>
 80025d2:	210f      	movs	r1, #15
 80025d4:	4011      	ands	r1, r2
 80025d6:	2904      	cmp	r1, #4
 80025d8:	d1ac      	bne.n	8002534 <__aeabi_dmul+0x408>
 80025da:	e7b1      	b.n	8002540 <__aeabi_dmul+0x414>
 80025dc:	0765      	lsls	r5, r4, #29
 80025de:	0264      	lsls	r4, r4, #9
 80025e0:	0b24      	lsrs	r4, r4, #12
 80025e2:	08d2      	lsrs	r2, r2, #3
 80025e4:	4315      	orrs	r5, r2
 80025e6:	2200      	movs	r2, #0
 80025e8:	e601      	b.n	80021ee <__aeabi_dmul+0xc2>
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	0312      	lsls	r2, r2, #12
 80025ee:	4314      	orrs	r4, r2
 80025f0:	0324      	lsls	r4, r4, #12
 80025f2:	4a01      	ldr	r2, [pc, #4]	; (80025f8 <__aeabi_dmul+0x4cc>)
 80025f4:	0b24      	lsrs	r4, r4, #12
 80025f6:	e5fa      	b.n	80021ee <__aeabi_dmul+0xc2>
 80025f8:	000007ff 	.word	0x000007ff
 80025fc:	0000043e 	.word	0x0000043e
 8002600:	0000041e 	.word	0x0000041e

08002604 <__aeabi_dsub>:
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002606:	4657      	mov	r7, sl
 8002608:	464e      	mov	r6, r9
 800260a:	4645      	mov	r5, r8
 800260c:	46de      	mov	lr, fp
 800260e:	b5e0      	push	{r5, r6, r7, lr}
 8002610:	001e      	movs	r6, r3
 8002612:	0017      	movs	r7, r2
 8002614:	004a      	lsls	r2, r1, #1
 8002616:	030b      	lsls	r3, r1, #12
 8002618:	0d52      	lsrs	r2, r2, #21
 800261a:	0a5b      	lsrs	r3, r3, #9
 800261c:	4690      	mov	r8, r2
 800261e:	0f42      	lsrs	r2, r0, #29
 8002620:	431a      	orrs	r2, r3
 8002622:	0fcd      	lsrs	r5, r1, #31
 8002624:	4ccd      	ldr	r4, [pc, #820]	; (800295c <__aeabi_dsub+0x358>)
 8002626:	0331      	lsls	r1, r6, #12
 8002628:	00c3      	lsls	r3, r0, #3
 800262a:	4694      	mov	ip, r2
 800262c:	0070      	lsls	r0, r6, #1
 800262e:	0f7a      	lsrs	r2, r7, #29
 8002630:	0a49      	lsrs	r1, r1, #9
 8002632:	00ff      	lsls	r7, r7, #3
 8002634:	469a      	mov	sl, r3
 8002636:	46b9      	mov	r9, r7
 8002638:	0d40      	lsrs	r0, r0, #21
 800263a:	0ff6      	lsrs	r6, r6, #31
 800263c:	4311      	orrs	r1, r2
 800263e:	42a0      	cmp	r0, r4
 8002640:	d100      	bne.n	8002644 <__aeabi_dsub+0x40>
 8002642:	e0b1      	b.n	80027a8 <__aeabi_dsub+0x1a4>
 8002644:	2201      	movs	r2, #1
 8002646:	4056      	eors	r6, r2
 8002648:	46b3      	mov	fp, r6
 800264a:	42b5      	cmp	r5, r6
 800264c:	d100      	bne.n	8002650 <__aeabi_dsub+0x4c>
 800264e:	e088      	b.n	8002762 <__aeabi_dsub+0x15e>
 8002650:	4642      	mov	r2, r8
 8002652:	1a12      	subs	r2, r2, r0
 8002654:	2a00      	cmp	r2, #0
 8002656:	dc00      	bgt.n	800265a <__aeabi_dsub+0x56>
 8002658:	e0ae      	b.n	80027b8 <__aeabi_dsub+0x1b4>
 800265a:	2800      	cmp	r0, #0
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x5c>
 800265e:	e0c1      	b.n	80027e4 <__aeabi_dsub+0x1e0>
 8002660:	48be      	ldr	r0, [pc, #760]	; (800295c <__aeabi_dsub+0x358>)
 8002662:	4580      	cmp	r8, r0
 8002664:	d100      	bne.n	8002668 <__aeabi_dsub+0x64>
 8002666:	e151      	b.n	800290c <__aeabi_dsub+0x308>
 8002668:	2080      	movs	r0, #128	; 0x80
 800266a:	0400      	lsls	r0, r0, #16
 800266c:	4301      	orrs	r1, r0
 800266e:	2a38      	cmp	r2, #56	; 0x38
 8002670:	dd00      	ble.n	8002674 <__aeabi_dsub+0x70>
 8002672:	e17b      	b.n	800296c <__aeabi_dsub+0x368>
 8002674:	2a1f      	cmp	r2, #31
 8002676:	dd00      	ble.n	800267a <__aeabi_dsub+0x76>
 8002678:	e1ee      	b.n	8002a58 <__aeabi_dsub+0x454>
 800267a:	2020      	movs	r0, #32
 800267c:	003e      	movs	r6, r7
 800267e:	1a80      	subs	r0, r0, r2
 8002680:	000c      	movs	r4, r1
 8002682:	40d6      	lsrs	r6, r2
 8002684:	40d1      	lsrs	r1, r2
 8002686:	4087      	lsls	r7, r0
 8002688:	4662      	mov	r2, ip
 800268a:	4084      	lsls	r4, r0
 800268c:	1a52      	subs	r2, r2, r1
 800268e:	1e78      	subs	r0, r7, #1
 8002690:	4187      	sbcs	r7, r0
 8002692:	4694      	mov	ip, r2
 8002694:	4334      	orrs	r4, r6
 8002696:	4327      	orrs	r7, r4
 8002698:	1bdc      	subs	r4, r3, r7
 800269a:	42a3      	cmp	r3, r4
 800269c:	419b      	sbcs	r3, r3
 800269e:	4662      	mov	r2, ip
 80026a0:	425b      	negs	r3, r3
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4699      	mov	r9, r3
 80026a6:	464b      	mov	r3, r9
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	d400      	bmi.n	80026ae <__aeabi_dsub+0xaa>
 80026ac:	e118      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 80026ae:	464b      	mov	r3, r9
 80026b0:	0258      	lsls	r0, r3, #9
 80026b2:	0a43      	lsrs	r3, r0, #9
 80026b4:	4699      	mov	r9, r3
 80026b6:	464b      	mov	r3, r9
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d100      	bne.n	80026be <__aeabi_dsub+0xba>
 80026bc:	e137      	b.n	800292e <__aeabi_dsub+0x32a>
 80026be:	4648      	mov	r0, r9
 80026c0:	f000 fcac 	bl	800301c <__clzsi2>
 80026c4:	0001      	movs	r1, r0
 80026c6:	3908      	subs	r1, #8
 80026c8:	2320      	movs	r3, #32
 80026ca:	0022      	movs	r2, r4
 80026cc:	4648      	mov	r0, r9
 80026ce:	1a5b      	subs	r3, r3, r1
 80026d0:	40da      	lsrs	r2, r3
 80026d2:	4088      	lsls	r0, r1
 80026d4:	408c      	lsls	r4, r1
 80026d6:	4643      	mov	r3, r8
 80026d8:	4310      	orrs	r0, r2
 80026da:	4588      	cmp	r8, r1
 80026dc:	dd00      	ble.n	80026e0 <__aeabi_dsub+0xdc>
 80026de:	e136      	b.n	800294e <__aeabi_dsub+0x34a>
 80026e0:	1ac9      	subs	r1, r1, r3
 80026e2:	1c4b      	adds	r3, r1, #1
 80026e4:	2b1f      	cmp	r3, #31
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0xe6>
 80026e8:	e0ea      	b.n	80028c0 <__aeabi_dsub+0x2bc>
 80026ea:	2220      	movs	r2, #32
 80026ec:	0026      	movs	r6, r4
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	0001      	movs	r1, r0
 80026f2:	4094      	lsls	r4, r2
 80026f4:	40de      	lsrs	r6, r3
 80026f6:	40d8      	lsrs	r0, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	4091      	lsls	r1, r2
 80026fc:	1e62      	subs	r2, r4, #1
 80026fe:	4194      	sbcs	r4, r2
 8002700:	4681      	mov	r9, r0
 8002702:	4698      	mov	r8, r3
 8002704:	4331      	orrs	r1, r6
 8002706:	430c      	orrs	r4, r1
 8002708:	0763      	lsls	r3, r4, #29
 800270a:	d009      	beq.n	8002720 <__aeabi_dsub+0x11c>
 800270c:	230f      	movs	r3, #15
 800270e:	4023      	ands	r3, r4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d005      	beq.n	8002720 <__aeabi_dsub+0x11c>
 8002714:	1d23      	adds	r3, r4, #4
 8002716:	42a3      	cmp	r3, r4
 8002718:	41a4      	sbcs	r4, r4
 800271a:	4264      	negs	r4, r4
 800271c:	44a1      	add	r9, r4
 800271e:	001c      	movs	r4, r3
 8002720:	464b      	mov	r3, r9
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	d400      	bmi.n	8002728 <__aeabi_dsub+0x124>
 8002726:	e0de      	b.n	80028e6 <__aeabi_dsub+0x2e2>
 8002728:	4641      	mov	r1, r8
 800272a:	4b8c      	ldr	r3, [pc, #560]	; (800295c <__aeabi_dsub+0x358>)
 800272c:	3101      	adds	r1, #1
 800272e:	4299      	cmp	r1, r3
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x130>
 8002732:	e0e7      	b.n	8002904 <__aeabi_dsub+0x300>
 8002734:	464b      	mov	r3, r9
 8002736:	488a      	ldr	r0, [pc, #552]	; (8002960 <__aeabi_dsub+0x35c>)
 8002738:	08e4      	lsrs	r4, r4, #3
 800273a:	4003      	ands	r3, r0
 800273c:	0018      	movs	r0, r3
 800273e:	0549      	lsls	r1, r1, #21
 8002740:	075b      	lsls	r3, r3, #29
 8002742:	0240      	lsls	r0, r0, #9
 8002744:	4323      	orrs	r3, r4
 8002746:	0d4a      	lsrs	r2, r1, #21
 8002748:	0b04      	lsrs	r4, r0, #12
 800274a:	0512      	lsls	r2, r2, #20
 800274c:	07ed      	lsls	r5, r5, #31
 800274e:	4322      	orrs	r2, r4
 8002750:	432a      	orrs	r2, r5
 8002752:	0018      	movs	r0, r3
 8002754:	0011      	movs	r1, r2
 8002756:	bcf0      	pop	{r4, r5, r6, r7}
 8002758:	46bb      	mov	fp, r7
 800275a:	46b2      	mov	sl, r6
 800275c:	46a9      	mov	r9, r5
 800275e:	46a0      	mov	r8, r4
 8002760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002762:	4642      	mov	r2, r8
 8002764:	1a12      	subs	r2, r2, r0
 8002766:	2a00      	cmp	r2, #0
 8002768:	dd52      	ble.n	8002810 <__aeabi_dsub+0x20c>
 800276a:	2800      	cmp	r0, #0
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x16c>
 800276e:	e09c      	b.n	80028aa <__aeabi_dsub+0x2a6>
 8002770:	45a0      	cmp	r8, r4
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x172>
 8002774:	e0ca      	b.n	800290c <__aeabi_dsub+0x308>
 8002776:	2080      	movs	r0, #128	; 0x80
 8002778:	0400      	lsls	r0, r0, #16
 800277a:	4301      	orrs	r1, r0
 800277c:	2a38      	cmp	r2, #56	; 0x38
 800277e:	dd00      	ble.n	8002782 <__aeabi_dsub+0x17e>
 8002780:	e149      	b.n	8002a16 <__aeabi_dsub+0x412>
 8002782:	2a1f      	cmp	r2, #31
 8002784:	dc00      	bgt.n	8002788 <__aeabi_dsub+0x184>
 8002786:	e197      	b.n	8002ab8 <__aeabi_dsub+0x4b4>
 8002788:	0010      	movs	r0, r2
 800278a:	000e      	movs	r6, r1
 800278c:	3820      	subs	r0, #32
 800278e:	40c6      	lsrs	r6, r0
 8002790:	2a20      	cmp	r2, #32
 8002792:	d004      	beq.n	800279e <__aeabi_dsub+0x19a>
 8002794:	2040      	movs	r0, #64	; 0x40
 8002796:	1a82      	subs	r2, r0, r2
 8002798:	4091      	lsls	r1, r2
 800279a:	430f      	orrs	r7, r1
 800279c:	46b9      	mov	r9, r7
 800279e:	464c      	mov	r4, r9
 80027a0:	1e62      	subs	r2, r4, #1
 80027a2:	4194      	sbcs	r4, r2
 80027a4:	4334      	orrs	r4, r6
 80027a6:	e13a      	b.n	8002a1e <__aeabi_dsub+0x41a>
 80027a8:	000a      	movs	r2, r1
 80027aa:	433a      	orrs	r2, r7
 80027ac:	d028      	beq.n	8002800 <__aeabi_dsub+0x1fc>
 80027ae:	46b3      	mov	fp, r6
 80027b0:	42b5      	cmp	r5, r6
 80027b2:	d02b      	beq.n	800280c <__aeabi_dsub+0x208>
 80027b4:	4a6b      	ldr	r2, [pc, #428]	; (8002964 <__aeabi_dsub+0x360>)
 80027b6:	4442      	add	r2, r8
 80027b8:	2a00      	cmp	r2, #0
 80027ba:	d05d      	beq.n	8002878 <__aeabi_dsub+0x274>
 80027bc:	4642      	mov	r2, r8
 80027be:	4644      	mov	r4, r8
 80027c0:	1a82      	subs	r2, r0, r2
 80027c2:	2c00      	cmp	r4, #0
 80027c4:	d000      	beq.n	80027c8 <__aeabi_dsub+0x1c4>
 80027c6:	e0f5      	b.n	80029b4 <__aeabi_dsub+0x3b0>
 80027c8:	4665      	mov	r5, ip
 80027ca:	431d      	orrs	r5, r3
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x1cc>
 80027ce:	e19c      	b.n	8002b0a <__aeabi_dsub+0x506>
 80027d0:	1e55      	subs	r5, r2, #1
 80027d2:	2a01      	cmp	r2, #1
 80027d4:	d100      	bne.n	80027d8 <__aeabi_dsub+0x1d4>
 80027d6:	e1fb      	b.n	8002bd0 <__aeabi_dsub+0x5cc>
 80027d8:	4c60      	ldr	r4, [pc, #384]	; (800295c <__aeabi_dsub+0x358>)
 80027da:	42a2      	cmp	r2, r4
 80027dc:	d100      	bne.n	80027e0 <__aeabi_dsub+0x1dc>
 80027de:	e1bd      	b.n	8002b5c <__aeabi_dsub+0x558>
 80027e0:	002a      	movs	r2, r5
 80027e2:	e0f0      	b.n	80029c6 <__aeabi_dsub+0x3c2>
 80027e4:	0008      	movs	r0, r1
 80027e6:	4338      	orrs	r0, r7
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x1e8>
 80027ea:	e0c3      	b.n	8002974 <__aeabi_dsub+0x370>
 80027ec:	1e50      	subs	r0, r2, #1
 80027ee:	2a01      	cmp	r2, #1
 80027f0:	d100      	bne.n	80027f4 <__aeabi_dsub+0x1f0>
 80027f2:	e1a8      	b.n	8002b46 <__aeabi_dsub+0x542>
 80027f4:	4c59      	ldr	r4, [pc, #356]	; (800295c <__aeabi_dsub+0x358>)
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x1f8>
 80027fa:	e087      	b.n	800290c <__aeabi_dsub+0x308>
 80027fc:	0002      	movs	r2, r0
 80027fe:	e736      	b.n	800266e <__aeabi_dsub+0x6a>
 8002800:	2201      	movs	r2, #1
 8002802:	4056      	eors	r6, r2
 8002804:	46b3      	mov	fp, r6
 8002806:	42b5      	cmp	r5, r6
 8002808:	d000      	beq.n	800280c <__aeabi_dsub+0x208>
 800280a:	e721      	b.n	8002650 <__aeabi_dsub+0x4c>
 800280c:	4a55      	ldr	r2, [pc, #340]	; (8002964 <__aeabi_dsub+0x360>)
 800280e:	4442      	add	r2, r8
 8002810:	2a00      	cmp	r2, #0
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x212>
 8002814:	e0b5      	b.n	8002982 <__aeabi_dsub+0x37e>
 8002816:	4642      	mov	r2, r8
 8002818:	4644      	mov	r4, r8
 800281a:	1a82      	subs	r2, r0, r2
 800281c:	2c00      	cmp	r4, #0
 800281e:	d100      	bne.n	8002822 <__aeabi_dsub+0x21e>
 8002820:	e138      	b.n	8002a94 <__aeabi_dsub+0x490>
 8002822:	4e4e      	ldr	r6, [pc, #312]	; (800295c <__aeabi_dsub+0x358>)
 8002824:	42b0      	cmp	r0, r6
 8002826:	d100      	bne.n	800282a <__aeabi_dsub+0x226>
 8002828:	e1de      	b.n	8002be8 <__aeabi_dsub+0x5e4>
 800282a:	2680      	movs	r6, #128	; 0x80
 800282c:	4664      	mov	r4, ip
 800282e:	0436      	lsls	r6, r6, #16
 8002830:	4334      	orrs	r4, r6
 8002832:	46a4      	mov	ip, r4
 8002834:	2a38      	cmp	r2, #56	; 0x38
 8002836:	dd00      	ble.n	800283a <__aeabi_dsub+0x236>
 8002838:	e196      	b.n	8002b68 <__aeabi_dsub+0x564>
 800283a:	2a1f      	cmp	r2, #31
 800283c:	dd00      	ble.n	8002840 <__aeabi_dsub+0x23c>
 800283e:	e224      	b.n	8002c8a <__aeabi_dsub+0x686>
 8002840:	2620      	movs	r6, #32
 8002842:	1ab4      	subs	r4, r6, r2
 8002844:	46a2      	mov	sl, r4
 8002846:	4664      	mov	r4, ip
 8002848:	4656      	mov	r6, sl
 800284a:	40b4      	lsls	r4, r6
 800284c:	46a1      	mov	r9, r4
 800284e:	001c      	movs	r4, r3
 8002850:	464e      	mov	r6, r9
 8002852:	40d4      	lsrs	r4, r2
 8002854:	4326      	orrs	r6, r4
 8002856:	0034      	movs	r4, r6
 8002858:	4656      	mov	r6, sl
 800285a:	40b3      	lsls	r3, r6
 800285c:	1e5e      	subs	r6, r3, #1
 800285e:	41b3      	sbcs	r3, r6
 8002860:	431c      	orrs	r4, r3
 8002862:	4663      	mov	r3, ip
 8002864:	40d3      	lsrs	r3, r2
 8002866:	18c9      	adds	r1, r1, r3
 8002868:	19e4      	adds	r4, r4, r7
 800286a:	42bc      	cmp	r4, r7
 800286c:	41bf      	sbcs	r7, r7
 800286e:	427f      	negs	r7, r7
 8002870:	46b9      	mov	r9, r7
 8002872:	4680      	mov	r8, r0
 8002874:	4489      	add	r9, r1
 8002876:	e0d8      	b.n	8002a2a <__aeabi_dsub+0x426>
 8002878:	4640      	mov	r0, r8
 800287a:	4c3b      	ldr	r4, [pc, #236]	; (8002968 <__aeabi_dsub+0x364>)
 800287c:	3001      	adds	r0, #1
 800287e:	4220      	tst	r0, r4
 8002880:	d000      	beq.n	8002884 <__aeabi_dsub+0x280>
 8002882:	e0b4      	b.n	80029ee <__aeabi_dsub+0x3ea>
 8002884:	4640      	mov	r0, r8
 8002886:	2800      	cmp	r0, #0
 8002888:	d000      	beq.n	800288c <__aeabi_dsub+0x288>
 800288a:	e144      	b.n	8002b16 <__aeabi_dsub+0x512>
 800288c:	4660      	mov	r0, ip
 800288e:	4318      	orrs	r0, r3
 8002890:	d100      	bne.n	8002894 <__aeabi_dsub+0x290>
 8002892:	e190      	b.n	8002bb6 <__aeabi_dsub+0x5b2>
 8002894:	0008      	movs	r0, r1
 8002896:	4338      	orrs	r0, r7
 8002898:	d000      	beq.n	800289c <__aeabi_dsub+0x298>
 800289a:	e1aa      	b.n	8002bf2 <__aeabi_dsub+0x5ee>
 800289c:	4661      	mov	r1, ip
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	0749      	lsls	r1, r1, #29
 80028a2:	430b      	orrs	r3, r1
 80028a4:	4661      	mov	r1, ip
 80028a6:	08cc      	lsrs	r4, r1, #3
 80028a8:	e027      	b.n	80028fa <__aeabi_dsub+0x2f6>
 80028aa:	0008      	movs	r0, r1
 80028ac:	4338      	orrs	r0, r7
 80028ae:	d061      	beq.n	8002974 <__aeabi_dsub+0x370>
 80028b0:	1e50      	subs	r0, r2, #1
 80028b2:	2a01      	cmp	r2, #1
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x2b4>
 80028b6:	e139      	b.n	8002b2c <__aeabi_dsub+0x528>
 80028b8:	42a2      	cmp	r2, r4
 80028ba:	d027      	beq.n	800290c <__aeabi_dsub+0x308>
 80028bc:	0002      	movs	r2, r0
 80028be:	e75d      	b.n	800277c <__aeabi_dsub+0x178>
 80028c0:	0002      	movs	r2, r0
 80028c2:	391f      	subs	r1, #31
 80028c4:	40ca      	lsrs	r2, r1
 80028c6:	0011      	movs	r1, r2
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d003      	beq.n	80028d4 <__aeabi_dsub+0x2d0>
 80028cc:	2240      	movs	r2, #64	; 0x40
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4098      	lsls	r0, r3
 80028d2:	4304      	orrs	r4, r0
 80028d4:	1e63      	subs	r3, r4, #1
 80028d6:	419c      	sbcs	r4, r3
 80028d8:	2300      	movs	r3, #0
 80028da:	4699      	mov	r9, r3
 80028dc:	4698      	mov	r8, r3
 80028de:	430c      	orrs	r4, r1
 80028e0:	0763      	lsls	r3, r4, #29
 80028e2:	d000      	beq.n	80028e6 <__aeabi_dsub+0x2e2>
 80028e4:	e712      	b.n	800270c <__aeabi_dsub+0x108>
 80028e6:	464b      	mov	r3, r9
 80028e8:	464a      	mov	r2, r9
 80028ea:	08e4      	lsrs	r4, r4, #3
 80028ec:	075b      	lsls	r3, r3, #29
 80028ee:	4323      	orrs	r3, r4
 80028f0:	08d4      	lsrs	r4, r2, #3
 80028f2:	4642      	mov	r2, r8
 80028f4:	4919      	ldr	r1, [pc, #100]	; (800295c <__aeabi_dsub+0x358>)
 80028f6:	428a      	cmp	r2, r1
 80028f8:	d00e      	beq.n	8002918 <__aeabi_dsub+0x314>
 80028fa:	0324      	lsls	r4, r4, #12
 80028fc:	0552      	lsls	r2, r2, #21
 80028fe:	0b24      	lsrs	r4, r4, #12
 8002900:	0d52      	lsrs	r2, r2, #21
 8002902:	e722      	b.n	800274a <__aeabi_dsub+0x146>
 8002904:	000a      	movs	r2, r1
 8002906:	2400      	movs	r4, #0
 8002908:	2300      	movs	r3, #0
 800290a:	e71e      	b.n	800274a <__aeabi_dsub+0x146>
 800290c:	08db      	lsrs	r3, r3, #3
 800290e:	4662      	mov	r2, ip
 8002910:	0752      	lsls	r2, r2, #29
 8002912:	4313      	orrs	r3, r2
 8002914:	4662      	mov	r2, ip
 8002916:	08d4      	lsrs	r4, r2, #3
 8002918:	001a      	movs	r2, r3
 800291a:	4322      	orrs	r2, r4
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x31c>
 800291e:	e1fc      	b.n	8002d1a <__aeabi_dsub+0x716>
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	0312      	lsls	r2, r2, #12
 8002924:	4314      	orrs	r4, r2
 8002926:	0324      	lsls	r4, r4, #12
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <__aeabi_dsub+0x358>)
 800292a:	0b24      	lsrs	r4, r4, #12
 800292c:	e70d      	b.n	800274a <__aeabi_dsub+0x146>
 800292e:	0020      	movs	r0, r4
 8002930:	f000 fb74 	bl	800301c <__clzsi2>
 8002934:	0001      	movs	r1, r0
 8002936:	3118      	adds	r1, #24
 8002938:	291f      	cmp	r1, #31
 800293a:	dc00      	bgt.n	800293e <__aeabi_dsub+0x33a>
 800293c:	e6c4      	b.n	80026c8 <__aeabi_dsub+0xc4>
 800293e:	3808      	subs	r0, #8
 8002940:	4084      	lsls	r4, r0
 8002942:	4643      	mov	r3, r8
 8002944:	0020      	movs	r0, r4
 8002946:	2400      	movs	r4, #0
 8002948:	4588      	cmp	r8, r1
 800294a:	dc00      	bgt.n	800294e <__aeabi_dsub+0x34a>
 800294c:	e6c8      	b.n	80026e0 <__aeabi_dsub+0xdc>
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__aeabi_dsub+0x35c>)
 8002950:	1a5b      	subs	r3, r3, r1
 8002952:	4010      	ands	r0, r2
 8002954:	4698      	mov	r8, r3
 8002956:	4681      	mov	r9, r0
 8002958:	e6d6      	b.n	8002708 <__aeabi_dsub+0x104>
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	000007ff 	.word	0x000007ff
 8002960:	ff7fffff 	.word	0xff7fffff
 8002964:	fffff801 	.word	0xfffff801
 8002968:	000007fe 	.word	0x000007fe
 800296c:	430f      	orrs	r7, r1
 800296e:	1e7a      	subs	r2, r7, #1
 8002970:	4197      	sbcs	r7, r2
 8002972:	e691      	b.n	8002698 <__aeabi_dsub+0x94>
 8002974:	4661      	mov	r1, ip
 8002976:	08db      	lsrs	r3, r3, #3
 8002978:	0749      	lsls	r1, r1, #29
 800297a:	430b      	orrs	r3, r1
 800297c:	4661      	mov	r1, ip
 800297e:	08cc      	lsrs	r4, r1, #3
 8002980:	e7b8      	b.n	80028f4 <__aeabi_dsub+0x2f0>
 8002982:	4640      	mov	r0, r8
 8002984:	4cd3      	ldr	r4, [pc, #844]	; (8002cd4 <__aeabi_dsub+0x6d0>)
 8002986:	3001      	adds	r0, #1
 8002988:	4220      	tst	r0, r4
 800298a:	d000      	beq.n	800298e <__aeabi_dsub+0x38a>
 800298c:	e0a2      	b.n	8002ad4 <__aeabi_dsub+0x4d0>
 800298e:	4640      	mov	r0, r8
 8002990:	2800      	cmp	r0, #0
 8002992:	d000      	beq.n	8002996 <__aeabi_dsub+0x392>
 8002994:	e101      	b.n	8002b9a <__aeabi_dsub+0x596>
 8002996:	4660      	mov	r0, ip
 8002998:	4318      	orrs	r0, r3
 800299a:	d100      	bne.n	800299e <__aeabi_dsub+0x39a>
 800299c:	e15e      	b.n	8002c5c <__aeabi_dsub+0x658>
 800299e:	0008      	movs	r0, r1
 80029a0:	4338      	orrs	r0, r7
 80029a2:	d000      	beq.n	80029a6 <__aeabi_dsub+0x3a2>
 80029a4:	e15f      	b.n	8002c66 <__aeabi_dsub+0x662>
 80029a6:	4661      	mov	r1, ip
 80029a8:	08db      	lsrs	r3, r3, #3
 80029aa:	0749      	lsls	r1, r1, #29
 80029ac:	430b      	orrs	r3, r1
 80029ae:	4661      	mov	r1, ip
 80029b0:	08cc      	lsrs	r4, r1, #3
 80029b2:	e7a2      	b.n	80028fa <__aeabi_dsub+0x2f6>
 80029b4:	4dc8      	ldr	r5, [pc, #800]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 80029b6:	42a8      	cmp	r0, r5
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x3b8>
 80029ba:	e0cf      	b.n	8002b5c <__aeabi_dsub+0x558>
 80029bc:	2580      	movs	r5, #128	; 0x80
 80029be:	4664      	mov	r4, ip
 80029c0:	042d      	lsls	r5, r5, #16
 80029c2:	432c      	orrs	r4, r5
 80029c4:	46a4      	mov	ip, r4
 80029c6:	2a38      	cmp	r2, #56	; 0x38
 80029c8:	dc56      	bgt.n	8002a78 <__aeabi_dsub+0x474>
 80029ca:	2a1f      	cmp	r2, #31
 80029cc:	dd00      	ble.n	80029d0 <__aeabi_dsub+0x3cc>
 80029ce:	e0d1      	b.n	8002b74 <__aeabi_dsub+0x570>
 80029d0:	2520      	movs	r5, #32
 80029d2:	001e      	movs	r6, r3
 80029d4:	1aad      	subs	r5, r5, r2
 80029d6:	4664      	mov	r4, ip
 80029d8:	40ab      	lsls	r3, r5
 80029da:	40ac      	lsls	r4, r5
 80029dc:	40d6      	lsrs	r6, r2
 80029de:	1e5d      	subs	r5, r3, #1
 80029e0:	41ab      	sbcs	r3, r5
 80029e2:	4334      	orrs	r4, r6
 80029e4:	4323      	orrs	r3, r4
 80029e6:	4664      	mov	r4, ip
 80029e8:	40d4      	lsrs	r4, r2
 80029ea:	1b09      	subs	r1, r1, r4
 80029ec:	e049      	b.n	8002a82 <__aeabi_dsub+0x47e>
 80029ee:	4660      	mov	r0, ip
 80029f0:	1bdc      	subs	r4, r3, r7
 80029f2:	1a46      	subs	r6, r0, r1
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	4180      	sbcs	r0, r0
 80029f8:	4240      	negs	r0, r0
 80029fa:	4681      	mov	r9, r0
 80029fc:	0030      	movs	r0, r6
 80029fe:	464e      	mov	r6, r9
 8002a00:	1b80      	subs	r0, r0, r6
 8002a02:	4681      	mov	r9, r0
 8002a04:	0200      	lsls	r0, r0, #8
 8002a06:	d476      	bmi.n	8002af6 <__aeabi_dsub+0x4f2>
 8002a08:	464b      	mov	r3, r9
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	d000      	beq.n	8002a10 <__aeabi_dsub+0x40c>
 8002a0e:	e652      	b.n	80026b6 <__aeabi_dsub+0xb2>
 8002a10:	2400      	movs	r4, #0
 8002a12:	2500      	movs	r5, #0
 8002a14:	e771      	b.n	80028fa <__aeabi_dsub+0x2f6>
 8002a16:	4339      	orrs	r1, r7
 8002a18:	000c      	movs	r4, r1
 8002a1a:	1e62      	subs	r2, r4, #1
 8002a1c:	4194      	sbcs	r4, r2
 8002a1e:	18e4      	adds	r4, r4, r3
 8002a20:	429c      	cmp	r4, r3
 8002a22:	419b      	sbcs	r3, r3
 8002a24:	425b      	negs	r3, r3
 8002a26:	4463      	add	r3, ip
 8002a28:	4699      	mov	r9, r3
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	d400      	bmi.n	8002a32 <__aeabi_dsub+0x42e>
 8002a30:	e756      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002a32:	2301      	movs	r3, #1
 8002a34:	469c      	mov	ip, r3
 8002a36:	4ba8      	ldr	r3, [pc, #672]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 8002a38:	44e0      	add	r8, ip
 8002a3a:	4598      	cmp	r8, r3
 8002a3c:	d038      	beq.n	8002ab0 <__aeabi_dsub+0x4ac>
 8002a3e:	464b      	mov	r3, r9
 8002a40:	48a6      	ldr	r0, [pc, #664]	; (8002cdc <__aeabi_dsub+0x6d8>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	4003      	ands	r3, r0
 8002a46:	0018      	movs	r0, r3
 8002a48:	0863      	lsrs	r3, r4, #1
 8002a4a:	4014      	ands	r4, r2
 8002a4c:	431c      	orrs	r4, r3
 8002a4e:	07c3      	lsls	r3, r0, #31
 8002a50:	431c      	orrs	r4, r3
 8002a52:	0843      	lsrs	r3, r0, #1
 8002a54:	4699      	mov	r9, r3
 8002a56:	e657      	b.n	8002708 <__aeabi_dsub+0x104>
 8002a58:	0010      	movs	r0, r2
 8002a5a:	000e      	movs	r6, r1
 8002a5c:	3820      	subs	r0, #32
 8002a5e:	40c6      	lsrs	r6, r0
 8002a60:	2a20      	cmp	r2, #32
 8002a62:	d004      	beq.n	8002a6e <__aeabi_dsub+0x46a>
 8002a64:	2040      	movs	r0, #64	; 0x40
 8002a66:	1a82      	subs	r2, r0, r2
 8002a68:	4091      	lsls	r1, r2
 8002a6a:	430f      	orrs	r7, r1
 8002a6c:	46b9      	mov	r9, r7
 8002a6e:	464f      	mov	r7, r9
 8002a70:	1e7a      	subs	r2, r7, #1
 8002a72:	4197      	sbcs	r7, r2
 8002a74:	4337      	orrs	r7, r6
 8002a76:	e60f      	b.n	8002698 <__aeabi_dsub+0x94>
 8002a78:	4662      	mov	r2, ip
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	1e5a      	subs	r2, r3, #1
 8002a80:	4193      	sbcs	r3, r2
 8002a82:	1afc      	subs	r4, r7, r3
 8002a84:	42a7      	cmp	r7, r4
 8002a86:	41bf      	sbcs	r7, r7
 8002a88:	427f      	negs	r7, r7
 8002a8a:	1bcb      	subs	r3, r1, r7
 8002a8c:	4699      	mov	r9, r3
 8002a8e:	465d      	mov	r5, fp
 8002a90:	4680      	mov	r8, r0
 8002a92:	e608      	b.n	80026a6 <__aeabi_dsub+0xa2>
 8002a94:	4666      	mov	r6, ip
 8002a96:	431e      	orrs	r6, r3
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x498>
 8002a9a:	e0be      	b.n	8002c1a <__aeabi_dsub+0x616>
 8002a9c:	1e56      	subs	r6, r2, #1
 8002a9e:	2a01      	cmp	r2, #1
 8002aa0:	d100      	bne.n	8002aa4 <__aeabi_dsub+0x4a0>
 8002aa2:	e109      	b.n	8002cb8 <__aeabi_dsub+0x6b4>
 8002aa4:	4c8c      	ldr	r4, [pc, #560]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 8002aa6:	42a2      	cmp	r2, r4
 8002aa8:	d100      	bne.n	8002aac <__aeabi_dsub+0x4a8>
 8002aaa:	e119      	b.n	8002ce0 <__aeabi_dsub+0x6dc>
 8002aac:	0032      	movs	r2, r6
 8002aae:	e6c1      	b.n	8002834 <__aeabi_dsub+0x230>
 8002ab0:	4642      	mov	r2, r8
 8002ab2:	2400      	movs	r4, #0
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e648      	b.n	800274a <__aeabi_dsub+0x146>
 8002ab8:	2020      	movs	r0, #32
 8002aba:	000c      	movs	r4, r1
 8002abc:	1a80      	subs	r0, r0, r2
 8002abe:	003e      	movs	r6, r7
 8002ac0:	4087      	lsls	r7, r0
 8002ac2:	4084      	lsls	r4, r0
 8002ac4:	40d6      	lsrs	r6, r2
 8002ac6:	1e78      	subs	r0, r7, #1
 8002ac8:	4187      	sbcs	r7, r0
 8002aca:	40d1      	lsrs	r1, r2
 8002acc:	4334      	orrs	r4, r6
 8002ace:	433c      	orrs	r4, r7
 8002ad0:	448c      	add	ip, r1
 8002ad2:	e7a4      	b.n	8002a1e <__aeabi_dsub+0x41a>
 8002ad4:	4a80      	ldr	r2, [pc, #512]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 8002ad6:	4290      	cmp	r0, r2
 8002ad8:	d100      	bne.n	8002adc <__aeabi_dsub+0x4d8>
 8002ada:	e0e9      	b.n	8002cb0 <__aeabi_dsub+0x6ac>
 8002adc:	19df      	adds	r7, r3, r7
 8002ade:	429f      	cmp	r7, r3
 8002ae0:	419b      	sbcs	r3, r3
 8002ae2:	4461      	add	r1, ip
 8002ae4:	425b      	negs	r3, r3
 8002ae6:	18c9      	adds	r1, r1, r3
 8002ae8:	07cc      	lsls	r4, r1, #31
 8002aea:	087f      	lsrs	r7, r7, #1
 8002aec:	084b      	lsrs	r3, r1, #1
 8002aee:	4699      	mov	r9, r3
 8002af0:	4680      	mov	r8, r0
 8002af2:	433c      	orrs	r4, r7
 8002af4:	e6f4      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002af6:	1afc      	subs	r4, r7, r3
 8002af8:	42a7      	cmp	r7, r4
 8002afa:	41bf      	sbcs	r7, r7
 8002afc:	4663      	mov	r3, ip
 8002afe:	427f      	negs	r7, r7
 8002b00:	1ac9      	subs	r1, r1, r3
 8002b02:	1bcb      	subs	r3, r1, r7
 8002b04:	4699      	mov	r9, r3
 8002b06:	465d      	mov	r5, fp
 8002b08:	e5d5      	b.n	80026b6 <__aeabi_dsub+0xb2>
 8002b0a:	08ff      	lsrs	r7, r7, #3
 8002b0c:	074b      	lsls	r3, r1, #29
 8002b0e:	465d      	mov	r5, fp
 8002b10:	433b      	orrs	r3, r7
 8002b12:	08cc      	lsrs	r4, r1, #3
 8002b14:	e6ee      	b.n	80028f4 <__aeabi_dsub+0x2f0>
 8002b16:	4662      	mov	r2, ip
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	d000      	beq.n	8002b1e <__aeabi_dsub+0x51a>
 8002b1c:	e082      	b.n	8002c24 <__aeabi_dsub+0x620>
 8002b1e:	000b      	movs	r3, r1
 8002b20:	433b      	orrs	r3, r7
 8002b22:	d11b      	bne.n	8002b5c <__aeabi_dsub+0x558>
 8002b24:	2480      	movs	r4, #128	; 0x80
 8002b26:	2500      	movs	r5, #0
 8002b28:	0324      	lsls	r4, r4, #12
 8002b2a:	e6f9      	b.n	8002920 <__aeabi_dsub+0x31c>
 8002b2c:	19dc      	adds	r4, r3, r7
 8002b2e:	429c      	cmp	r4, r3
 8002b30:	419b      	sbcs	r3, r3
 8002b32:	4461      	add	r1, ip
 8002b34:	4689      	mov	r9, r1
 8002b36:	425b      	negs	r3, r3
 8002b38:	4499      	add	r9, r3
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	d444      	bmi.n	8002bca <__aeabi_dsub+0x5c6>
 8002b40:	2301      	movs	r3, #1
 8002b42:	4698      	mov	r8, r3
 8002b44:	e6cc      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002b46:	1bdc      	subs	r4, r3, r7
 8002b48:	4662      	mov	r2, ip
 8002b4a:	42a3      	cmp	r3, r4
 8002b4c:	419b      	sbcs	r3, r3
 8002b4e:	1a51      	subs	r1, r2, r1
 8002b50:	425b      	negs	r3, r3
 8002b52:	1acb      	subs	r3, r1, r3
 8002b54:	4699      	mov	r9, r3
 8002b56:	2301      	movs	r3, #1
 8002b58:	4698      	mov	r8, r3
 8002b5a:	e5a4      	b.n	80026a6 <__aeabi_dsub+0xa2>
 8002b5c:	08ff      	lsrs	r7, r7, #3
 8002b5e:	074b      	lsls	r3, r1, #29
 8002b60:	465d      	mov	r5, fp
 8002b62:	433b      	orrs	r3, r7
 8002b64:	08cc      	lsrs	r4, r1, #3
 8002b66:	e6d7      	b.n	8002918 <__aeabi_dsub+0x314>
 8002b68:	4662      	mov	r2, ip
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	0014      	movs	r4, r2
 8002b6e:	1e63      	subs	r3, r4, #1
 8002b70:	419c      	sbcs	r4, r3
 8002b72:	e679      	b.n	8002868 <__aeabi_dsub+0x264>
 8002b74:	0015      	movs	r5, r2
 8002b76:	4664      	mov	r4, ip
 8002b78:	3d20      	subs	r5, #32
 8002b7a:	40ec      	lsrs	r4, r5
 8002b7c:	46a0      	mov	r8, r4
 8002b7e:	2a20      	cmp	r2, #32
 8002b80:	d005      	beq.n	8002b8e <__aeabi_dsub+0x58a>
 8002b82:	2540      	movs	r5, #64	; 0x40
 8002b84:	4664      	mov	r4, ip
 8002b86:	1aaa      	subs	r2, r5, r2
 8002b88:	4094      	lsls	r4, r2
 8002b8a:	4323      	orrs	r3, r4
 8002b8c:	469a      	mov	sl, r3
 8002b8e:	4654      	mov	r4, sl
 8002b90:	1e63      	subs	r3, r4, #1
 8002b92:	419c      	sbcs	r4, r3
 8002b94:	4643      	mov	r3, r8
 8002b96:	4323      	orrs	r3, r4
 8002b98:	e773      	b.n	8002a82 <__aeabi_dsub+0x47e>
 8002b9a:	4662      	mov	r2, ip
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	d023      	beq.n	8002be8 <__aeabi_dsub+0x5e4>
 8002ba0:	000a      	movs	r2, r1
 8002ba2:	433a      	orrs	r2, r7
 8002ba4:	d000      	beq.n	8002ba8 <__aeabi_dsub+0x5a4>
 8002ba6:	e0a0      	b.n	8002cea <__aeabi_dsub+0x6e6>
 8002ba8:	4662      	mov	r2, ip
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	0752      	lsls	r2, r2, #29
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	4662      	mov	r2, ip
 8002bb2:	08d4      	lsrs	r4, r2, #3
 8002bb4:	e6b0      	b.n	8002918 <__aeabi_dsub+0x314>
 8002bb6:	000b      	movs	r3, r1
 8002bb8:	433b      	orrs	r3, r7
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x5ba>
 8002bbc:	e728      	b.n	8002a10 <__aeabi_dsub+0x40c>
 8002bbe:	08ff      	lsrs	r7, r7, #3
 8002bc0:	074b      	lsls	r3, r1, #29
 8002bc2:	465d      	mov	r5, fp
 8002bc4:	433b      	orrs	r3, r7
 8002bc6:	08cc      	lsrs	r4, r1, #3
 8002bc8:	e697      	b.n	80028fa <__aeabi_dsub+0x2f6>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	4698      	mov	r8, r3
 8002bce:	e736      	b.n	8002a3e <__aeabi_dsub+0x43a>
 8002bd0:	1afc      	subs	r4, r7, r3
 8002bd2:	42a7      	cmp	r7, r4
 8002bd4:	41bf      	sbcs	r7, r7
 8002bd6:	4663      	mov	r3, ip
 8002bd8:	427f      	negs	r7, r7
 8002bda:	1ac9      	subs	r1, r1, r3
 8002bdc:	1bcb      	subs	r3, r1, r7
 8002bde:	4699      	mov	r9, r3
 8002be0:	2301      	movs	r3, #1
 8002be2:	465d      	mov	r5, fp
 8002be4:	4698      	mov	r8, r3
 8002be6:	e55e      	b.n	80026a6 <__aeabi_dsub+0xa2>
 8002be8:	074b      	lsls	r3, r1, #29
 8002bea:	08ff      	lsrs	r7, r7, #3
 8002bec:	433b      	orrs	r3, r7
 8002bee:	08cc      	lsrs	r4, r1, #3
 8002bf0:	e692      	b.n	8002918 <__aeabi_dsub+0x314>
 8002bf2:	1bdc      	subs	r4, r3, r7
 8002bf4:	4660      	mov	r0, ip
 8002bf6:	42a3      	cmp	r3, r4
 8002bf8:	41b6      	sbcs	r6, r6
 8002bfa:	1a40      	subs	r0, r0, r1
 8002bfc:	4276      	negs	r6, r6
 8002bfe:	1b80      	subs	r0, r0, r6
 8002c00:	4681      	mov	r9, r0
 8002c02:	0200      	lsls	r0, r0, #8
 8002c04:	d560      	bpl.n	8002cc8 <__aeabi_dsub+0x6c4>
 8002c06:	1afc      	subs	r4, r7, r3
 8002c08:	42a7      	cmp	r7, r4
 8002c0a:	41bf      	sbcs	r7, r7
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	427f      	negs	r7, r7
 8002c10:	1ac9      	subs	r1, r1, r3
 8002c12:	1bcb      	subs	r3, r1, r7
 8002c14:	4699      	mov	r9, r3
 8002c16:	465d      	mov	r5, fp
 8002c18:	e576      	b.n	8002708 <__aeabi_dsub+0x104>
 8002c1a:	08ff      	lsrs	r7, r7, #3
 8002c1c:	074b      	lsls	r3, r1, #29
 8002c1e:	433b      	orrs	r3, r7
 8002c20:	08cc      	lsrs	r4, r1, #3
 8002c22:	e667      	b.n	80028f4 <__aeabi_dsub+0x2f0>
 8002c24:	000a      	movs	r2, r1
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	433a      	orrs	r2, r7
 8002c2a:	d100      	bne.n	8002c2e <__aeabi_dsub+0x62a>
 8002c2c:	e66f      	b.n	800290e <__aeabi_dsub+0x30a>
 8002c2e:	4662      	mov	r2, ip
 8002c30:	0752      	lsls	r2, r2, #29
 8002c32:	4313      	orrs	r3, r2
 8002c34:	4662      	mov	r2, ip
 8002c36:	08d4      	lsrs	r4, r2, #3
 8002c38:	2280      	movs	r2, #128	; 0x80
 8002c3a:	0312      	lsls	r2, r2, #12
 8002c3c:	4214      	tst	r4, r2
 8002c3e:	d007      	beq.n	8002c50 <__aeabi_dsub+0x64c>
 8002c40:	08c8      	lsrs	r0, r1, #3
 8002c42:	4210      	tst	r0, r2
 8002c44:	d104      	bne.n	8002c50 <__aeabi_dsub+0x64c>
 8002c46:	465d      	mov	r5, fp
 8002c48:	0004      	movs	r4, r0
 8002c4a:	08fb      	lsrs	r3, r7, #3
 8002c4c:	0749      	lsls	r1, r1, #29
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	0f5a      	lsrs	r2, r3, #29
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	0752      	lsls	r2, r2, #29
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	e65d      	b.n	8002918 <__aeabi_dsub+0x314>
 8002c5c:	074b      	lsls	r3, r1, #29
 8002c5e:	08ff      	lsrs	r7, r7, #3
 8002c60:	433b      	orrs	r3, r7
 8002c62:	08cc      	lsrs	r4, r1, #3
 8002c64:	e649      	b.n	80028fa <__aeabi_dsub+0x2f6>
 8002c66:	19dc      	adds	r4, r3, r7
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	419b      	sbcs	r3, r3
 8002c6c:	4461      	add	r1, ip
 8002c6e:	4689      	mov	r9, r1
 8002c70:	425b      	negs	r3, r3
 8002c72:	4499      	add	r9, r3
 8002c74:	464b      	mov	r3, r9
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	d400      	bmi.n	8002c7c <__aeabi_dsub+0x678>
 8002c7a:	e631      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <__aeabi_dsub+0x6d8>)
 8002c80:	401a      	ands	r2, r3
 8002c82:	2301      	movs	r3, #1
 8002c84:	4691      	mov	r9, r2
 8002c86:	4698      	mov	r8, r3
 8002c88:	e62a      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002c8a:	0016      	movs	r6, r2
 8002c8c:	4664      	mov	r4, ip
 8002c8e:	3e20      	subs	r6, #32
 8002c90:	40f4      	lsrs	r4, r6
 8002c92:	46a0      	mov	r8, r4
 8002c94:	2a20      	cmp	r2, #32
 8002c96:	d005      	beq.n	8002ca4 <__aeabi_dsub+0x6a0>
 8002c98:	2640      	movs	r6, #64	; 0x40
 8002c9a:	4664      	mov	r4, ip
 8002c9c:	1ab2      	subs	r2, r6, r2
 8002c9e:	4094      	lsls	r4, r2
 8002ca0:	4323      	orrs	r3, r4
 8002ca2:	469a      	mov	sl, r3
 8002ca4:	4654      	mov	r4, sl
 8002ca6:	1e63      	subs	r3, r4, #1
 8002ca8:	419c      	sbcs	r4, r3
 8002caa:	4643      	mov	r3, r8
 8002cac:	431c      	orrs	r4, r3
 8002cae:	e5db      	b.n	8002868 <__aeabi_dsub+0x264>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	2400      	movs	r4, #0
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e548      	b.n	800274a <__aeabi_dsub+0x146>
 8002cb8:	19dc      	adds	r4, r3, r7
 8002cba:	42bc      	cmp	r4, r7
 8002cbc:	41bf      	sbcs	r7, r7
 8002cbe:	4461      	add	r1, ip
 8002cc0:	4689      	mov	r9, r1
 8002cc2:	427f      	negs	r7, r7
 8002cc4:	44b9      	add	r9, r7
 8002cc6:	e738      	b.n	8002b3a <__aeabi_dsub+0x536>
 8002cc8:	464b      	mov	r3, r9
 8002cca:	4323      	orrs	r3, r4
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dsub+0x6cc>
 8002cce:	e69f      	b.n	8002a10 <__aeabi_dsub+0x40c>
 8002cd0:	e606      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	000007fe 	.word	0x000007fe
 8002cd8:	000007ff 	.word	0x000007ff
 8002cdc:	ff7fffff 	.word	0xff7fffff
 8002ce0:	08ff      	lsrs	r7, r7, #3
 8002ce2:	074b      	lsls	r3, r1, #29
 8002ce4:	433b      	orrs	r3, r7
 8002ce6:	08cc      	lsrs	r4, r1, #3
 8002ce8:	e616      	b.n	8002918 <__aeabi_dsub+0x314>
 8002cea:	4662      	mov	r2, ip
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	0752      	lsls	r2, r2, #29
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	4662      	mov	r2, ip
 8002cf4:	08d4      	lsrs	r4, r2, #3
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	0312      	lsls	r2, r2, #12
 8002cfa:	4214      	tst	r4, r2
 8002cfc:	d007      	beq.n	8002d0e <__aeabi_dsub+0x70a>
 8002cfe:	08c8      	lsrs	r0, r1, #3
 8002d00:	4210      	tst	r0, r2
 8002d02:	d104      	bne.n	8002d0e <__aeabi_dsub+0x70a>
 8002d04:	465d      	mov	r5, fp
 8002d06:	0004      	movs	r4, r0
 8002d08:	08fb      	lsrs	r3, r7, #3
 8002d0a:	0749      	lsls	r1, r1, #29
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	0f5a      	lsrs	r2, r3, #29
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	0752      	lsls	r2, r2, #29
 8002d14:	08db      	lsrs	r3, r3, #3
 8002d16:	4313      	orrs	r3, r2
 8002d18:	e5fe      	b.n	8002918 <__aeabi_dsub+0x314>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	4a01      	ldr	r2, [pc, #4]	; (8002d24 <__aeabi_dsub+0x720>)
 8002d1e:	001c      	movs	r4, r3
 8002d20:	e513      	b.n	800274a <__aeabi_dsub+0x146>
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	000007ff 	.word	0x000007ff

08002d28 <__aeabi_dcmpun>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	0005      	movs	r5, r0
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <__aeabi_dcmpun+0x38>)
 8002d2e:	031c      	lsls	r4, r3, #12
 8002d30:	0016      	movs	r6, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	030a      	lsls	r2, r1, #12
 8002d36:	0049      	lsls	r1, r1, #1
 8002d38:	0b12      	lsrs	r2, r2, #12
 8002d3a:	0d49      	lsrs	r1, r1, #21
 8002d3c:	0b24      	lsrs	r4, r4, #12
 8002d3e:	0d5b      	lsrs	r3, r3, #21
 8002d40:	4281      	cmp	r1, r0
 8002d42:	d008      	beq.n	8002d56 <__aeabi_dcmpun+0x2e>
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <__aeabi_dcmpun+0x38>)
 8002d46:	2000      	movs	r0, #0
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d103      	bne.n	8002d54 <__aeabi_dcmpun+0x2c>
 8002d4c:	0020      	movs	r0, r4
 8002d4e:	4330      	orrs	r0, r6
 8002d50:	1e43      	subs	r3, r0, #1
 8002d52:	4198      	sbcs	r0, r3
 8002d54:	bd70      	pop	{r4, r5, r6, pc}
 8002d56:	2001      	movs	r0, #1
 8002d58:	432a      	orrs	r2, r5
 8002d5a:	d1fb      	bne.n	8002d54 <__aeabi_dcmpun+0x2c>
 8002d5c:	e7f2      	b.n	8002d44 <__aeabi_dcmpun+0x1c>
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	000007ff 	.word	0x000007ff

08002d64 <__aeabi_d2iz>:
 8002d64:	000a      	movs	r2, r1
 8002d66:	b530      	push	{r4, r5, lr}
 8002d68:	4c13      	ldr	r4, [pc, #76]	; (8002db8 <__aeabi_d2iz+0x54>)
 8002d6a:	0053      	lsls	r3, r2, #1
 8002d6c:	0309      	lsls	r1, r1, #12
 8002d6e:	0005      	movs	r5, r0
 8002d70:	0b09      	lsrs	r1, r1, #12
 8002d72:	2000      	movs	r0, #0
 8002d74:	0d5b      	lsrs	r3, r3, #21
 8002d76:	0fd2      	lsrs	r2, r2, #31
 8002d78:	42a3      	cmp	r3, r4
 8002d7a:	dd04      	ble.n	8002d86 <__aeabi_d2iz+0x22>
 8002d7c:	480f      	ldr	r0, [pc, #60]	; (8002dbc <__aeabi_d2iz+0x58>)
 8002d7e:	4283      	cmp	r3, r0
 8002d80:	dd02      	ble.n	8002d88 <__aeabi_d2iz+0x24>
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <__aeabi_d2iz+0x5c>)
 8002d84:	18d0      	adds	r0, r2, r3
 8002d86:	bd30      	pop	{r4, r5, pc}
 8002d88:	2080      	movs	r0, #128	; 0x80
 8002d8a:	0340      	lsls	r0, r0, #13
 8002d8c:	4301      	orrs	r1, r0
 8002d8e:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <__aeabi_d2iz+0x60>)
 8002d90:	1ac0      	subs	r0, r0, r3
 8002d92:	281f      	cmp	r0, #31
 8002d94:	dd08      	ble.n	8002da8 <__aeabi_d2iz+0x44>
 8002d96:	480c      	ldr	r0, [pc, #48]	; (8002dc8 <__aeabi_d2iz+0x64>)
 8002d98:	1ac3      	subs	r3, r0, r3
 8002d9a:	40d9      	lsrs	r1, r3
 8002d9c:	000b      	movs	r3, r1
 8002d9e:	4258      	negs	r0, r3
 8002da0:	2a00      	cmp	r2, #0
 8002da2:	d1f0      	bne.n	8002d86 <__aeabi_d2iz+0x22>
 8002da4:	0018      	movs	r0, r3
 8002da6:	e7ee      	b.n	8002d86 <__aeabi_d2iz+0x22>
 8002da8:	4c08      	ldr	r4, [pc, #32]	; (8002dcc <__aeabi_d2iz+0x68>)
 8002daa:	40c5      	lsrs	r5, r0
 8002dac:	46a4      	mov	ip, r4
 8002dae:	4463      	add	r3, ip
 8002db0:	4099      	lsls	r1, r3
 8002db2:	000b      	movs	r3, r1
 8002db4:	432b      	orrs	r3, r5
 8002db6:	e7f2      	b.n	8002d9e <__aeabi_d2iz+0x3a>
 8002db8:	000003fe 	.word	0x000003fe
 8002dbc:	0000041d 	.word	0x0000041d
 8002dc0:	7fffffff 	.word	0x7fffffff
 8002dc4:	00000433 	.word	0x00000433
 8002dc8:	00000413 	.word	0x00000413
 8002dcc:	fffffbed 	.word	0xfffffbed

08002dd0 <__aeabi_i2d>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d016      	beq.n	8002e04 <__aeabi_i2d+0x34>
 8002dd6:	17c3      	asrs	r3, r0, #31
 8002dd8:	18c5      	adds	r5, r0, r3
 8002dda:	405d      	eors	r5, r3
 8002ddc:	0fc4      	lsrs	r4, r0, #31
 8002dde:	0028      	movs	r0, r5
 8002de0:	f000 f91c 	bl	800301c <__clzsi2>
 8002de4:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <__aeabi_i2d+0x5c>)
 8002de6:	1a12      	subs	r2, r2, r0
 8002de8:	280a      	cmp	r0, #10
 8002dea:	dc16      	bgt.n	8002e1a <__aeabi_i2d+0x4a>
 8002dec:	0003      	movs	r3, r0
 8002dee:	002e      	movs	r6, r5
 8002df0:	3315      	adds	r3, #21
 8002df2:	409e      	lsls	r6, r3
 8002df4:	230b      	movs	r3, #11
 8002df6:	1a18      	subs	r0, r3, r0
 8002df8:	40c5      	lsrs	r5, r0
 8002dfa:	0552      	lsls	r2, r2, #21
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	0b2d      	lsrs	r5, r5, #12
 8002e00:	0d53      	lsrs	r3, r2, #21
 8002e02:	e003      	b.n	8002e0c <__aeabi_i2d+0x3c>
 8002e04:	2400      	movs	r4, #0
 8002e06:	2300      	movs	r3, #0
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	051b      	lsls	r3, r3, #20
 8002e0e:	432b      	orrs	r3, r5
 8002e10:	07e4      	lsls	r4, r4, #31
 8002e12:	4323      	orrs	r3, r4
 8002e14:	0030      	movs	r0, r6
 8002e16:	0019      	movs	r1, r3
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	380b      	subs	r0, #11
 8002e1c:	4085      	lsls	r5, r0
 8002e1e:	0552      	lsls	r2, r2, #21
 8002e20:	032d      	lsls	r5, r5, #12
 8002e22:	2600      	movs	r6, #0
 8002e24:	0b2d      	lsrs	r5, r5, #12
 8002e26:	0d53      	lsrs	r3, r2, #21
 8002e28:	e7f0      	b.n	8002e0c <__aeabi_i2d+0x3c>
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	0000041e 	.word	0x0000041e

08002e30 <__aeabi_ui2d>:
 8002e30:	b510      	push	{r4, lr}
 8002e32:	1e04      	subs	r4, r0, #0
 8002e34:	d010      	beq.n	8002e58 <__aeabi_ui2d+0x28>
 8002e36:	f000 f8f1 	bl	800301c <__clzsi2>
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <__aeabi_ui2d+0x48>)
 8002e3c:	1a1b      	subs	r3, r3, r0
 8002e3e:	280a      	cmp	r0, #10
 8002e40:	dc11      	bgt.n	8002e66 <__aeabi_ui2d+0x36>
 8002e42:	220b      	movs	r2, #11
 8002e44:	0021      	movs	r1, r4
 8002e46:	1a12      	subs	r2, r2, r0
 8002e48:	40d1      	lsrs	r1, r2
 8002e4a:	3015      	adds	r0, #21
 8002e4c:	030a      	lsls	r2, r1, #12
 8002e4e:	055b      	lsls	r3, r3, #21
 8002e50:	4084      	lsls	r4, r0
 8002e52:	0b12      	lsrs	r2, r2, #12
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	e001      	b.n	8002e5c <__aeabi_ui2d+0x2c>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	051b      	lsls	r3, r3, #20
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	0020      	movs	r0, r4
 8002e62:	0019      	movs	r1, r3
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	0022      	movs	r2, r4
 8002e68:	380b      	subs	r0, #11
 8002e6a:	4082      	lsls	r2, r0
 8002e6c:	055b      	lsls	r3, r3, #21
 8002e6e:	0312      	lsls	r2, r2, #12
 8002e70:	2400      	movs	r4, #0
 8002e72:	0b12      	lsrs	r2, r2, #12
 8002e74:	0d5b      	lsrs	r3, r3, #21
 8002e76:	e7f1      	b.n	8002e5c <__aeabi_ui2d+0x2c>
 8002e78:	0000041e 	.word	0x0000041e

08002e7c <__aeabi_f2d>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	0043      	lsls	r3, r0, #1
 8002e80:	0246      	lsls	r6, r0, #9
 8002e82:	0fc4      	lsrs	r4, r0, #31
 8002e84:	20fe      	movs	r0, #254	; 0xfe
 8002e86:	0e1b      	lsrs	r3, r3, #24
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	0a75      	lsrs	r5, r6, #9
 8002e8c:	4208      	tst	r0, r1
 8002e8e:	d00c      	beq.n	8002eaa <__aeabi_f2d+0x2e>
 8002e90:	22e0      	movs	r2, #224	; 0xe0
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4694      	mov	ip, r2
 8002e96:	076d      	lsls	r5, r5, #29
 8002e98:	0b36      	lsrs	r6, r6, #12
 8002e9a:	4463      	add	r3, ip
 8002e9c:	051b      	lsls	r3, r3, #20
 8002e9e:	4333      	orrs	r3, r6
 8002ea0:	07e4      	lsls	r4, r4, #31
 8002ea2:	4323      	orrs	r3, r4
 8002ea4:	0028      	movs	r0, r5
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d114      	bne.n	8002ed8 <__aeabi_f2d+0x5c>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	d01b      	beq.n	8002eea <__aeabi_f2d+0x6e>
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	f000 f8b2 	bl	800301c <__clzsi2>
 8002eb8:	280a      	cmp	r0, #10
 8002eba:	dc1c      	bgt.n	8002ef6 <__aeabi_f2d+0x7a>
 8002ebc:	230b      	movs	r3, #11
 8002ebe:	002e      	movs	r6, r5
 8002ec0:	1a1b      	subs	r3, r3, r0
 8002ec2:	40de      	lsrs	r6, r3
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	3315      	adds	r3, #21
 8002ec8:	409d      	lsls	r5, r3
 8002eca:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <__aeabi_f2d+0x88>)
 8002ecc:	0336      	lsls	r6, r6, #12
 8002ece:	1a12      	subs	r2, r2, r0
 8002ed0:	0552      	lsls	r2, r2, #21
 8002ed2:	0b36      	lsrs	r6, r6, #12
 8002ed4:	0d53      	lsrs	r3, r2, #21
 8002ed6:	e7e1      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ed8:	2d00      	cmp	r5, #0
 8002eda:	d009      	beq.n	8002ef0 <__aeabi_f2d+0x74>
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	0b36      	lsrs	r6, r6, #12
 8002ee0:	0312      	lsls	r2, r2, #12
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <__aeabi_f2d+0x8c>)
 8002ee4:	076d      	lsls	r5, r5, #29
 8002ee6:	4316      	orrs	r6, r2
 8002ee8:	e7d8      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2600      	movs	r6, #0
 8002eee:	e7d5      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ef0:	2600      	movs	r6, #0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <__aeabi_f2d+0x8c>)
 8002ef4:	e7d2      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	3b0b      	subs	r3, #11
 8002efa:	409d      	lsls	r5, r3
 8002efc:	002e      	movs	r6, r5
 8002efe:	2500      	movs	r5, #0
 8002f00:	e7e3      	b.n	8002eca <__aeabi_f2d+0x4e>
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	00000389 	.word	0x00000389
 8002f08:	000007ff 	.word	0x000007ff

08002f0c <__aeabi_d2f>:
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	004b      	lsls	r3, r1, #1
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	0d5b      	lsrs	r3, r3, #21
 8002f14:	030c      	lsls	r4, r1, #12
 8002f16:	4e3d      	ldr	r6, [pc, #244]	; (800300c <__aeabi_d2f+0x100>)
 8002f18:	0a64      	lsrs	r4, r4, #9
 8002f1a:	0f40      	lsrs	r0, r0, #29
 8002f1c:	1c5f      	adds	r7, r3, #1
 8002f1e:	0fc9      	lsrs	r1, r1, #31
 8002f20:	4304      	orrs	r4, r0
 8002f22:	00d5      	lsls	r5, r2, #3
 8002f24:	4237      	tst	r7, r6
 8002f26:	d00a      	beq.n	8002f3e <__aeabi_d2f+0x32>
 8002f28:	4839      	ldr	r0, [pc, #228]	; (8003010 <__aeabi_d2f+0x104>)
 8002f2a:	181e      	adds	r6, r3, r0
 8002f2c:	2efe      	cmp	r6, #254	; 0xfe
 8002f2e:	dd16      	ble.n	8002f5e <__aeabi_d2f+0x52>
 8002f30:	20ff      	movs	r0, #255	; 0xff
 8002f32:	2400      	movs	r4, #0
 8002f34:	05c0      	lsls	r0, r0, #23
 8002f36:	4320      	orrs	r0, r4
 8002f38:	07c9      	lsls	r1, r1, #31
 8002f3a:	4308      	orrs	r0, r1
 8002f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <__aeabi_d2f+0x44>
 8002f42:	432c      	orrs	r4, r5
 8002f44:	d026      	beq.n	8002f94 <__aeabi_d2f+0x88>
 8002f46:	2205      	movs	r2, #5
 8002f48:	0192      	lsls	r2, r2, #6
 8002f4a:	0a54      	lsrs	r4, r2, #9
 8002f4c:	b2d8      	uxtb	r0, r3
 8002f4e:	e7f1      	b.n	8002f34 <__aeabi_d2f+0x28>
 8002f50:	4325      	orrs	r5, r4
 8002f52:	d0ed      	beq.n	8002f30 <__aeabi_d2f+0x24>
 8002f54:	2080      	movs	r0, #128	; 0x80
 8002f56:	03c0      	lsls	r0, r0, #15
 8002f58:	4304      	orrs	r4, r0
 8002f5a:	20ff      	movs	r0, #255	; 0xff
 8002f5c:	e7ea      	b.n	8002f34 <__aeabi_d2f+0x28>
 8002f5e:	2e00      	cmp	r6, #0
 8002f60:	dd1b      	ble.n	8002f9a <__aeabi_d2f+0x8e>
 8002f62:	0192      	lsls	r2, r2, #6
 8002f64:	1e53      	subs	r3, r2, #1
 8002f66:	419a      	sbcs	r2, r3
 8002f68:	00e4      	lsls	r4, r4, #3
 8002f6a:	0f6d      	lsrs	r5, r5, #29
 8002f6c:	4322      	orrs	r2, r4
 8002f6e:	432a      	orrs	r2, r5
 8002f70:	0753      	lsls	r3, r2, #29
 8002f72:	d048      	beq.n	8003006 <__aeabi_d2f+0xfa>
 8002f74:	230f      	movs	r3, #15
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d000      	beq.n	8002f7e <__aeabi_d2f+0x72>
 8002f7c:	3204      	adds	r2, #4
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	04db      	lsls	r3, r3, #19
 8002f82:	4013      	ands	r3, r2
 8002f84:	d03f      	beq.n	8003006 <__aeabi_d2f+0xfa>
 8002f86:	1c70      	adds	r0, r6, #1
 8002f88:	2efe      	cmp	r6, #254	; 0xfe
 8002f8a:	d0d1      	beq.n	8002f30 <__aeabi_d2f+0x24>
 8002f8c:	0192      	lsls	r2, r2, #6
 8002f8e:	0a54      	lsrs	r4, r2, #9
 8002f90:	b2c0      	uxtb	r0, r0
 8002f92:	e7cf      	b.n	8002f34 <__aeabi_d2f+0x28>
 8002f94:	2000      	movs	r0, #0
 8002f96:	2400      	movs	r4, #0
 8002f98:	e7cc      	b.n	8002f34 <__aeabi_d2f+0x28>
 8002f9a:	0032      	movs	r2, r6
 8002f9c:	3217      	adds	r2, #23
 8002f9e:	db22      	blt.n	8002fe6 <__aeabi_d2f+0xda>
 8002fa0:	2080      	movs	r0, #128	; 0x80
 8002fa2:	0400      	lsls	r0, r0, #16
 8002fa4:	4320      	orrs	r0, r4
 8002fa6:	241e      	movs	r4, #30
 8002fa8:	1ba4      	subs	r4, r4, r6
 8002faa:	2c1f      	cmp	r4, #31
 8002fac:	dd1d      	ble.n	8002fea <__aeabi_d2f+0xde>
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4252      	negs	r2, r2
 8002fb2:	1b96      	subs	r6, r2, r6
 8002fb4:	0002      	movs	r2, r0
 8002fb6:	40f2      	lsrs	r2, r6
 8002fb8:	0016      	movs	r6, r2
 8002fba:	2c20      	cmp	r4, #32
 8002fbc:	d004      	beq.n	8002fc8 <__aeabi_d2f+0xbc>
 8002fbe:	4a15      	ldr	r2, [pc, #84]	; (8003014 <__aeabi_d2f+0x108>)
 8002fc0:	4694      	mov	ip, r2
 8002fc2:	4463      	add	r3, ip
 8002fc4:	4098      	lsls	r0, r3
 8002fc6:	4305      	orrs	r5, r0
 8002fc8:	002a      	movs	r2, r5
 8002fca:	1e53      	subs	r3, r2, #1
 8002fcc:	419a      	sbcs	r2, r3
 8002fce:	4332      	orrs	r2, r6
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	0753      	lsls	r3, r2, #29
 8002fd4:	d1ce      	bne.n	8002f74 <__aeabi_d2f+0x68>
 8002fd6:	2480      	movs	r4, #128	; 0x80
 8002fd8:	0013      	movs	r3, r2
 8002fda:	04e4      	lsls	r4, r4, #19
 8002fdc:	2001      	movs	r0, #1
 8002fde:	4023      	ands	r3, r4
 8002fe0:	4222      	tst	r2, r4
 8002fe2:	d1d3      	bne.n	8002f8c <__aeabi_d2f+0x80>
 8002fe4:	e7b0      	b.n	8002f48 <__aeabi_d2f+0x3c>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e7ad      	b.n	8002f46 <__aeabi_d2f+0x3a>
 8002fea:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <__aeabi_d2f+0x10c>)
 8002fec:	4694      	mov	ip, r2
 8002fee:	002a      	movs	r2, r5
 8002ff0:	40e2      	lsrs	r2, r4
 8002ff2:	0014      	movs	r4, r2
 8002ff4:	002a      	movs	r2, r5
 8002ff6:	4463      	add	r3, ip
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	4098      	lsls	r0, r3
 8002ffc:	1e55      	subs	r5, r2, #1
 8002ffe:	41aa      	sbcs	r2, r5
 8003000:	4302      	orrs	r2, r0
 8003002:	4322      	orrs	r2, r4
 8003004:	e7e4      	b.n	8002fd0 <__aeabi_d2f+0xc4>
 8003006:	0033      	movs	r3, r6
 8003008:	e79e      	b.n	8002f48 <__aeabi_d2f+0x3c>
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	000007fe 	.word	0x000007fe
 8003010:	fffffc80 	.word	0xfffffc80
 8003014:	fffffca2 	.word	0xfffffca2
 8003018:	fffffc82 	.word	0xfffffc82

0800301c <__clzsi2>:
 800301c:	211c      	movs	r1, #28
 800301e:	2301      	movs	r3, #1
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	4298      	cmp	r0, r3
 8003024:	d301      	bcc.n	800302a <__clzsi2+0xe>
 8003026:	0c00      	lsrs	r0, r0, #16
 8003028:	3910      	subs	r1, #16
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	4298      	cmp	r0, r3
 800302e:	d301      	bcc.n	8003034 <__clzsi2+0x18>
 8003030:	0a00      	lsrs	r0, r0, #8
 8003032:	3908      	subs	r1, #8
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	4298      	cmp	r0, r3
 8003038:	d301      	bcc.n	800303e <__clzsi2+0x22>
 800303a:	0900      	lsrs	r0, r0, #4
 800303c:	3904      	subs	r1, #4
 800303e:	a202      	add	r2, pc, #8	; (adr r2, 8003048 <__clzsi2+0x2c>)
 8003040:	5c10      	ldrb	r0, [r2, r0]
 8003042:	1840      	adds	r0, r0, r1
 8003044:	4770      	bx	lr
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	02020304 	.word	0x02020304
 800304c:	01010101 	.word	0x01010101
	...

08003058 <initialize_Sensors>:
#include "stm32f0xx_hal_conf.h"



void initialize_Sensors()
{
 8003058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305a:	b08d      	sub	sp, #52	; 0x34
 800305c:	af04      	add	r7, sp, #16
	int error_count = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef ret;
	uint8_t buffer;

	//INITIALIZE GYROSCOPE
	ret = HAL_I2C_Mem_Read(&hi2c1, GYRO_DEVADDR, Gyro_WHO_AM_I, 1, &buffer, 1, 5); //This should return "0xd7" for the Gyroscope in the buffer[0]
 8003062:	2142      	movs	r1, #66	; 0x42
 8003064:	220c      	movs	r2, #12
 8003066:	251b      	movs	r5, #27
 8003068:	197c      	adds	r4, r7, r5
 800306a:	488c      	ldr	r0, [pc, #560]	; (800329c <initialize_Sensors+0x244>)
 800306c:	2305      	movs	r3, #5
 800306e:	9302      	str	r3, [sp, #8]
 8003070:	2301      	movs	r3, #1
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2301      	movs	r3, #1
 800307a:	f001 fe89 	bl	8004d90 <HAL_I2C_Mem_Read>
 800307e:	0003      	movs	r3, r0
 8003080:	7023      	strb	r3, [r4, #0]
	//This leads to a nominal sensitivity of 7.8125 mdps/LSB.
	error_count += (ret!=HAL_OK);
 8003082:	0028      	movs	r0, r5
 8003084:	183b      	adds	r3, r7, r0
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	1e5a      	subs	r2, r3, #1
 800308a:	4193      	sbcs	r3, r2
 800308c:	b2db      	uxtb	r3, r3
 800308e:	001a      	movs	r2, r3
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	189b      	adds	r3, r3, r2
 8003094:	61fb      	str	r3, [r7, #28]
	uint16_t CTRL_REG0 = 0x0D;
 8003096:	2618      	movs	r6, #24
 8003098:	19bb      	adds	r3, r7, r6
 800309a:	220d      	movs	r2, #13
 800309c:	801a      	strh	r2, [r3, #0]
	uint8_t BW = 0b00; //Bandwidth BW=4
 800309e:	2117      	movs	r1, #23
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
	uint8_t FSR = 0b11; //Full Scale Range FSR= +-250mdps/LSB
 80030a6:	2416      	movs	r4, #22
 80030a8:	193b      	adds	r3, r7, r4
 80030aa:	2203      	movs	r2, #3
 80030ac:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG0_input = BW<<6 | FSR; //Assembly of register Input
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	019b      	lsls	r3, r3, #6
 80030b4:	b25a      	sxtb	r2, r3
 80030b6:	193b      	adds	r3, r7, r4
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b25b      	sxtb	r3, r3
 80030bc:	4313      	orrs	r3, r2
 80030be:	b25b      	sxtb	r3, r3
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	1cfb      	adds	r3, r7, #3
 80030c4:	701a      	strb	r2, [r3, #0]

	ret = HAL_I2C_Mem_Write(&hi2c1, GYRO_DEVADDR, CTRL_REG0, 1, &CTRL_REG0_input, 1, 5);
 80030c6:	2142      	movs	r1, #66	; 0x42
 80030c8:	0005      	movs	r5, r0
 80030ca:	183c      	adds	r4, r7, r0
 80030cc:	19bb      	adds	r3, r7, r6
 80030ce:	881a      	ldrh	r2, [r3, #0]
 80030d0:	4872      	ldr	r0, [pc, #456]	; (800329c <initialize_Sensors+0x244>)
 80030d2:	2305      	movs	r3, #5
 80030d4:	9302      	str	r3, [sp, #8]
 80030d6:	2301      	movs	r3, #1
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	1cfb      	adds	r3, r7, #3
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2301      	movs	r3, #1
 80030e0:	f001 fd28 	bl	8004b34 <HAL_I2C_Mem_Write>
 80030e4:	0003      	movs	r3, r0
 80030e6:	7023      	strb	r3, [r4, #0]
	error_count += (ret!=HAL_OK);
 80030e8:	0028      	movs	r0, r5
 80030ea:	183b      	adds	r3, r7, r0
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	1e5a      	subs	r2, r3, #1
 80030f0:	4193      	sbcs	r3, r2
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	001a      	movs	r2, r3
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	189b      	adds	r3, r3, r2
 80030fa:	61fb      	str	r3, [r7, #28]

	uint16_t CTRL_REG1 = 0x13;
 80030fc:	2614      	movs	r6, #20
 80030fe:	19bb      	adds	r3, r7, r6
 8003100:	2213      	movs	r2, #19
 8003102:	801a      	strh	r2, [r3, #0]
	uint8_t ODR = 0b100; //Output Data Rate ODR = 50Hz
 8003104:	2113      	movs	r1, #19
 8003106:	187b      	adds	r3, r7, r1
 8003108:	2204      	movs	r2, #4
 800310a:	701a      	strb	r2, [r3, #0]
	uint8_t ACTIVE = 0b1; //active=1
 800310c:	2412      	movs	r4, #18
 800310e:	193b      	adds	r3, r7, r4
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
	uint8_t READY = 0b0; //ready=X (0 or 1)
 8003114:	2511      	movs	r5, #17
 8003116:	197b      	adds	r3, r7, r5
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG1_input = ODR<<2 | ACTIVE<<1 | READY; //Assembly of register Input
 800311c:	187b      	adds	r3, r7, r1
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	b25a      	sxtb	r2, r3
 8003124:	193b      	adds	r3, r7, r4
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	b25b      	sxtb	r3, r3
 800312c:	4313      	orrs	r3, r2
 800312e:	b25a      	sxtb	r2, r3
 8003130:	197b      	adds	r3, r7, r5
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b25b      	sxtb	r3, r3
 8003136:	4313      	orrs	r3, r2
 8003138:	b25b      	sxtb	r3, r3
 800313a:	b2da      	uxtb	r2, r3
 800313c:	1cbb      	adds	r3, r7, #2
 800313e:	701a      	strb	r2, [r3, #0]

	//ret = initialize_Sensor(GYRO_DEVADDR, Gyro_WHO_AM_I, CTRL_REG1, CTRL_REG1_input, output);
	ret = HAL_I2C_Mem_Write(&hi2c1, GYRO_DEVADDR, CTRL_REG1, 1, &CTRL_REG1_input, 1, 5);
 8003140:	2142      	movs	r1, #66	; 0x42
 8003142:	0005      	movs	r5, r0
 8003144:	183c      	adds	r4, r7, r0
 8003146:	19bb      	adds	r3, r7, r6
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	4854      	ldr	r0, [pc, #336]	; (800329c <initialize_Sensors+0x244>)
 800314c:	2305      	movs	r3, #5
 800314e:	9302      	str	r3, [sp, #8]
 8003150:	2301      	movs	r3, #1
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	1cbb      	adds	r3, r7, #2
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2301      	movs	r3, #1
 800315a:	f001 fceb 	bl	8004b34 <HAL_I2C_Mem_Write>
 800315e:	0003      	movs	r3, r0
 8003160:	7023      	strb	r3, [r4, #0]
	error_count += (ret!=HAL_OK);
 8003162:	197b      	adds	r3, r7, r5
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	4193      	sbcs	r3, r2
 800316a:	b2db      	uxtb	r3, r3
 800316c:	001a      	movs	r2, r3
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	189b      	adds	r3, r3, r2
 8003172:	61fb      	str	r3, [r7, #28]

	//INITIALIZE MAGNETOMETER
	ret = HAL_I2C_Mem_Read(&hi2c1, GYRO_DEVADDR, MAGACC_WHO_AM_I, 1, &buffer, 1, 5); //This should return "0xc7" for the Magnetometer/Accelerometer in the buffer[0]
 8003174:	2142      	movs	r1, #66	; 0x42
 8003176:	220d      	movs	r2, #13
 8003178:	197c      	adds	r4, r7, r5
 800317a:	4848      	ldr	r0, [pc, #288]	; (800329c <initialize_Sensors+0x244>)
 800317c:	2305      	movs	r3, #5
 800317e:	9302      	str	r3, [sp, #8]
 8003180:	2301      	movs	r3, #1
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2301      	movs	r3, #1
 800318a:	f001 fe01 	bl	8004d90 <HAL_I2C_Mem_Read>
 800318e:	0003      	movs	r3, r0
 8003190:	7023      	strb	r3, [r4, #0]
	error_count += (ret!=HAL_OK);
 8003192:	0028      	movs	r0, r5
 8003194:	197b      	adds	r3, r7, r5
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	1e5a      	subs	r2, r3, #1
 800319a:	4193      	sbcs	r3, r2
 800319c:	b2db      	uxtb	r3, r3
 800319e:	001a      	movs	r2, r3
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	61fb      	str	r3, [r7, #28]

	uint16_t MA_CTRL_REG1 = 0x2A;
 80031a6:	260e      	movs	r6, #14
 80031a8:	19bb      	adds	r3, r7, r6
 80031aa:	222a      	movs	r2, #42	; 0x2a
 80031ac:	801a      	strh	r2, [r3, #0]
	uint8_t M_ODR = 0b100; //Output Data Rate ODR = 50Hz
 80031ae:	210d      	movs	r1, #13
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	2204      	movs	r2, #4
 80031b4:	701a      	strb	r2, [r3, #0]
	uint8_t M_LNOISE = 0b1; //low_noise=1;
 80031b6:	240c      	movs	r4, #12
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
	uint8_t M_ACTIVE = 0b1; //active=1;
 80031be:	250b      	movs	r5, #11
 80031c0:	197b      	adds	r3, r7, r5
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
	uint8_t MA_CTRL_REG1_input = M_ODR<<3 | M_LNOISE<<2 | M_ACTIVE; //Assembly of register Input
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	b25a      	sxtb	r2, r3
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	b25b      	sxtb	r3, r3
 80031d6:	4313      	orrs	r3, r2
 80031d8:	b25a      	sxtb	r2, r3
 80031da:	197b      	adds	r3, r7, r5
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	4313      	orrs	r3, r2
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	1c7b      	adds	r3, r7, #1
 80031e8:	701a      	strb	r2, [r3, #0]

	ret = HAL_I2C_Mem_Write(&hi2c1, MAGACC_DEVADDR, MA_CTRL_REG1, 1, &MA_CTRL_REG1_input, 1, 5);
 80031ea:	213e      	movs	r1, #62	; 0x3e
 80031ec:	0005      	movs	r5, r0
 80031ee:	183c      	adds	r4, r7, r0
 80031f0:	19bb      	adds	r3, r7, r6
 80031f2:	881a      	ldrh	r2, [r3, #0]
 80031f4:	4829      	ldr	r0, [pc, #164]	; (800329c <initialize_Sensors+0x244>)
 80031f6:	2305      	movs	r3, #5
 80031f8:	9302      	str	r3, [sp, #8]
 80031fa:	2301      	movs	r3, #1
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	1c7b      	adds	r3, r7, #1
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2301      	movs	r3, #1
 8003204:	f001 fc96 	bl	8004b34 <HAL_I2C_Mem_Write>
 8003208:	0003      	movs	r3, r0
 800320a:	7023      	strb	r3, [r4, #0]
	error_count += (ret!=HAL_OK);
 800320c:	0028      	movs	r0, r5
 800320e:	183b      	adds	r3, r7, r0
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	1e5a      	subs	r2, r3, #1
 8003214:	4193      	sbcs	r3, r2
 8003216:	b2db      	uxtb	r3, r3
 8003218:	001a      	movs	r2, r3
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	189b      	adds	r3, r3, r2
 800321e:	61fb      	str	r3, [r7, #28]
	//This sensor has a nominal sensitivity of 0.1 μT/LSB.

	uint16_t M_CTRL_REG1 = 0x5B;
 8003220:	2608      	movs	r6, #8
 8003222:	19bb      	adds	r3, r7, r6
 8003224:	225b      	movs	r2, #91	; 0x5b
 8003226:	801a      	strh	r2, [r3, #0]

	uint8_t M_ACAL = 0b1; //Auto-Calibration: enabled
 8003228:	1dfb      	adds	r3, r7, #7
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
	uint8_t M_OS = 0b111; //Oversample Ratio OSR=7
 800322e:	1dbb      	adds	r3, r7, #6
 8003230:	2207      	movs	r2, #7
 8003232:	701a      	strb	r2, [r3, #0]
	uint8_t M_HMS = 0b01; //Hybrid Mode: Only Magnetometer is active
 8003234:	1d7b      	adds	r3, r7, #5
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
	uint8_t M_CTRL_REG1_input = M_ACAL<<7 | M_OS<<2 | M_HMS; //Assembly of register Input
 800323a:	1dfb      	adds	r3, r7, #7
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	01db      	lsls	r3, r3, #7
 8003240:	b25a      	sxtb	r2, r3
 8003242:	1dbb      	adds	r3, r7, #6
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	b25b      	sxtb	r3, r3
 800324a:	4313      	orrs	r3, r2
 800324c:	b25a      	sxtb	r2, r3
 800324e:	1d7b      	adds	r3, r7, #5
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b25b      	sxtb	r3, r3
 8003254:	4313      	orrs	r3, r2
 8003256:	b25b      	sxtb	r3, r3
 8003258:	b2da      	uxtb	r2, r3
 800325a:	003b      	movs	r3, r7
 800325c:	701a      	strb	r2, [r3, #0]
	//ret = initialize_Sensor(MAGACC_DEVADDR, MAGACC_WHO_AM_I, M_CTRL_REG1, M_CTRL_REG1_input, output);
	ret = HAL_I2C_Mem_Write(&hi2c1, MAGACC_DEVADDR, M_CTRL_REG1, 1, &M_CTRL_REG1_input, 1, 5);
 800325e:	213e      	movs	r1, #62	; 0x3e
 8003260:	0005      	movs	r5, r0
 8003262:	183c      	adds	r4, r7, r0
 8003264:	19bb      	adds	r3, r7, r6
 8003266:	881a      	ldrh	r2, [r3, #0]
 8003268:	480c      	ldr	r0, [pc, #48]	; (800329c <initialize_Sensors+0x244>)
 800326a:	2305      	movs	r3, #5
 800326c:	9302      	str	r3, [sp, #8]
 800326e:	2301      	movs	r3, #1
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	003b      	movs	r3, r7
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2301      	movs	r3, #1
 8003278:	f001 fc5c 	bl	8004b34 <HAL_I2C_Mem_Write>
 800327c:	0003      	movs	r3, r0
 800327e:	7023      	strb	r3, [r4, #0]
	error_count += (ret!=HAL_OK);
 8003280:	197b      	adds	r3, r7, r5
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	4193      	sbcs	r3, r2
 8003288:	b2db      	uxtb	r3, r3
 800328a:	001a      	movs	r2, r3
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	189b      	adds	r3, r3, r2
 8003290:	61fb      	str	r3, [r7, #28]
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b009      	add	sp, #36	; 0x24
 8003298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	20000200 	.word	0x20000200

080032a0 <read_Sensor_data>:

HAL_StatusTypeDef read_Sensor_data(int16_t *Data, uint16_t Sensor_address, uint16_t Start_register)
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af04      	add	r7, sp, #16
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	0008      	movs	r0, r1
 80032aa:	0011      	movs	r1, r2
 80032ac:	1cbb      	adds	r3, r7, #2
 80032ae:	1c02      	adds	r2, r0, #0
 80032b0:	801a      	strh	r2, [r3, #0]
 80032b2:	003b      	movs	r3, r7
 80032b4:	1c0a      	adds	r2, r1, #0
 80032b6:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	uint8_t buffer[6];
	ret=HAL_I2C_Mem_Read(&hi2c1, Sensor_address, Start_register, 1, buffer, 6, 5);
 80032b8:	250f      	movs	r5, #15
 80032ba:	197c      	adds	r4, r7, r5
 80032bc:	003b      	movs	r3, r7
 80032be:	881a      	ldrh	r2, [r3, #0]
 80032c0:	1cbb      	adds	r3, r7, #2
 80032c2:	8819      	ldrh	r1, [r3, #0]
 80032c4:	481f      	ldr	r0, [pc, #124]	; (8003344 <read_Sensor_data+0xa4>)
 80032c6:	2305      	movs	r3, #5
 80032c8:	9302      	str	r3, [sp, #8]
 80032ca:	2306      	movs	r3, #6
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	2308      	movs	r3, #8
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2301      	movs	r3, #1
 80032d6:	f001 fd5b 	bl	8004d90 <HAL_I2C_Mem_Read>
 80032da:	0003      	movs	r3, r0
 80032dc:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(10);
		if (ret == HAL_ERROR){
 80032de:	197b      	adds	r3, r7, r5
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d102      	bne.n	80032ec <read_Sensor_data+0x4c>
			return ret;
 80032e6:	197b      	adds	r3, r7, r5
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	e026      	b.n	800333a <read_Sensor_data+0x9a>

//	Data[0] = (buffer[1]<<8 | buffer[0]);
//	Data[1] = (buffer[3]<<8 | buffer[2]);
//	Data[2] = (buffer[5]<<8 | buffer[4]);

	Data[0] = (buffer[0])<<8 | (buffer[1]);
 80032ec:	2008      	movs	r0, #8
 80032ee:	183b      	adds	r3, r7, r0
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	b21a      	sxth	r2, r3
 80032f6:	183b      	adds	r3, r7, r0
 80032f8:	785b      	ldrb	r3, [r3, #1]
 80032fa:	b21b      	sxth	r3, r3
 80032fc:	4313      	orrs	r3, r2
 80032fe:	b21a      	sxth	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	801a      	strh	r2, [r3, #0]
	Data[1] = (buffer[2])<<8 | (buffer[3]);
 8003304:	183b      	adds	r3, r7, r0
 8003306:	789b      	ldrb	r3, [r3, #2]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	b219      	sxth	r1, r3
 800330c:	183b      	adds	r3, r7, r0
 800330e:	78db      	ldrb	r3, [r3, #3]
 8003310:	b21a      	sxth	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3302      	adds	r3, #2
 8003316:	430a      	orrs	r2, r1
 8003318:	b212      	sxth	r2, r2
 800331a:	801a      	strh	r2, [r3, #0]
	Data[2] = (buffer[4])<<8 | (buffer[5]);
 800331c:	183b      	adds	r3, r7, r0
 800331e:	791b      	ldrb	r3, [r3, #4]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	b219      	sxth	r1, r3
 8003324:	183b      	adds	r3, r7, r0
 8003326:	795b      	ldrb	r3, [r3, #5]
 8003328:	b21a      	sxth	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	430a      	orrs	r2, r1
 8003330:	b212      	sxth	r2, r2
 8003332:	801a      	strh	r2, [r3, #0]
	return ret;
 8003334:	230f      	movs	r3, #15
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	781b      	ldrb	r3, [r3, #0]
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b004      	add	sp, #16
 8003340:	bdb0      	pop	{r4, r5, r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	20000200 	.word	0x20000200

08003348 <convert_Sensor_Data>:

void convert_Sensor_Data(int16_t *rawData, DATA_TypeDef *Data, float conv_factor)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
	Data->x = rawData[0]*conv_factor;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	5e9b      	ldrsh	r3, [r3, r2]
 800335a:	0018      	movs	r0, r3
 800335c:	f7fd ff18 	bl	8001190 <__aeabi_i2f>
 8003360:	1c03      	adds	r3, r0, #0
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	1c18      	adds	r0, r3, #0
 8003366:	f7fd fc3f 	bl	8000be8 <__aeabi_fmul>
 800336a:	1c03      	adds	r3, r0, #0
 800336c:	1c1a      	adds	r2, r3, #0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	601a      	str	r2, [r3, #0]
	Data->y = rawData[1]*conv_factor;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3302      	adds	r3, #2
 8003376:	2200      	movs	r2, #0
 8003378:	5e9b      	ldrsh	r3, [r3, r2]
 800337a:	0018      	movs	r0, r3
 800337c:	f7fd ff08 	bl	8001190 <__aeabi_i2f>
 8003380:	1c03      	adds	r3, r0, #0
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	1c18      	adds	r0, r3, #0
 8003386:	f7fd fc2f 	bl	8000be8 <__aeabi_fmul>
 800338a:	1c03      	adds	r3, r0, #0
 800338c:	1c1a      	adds	r2, r3, #0
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	605a      	str	r2, [r3, #4]
	Data->z = rawData[2]*conv_factor;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3304      	adds	r3, #4
 8003396:	2200      	movs	r2, #0
 8003398:	5e9b      	ldrsh	r3, [r3, r2]
 800339a:	0018      	movs	r0, r3
 800339c:	f7fd fef8 	bl	8001190 <__aeabi_i2f>
 80033a0:	1c03      	adds	r3, r0, #0
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	1c18      	adds	r0, r3, #0
 80033a6:	f7fd fc1f 	bl	8000be8 <__aeabi_fmul>
 80033aa:	1c03      	adds	r3, r0, #0
 80033ac:	1c1a      	adds	r2, r3, #0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	609a      	str	r2, [r3, #8]
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b004      	add	sp, #16
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <LED_dim>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int LED_dim (DATA_TypeDef *Gyro_Data){
 80033bc:	b5b0      	push	{r4, r5, r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

	int min_PWM = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
	int max_PWM = 600;
 80033c8:	2396      	movs	r3, #150	; 0x96
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	617b      	str	r3, [r7, #20]
	int DutyCycle = fabs(Gyro_Data->z)/256*(max_PWM-min_PWM); //DutyCycle = How much time (in ms) of the PWM cycle the LED is on
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	1c18      	adds	r0, r3, #0
 80033d8:	f7ff fd50 	bl	8002e7c <__aeabi_f2d>
 80033dc:	2200      	movs	r2, #0
 80033de:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <LED_dim+0xd4>)
 80033e0:	f7fe faa2 	bl	8001928 <__aeabi_ddiv>
 80033e4:	0002      	movs	r2, r0
 80033e6:	000b      	movs	r3, r1
 80033e8:	0014      	movs	r4, r2
 80033ea:	001d      	movs	r5, r3
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7ff fcec 	bl	8002dd0 <__aeabi_i2d>
 80033f8:	0002      	movs	r2, r0
 80033fa:	000b      	movs	r3, r1
 80033fc:	0020      	movs	r0, r4
 80033fe:	0029      	movs	r1, r5
 8003400:	f7fe fe94 	bl	800212c <__aeabi_dmul>
 8003404:	0002      	movs	r2, r0
 8003406:	000b      	movs	r3, r1
 8003408:	0010      	movs	r0, r2
 800340a:	0019      	movs	r1, r3
 800340c:	f7ff fcaa 	bl	8002d64 <__aeabi_d2iz>
 8003410:	0003      	movs	r3, r0
 8003412:	613b      	str	r3, [r7, #16]
	float threshold = 0.8;
 8003414:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <LED_dim+0xd8>)
 8003416:	60fb      	str	r3, [r7, #12]
	int dir=0;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]

	HAL_TIM_PWM_Stop(&htim3, blue);
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <LED_dim+0xdc>)
 800341e:	2108      	movs	r1, #8
 8003420:	0018      	movs	r0, r3
 8003422:	f003 fe93 	bl	800714c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, green);
 8003426:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <LED_dim+0xdc>)
 8003428:	210c      	movs	r1, #12
 800342a:	0018      	movs	r0, r3
 800342c:	f003 fe8e 	bl	800714c <HAL_TIM_PWM_Stop>

	if (Gyro_Data->z < -threshold){ //Gyro_Data->z > 0 ==> Clockwise Rotation, LD4 (Blue LED) should be on
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6898      	ldr	r0, [r3, #8]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	0612      	lsls	r2, r2, #24
 800343a:	4053      	eors	r3, r2
 800343c:	1c19      	adds	r1, r3, #0
 800343e:	f7fd f845 	bl	80004cc <__aeabi_fcmplt>
 8003442:	1e03      	subs	r3, r0, #0
 8003444:	d00b      	beq.n	800345e <LED_dim+0xa2>
		  HAL_TIM_PWM_Start(&htim3, blue);
 8003446:	4b14      	ldr	r3, [pc, #80]	; (8003498 <LED_dim+0xdc>)
 8003448:	2108      	movs	r1, #8
 800344a:	0018      	movs	r0, r3
 800344c:	f003 fdc6 	bl	8006fdc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim3, blue, DutyCycle);
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <LED_dim+0xdc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	63da      	str	r2, [r3, #60]	; 0x3c
		dir = 1;
 8003458:	2301      	movs	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	e013      	b.n	8003486 <LED_dim+0xca>
	}
	else if (Gyro_Data->z > threshold){ //Gyro_Data->z < 0 ==> Counterclockwise Rotation, LD3 (Green LED) should be on
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	1c19      	adds	r1, r3, #0
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7fd f831 	bl	80004cc <__aeabi_fcmplt>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d00b      	beq.n	8003486 <LED_dim+0xca>
		  HAL_TIM_PWM_Start(&htim3, green);
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <LED_dim+0xdc>)
 8003470:	210c      	movs	r1, #12
 8003472:	0018      	movs	r0, r3
 8003474:	f003 fdb2 	bl	8006fdc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim3, green, DutyCycle);
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <LED_dim+0xdc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
		dir = -1;
 8003480:	2301      	movs	r3, #1
 8003482:	425b      	negs	r3, r3
 8003484:	61fb      	str	r3, [r7, #28]
	}
	return dir;
 8003486:	69fb      	ldr	r3, [r7, #28]
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b008      	add	sp, #32
 800348e:	bdb0      	pop	{r4, r5, r7, pc}
 8003490:	40700000 	.word	0x40700000
 8003494:	3f4ccccd 	.word	0x3f4ccccd
 8003498:	20000294 	.word	0x20000294

0800349c <LED_flash>:


void LED_flash (float angle){
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	static int flash_Dutycycle = 200;

	if(LED_Flash_flag == 0b01){
 80034a4:	4b26      	ldr	r3, [pc, #152]	; (8003540 <LED_flash+0xa4>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d13a      	bne.n	8003524 <LED_flash+0x88>
		if (angle > 0 && Blue_flag==0b01){
 80034ae:	2100      	movs	r1, #0
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7fd f81f 	bl	80004f4 <__aeabi_fcmpgt>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d016      	beq.n	80034e8 <LED_flash+0x4c>
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <LED_flash+0xa8>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d111      	bne.n	80034e8 <LED_flash+0x4c>
			HAL_TIM_PWM_Start(&htim3, blue); //Angle to zero < 0 ==> Clockwise Deviation from 0, LD4 (Blue LED) should flash
 80034c4:	4b20      	ldr	r3, [pc, #128]	; (8003548 <LED_flash+0xac>)
 80034c6:	2108      	movs	r1, #8
 80034c8:	0018      	movs	r0, r3
 80034ca:	f003 fd87 	bl	8006fdc <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim3, green, 0);
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <LED_flash+0xac>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim3, blue, flash_Dutycycle);
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <LED_flash+0xb0>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <LED_flash+0xac>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	63da      	str	r2, [r3, #60]	; 0x3c
			Green_flag=0b00;
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <LED_flash+0xb4>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
		}
	} else{
		HAL_TIM_PWM_Stop(&htim3, blue);
		HAL_TIM_PWM_Stop(&htim3, green);
	}
}
 80034e6:	e027      	b.n	8003538 <LED_flash+0x9c>
		else if (angle < 0 && Green_flag==0b01){
 80034e8:	2100      	movs	r1, #0
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fc ffee 	bl	80004cc <__aeabi_fcmplt>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d100      	bne.n	80034f6 <LED_flash+0x5a>
}
 80034f4:	e020      	b.n	8003538 <LED_flash+0x9c>
		else if (angle < 0 && Green_flag==0b01){
 80034f6:	4b16      	ldr	r3, [pc, #88]	; (8003550 <LED_flash+0xb4>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d11b      	bne.n	8003538 <LED_flash+0x9c>
			HAL_TIM_PWM_Start(&htim3, green); //Angle to zero > 0 ==> Counterclockwise Deviation from 0, LD4 (Green LED) should flash
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <LED_flash+0xac>)
 8003502:	210c      	movs	r1, #12
 8003504:	0018      	movs	r0, r3
 8003506:	f003 fd69 	bl	8006fdc <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim3, blue, 0);
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <LED_flash+0xac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2200      	movs	r2, #0
 8003510:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, green, flash_Dutycycle);
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <LED_flash+0xb0>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <LED_flash+0xac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
			Blue_flag=0b00;
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <LED_flash+0xa8>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
}
 8003522:	e009      	b.n	8003538 <LED_flash+0x9c>
		HAL_TIM_PWM_Stop(&htim3, blue);
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <LED_flash+0xac>)
 8003526:	2108      	movs	r1, #8
 8003528:	0018      	movs	r0, r3
 800352a:	f003 fe0f 	bl	800714c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, green);
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <LED_flash+0xac>)
 8003530:	210c      	movs	r1, #12
 8003532:	0018      	movs	r0, r3
 8003534:	f003 fe0a 	bl	800714c <HAL_TIM_PWM_Stop>
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b002      	add	sp, #8
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20000000 	.word	0x20000000
 8003544:	20000001 	.word	0x20000001
 8003548:	20000294 	.word	0x20000294
 800354c:	20000004 	.word	0x20000004
 8003550:	20000002 	.word	0x20000002

08003554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003554:	b5b0      	push	{r4, r5, r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  magMin.x = magMin.y = magMin.z = 3.402823466E+38;
 8003558:	4b5c      	ldr	r3, [pc, #368]	; (80036cc <main+0x178>)
 800355a:	4a5d      	ldr	r2, [pc, #372]	; (80036d0 <main+0x17c>)
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	4b5b      	ldr	r3, [pc, #364]	; (80036cc <main+0x178>)
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	4b5a      	ldr	r3, [pc, #360]	; (80036cc <main+0x178>)
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	4b59      	ldr	r3, [pc, #356]	; (80036cc <main+0x178>)
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	4b58      	ldr	r3, [pc, #352]	; (80036cc <main+0x178>)
 800356c:	601a      	str	r2, [r3, #0]
	  magMax.x = magMax.y = magMax.z = 1.175494351e-38F;
 800356e:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <main+0x180>)
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	0412      	lsls	r2, r2, #16
 8003574:	609a      	str	r2, [r3, #8]
 8003576:	4b57      	ldr	r3, [pc, #348]	; (80036d4 <main+0x180>)
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	4b56      	ldr	r3, [pc, #344]	; (80036d4 <main+0x180>)
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	4b55      	ldr	r3, [pc, #340]	; (80036d4 <main+0x180>)
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	4b54      	ldr	r3, [pc, #336]	; (80036d4 <main+0x180>)
 8003584:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003586:	f000 ff1f 	bl	80043c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800358a:	f000 f8c7 	bl	800371c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800358e:	f000 fa93 	bl	8003ab8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003592:	f000 f925 	bl	80037e0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003596:	f000 f9df 	bl	8003958 <MX_TIM3_Init>
  MX_TIM2_Init();
 800359a:	f000 f961 	bl	8003860 <MX_TIM2_Init>
  MX_TIM14_Init();
 800359e:	f000 fa65 	bl	8003a6c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  initialize_Sensors();
 80035a2:	f7ff fd59 	bl	8003058 <initialize_Sensors>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_OC_Start_IT(&htim14, TIM_CHANNEL_1);
 80035a6:	4b4c      	ldr	r3, [pc, #304]	; (80036d8 <main+0x184>)
 80035a8:	2100      	movs	r1, #0
 80035aa:	0018      	movs	r0, r3
 80035ac:	f003 fbbe 	bl	8006d2c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80035b0:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <main+0x188>)
 80035b2:	2100      	movs	r1, #0
 80035b4:	0018      	movs	r0, r3
 80035b6:	f003 fbb9 	bl	8006d2c <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	currentangle = atan2(Mag_Data.y, Mag_Data.x)*180.0/M_PI;
 80035ba:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <main+0x18c>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	1c18      	adds	r0, r3, #0
 80035c0:	f7ff fc5c 	bl	8002e7c <__aeabi_f2d>
 80035c4:	0004      	movs	r4, r0
 80035c6:	000d      	movs	r5, r1
 80035c8:	4b45      	ldr	r3, [pc, #276]	; (80036e0 <main+0x18c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	1c18      	adds	r0, r3, #0
 80035ce:	f7ff fc55 	bl	8002e7c <__aeabi_f2d>
 80035d2:	0002      	movs	r2, r0
 80035d4:	000b      	movs	r3, r1
 80035d6:	0020      	movs	r0, r4
 80035d8:	0029      	movs	r1, r5
 80035da:	f007 fb0b 	bl	800abf4 <atan2>
 80035de:	2200      	movs	r2, #0
 80035e0:	4b40      	ldr	r3, [pc, #256]	; (80036e4 <main+0x190>)
 80035e2:	f7fe fda3 	bl	800212c <__aeabi_dmul>
 80035e6:	0002      	movs	r2, r0
 80035e8:	000b      	movs	r3, r1
 80035ea:	0010      	movs	r0, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	4a3e      	ldr	r2, [pc, #248]	; (80036e8 <main+0x194>)
 80035f0:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <main+0x198>)
 80035f2:	f7fe f999 	bl	8001928 <__aeabi_ddiv>
 80035f6:	0002      	movs	r2, r0
 80035f8:	000b      	movs	r3, r1
 80035fa:	0010      	movs	r0, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	f7ff fc85 	bl	8002f0c <__aeabi_d2f>
 8003602:	1c02      	adds	r2, r0, #0
 8003604:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <main+0x19c>)
 8003606:	601a      	str	r2, [r3, #0]
//		angle_to_zero = average_angle - nullangle;
		angle_to_zero = currentangle - nullangle;
 8003608:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <main+0x19c>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <main+0x1a0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	1c19      	adds	r1, r3, #0
 8003612:	1c10      	adds	r0, r2, #0
 8003614:	f7fd fc0e 	bl	8000e34 <__aeabi_fsub>
 8003618:	1c03      	adds	r3, r0, #0
 800361a:	1c1a      	adds	r2, r3, #0
 800361c:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <main+0x1a4>)
 800361e:	601a      	str	r2, [r3, #0]
		if(angle_to_zero>180){
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <main+0x1a4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4935      	ldr	r1, [pc, #212]	; (80036fc <main+0x1a8>)
 8003626:	1c18      	adds	r0, r3, #0
 8003628:	f7fc ff64 	bl	80004f4 <__aeabi_fcmpgt>
 800362c:	1e03      	subs	r3, r0, #0
 800362e:	d00a      	beq.n	8003646 <main+0xf2>
			angle_to_zero = angle_to_zero-360;
 8003630:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <main+0x1a4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4932      	ldr	r1, [pc, #200]	; (8003700 <main+0x1ac>)
 8003636:	1c18      	adds	r0, r3, #0
 8003638:	f7fd fbfc 	bl	8000e34 <__aeabi_fsub>
 800363c:	1c03      	adds	r3, r0, #0
 800363e:	1c1a      	adds	r2, r3, #0
 8003640:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <main+0x1a4>)
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e011      	b.n	800366a <main+0x116>
		} else if(angle_to_zero<-180){
 8003646:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <main+0x1a4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	492e      	ldr	r1, [pc, #184]	; (8003704 <main+0x1b0>)
 800364c:	1c18      	adds	r0, r3, #0
 800364e:	f7fc ff3d 	bl	80004cc <__aeabi_fcmplt>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d009      	beq.n	800366a <main+0x116>
			angle_to_zero = angle_to_zero+360;
 8003656:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <main+0x1a4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4929      	ldr	r1, [pc, #164]	; (8003700 <main+0x1ac>)
 800365c:	1c18      	adds	r0, r3, #0
 800365e:	f7fc ff5d 	bl	800051c <__aeabi_fadd>
 8003662:	1c03      	adds	r3, r0, #0
 8003664:	1c1a      	adds	r2, r3, #0
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <main+0x1a4>)
 8003668:	601a      	str	r2, [r3, #0]
		}
		if (LED_Flash_flag == 0b01 && fabs(angle_to_zero)<10 && fabs(angle_to_zero)>.2){
 800366a:	4b27      	ldr	r3, [pc, #156]	; (8003708 <main+0x1b4>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b25b      	sxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d11c      	bne.n	80036ae <main+0x15a>
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <main+0x1a4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	4923      	ldr	r1, [pc, #140]	; (800370c <main+0x1b8>)
 800367e:	1c18      	adds	r0, r3, #0
 8003680:	f7fc ff24 	bl	80004cc <__aeabi_fcmplt>
 8003684:	1e03      	subs	r3, r0, #0
 8003686:	d012      	beq.n	80036ae <main+0x15a>
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <main+0x1a4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	1c18      	adds	r0, r3, #0
 8003692:	f7ff fbf3 	bl	8002e7c <__aeabi_f2d>
 8003696:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <main+0x1bc>)
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <main+0x1c0>)
 800369a:	f7fc fef1 	bl	8000480 <__aeabi_dcmpgt>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d005      	beq.n	80036ae <main+0x15a>
			LED_flash(angle_to_zero);
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <main+0x1a4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	1c18      	adds	r0, r3, #0
 80036a8:	f7ff fef8 	bl	800349c <LED_flash>
 80036ac:	e00d      	b.n	80036ca <main+0x176>
		} else if (fabs(angle_to_zero)>10){
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <main+0x1a4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	4915      	ldr	r1, [pc, #84]	; (800370c <main+0x1b8>)
 80036b8:	1c18      	adds	r0, r3, #0
 80036ba:	f7fc ff1b 	bl	80004f4 <__aeabi_fcmpgt>
 80036be:	1e03      	subs	r3, r0, #0
 80036c0:	d003      	beq.n	80036ca <main+0x176>
			  LED_dim(&Gyro_Data);
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <main+0x1c4>)
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7ff fe79 	bl	80033bc <LED_dim>
	  	currentangle = atan2(Mag_Data.y, Mag_Data.x)*180.0/M_PI;
 80036ca:	e776      	b.n	80035ba <main+0x66>
 80036cc:	20000358 	.word	0x20000358
 80036d0:	7f7fffff 	.word	0x7f7fffff
 80036d4:	20000364 	.word	0x20000364
 80036d8:	200002dc 	.word	0x200002dc
 80036dc:	2000024c 	.word	0x2000024c
 80036e0:	20000340 	.word	0x20000340
 80036e4:	40668000 	.word	0x40668000
 80036e8:	54442d18 	.word	0x54442d18
 80036ec:	400921fb 	.word	0x400921fb
 80036f0:	20000374 	.word	0x20000374
 80036f4:	20000370 	.word	0x20000370
 80036f8:	200003a4 	.word	0x200003a4
 80036fc:	43340000 	.word	0x43340000
 8003700:	43b40000 	.word	0x43b40000
 8003704:	c3340000 	.word	0xc3340000
 8003708:	20000000 	.word	0x20000000
 800370c:	41200000 	.word	0x41200000
 8003710:	9999999a 	.word	0x9999999a
 8003714:	3fc99999 	.word	0x3fc99999
 8003718:	20000334 	.word	0x20000334

0800371c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b097      	sub	sp, #92	; 0x5c
 8003720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003722:	2428      	movs	r4, #40	; 0x28
 8003724:	193b      	adds	r3, r7, r4
 8003726:	0018      	movs	r0, r3
 8003728:	2330      	movs	r3, #48	; 0x30
 800372a:	001a      	movs	r2, r3
 800372c:	2100      	movs	r1, #0
 800372e:	f004 fc8b 	bl	8008048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003732:	2318      	movs	r3, #24
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	0018      	movs	r0, r3
 8003738:	2310      	movs	r3, #16
 800373a:	001a      	movs	r2, r3
 800373c:	2100      	movs	r1, #0
 800373e:	f004 fc83 	bl	8008048 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	0018      	movs	r0, r3
 8003746:	2314      	movs	r3, #20
 8003748:	001a      	movs	r2, r3
 800374a:	2100      	movs	r1, #0
 800374c:	f004 fc7c 	bl	8008048 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003750:	0021      	movs	r1, r4
 8003752:	187b      	adds	r3, r7, r1
 8003754:	2202      	movs	r2, #2
 8003756:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003758:	187b      	adds	r3, r7, r1
 800375a:	2201      	movs	r2, #1
 800375c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800375e:	187b      	adds	r3, r7, r1
 8003760:	2210      	movs	r2, #16
 8003762:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003764:	187b      	adds	r3, r7, r1
 8003766:	2202      	movs	r2, #2
 8003768:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800376a:	187b      	adds	r3, r7, r1
 800376c:	2200      	movs	r2, #0
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003770:	187b      	adds	r3, r7, r1
 8003772:	22a0      	movs	r2, #160	; 0xa0
 8003774:	0392      	lsls	r2, r2, #14
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003778:	187b      	adds	r3, r7, r1
 800377a:	2200      	movs	r2, #0
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800377e:	187b      	adds	r3, r7, r1
 8003780:	0018      	movs	r0, r3
 8003782:	f002 fd01 	bl	8006188 <HAL_RCC_OscConfig>
 8003786:	1e03      	subs	r3, r0, #0
 8003788:	d001      	beq.n	800378e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800378a:	f000 fb8d 	bl	8003ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800378e:	2118      	movs	r1, #24
 8003790:	187b      	adds	r3, r7, r1
 8003792:	2207      	movs	r2, #7
 8003794:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003796:	187b      	adds	r3, r7, r1
 8003798:	2202      	movs	r2, #2
 800379a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800379c:	187b      	adds	r3, r7, r1
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	2200      	movs	r2, #0
 80037a6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	2101      	movs	r1, #1
 80037ac:	0018      	movs	r0, r3
 80037ae:	f003 f805 	bl	80067bc <HAL_RCC_ClockConfig>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d001      	beq.n	80037ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80037b6:	f000 fb77 	bl	8003ea8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	2220      	movs	r2, #32
 80037be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80037c0:	1d3b      	adds	r3, r7, #4
 80037c2:	2200      	movs	r2, #0
 80037c4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	0018      	movs	r0, r3
 80037ca:	f003 f929 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 80037ce:	1e03      	subs	r3, r0, #0
 80037d0:	d001      	beq.n	80037d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80037d2:	f000 fb69 	bl	8003ea8 <Error_Handler>
  }
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b017      	add	sp, #92	; 0x5c
 80037dc:	bd90      	pop	{r4, r7, pc}
	...

080037e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <MX_I2C1_Init+0x74>)
 80037e6:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <MX_I2C1_Init+0x78>)
 80037e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80037ea:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <MX_I2C1_Init+0x74>)
 80037ec:	4a1b      	ldr	r2, [pc, #108]	; (800385c <MX_I2C1_Init+0x7c>)
 80037ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80037f0:	4b18      	ldr	r3, [pc, #96]	; (8003854 <MX_I2C1_Init+0x74>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <MX_I2C1_Init+0x74>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037fc:	4b15      	ldr	r3, [pc, #84]	; (8003854 <MX_I2C1_Init+0x74>)
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <MX_I2C1_Init+0x74>)
 8003804:	2200      	movs	r2, #0
 8003806:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <MX_I2C1_Init+0x74>)
 800380a:	2200      	movs	r2, #0
 800380c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <MX_I2C1_Init+0x74>)
 8003810:	2200      	movs	r2, #0
 8003812:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <MX_I2C1_Init+0x74>)
 8003816:	2200      	movs	r2, #0
 8003818:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <MX_I2C1_Init+0x74>)
 800381c:	0018      	movs	r0, r3
 800381e:	f001 f8f3 	bl	8004a08 <HAL_I2C_Init>
 8003822:	1e03      	subs	r3, r0, #0
 8003824:	d001      	beq.n	800382a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003826:	f000 fb3f 	bl	8003ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <MX_I2C1_Init+0x74>)
 800382c:	2100      	movs	r1, #0
 800382e:	0018      	movs	r0, r3
 8003830:	f002 fc12 	bl	8006058 <HAL_I2CEx_ConfigAnalogFilter>
 8003834:	1e03      	subs	r3, r0, #0
 8003836:	d001      	beq.n	800383c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003838:	f000 fb36 	bl	8003ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <MX_I2C1_Init+0x74>)
 800383e:	2100      	movs	r1, #0
 8003840:	0018      	movs	r0, r3
 8003842:	f002 fc55 	bl	80060f0 <HAL_I2CEx_ConfigDigitalFilter>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d001      	beq.n	800384e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800384a:	f000 fb2d 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000200 	.word	0x20000200
 8003858:	40005400 	.word	0x40005400
 800385c:	2000090e 	.word	0x2000090e

08003860 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08e      	sub	sp, #56	; 0x38
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003866:	2328      	movs	r3, #40	; 0x28
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	0018      	movs	r0, r3
 800386c:	2310      	movs	r3, #16
 800386e:	001a      	movs	r2, r3
 8003870:	2100      	movs	r1, #0
 8003872:	f004 fbe9 	bl	8008048 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003876:	2320      	movs	r3, #32
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	0018      	movs	r0, r3
 800387c:	2308      	movs	r3, #8
 800387e:	001a      	movs	r2, r3
 8003880:	2100      	movs	r1, #0
 8003882:	f004 fbe1 	bl	8008048 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003886:	1d3b      	adds	r3, r7, #4
 8003888:	0018      	movs	r0, r3
 800388a:	231c      	movs	r3, #28
 800388c:	001a      	movs	r2, r3
 800388e:	2100      	movs	r1, #0
 8003890:	f004 fbda 	bl	8008048 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003894:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <MX_TIM2_Init+0xf0>)
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	05d2      	lsls	r2, r2, #23
 800389a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <MX_TIM2_Init+0xf0>)
 800389e:	4a2d      	ldr	r2, [pc, #180]	; (8003954 <MX_TIM2_Init+0xf4>)
 80038a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a2:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <MX_TIM2_Init+0xf0>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 80038a8:	4b29      	ldr	r3, [pc, #164]	; (8003950 <MX_TIM2_Init+0xf0>)
 80038aa:	22fa      	movs	r2, #250	; 0xfa
 80038ac:	0052      	lsls	r2, r2, #1
 80038ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b0:	4b27      	ldr	r3, [pc, #156]	; (8003950 <MX_TIM2_Init+0xf0>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b6:	4b26      	ldr	r3, [pc, #152]	; (8003950 <MX_TIM2_Init+0xf0>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038bc:	4b24      	ldr	r3, [pc, #144]	; (8003950 <MX_TIM2_Init+0xf0>)
 80038be:	0018      	movs	r0, r3
 80038c0:	f003 f98c 	bl	8006bdc <HAL_TIM_Base_Init>
 80038c4:	1e03      	subs	r3, r0, #0
 80038c6:	d001      	beq.n	80038cc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80038c8:	f000 faee 	bl	8003ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038cc:	2128      	movs	r1, #40	; 0x28
 80038ce:	187b      	adds	r3, r7, r1
 80038d0:	2280      	movs	r2, #128	; 0x80
 80038d2:	0152      	lsls	r2, r2, #5
 80038d4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038d6:	187a      	adds	r2, r7, r1
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <MX_TIM2_Init+0xf0>)
 80038da:	0011      	movs	r1, r2
 80038dc:	0018      	movs	r0, r3
 80038de:	f003 fee5 	bl	80076ac <HAL_TIM_ConfigClockSource>
 80038e2:	1e03      	subs	r3, r0, #0
 80038e4:	d001      	beq.n	80038ea <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80038e6:	f000 fadf 	bl	8003ea8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80038ea:	4b19      	ldr	r3, [pc, #100]	; (8003950 <MX_TIM2_Init+0xf0>)
 80038ec:	0018      	movs	r0, r3
 80038ee:	f003 f9c5 	bl	8006c7c <HAL_TIM_OC_Init>
 80038f2:	1e03      	subs	r3, r0, #0
 80038f4:	d001      	beq.n	80038fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80038f6:	f000 fad7 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038fa:	2120      	movs	r1, #32
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003902:	187b      	adds	r3, r7, r1
 8003904:	2200      	movs	r2, #0
 8003906:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003908:	187a      	adds	r2, r7, r1
 800390a:	4b11      	ldr	r3, [pc, #68]	; (8003950 <MX_TIM2_Init+0xf0>)
 800390c:	0011      	movs	r1, r2
 800390e:	0018      	movs	r0, r3
 8003910:	f004 fb02 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 8003914:	1e03      	subs	r3, r0, #0
 8003916:	d001      	beq.n	800391c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8003918:	f000 fac6 	bl	8003ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003922:	1d3b      	adds	r3, r7, #4
 8003924:	2200      	movs	r2, #0
 8003926:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003934:	1d39      	adds	r1, r7, #4
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <MX_TIM2_Init+0xf0>)
 8003938:	2200      	movs	r2, #0
 800393a:	0018      	movs	r0, r3
 800393c:	f003 fd98 	bl	8007470 <HAL_TIM_OC_ConfigChannel>
 8003940:	1e03      	subs	r3, r0, #0
 8003942:	d001      	beq.n	8003948 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8003944:	f000 fab0 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	b00e      	add	sp, #56	; 0x38
 800394e:	bd80      	pop	{r7, pc}
 8003950:	2000024c 	.word	0x2000024c
 8003954:	0000bb80 	.word	0x0000bb80

08003958 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08e      	sub	sp, #56	; 0x38
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800395e:	2328      	movs	r3, #40	; 0x28
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	0018      	movs	r0, r3
 8003964:	2310      	movs	r3, #16
 8003966:	001a      	movs	r2, r3
 8003968:	2100      	movs	r1, #0
 800396a:	f004 fb6d 	bl	8008048 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800396e:	2320      	movs	r3, #32
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	0018      	movs	r0, r3
 8003974:	2308      	movs	r3, #8
 8003976:	001a      	movs	r2, r3
 8003978:	2100      	movs	r1, #0
 800397a:	f004 fb65 	bl	8008048 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	0018      	movs	r0, r3
 8003982:	231c      	movs	r3, #28
 8003984:	001a      	movs	r2, r3
 8003986:	2100      	movs	r1, #0
 8003988:	f004 fb5e 	bl	8008048 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800398c:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <MX_TIM3_Init+0x10c>)
 800398e:	4a36      	ldr	r2, [pc, #216]	; (8003a68 <MX_TIM3_Init+0x110>)
 8003990:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480;
 8003992:	4b34      	ldr	r3, [pc, #208]	; (8003a64 <MX_TIM3_Init+0x10c>)
 8003994:	22f0      	movs	r2, #240	; 0xf0
 8003996:	0052      	lsls	r2, r2, #1
 8003998:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <MX_TIM3_Init+0x10c>)
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80039a0:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <MX_TIM3_Init+0x10c>)
 80039a2:	22fa      	movs	r2, #250	; 0xfa
 80039a4:	0092      	lsls	r2, r2, #2
 80039a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a8:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <MX_TIM3_Init+0x10c>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ae:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <MX_TIM3_Init+0x10c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039b4:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <MX_TIM3_Init+0x10c>)
 80039b6:	0018      	movs	r0, r3
 80039b8:	f003 f910 	bl	8006bdc <HAL_TIM_Base_Init>
 80039bc:	1e03      	subs	r3, r0, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80039c0:	f000 fa72 	bl	8003ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039c4:	2128      	movs	r1, #40	; 0x28
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0152      	lsls	r2, r2, #5
 80039cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039ce:	187a      	adds	r2, r7, r1
 80039d0:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <MX_TIM3_Init+0x10c>)
 80039d2:	0011      	movs	r1, r2
 80039d4:	0018      	movs	r0, r3
 80039d6:	f003 fe69 	bl	80076ac <HAL_TIM_ConfigClockSource>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80039de:	f000 fa63 	bl	8003ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039e2:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <MX_TIM3_Init+0x10c>)
 80039e4:	0018      	movs	r0, r3
 80039e6:	f003 faa1 	bl	8006f2c <HAL_TIM_PWM_Init>
 80039ea:	1e03      	subs	r3, r0, #0
 80039ec:	d001      	beq.n	80039f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80039ee:	f000 fa5b 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f2:	2120      	movs	r1, #32
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	2200      	movs	r2, #0
 80039fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a00:	187a      	adds	r2, r7, r1
 8003a02:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <MX_TIM3_Init+0x10c>)
 8003a04:	0011      	movs	r1, r2
 8003a06:	0018      	movs	r0, r3
 8003a08:	f004 fa86 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 8003a0c:	1e03      	subs	r3, r0, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8003a10:	f000 fa4a 	bl	8003ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a14:	1d3b      	adds	r3, r7, #4
 8003a16:	2260      	movs	r2, #96	; 0x60
 8003a18:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a20:	1d3b      	adds	r3, r7, #4
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	2200      	movs	r2, #0
 8003a2a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a2c:	1d39      	adds	r1, r7, #4
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <MX_TIM3_Init+0x10c>)
 8003a30:	2208      	movs	r2, #8
 8003a32:	0018      	movs	r0, r3
 8003a34:	f003 fd74 	bl	8007520 <HAL_TIM_PWM_ConfigChannel>
 8003a38:	1e03      	subs	r3, r0, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8003a3c:	f000 fa34 	bl	8003ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a40:	1d39      	adds	r1, r7, #4
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <MX_TIM3_Init+0x10c>)
 8003a44:	220c      	movs	r2, #12
 8003a46:	0018      	movs	r0, r3
 8003a48:	f003 fd6a 	bl	8007520 <HAL_TIM_PWM_ConfigChannel>
 8003a4c:	1e03      	subs	r3, r0, #0
 8003a4e:	d001      	beq.n	8003a54 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8003a50:	f000 fa2a 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <MX_TIM3_Init+0x10c>)
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 fafc 	bl	8004054 <HAL_TIM_MspPostInit>

}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b00e      	add	sp, #56	; 0x38
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000294 	.word	0x20000294
 8003a68:	40000400 	.word	0x40000400

08003a6c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <MX_TIM14_Init+0x40>)
 8003a72:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <MX_TIM14_Init+0x44>)
 8003a74:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48000;
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <MX_TIM14_Init+0x40>)
 8003a78:	4a0e      	ldr	r2, [pc, #56]	; (8003ab4 <MX_TIM14_Init+0x48>)
 8003a7a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <MX_TIM14_Init+0x40>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20;
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <MX_TIM14_Init+0x40>)
 8003a84:	2214      	movs	r2, #20
 8003a86:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <MX_TIM14_Init+0x40>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a8e:	4b07      	ldr	r3, [pc, #28]	; (8003aac <MX_TIM14_Init+0x40>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <MX_TIM14_Init+0x40>)
 8003a96:	0018      	movs	r0, r3
 8003a98:	f003 f8a0 	bl	8006bdc <HAL_TIM_Base_Init>
 8003a9c:	1e03      	subs	r3, r0, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003aa0:	f000 fa02 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	200002dc 	.word	0x200002dc
 8003ab0:	40002000 	.word	0x40002000
 8003ab4:	0000bb80 	.word	0x0000bb80

08003ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abe:	240c      	movs	r4, #12
 8003ac0:	193b      	adds	r3, r7, r4
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	2314      	movs	r3, #20
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f004 fabd 	bl	8008048 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <MX_GPIO_Init+0xa4>)
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <MX_GPIO_Init+0xa4>)
 8003ad4:	2180      	movs	r1, #128	; 0x80
 8003ad6:	0289      	lsls	r1, r1, #10
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	615a      	str	r2, [r3, #20]
 8003adc:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <MX_GPIO_Init+0xa4>)
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	029b      	lsls	r3, r3, #10
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aea:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <MX_GPIO_Init+0xa4>)
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <MX_GPIO_Init+0xa4>)
 8003af0:	2180      	movs	r1, #128	; 0x80
 8003af2:	0309      	lsls	r1, r1, #12
 8003af4:	430a      	orrs	r2, r1
 8003af6:	615a      	str	r2, [r3, #20]
 8003af8:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <MX_GPIO_Init+0xa4>)
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	031b      	lsls	r3, r3, #12
 8003b00:	4013      	ands	r3, r2
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <MX_GPIO_Init+0xa4>)
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <MX_GPIO_Init+0xa4>)
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	02c9      	lsls	r1, r1, #11
 8003b10:	430a      	orrs	r2, r1
 8003b12:	615a      	str	r2, [r3, #20]
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <MX_GPIO_Init+0xa4>)
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	02db      	lsls	r3, r3, #11
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003b22:	193b      	adds	r3, r7, r4
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b28:	193b      	adds	r3, r7, r4
 8003b2a:	2288      	movs	r2, #136	; 0x88
 8003b2c:	0352      	lsls	r2, r2, #13
 8003b2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	193b      	adds	r3, r7, r4
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b36:	193a      	adds	r2, r7, r4
 8003b38:	2390      	movs	r3, #144	; 0x90
 8003b3a:	05db      	lsls	r3, r3, #23
 8003b3c:	0011      	movs	r1, r2
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f000 fdd6 	bl	80046f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2100      	movs	r1, #0
 8003b48:	2005      	movs	r0, #5
 8003b4a:	f000 fd4d 	bl	80045e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003b4e:	2005      	movs	r0, #5
 8003b50:	f000 fd5f 	bl	8004612 <HAL_NVIC_EnableIRQ>

}
 8003b54:	46c0      	nop			; (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b009      	add	sp, #36	; 0x24
 8003b5a:	bd90      	pop	{r4, r7, pc}
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ // This interrupt handles the push of the blue button
 8003b60:	b5b0      	push	{r4, r5, r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	0002      	movs	r2, r0
 8003b68:	1dbb      	adds	r3, r7, #6
 8003b6a:	801a      	strh	r2, [r3, #0]
	Mag_RefData=Mag_Data;
 8003b6c:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <HAL_GPIO_EXTI_Callback+0x6c>)
 8003b6e:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <HAL_GPIO_EXTI_Callback+0x70>)
 8003b70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b72:	c313      	stmia	r3!, {r0, r1, r4}
	nullangle = atan2(Mag_RefData.y, Mag_RefData.x)*180/M_PI;
 8003b74:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <HAL_GPIO_EXTI_Callback+0x6c>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	1c18      	adds	r0, r3, #0
 8003b7a:	f7ff f97f 	bl	8002e7c <__aeabi_f2d>
 8003b7e:	0004      	movs	r4, r0
 8003b80:	000d      	movs	r5, r1
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_GPIO_EXTI_Callback+0x6c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1c18      	adds	r0, r3, #0
 8003b88:	f7ff f978 	bl	8002e7c <__aeabi_f2d>
 8003b8c:	0002      	movs	r2, r0
 8003b8e:	000b      	movs	r3, r1
 8003b90:	0020      	movs	r0, r4
 8003b92:	0029      	movs	r1, r5
 8003b94:	f007 f82e 	bl	800abf4 <atan2>
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <HAL_GPIO_EXTI_Callback+0x74>)
 8003b9c:	f7fe fac6 	bl	800212c <__aeabi_dmul>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	000b      	movs	r3, r1
 8003ba4:	0010      	movs	r0, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	4a0b      	ldr	r2, [pc, #44]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x78>)
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_GPIO_EXTI_Callback+0x7c>)
 8003bac:	f7fd febc 	bl	8001928 <__aeabi_ddiv>
 8003bb0:	0002      	movs	r2, r0
 8003bb2:	000b      	movs	r3, r1
 8003bb4:	0010      	movs	r0, r2
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	f7ff f9a8 	bl	8002f0c <__aeabi_d2f>
 8003bbc:	1c02      	adds	r2, r0, #0
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x80>)
 8003bc0:	601a      	str	r2, [r3, #0]
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	2000034c 	.word	0x2000034c
 8003bd0:	20000340 	.word	0x20000340
 8003bd4:	40668000 	.word	0x40668000
 8003bd8:	54442d18 	.word	0x54442d18
 8003bdc:	400921fb 	.word	0x400921fb
 8003be0:	20000370 	.word	0x20000370

08003be4 <magCalibration>:

void magCalibration(DATA_TypeDef *mag, DATA_TypeDef *magMin, DATA_TypeDef *magMax)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  // update minimum mag values
  magMin->x = min(magMin->x, mag->x);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	1c19      	adds	r1, r3, #0
 8003bfa:	1c10      	adds	r0, r2, #0
 8003bfc:	f7fc fc66 	bl	80004cc <__aeabi_fcmplt>
 8003c00:	1e03      	subs	r3, r0, #0
 8003c02:	d002      	beq.n	8003c0a <magCalibration+0x26>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	e001      	b.n	8003c0e <magCalibration+0x2a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	601a      	str	r2, [r3, #0]
  magMin->y = min(magMin->y, mag->y);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	1c19      	adds	r1, r3, #0
 8003c1c:	1c10      	adds	r0, r2, #0
 8003c1e:	f7fc fc55 	bl	80004cc <__aeabi_fcmplt>
 8003c22:	1e03      	subs	r3, r0, #0
 8003c24:	d002      	beq.n	8003c2c <magCalibration+0x48>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	e001      	b.n	8003c30 <magCalibration+0x4c>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	605a      	str	r2, [r3, #4]
  magMin->z = min(magMin->z, mag->z);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	1c19      	adds	r1, r3, #0
 8003c3e:	1c10      	adds	r0, r2, #0
 8003c40:	f7fc fc44 	bl	80004cc <__aeabi_fcmplt>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d002      	beq.n	8003c4e <magCalibration+0x6a>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	e001      	b.n	8003c52 <magCalibration+0x6e>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	609a      	str	r2, [r3, #8]

  // update maximum mag values
  magMax->x = max(magMax->x, mag->x);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	1c19      	adds	r1, r3, #0
 8003c60:	1c10      	adds	r0, r2, #0
 8003c62:	f7fc fc47 	bl	80004f4 <__aeabi_fcmpgt>
 8003c66:	1e03      	subs	r3, r0, #0
 8003c68:	d002      	beq.n	8003c70 <magCalibration+0x8c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	e001      	b.n	8003c74 <magCalibration+0x90>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	601a      	str	r2, [r3, #0]
  magMax->y = max(magMax->y, mag->y);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	1c19      	adds	r1, r3, #0
 8003c82:	1c10      	adds	r0, r2, #0
 8003c84:	f7fc fc36 	bl	80004f4 <__aeabi_fcmpgt>
 8003c88:	1e03      	subs	r3, r0, #0
 8003c8a:	d002      	beq.n	8003c92 <magCalibration+0xae>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	e001      	b.n	8003c96 <magCalibration+0xb2>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	605a      	str	r2, [r3, #4]
  magMax->z = max(magMax->z, mag->z);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	1c19      	adds	r1, r3, #0
 8003ca4:	1c10      	adds	r0, r2, #0
 8003ca6:	f7fc fc25 	bl	80004f4 <__aeabi_fcmpgt>
 8003caa:	1e03      	subs	r3, r0, #0
 8003cac:	d002      	beq.n	8003cb4 <magCalibration+0xd0>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	e001      	b.n	8003cb8 <magCalibration+0xd4>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]

  // apply offset to current values
  mag->x -= ((magMin->x + magMax->x) / 2);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681c      	ldr	r4, [r3, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	1c19      	adds	r1, r3, #0
 8003cca:	1c10      	adds	r0, r2, #0
 8003ccc:	f7fc fc26 	bl	800051c <__aeabi_fadd>
 8003cd0:	1c03      	adds	r3, r0, #0
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	05c9      	lsls	r1, r1, #23
 8003cd6:	1c18      	adds	r0, r3, #0
 8003cd8:	f7fc fdbe 	bl	8000858 <__aeabi_fdiv>
 8003cdc:	1c03      	adds	r3, r0, #0
 8003cde:	1c19      	adds	r1, r3, #0
 8003ce0:	1c20      	adds	r0, r4, #0
 8003ce2:	f7fd f8a7 	bl	8000e34 <__aeabi_fsub>
 8003ce6:	1c03      	adds	r3, r0, #0
 8003ce8:	1c1a      	adds	r2, r3, #0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	601a      	str	r2, [r3, #0]
  mag->y -= ((magMin->y + magMax->y) / 2);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685c      	ldr	r4, [r3, #4]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	1c19      	adds	r1, r3, #0
 8003cfc:	1c10      	adds	r0, r2, #0
 8003cfe:	f7fc fc0d 	bl	800051c <__aeabi_fadd>
 8003d02:	1c03      	adds	r3, r0, #0
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	05c9      	lsls	r1, r1, #23
 8003d08:	1c18      	adds	r0, r3, #0
 8003d0a:	f7fc fda5 	bl	8000858 <__aeabi_fdiv>
 8003d0e:	1c03      	adds	r3, r0, #0
 8003d10:	1c19      	adds	r1, r3, #0
 8003d12:	1c20      	adds	r0, r4, #0
 8003d14:	f7fd f88e 	bl	8000e34 <__aeabi_fsub>
 8003d18:	1c03      	adds	r3, r0, #0
 8003d1a:	1c1a      	adds	r2, r3, #0
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	605a      	str	r2, [r3, #4]
  mag->z -= ((magMin->z + magMax->z) / 2);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689c      	ldr	r4, [r3, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	1c19      	adds	r1, r3, #0
 8003d2e:	1c10      	adds	r0, r2, #0
 8003d30:	f7fc fbf4 	bl	800051c <__aeabi_fadd>
 8003d34:	1c03      	adds	r3, r0, #0
 8003d36:	2180      	movs	r1, #128	; 0x80
 8003d38:	05c9      	lsls	r1, r1, #23
 8003d3a:	1c18      	adds	r0, r3, #0
 8003d3c:	f7fc fd8c 	bl	8000858 <__aeabi_fdiv>
 8003d40:	1c03      	adds	r3, r0, #0
 8003d42:	1c19      	adds	r1, r3, #0
 8003d44:	1c20      	adds	r0, r4, #0
 8003d46:	f7fd f875 	bl	8000e34 <__aeabi_fsub>
 8003d4a:	1c03      	adds	r3, r0, #0
 8003d4c:	1c1a      	adds	r2, r3, #0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	609a      	str	r2, [r3, #8]
}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b005      	add	sp, #20
 8003d58:	bd90      	pop	{r4, r7, pc}
	...

08003d5c <sensor_routine>:

void sensor_routine(void){
 8003d5c:	b5b0      	push	{r4, r5, r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
	read_Sensor_data(Gyro_rawData, GYRO_DEVADDR, Gyro_MSB_X);
 8003d60:	2142      	movs	r1, #66	; 0x42
 8003d62:	2201      	movs	r2, #1
 8003d64:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <sensor_routine+0x98>)
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7ff fa9a 	bl	80032a0 <read_Sensor_data>
	read_Sensor_data(Mag_rawData, MAGACC_DEVADDR, MAG_MSB_X);
 8003d6c:	213e      	movs	r1, #62	; 0x3e
 8003d6e:	2233      	movs	r2, #51	; 0x33
 8003d70:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <sensor_routine+0x9c>)
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7ff fa94 	bl	80032a0 <read_Sensor_data>
	convert_Sensor_Data(Gyro_rawData, &Gyro_Data, Gyro_conv_factor);
 8003d78:	22f0      	movs	r2, #240	; 0xf0
 8003d7a:	0592      	lsls	r2, r2, #22
 8003d7c:	491f      	ldr	r1, [pc, #124]	; (8003dfc <sensor_routine+0xa0>)
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <sensor_routine+0x98>)
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7ff fae1 	bl	8003348 <convert_Sensor_Data>
	convert_Sensor_Data(Mag_rawData, &Mag_Data, Mag_conv_factor);
 8003d86:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <sensor_routine+0xa4>)
 8003d88:	491e      	ldr	r1, [pc, #120]	; (8003e04 <sensor_routine+0xa8>)
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <sensor_routine+0x9c>)
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f7ff fadb 	bl	8003348 <convert_Sensor_Data>
	magCalibration(&Mag_Data, &magMin, &magMax);
 8003d92:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <sensor_routine+0xac>)
 8003d94:	491d      	ldr	r1, [pc, #116]	; (8003e0c <sensor_routine+0xb0>)
 8003d96:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <sensor_routine+0xa8>)
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7ff ff23 	bl	8003be4 <magCalibration>
	angle_array[0] = atan2(Mag_Data.y, Mag_Data.x)*180.0/M_PI;
 8003d9e:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <sensor_routine+0xa8>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	1c18      	adds	r0, r3, #0
 8003da4:	f7ff f86a 	bl	8002e7c <__aeabi_f2d>
 8003da8:	0004      	movs	r4, r0
 8003daa:	000d      	movs	r5, r1
 8003dac:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <sensor_routine+0xa8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c18      	adds	r0, r3, #0
 8003db2:	f7ff f863 	bl	8002e7c <__aeabi_f2d>
 8003db6:	0002      	movs	r2, r0
 8003db8:	000b      	movs	r3, r1
 8003dba:	0020      	movs	r0, r4
 8003dbc:	0029      	movs	r1, r5
 8003dbe:	f006 ff19 	bl	800abf4 <atan2>
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <sensor_routine+0xb4>)
 8003dc6:	f7fe f9b1 	bl	800212c <__aeabi_dmul>
 8003dca:	0002      	movs	r2, r0
 8003dcc:	000b      	movs	r3, r1
 8003dce:	0010      	movs	r0, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	4a10      	ldr	r2, [pc, #64]	; (8003e14 <sensor_routine+0xb8>)
 8003dd4:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <sensor_routine+0xbc>)
 8003dd6:	f7fd fda7 	bl	8001928 <__aeabi_ddiv>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	000b      	movs	r3, r1
 8003dde:	0010      	movs	r0, r2
 8003de0:	0019      	movs	r1, r3
 8003de2:	f7ff f893 	bl	8002f0c <__aeabi_d2f>
 8003de6:	1c02      	adds	r2, r0, #0
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <sensor_routine+0xc0>)
 8003dea:	601a      	str	r2, [r3, #0]
}
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bdb0      	pop	{r4, r5, r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	20000324 	.word	0x20000324
 8003df8:	2000032c 	.word	0x2000032c
 8003dfc:	20000334 	.word	0x20000334
 8003e00:	3dcccccd 	.word	0x3dcccccd
 8003e04:	20000340 	.word	0x20000340
 8003e08:	20000364 	.word	0x20000364
 8003e0c:	20000358 	.word	0x20000358
 8003e10:	40668000 	.word	0x40668000
 8003e14:	54442d18 	.word	0x54442d18
 8003e18:	400921fb 	.word	0x400921fb
 8003e1c:	20000378 	.word	0x20000378

08003e20 <sensor_average>:

void sensor_average (void){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
	float total = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
	size_t arr_len = sizeof(angle_array)/sizeof(angle_array[0]);
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	603b      	str	r3, [r7, #0]
	for (int k = arr_len; k > 0 ; k--){
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	e00b      	b.n	8003e4c <sensor_average+0x2c>
		angle_array[k]=angle_array[k-1];
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1e5a      	subs	r2, r3, #1
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <sensor_average+0x80>)
 8003e3a:	0092      	lsls	r2, r2, #2
 8003e3c:	58d1      	ldr	r1, [r2, r3]
 8003e3e:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <sensor_average+0x80>)
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	0092      	lsls	r2, r2, #2
 8003e44:	50d1      	str	r1, [r2, r3]
	for (int k = arr_len; k > 0 ; k--){
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	dcf0      	bgt.n	8003e34 <sensor_average+0x14>
	}
	for (int i = 1; i < arr_len; i++) {
 8003e52:	2301      	movs	r3, #1
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	e00c      	b.n	8003e72 <sensor_average+0x52>
	    total += angle_array[i];
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <sensor_average+0x80>)
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	0092      	lsls	r2, r2, #2
 8003e5e:	58d3      	ldr	r3, [r2, r3]
 8003e60:	1c19      	adds	r1, r3, #0
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7fc fb5a 	bl	800051c <__aeabi_fadd>
 8003e68:	1c03      	adds	r3, r0, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < arr_len; i++) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d8ee      	bhi.n	8003e58 <sensor_average+0x38>
	}
	average_angle=total/(arr_len-1); // Averaging out the last 10 Sensor Angle values to reduce noise
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f7fd f9d4 	bl	800122c <__aeabi_ui2f>
 8003e84:	1c03      	adds	r3, r0, #0
 8003e86:	1c19      	adds	r1, r3, #0
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7fc fce5 	bl	8000858 <__aeabi_fdiv>
 8003e8e:	1c03      	adds	r3, r0, #0
 8003e90:	1c1a      	adds	r2, r3, #0
 8003e92:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <sensor_average+0x84>)
 8003e94:	601a      	str	r2, [r3, #0]
}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	20000378 	.word	0x20000378
 8003ea4:	200003a0 	.word	0x200003a0

08003ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003eac:	b672      	cpsid	i
}
 8003eae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003eb0:	e7fe      	b.n	8003eb0 <Error_Handler+0x8>
	...

08003eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	619a      	str	r2, [r3, #24]
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4013      	ands	r3, r2
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ed4:	69da      	ldr	r2, [r3, #28]
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	0549      	lsls	r1, r1, #21
 8003edc:	430a      	orrs	r2, r1
 8003ede:	61da      	str	r2, [r3, #28]
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	055b      	lsls	r3, r3, #21
 8003ee8:	4013      	ands	r3, r2
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b002      	add	sp, #8
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	40021000 	.word	0x40021000

08003efc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b08b      	sub	sp, #44	; 0x2c
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	2414      	movs	r4, #20
 8003f06:	193b      	adds	r3, r7, r4
 8003f08:	0018      	movs	r0, r3
 8003f0a:	2314      	movs	r3, #20
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f004 f89a 	bl	8008048 <memset>
  if(hi2c->Instance==I2C1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <HAL_I2C_MspInit+0xa0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d139      	bne.n	8003f92 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_I2C_MspInit+0xa4>)
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <HAL_I2C_MspInit+0xa4>)
 8003f24:	2180      	movs	r1, #128	; 0x80
 8003f26:	02c9      	lsls	r1, r1, #11
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	615a      	str	r2, [r3, #20]
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <HAL_I2C_MspInit+0xa4>)
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	02db      	lsls	r3, r3, #11
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f3a:	0021      	movs	r1, r4
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	22c0      	movs	r2, #192	; 0xc0
 8003f40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f42:	187b      	adds	r3, r7, r1
 8003f44:	2212      	movs	r2, #18
 8003f46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f48:	187b      	adds	r3, r7, r1
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f4e:	187b      	adds	r3, r7, r1
 8003f50:	2203      	movs	r2, #3
 8003f52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003f54:	187b      	adds	r3, r7, r1
 8003f56:	2201      	movs	r2, #1
 8003f58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	4a11      	ldr	r2, [pc, #68]	; (8003fa4 <HAL_I2C_MspInit+0xa8>)
 8003f5e:	0019      	movs	r1, r3
 8003f60:	0010      	movs	r0, r2
 8003f62:	f000 fbc5 	bl	80046f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f66:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_I2C_MspInit+0xa4>)
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_I2C_MspInit+0xa4>)
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	0389      	lsls	r1, r1, #14
 8003f70:	430a      	orrs	r2, r1
 8003f72:	61da      	str	r2, [r3, #28]
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_I2C_MspInit+0xa4>)
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	039b      	lsls	r3, r3, #14
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2100      	movs	r1, #0
 8003f86:	2017      	movs	r0, #23
 8003f88:	f000 fb2e 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003f8c:	2017      	movs	r0, #23
 8003f8e:	f000 fb40 	bl	8004612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b00b      	add	sp, #44	; 0x2c
 8003f98:	bd90      	pop	{r4, r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	40005400 	.word	0x40005400
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	48000400 	.word	0x48000400

08003fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	05db      	lsls	r3, r3, #23
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d114      	bne.n	8003fe6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fbc:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_TIM_Base_MspInit+0xa0>)
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	4b21      	ldr	r3, [pc, #132]	; (8004048 <HAL_TIM_Base_MspInit+0xa0>)
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	61da      	str	r2, [r3, #28]
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_TIM_Base_MspInit+0xa0>)
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4013      	ands	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	200f      	movs	r0, #15
 8003fda:	f000 fb05 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fde:	200f      	movs	r0, #15
 8003fe0:	f000 fb17 	bl	8004612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003fe4:	e02c      	b.n	8004040 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM3)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a18      	ldr	r2, [pc, #96]	; (800404c <HAL_TIM_Base_MspInit+0xa4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10c      	bne.n	800400a <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_TIM_Base_MspInit+0xa0>)
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	4b14      	ldr	r3, [pc, #80]	; (8004048 <HAL_TIM_Base_MspInit+0xa0>)
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	61da      	str	r2, [r3, #28]
 8003ffc:	4b12      	ldr	r3, [pc, #72]	; (8004048 <HAL_TIM_Base_MspInit+0xa0>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	2202      	movs	r2, #2
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	693b      	ldr	r3, [r7, #16]
}
 8004008:	e01a      	b.n	8004040 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM14)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a10      	ldr	r2, [pc, #64]	; (8004050 <HAL_TIM_Base_MspInit+0xa8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d115      	bne.n	8004040 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_TIM_Base_MspInit+0xa0>)
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_TIM_Base_MspInit+0xa0>)
 800401a:	2180      	movs	r1, #128	; 0x80
 800401c:	0049      	lsls	r1, r1, #1
 800401e:	430a      	orrs	r2, r1
 8004020:	61da      	str	r2, [r3, #28]
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_TIM_Base_MspInit+0xa0>)
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4013      	ands	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8004030:	2200      	movs	r2, #0
 8004032:	2100      	movs	r1, #0
 8004034:	2013      	movs	r0, #19
 8004036:	f000 fad7 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800403a:	2013      	movs	r0, #19
 800403c:	f000 fae9 	bl	8004612 <HAL_NVIC_EnableIRQ>
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b006      	add	sp, #24
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40021000 	.word	0x40021000
 800404c:	40000400 	.word	0x40000400
 8004050:	40002000 	.word	0x40002000

08004054 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b08b      	sub	sp, #44	; 0x2c
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	2410      	movs	r4, #16
 800405e:	193b      	adds	r3, r7, r4
 8004060:	0018      	movs	r0, r3
 8004062:	2314      	movs	r3, #20
 8004064:	001a      	movs	r2, r3
 8004066:	2100      	movs	r1, #0
 8004068:	f003 ffee 	bl	8008048 <memset>
  if(htim->Instance==TIM3)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <HAL_TIM_MspPostInit+0xa4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d13c      	bne.n	80040f0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */
	 uint32_t GPIO_AF0_TIM3 = GPIO_AF1_TIM3;
 8004076:	2301      	movs	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_TIM_MspPostInit+0xa8>)
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	4b1f      	ldr	r3, [pc, #124]	; (80040fc <HAL_TIM_MspPostInit+0xa8>)
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	0309      	lsls	r1, r1, #12
 8004084:	430a      	orrs	r2, r1
 8004086:	615a      	str	r2, [r3, #20]
 8004088:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <HAL_TIM_MspPostInit+0xa8>)
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	031b      	lsls	r3, r3, #12
 8004090:	4013      	ands	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004096:	193b      	adds	r3, r7, r4
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	0052      	lsls	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	193b      	adds	r3, r7, r4
 80040a0:	2202      	movs	r2, #2
 80040a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	2200      	movs	r2, #0
 80040a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	193b      	adds	r3, r7, r4
 80040ac:	2200      	movs	r2, #0
 80040ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80040b0:	193b      	adds	r3, r7, r4
 80040b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b6:	193b      	adds	r3, r7, r4
 80040b8:	4a11      	ldr	r2, [pc, #68]	; (8004100 <HAL_TIM_MspPostInit+0xac>)
 80040ba:	0019      	movs	r1, r3
 80040bc:	0010      	movs	r0, r2
 80040be:	f000 fb17 	bl	80046f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040c2:	0021      	movs	r1, r4
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	2280      	movs	r2, #128	; 0x80
 80040c8:	0092      	lsls	r2, r2, #2
 80040ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	2202      	movs	r2, #2
 80040d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	187b      	adds	r3, r7, r1
 80040d4:	2200      	movs	r2, #0
 80040d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d8:	187b      	adds	r3, r7, r1
 80040da:	2200      	movs	r2, #0
 80040dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80040de:	187b      	adds	r3, r7, r1
 80040e0:	2200      	movs	r2, #0
 80040e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	4a06      	ldr	r2, [pc, #24]	; (8004100 <HAL_TIM_MspPostInit+0xac>)
 80040e8:	0019      	movs	r1, r3
 80040ea:	0010      	movs	r0, r2
 80040ec:	f000 fb00 	bl	80046f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b00b      	add	sp, #44	; 0x2c
 80040f6:	bd90      	pop	{r4, r7, pc}
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40021000 	.word	0x40021000
 8004100:	48000800 	.word	0x48000800

08004104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004108:	e7fe      	b.n	8004108 <NMI_Handler+0x4>

0800410a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800410e:	e7fe      	b.n	800410e <HardFault_Handler+0x4>

08004110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004128:	f000 f996 	bl	8004458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004136:	2001      	movs	r0, #1
 8004138:	f000 fc4a 	bl	80049d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_TIM_PWM_Stop(&htim3, blue);
//	HAL_TIM_PWM_Stop(&htim3, green);
	LED_Flash_flag = LED_Flash_flag ^ 0b01;
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <TIM2_IRQHandler+0x44>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b25b      	sxtb	r3, r3
 800414e:	2201      	movs	r2, #1
 8004150:	4053      	eors	r3, r2
 8004152:	b25a      	sxtb	r2, r3
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <TIM2_IRQHandler+0x44>)
 8004156:	701a      	strb	r2, [r3, #0]
	Blue_flag=Green_flag=0b01;
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <TIM2_IRQHandler+0x48>)
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <TIM2_IRQHandler+0x48>)
 8004160:	2200      	movs	r2, #0
 8004162:	569a      	ldrsb	r2, [r3, r2]
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <TIM2_IRQHandler+0x4c>)
 8004166:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, blue, 0);
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <TIM2_IRQHandler+0x50>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2200      	movs	r2, #0
 800416e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, green, 0);
 8004170:	4b08      	ldr	r3, [pc, #32]	; (8004194 <TIM2_IRQHandler+0x50>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2200      	movs	r2, #0
 8004176:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004178:	4b07      	ldr	r3, [pc, #28]	; (8004198 <TIM2_IRQHandler+0x54>)
 800417a:	0018      	movs	r0, r3
 800417c:	f003 f862 	bl	8007244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	20000000 	.word	0x20000000
 800418c:	20000002 	.word	0x20000002
 8004190:	20000001 	.word	0x20000001
 8004194:	20000294 	.word	0x20000294
 8004198:	2000024c 	.word	0x2000024c

0800419c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	sensor_routine();
 80041a0:	f7ff fddc 	bl	8003d5c <sensor_routine>
	sensor_average();
 80041a4:	f7ff fe3c 	bl	8003e20 <sensor_average>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <TIM14_IRQHandler+0x1c>)
 80041aa:	0018      	movs	r0, r3
 80041ac:	f003 f84a 	bl	8007244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	200002dc 	.word	0x200002dc

080041bc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <I2C1_IRQHandler+0x2c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	23e0      	movs	r3, #224	; 0xe0
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4013      	ands	r3, r2
 80041cc:	d004      	beq.n	80041d8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <I2C1_IRQHandler+0x2c>)
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 ff2b 	bl	800502c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80041d6:	e003      	b.n	80041e0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <I2C1_IRQHandler+0x2c>)
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 ff0c 	bl	8004ff8 <HAL_I2C_EV_IRQHandler>
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	20000200 	.word	0x20000200

080041ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
	return 1;
 80041f0:	2301      	movs	r3, #1
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_kill>:

int _kill(int pid, int sig)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004202:	f003 fef7 	bl	8007ff4 <__errno>
 8004206:	0003      	movs	r3, r0
 8004208:	2216      	movs	r2, #22
 800420a:	601a      	str	r2, [r3, #0]
	return -1;
 800420c:	2301      	movs	r3, #1
 800420e:	425b      	negs	r3, r3
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}

08004218 <_exit>:

void _exit (int status)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004220:	2301      	movs	r3, #1
 8004222:	425a      	negs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	0011      	movs	r1, r2
 8004228:	0018      	movs	r0, r3
 800422a:	f7ff ffe5 	bl	80041f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800422e:	e7fe      	b.n	800422e <_exit+0x16>

08004230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e00a      	b.n	8004258 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004242:	e000      	b.n	8004246 <_read+0x16>
 8004244:	bf00      	nop
 8004246:	0001      	movs	r1, r0
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	60ba      	str	r2, [r7, #8]
 800424e:	b2ca      	uxtb	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3301      	adds	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	dbf0      	blt.n	8004242 <_read+0x12>
	}

return len;
 8004260:	687b      	ldr	r3, [r7, #4]
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b006      	add	sp, #24
 8004268:	bd80      	pop	{r7, pc}

0800426a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b086      	sub	sp, #24
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e009      	b.n	8004290 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	60ba      	str	r2, [r7, #8]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	0018      	movs	r0, r3
 8004286:	e000      	b.n	800428a <_write+0x20>
 8004288:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3301      	adds	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	dbf1      	blt.n	800427c <_write+0x12>
	}
	return len;
 8004298:	687b      	ldr	r3, [r7, #4]
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b006      	add	sp, #24
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <_close>:

int _close(int file)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
	return -1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	425b      	negs	r3, r3
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b002      	add	sp, #8
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	0192      	lsls	r2, r2, #6
 80042c6:	605a      	str	r2, [r3, #4]
	return 0;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b002      	add	sp, #8
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_isatty>:

int _isatty(int file)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
	return 1;
 80042da:	2301      	movs	r3, #1
}
 80042dc:	0018      	movs	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	b002      	add	sp, #8
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
	return 0;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	0018      	movs	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b004      	add	sp, #16
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004304:	4a14      	ldr	r2, [pc, #80]	; (8004358 <_sbrk+0x5c>)
 8004306:	4b15      	ldr	r3, [pc, #84]	; (800435c <_sbrk+0x60>)
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004310:	4b13      	ldr	r3, [pc, #76]	; (8004360 <_sbrk+0x64>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <_sbrk+0x64>)
 800431a:	4a12      	ldr	r2, [pc, #72]	; (8004364 <_sbrk+0x68>)
 800431c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <_sbrk+0x64>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	18d3      	adds	r3, r2, r3
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	429a      	cmp	r2, r3
 800432a:	d207      	bcs.n	800433c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800432c:	f003 fe62 	bl	8007ff4 <__errno>
 8004330:	0003      	movs	r3, r0
 8004332:	220c      	movs	r2, #12
 8004334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004336:	2301      	movs	r3, #1
 8004338:	425b      	negs	r3, r3
 800433a:	e009      	b.n	8004350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <_sbrk+0x64>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <_sbrk+0x64>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	18d2      	adds	r2, r2, r3
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <_sbrk+0x64>)
 800434c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;}
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b006      	add	sp, #24
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20002000 	.word	0x20002000
 800435c:	00000400 	.word	0x00000400
 8004360:	200003a8 	.word	0x200003a8
 8004364:	200003c0 	.word	0x200003c0

08004368 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004374:	480d      	ldr	r0, [pc, #52]	; (80043ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004376:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004378:	480d      	ldr	r0, [pc, #52]	; (80043b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800437a:	490e      	ldr	r1, [pc, #56]	; (80043b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800437c:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <LoopForever+0xe>)
  movs r3, #0
 800437e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004380:	e002      	b.n	8004388 <LoopCopyDataInit>

08004382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004386:	3304      	adds	r3, #4

08004388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800438a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800438c:	d3f9      	bcc.n	8004382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800438e:	4a0b      	ldr	r2, [pc, #44]	; (80043bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004390:	4c0b      	ldr	r4, [pc, #44]	; (80043c0 <LoopForever+0x16>)
  movs r3, #0
 8004392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004394:	e001      	b.n	800439a <LoopFillZerobss>

08004396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004398:	3204      	adds	r2, #4

0800439a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800439a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800439c:	d3fb      	bcc.n	8004396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800439e:	f7ff ffe3 	bl	8004368 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80043a2:	f003 fe2d 	bl	8008000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043a6:	f7ff f8d5 	bl	8003554 <main>

080043aa <LoopForever>:

LoopForever:
    b LoopForever
 80043aa:	e7fe      	b.n	80043aa <LoopForever>
  ldr   r0, =_estack
 80043ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80043b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043b4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80043b8:	0800b640 	.word	0x0800b640
  ldr r2, =_sbss
 80043bc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80043c0:	200003c0 	.word	0x200003c0

080043c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043c4:	e7fe      	b.n	80043c4 <ADC1_COMP_IRQHandler>
	...

080043c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <HAL_Init+0x24>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_Init+0x24>)
 80043d2:	2110      	movs	r1, #16
 80043d4:	430a      	orrs	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80043d8:	2000      	movs	r0, #0
 80043da:	f000 f809 	bl	80043f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043de:	f7ff fd69 	bl	8003eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	40022000 	.word	0x40022000

080043f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043f8:	4b14      	ldr	r3, [pc, #80]	; (800444c <HAL_InitTick+0x5c>)
 80043fa:	681c      	ldr	r4, [r3, #0]
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_InitTick+0x60>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	0019      	movs	r1, r3
 8004402:	23fa      	movs	r3, #250	; 0xfa
 8004404:	0098      	lsls	r0, r3, #2
 8004406:	f7fb fe9b 	bl	8000140 <__udivsi3>
 800440a:	0003      	movs	r3, r0
 800440c:	0019      	movs	r1, r3
 800440e:	0020      	movs	r0, r4
 8004410:	f7fb fe96 	bl	8000140 <__udivsi3>
 8004414:	0003      	movs	r3, r0
 8004416:	0018      	movs	r0, r3
 8004418:	f000 f90b 	bl	8004632 <HAL_SYSTICK_Config>
 800441c:	1e03      	subs	r3, r0, #0
 800441e:	d001      	beq.n	8004424 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e00f      	b.n	8004444 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d80b      	bhi.n	8004442 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	2301      	movs	r3, #1
 800442e:	425b      	negs	r3, r3
 8004430:	2200      	movs	r2, #0
 8004432:	0018      	movs	r0, r3
 8004434:	f000 f8d8 	bl	80045e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_InitTick+0x64>)
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b003      	add	sp, #12
 800444a:	bd90      	pop	{r4, r7, pc}
 800444c:	20000008 	.word	0x20000008
 8004450:	20000010 	.word	0x20000010
 8004454:	2000000c 	.word	0x2000000c

08004458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_IncTick+0x1c>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	001a      	movs	r2, r3
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_IncTick+0x20>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	18d2      	adds	r2, r2, r3
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_IncTick+0x20>)
 800446a:	601a      	str	r2, [r3, #0]
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	20000010 	.word	0x20000010
 8004478:	200003ac 	.word	0x200003ac

0800447c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  return uwTick;
 8004480:	4b02      	ldr	r3, [pc, #8]	; (800448c <HAL_GetTick+0x10>)
 8004482:	681b      	ldr	r3, [r3, #0]
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	200003ac 	.word	0x200003ac

08004490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	0002      	movs	r2, r0
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800449c:	1dfb      	adds	r3, r7, #7
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b7f      	cmp	r3, #127	; 0x7f
 80044a2:	d809      	bhi.n	80044b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a4:	1dfb      	adds	r3, r7, #7
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	001a      	movs	r2, r3
 80044aa:	231f      	movs	r3, #31
 80044ac:	401a      	ands	r2, r3
 80044ae:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <__NVIC_EnableIRQ+0x30>)
 80044b0:	2101      	movs	r1, #1
 80044b2:	4091      	lsls	r1, r2
 80044b4:	000a      	movs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]
  }
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b002      	add	sp, #8
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	e000e100 	.word	0xe000e100

080044c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	0002      	movs	r2, r0
 80044cc:	6039      	str	r1, [r7, #0]
 80044ce:	1dfb      	adds	r3, r7, #7
 80044d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044d2:	1dfb      	adds	r3, r7, #7
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b7f      	cmp	r3, #127	; 0x7f
 80044d8:	d828      	bhi.n	800452c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044da:	4a2f      	ldr	r2, [pc, #188]	; (8004598 <__NVIC_SetPriority+0xd4>)
 80044dc:	1dfb      	adds	r3, r7, #7
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b25b      	sxtb	r3, r3
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	33c0      	adds	r3, #192	; 0xc0
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	589b      	ldr	r3, [r3, r2]
 80044ea:	1dfa      	adds	r2, r7, #7
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	0011      	movs	r1, r2
 80044f0:	2203      	movs	r2, #3
 80044f2:	400a      	ands	r2, r1
 80044f4:	00d2      	lsls	r2, r2, #3
 80044f6:	21ff      	movs	r1, #255	; 0xff
 80044f8:	4091      	lsls	r1, r2
 80044fa:	000a      	movs	r2, r1
 80044fc:	43d2      	mvns	r2, r2
 80044fe:	401a      	ands	r2, r3
 8004500:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	22ff      	movs	r2, #255	; 0xff
 8004508:	401a      	ands	r2, r3
 800450a:	1dfb      	adds	r3, r7, #7
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	0018      	movs	r0, r3
 8004510:	2303      	movs	r3, #3
 8004512:	4003      	ands	r3, r0
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004518:	481f      	ldr	r0, [pc, #124]	; (8004598 <__NVIC_SetPriority+0xd4>)
 800451a:	1dfb      	adds	r3, r7, #7
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b25b      	sxtb	r3, r3
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	430a      	orrs	r2, r1
 8004524:	33c0      	adds	r3, #192	; 0xc0
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800452a:	e031      	b.n	8004590 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800452c:	4a1b      	ldr	r2, [pc, #108]	; (800459c <__NVIC_SetPriority+0xd8>)
 800452e:	1dfb      	adds	r3, r7, #7
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	0019      	movs	r1, r3
 8004534:	230f      	movs	r3, #15
 8004536:	400b      	ands	r3, r1
 8004538:	3b08      	subs	r3, #8
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	3306      	adds	r3, #6
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	18d3      	adds	r3, r2, r3
 8004542:	3304      	adds	r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	1dfa      	adds	r2, r7, #7
 8004548:	7812      	ldrb	r2, [r2, #0]
 800454a:	0011      	movs	r1, r2
 800454c:	2203      	movs	r2, #3
 800454e:	400a      	ands	r2, r1
 8004550:	00d2      	lsls	r2, r2, #3
 8004552:	21ff      	movs	r1, #255	; 0xff
 8004554:	4091      	lsls	r1, r2
 8004556:	000a      	movs	r2, r1
 8004558:	43d2      	mvns	r2, r2
 800455a:	401a      	ands	r2, r3
 800455c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	019b      	lsls	r3, r3, #6
 8004562:	22ff      	movs	r2, #255	; 0xff
 8004564:	401a      	ands	r2, r3
 8004566:	1dfb      	adds	r3, r7, #7
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	0018      	movs	r0, r3
 800456c:	2303      	movs	r3, #3
 800456e:	4003      	ands	r3, r0
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004574:	4809      	ldr	r0, [pc, #36]	; (800459c <__NVIC_SetPriority+0xd8>)
 8004576:	1dfb      	adds	r3, r7, #7
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	001c      	movs	r4, r3
 800457c:	230f      	movs	r3, #15
 800457e:	4023      	ands	r3, r4
 8004580:	3b08      	subs	r3, #8
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	430a      	orrs	r2, r1
 8004586:	3306      	adds	r3, #6
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	18c3      	adds	r3, r0, r3
 800458c:	3304      	adds	r3, #4
 800458e:	601a      	str	r2, [r3, #0]
}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b003      	add	sp, #12
 8004596:	bd90      	pop	{r4, r7, pc}
 8004598:	e000e100 	.word	0xe000e100
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1e5a      	subs	r2, r3, #1
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	045b      	lsls	r3, r3, #17
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d301      	bcc.n	80045b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045b4:	2301      	movs	r3, #1
 80045b6:	e010      	b.n	80045da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045b8:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <SysTick_Config+0x44>)
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	3a01      	subs	r2, #1
 80045be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045c0:	2301      	movs	r3, #1
 80045c2:	425b      	negs	r3, r3
 80045c4:	2103      	movs	r1, #3
 80045c6:	0018      	movs	r0, r3
 80045c8:	f7ff ff7c 	bl	80044c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <SysTick_Config+0x44>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045d2:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <SysTick_Config+0x44>)
 80045d4:	2207      	movs	r2, #7
 80045d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d8:	2300      	movs	r3, #0
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b002      	add	sp, #8
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	e000e010 	.word	0xe000e010

080045e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	210f      	movs	r1, #15
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	1c02      	adds	r2, r0, #0
 80045f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	187b      	adds	r3, r7, r1
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	b25b      	sxtb	r3, r3
 8004602:	0011      	movs	r1, r2
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff ff5d 	bl	80044c4 <__NVIC_SetPriority>
}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	b004      	add	sp, #16
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	0002      	movs	r2, r0
 800461a:	1dfb      	adds	r3, r7, #7
 800461c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800461e:	1dfb      	adds	r3, r7, #7
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	b25b      	sxtb	r3, r3
 8004624:	0018      	movs	r0, r3
 8004626:	f7ff ff33 	bl	8004490 <__NVIC_EnableIRQ>
}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	46bd      	mov	sp, r7
 800462e:	b002      	add	sp, #8
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	0018      	movs	r0, r3
 800463e:	f7ff ffaf 	bl	80045a0 <SysTick_Config>
 8004642:	0003      	movs	r3, r0
}
 8004644:	0018      	movs	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	b002      	add	sp, #8
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004654:	210f      	movs	r1, #15
 8004656:	187b      	adds	r3, r7, r1
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2221      	movs	r2, #33	; 0x21
 8004660:	5c9b      	ldrb	r3, [r3, r2]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d006      	beq.n	8004676 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2204      	movs	r2, #4
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800466e:	187b      	adds	r3, r7, r1
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e028      	b.n	80046c8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	210e      	movs	r1, #14
 8004682:	438a      	bics	r2, r1
 8004684:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	438a      	bics	r2, r1
 8004694:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	2101      	movs	r1, #1
 80046a0:	4091      	lsls	r1, r2
 80046a2:	000a      	movs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2221      	movs	r2, #33	; 0x21
 80046aa:	2101      	movs	r1, #1
 80046ac:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	2100      	movs	r1, #0
 80046b4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	0010      	movs	r0, r2
 80046c6:	4798      	blx	r3
    } 
  }
  return status;
 80046c8:	230f      	movs	r3, #15
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	781b      	ldrb	r3, [r3, #0]
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b004      	add	sp, #16
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2221      	movs	r2, #33	; 0x21
 80046e2:	5c9b      	ldrb	r3, [r3, r2]
 80046e4:	b2db      	uxtb	r3, r3
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b002      	add	sp, #8
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046fe:	e14f      	b.n	80049a0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2101      	movs	r1, #1
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4091      	lsls	r1, r2
 800470a:	000a      	movs	r2, r1
 800470c:	4013      	ands	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d100      	bne.n	8004718 <HAL_GPIO_Init+0x28>
 8004716:	e140      	b.n	800499a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2203      	movs	r2, #3
 800471e:	4013      	ands	r3, r2
 8004720:	2b01      	cmp	r3, #1
 8004722:	d005      	beq.n	8004730 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2203      	movs	r2, #3
 800472a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800472c:	2b02      	cmp	r3, #2
 800472e:	d130      	bne.n	8004792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	2203      	movs	r2, #3
 800473c:	409a      	lsls	r2, r3
 800473e:	0013      	movs	r3, r2
 8004740:	43da      	mvns	r2, r3
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	409a      	lsls	r2, r3
 8004752:	0013      	movs	r3, r2
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004766:	2201      	movs	r2, #1
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	409a      	lsls	r2, r3
 800476c:	0013      	movs	r3, r2
 800476e:	43da      	mvns	r2, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	2201      	movs	r2, #1
 800477e:	401a      	ands	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	409a      	lsls	r2, r3
 8004784:	0013      	movs	r3, r2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2203      	movs	r2, #3
 8004798:	4013      	ands	r3, r2
 800479a:	2b03      	cmp	r3, #3
 800479c:	d017      	beq.n	80047ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	2203      	movs	r2, #3
 80047aa:	409a      	lsls	r2, r3
 80047ac:	0013      	movs	r3, r2
 80047ae:	43da      	mvns	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	0013      	movs	r3, r2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2203      	movs	r2, #3
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d123      	bne.n	8004822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	08da      	lsrs	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3208      	adds	r2, #8
 80047e2:	0092      	lsls	r2, r2, #2
 80047e4:	58d3      	ldr	r3, [r2, r3]
 80047e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2207      	movs	r2, #7
 80047ec:	4013      	ands	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	220f      	movs	r2, #15
 80047f2:	409a      	lsls	r2, r3
 80047f4:	0013      	movs	r3, r2
 80047f6:	43da      	mvns	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2107      	movs	r1, #7
 8004806:	400b      	ands	r3, r1
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	409a      	lsls	r2, r3
 800480c:	0013      	movs	r3, r2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	08da      	lsrs	r2, r3, #3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3208      	adds	r2, #8
 800481c:	0092      	lsls	r2, r2, #2
 800481e:	6939      	ldr	r1, [r7, #16]
 8004820:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	2203      	movs	r2, #3
 800482e:	409a      	lsls	r2, r3
 8004830:	0013      	movs	r3, r2
 8004832:	43da      	mvns	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4013      	ands	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2203      	movs	r2, #3
 8004840:	401a      	ands	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	409a      	lsls	r2, r3
 8004848:	0013      	movs	r3, r2
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	23c0      	movs	r3, #192	; 0xc0
 800485c:	029b      	lsls	r3, r3, #10
 800485e:	4013      	ands	r3, r2
 8004860:	d100      	bne.n	8004864 <HAL_GPIO_Init+0x174>
 8004862:	e09a      	b.n	800499a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004864:	4b54      	ldr	r3, [pc, #336]	; (80049b8 <HAL_GPIO_Init+0x2c8>)
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	4b53      	ldr	r3, [pc, #332]	; (80049b8 <HAL_GPIO_Init+0x2c8>)
 800486a:	2101      	movs	r1, #1
 800486c:	430a      	orrs	r2, r1
 800486e:	619a      	str	r2, [r3, #24]
 8004870:	4b51      	ldr	r3, [pc, #324]	; (80049b8 <HAL_GPIO_Init+0x2c8>)
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2201      	movs	r2, #1
 8004876:	4013      	ands	r3, r2
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800487c:	4a4f      	ldr	r2, [pc, #316]	; (80049bc <HAL_GPIO_Init+0x2cc>)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	089b      	lsrs	r3, r3, #2
 8004882:	3302      	adds	r3, #2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	589b      	ldr	r3, [r3, r2]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2203      	movs	r2, #3
 800488e:	4013      	ands	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	220f      	movs	r2, #15
 8004894:	409a      	lsls	r2, r3
 8004896:	0013      	movs	r3, r2
 8004898:	43da      	mvns	r2, r3
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4013      	ands	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	2390      	movs	r3, #144	; 0x90
 80048a4:	05db      	lsls	r3, r3, #23
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d013      	beq.n	80048d2 <HAL_GPIO_Init+0x1e2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a44      	ldr	r2, [pc, #272]	; (80049c0 <HAL_GPIO_Init+0x2d0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00d      	beq.n	80048ce <HAL_GPIO_Init+0x1de>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a43      	ldr	r2, [pc, #268]	; (80049c4 <HAL_GPIO_Init+0x2d4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <HAL_GPIO_Init+0x1da>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a42      	ldr	r2, [pc, #264]	; (80049c8 <HAL_GPIO_Init+0x2d8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d101      	bne.n	80048c6 <HAL_GPIO_Init+0x1d6>
 80048c2:	2303      	movs	r3, #3
 80048c4:	e006      	b.n	80048d4 <HAL_GPIO_Init+0x1e4>
 80048c6:	2305      	movs	r3, #5
 80048c8:	e004      	b.n	80048d4 <HAL_GPIO_Init+0x1e4>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e002      	b.n	80048d4 <HAL_GPIO_Init+0x1e4>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_GPIO_Init+0x1e4>
 80048d2:	2300      	movs	r3, #0
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	2103      	movs	r1, #3
 80048d8:	400a      	ands	r2, r1
 80048da:	0092      	lsls	r2, r2, #2
 80048dc:	4093      	lsls	r3, r2
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048e4:	4935      	ldr	r1, [pc, #212]	; (80049bc <HAL_GPIO_Init+0x2cc>)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	3302      	adds	r3, #2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048f2:	4b36      	ldr	r3, [pc, #216]	; (80049cc <HAL_GPIO_Init+0x2dc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	43da      	mvns	r2, r3
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4013      	ands	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	2380      	movs	r3, #128	; 0x80
 8004908:	025b      	lsls	r3, r3, #9
 800490a:	4013      	ands	r3, r2
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004916:	4b2d      	ldr	r3, [pc, #180]	; (80049cc <HAL_GPIO_Init+0x2dc>)
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <HAL_GPIO_Init+0x2dc>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	43da      	mvns	r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	029b      	lsls	r3, r3, #10
 8004934:	4013      	ands	r3, r2
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004940:	4b22      	ldr	r3, [pc, #136]	; (80049cc <HAL_GPIO_Init+0x2dc>)
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004946:	4b21      	ldr	r3, [pc, #132]	; (80049cc <HAL_GPIO_Init+0x2dc>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	43da      	mvns	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4013      	ands	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	035b      	lsls	r3, r3, #13
 800495e:	4013      	ands	r3, r2
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800496a:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_GPIO_Init+0x2dc>)
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004970:	4b16      	ldr	r3, [pc, #88]	; (80049cc <HAL_GPIO_Init+0x2dc>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	43da      	mvns	r2, r3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	039b      	lsls	r3, r3, #14
 8004988:	4013      	ands	r3, r2
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004994:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <HAL_GPIO_Init+0x2dc>)
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	3301      	adds	r3, #1
 800499e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	40da      	lsrs	r2, r3
 80049a8:	1e13      	subs	r3, r2, #0
 80049aa:	d000      	beq.n	80049ae <HAL_GPIO_Init+0x2be>
 80049ac:	e6a8      	b.n	8004700 <HAL_GPIO_Init+0x10>
  } 
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b006      	add	sp, #24
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40010000 	.word	0x40010000
 80049c0:	48000400 	.word	0x48000400
 80049c4:	48000800 	.word	0x48000800
 80049c8:	48000c00 	.word	0x48000c00
 80049cc:	40010400 	.word	0x40010400

080049d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	0002      	movs	r2, r0
 80049d8:	1dbb      	adds	r3, r7, #6
 80049da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	1dba      	adds	r2, r7, #6
 80049e2:	8812      	ldrh	r2, [r2, #0]
 80049e4:	4013      	ands	r3, r2
 80049e6:	d008      	beq.n	80049fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80049ea:	1dba      	adds	r2, r7, #6
 80049ec:	8812      	ldrh	r2, [r2, #0]
 80049ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049f0:	1dbb      	adds	r3, r7, #6
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7ff f8b3 	bl	8003b60 <HAL_GPIO_EXTI_Callback>
  }
}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b002      	add	sp, #8
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	40010400 	.word	0x40010400

08004a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e082      	b.n	8004b20 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2241      	movs	r2, #65	; 0x41
 8004a1e:	5c9b      	ldrb	r3, [r3, r2]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d107      	bne.n	8004a36 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2240      	movs	r2, #64	; 0x40
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	0018      	movs	r0, r3
 8004a32:	f7ff fa63 	bl	8003efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2241      	movs	r2, #65	; 0x41
 8004a3a:	2124      	movs	r1, #36	; 0x24
 8004a3c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2101      	movs	r1, #1
 8004a4a:	438a      	bics	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4934      	ldr	r1, [pc, #208]	; (8004b28 <HAL_I2C_Init+0x120>)
 8004a58:	400a      	ands	r2, r1
 8004a5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4931      	ldr	r1, [pc, #196]	; (8004b2c <HAL_I2C_Init+0x124>)
 8004a68:	400a      	ands	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d108      	bne.n	8004a86 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2180      	movs	r1, #128	; 0x80
 8004a7e:	0209      	lsls	r1, r1, #8
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	e007      	b.n	8004a96 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2184      	movs	r1, #132	; 0x84
 8004a90:	0209      	lsls	r1, r1, #8
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d104      	bne.n	8004aa8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2280      	movs	r2, #128	; 0x80
 8004aa4:	0112      	lsls	r2, r2, #4
 8004aa6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	491f      	ldr	r1, [pc, #124]	; (8004b30 <HAL_I2C_Init+0x128>)
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	491a      	ldr	r1, [pc, #104]	; (8004b2c <HAL_I2C_Init+0x124>)
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69d9      	ldr	r1, [r3, #28]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1a      	ldr	r2, [r3, #32]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2101      	movs	r1, #1
 8004afe:	430a      	orrs	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2241      	movs	r2, #65	; 0x41
 8004b0c:	2120      	movs	r1, #32
 8004b0e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2242      	movs	r2, #66	; 0x42
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b002      	add	sp, #8
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	f0ffffff 	.word	0xf0ffffff
 8004b2c:	ffff7fff 	.word	0xffff7fff
 8004b30:	02008000 	.word	0x02008000

08004b34 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b089      	sub	sp, #36	; 0x24
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	000c      	movs	r4, r1
 8004b3e:	0010      	movs	r0, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	230a      	movs	r3, #10
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	1c22      	adds	r2, r4, #0
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	1c02      	adds	r2, r0, #0
 8004b50:	801a      	strh	r2, [r3, #0]
 8004b52:	1dbb      	adds	r3, r7, #6
 8004b54:	1c0a      	adds	r2, r1, #0
 8004b56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2241      	movs	r2, #65	; 0x41
 8004b5c:	5c9b      	ldrb	r3, [r3, r2]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d000      	beq.n	8004b66 <HAL_I2C_Mem_Write+0x32>
 8004b64:	e10c      	b.n	8004d80 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_I2C_Mem_Write+0x42>
 8004b6c:	232c      	movs	r3, #44	; 0x2c
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d105      	bne.n	8004b82 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2280      	movs	r2, #128	; 0x80
 8004b7a:	0092      	lsls	r2, r2, #2
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0ff      	b.n	8004d82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2240      	movs	r2, #64	; 0x40
 8004b86:	5c9b      	ldrb	r3, [r3, r2]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_I2C_Mem_Write+0x5c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e0f8      	b.n	8004d82 <HAL_I2C_Mem_Write+0x24e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2240      	movs	r2, #64	; 0x40
 8004b94:	2101      	movs	r1, #1
 8004b96:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b98:	f7ff fc70 	bl	800447c <HAL_GetTick>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ba0:	2380      	movs	r3, #128	; 0x80
 8004ba2:	0219      	lsls	r1, r3, #8
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	2319      	movs	r3, #25
 8004bac:	2201      	movs	r2, #1
 8004bae:	f001 f885 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8004bb2:	1e03      	subs	r3, r0, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e0e3      	b.n	8004d82 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2241      	movs	r2, #65	; 0x41
 8004bbe:	2121      	movs	r1, #33	; 0x21
 8004bc0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2242      	movs	r2, #66	; 0x42
 8004bc6:	2140      	movs	r1, #64	; 0x40
 8004bc8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	222c      	movs	r2, #44	; 0x2c
 8004bda:	18ba      	adds	r2, r7, r2
 8004bdc:	8812      	ldrh	r2, [r2, #0]
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004be6:	1dbb      	adds	r3, r7, #6
 8004be8:	881c      	ldrh	r4, [r3, #0]
 8004bea:	2308      	movs	r3, #8
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	881a      	ldrh	r2, [r3, #0]
 8004bf0:	230a      	movs	r3, #10
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	8819      	ldrh	r1, [r3, #0]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	0023      	movs	r3, r4
 8004c02:	f000 fbc1 	bl	8005388 <I2C_RequestMemoryWrite>
 8004c06:	1e03      	subs	r3, r0, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2240      	movs	r2, #64	; 0x40
 8004c0e:	2100      	movs	r1, #0
 8004c10:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0b5      	b.n	8004d82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2bff      	cmp	r3, #255	; 0xff
 8004c1e:	d911      	bls.n	8004c44 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	22ff      	movs	r2, #255	; 0xff
 8004c24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	2380      	movs	r3, #128	; 0x80
 8004c2e:	045c      	lsls	r4, r3, #17
 8004c30:	230a      	movs	r3, #10
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	8819      	ldrh	r1, [r3, #0]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	0023      	movs	r3, r4
 8004c3e:	f001 f971 	bl	8005f24 <I2C_TransferConfig>
 8004c42:	e012      	b.n	8004c6a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	049c      	lsls	r4, r3, #18
 8004c58:	230a      	movs	r3, #10
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	8819      	ldrh	r1, [r3, #0]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	2300      	movs	r3, #0
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	0023      	movs	r3, r4
 8004c66:	f001 f95d 	bl	8005f24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f001 f862 	bl	8005d3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c76:	1e03      	subs	r3, r0, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e081      	b.n	8004d82 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	781a      	ldrb	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d03a      	beq.n	8004d2e <HAL_I2C_Mem_Write+0x1fa>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d136      	bne.n	8004d2e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	0013      	movs	r3, r2
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2180      	movs	r1, #128	; 0x80
 8004cce:	f000 fff5 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8004cd2:	1e03      	subs	r3, r0, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e053      	b.n	8004d82 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2bff      	cmp	r3, #255	; 0xff
 8004ce2:	d911      	bls.n	8004d08 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	22ff      	movs	r2, #255	; 0xff
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	2380      	movs	r3, #128	; 0x80
 8004cf2:	045c      	lsls	r4, r3, #17
 8004cf4:	230a      	movs	r3, #10
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	8819      	ldrh	r1, [r3, #0]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	0023      	movs	r3, r4
 8004d02:	f001 f90f 	bl	8005f24 <I2C_TransferConfig>
 8004d06:	e012      	b.n	8004d2e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	049c      	lsls	r4, r3, #18
 8004d1c:	230a      	movs	r3, #10
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	8819      	ldrh	r1, [r3, #0]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	2300      	movs	r3, #0
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	0023      	movs	r3, r4
 8004d2a:	f001 f8fb 	bl	8005f24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d198      	bne.n	8004c6a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f001 f83a 	bl	8005db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d44:	1e03      	subs	r3, r0, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e01a      	b.n	8004d82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2220      	movs	r2, #32
 8004d52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	490b      	ldr	r1, [pc, #44]	; (8004d8c <HAL_I2C_Mem_Write+0x258>)
 8004d60:	400a      	ands	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2241      	movs	r2, #65	; 0x41
 8004d68:	2120      	movs	r1, #32
 8004d6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2242      	movs	r2, #66	; 0x42
 8004d70:	2100      	movs	r1, #0
 8004d72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2240      	movs	r2, #64	; 0x40
 8004d78:	2100      	movs	r1, #0
 8004d7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	0018      	movs	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b007      	add	sp, #28
 8004d88:	bd90      	pop	{r4, r7, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	fe00e800 	.word	0xfe00e800

08004d90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b089      	sub	sp, #36	; 0x24
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	000c      	movs	r4, r1
 8004d9a:	0010      	movs	r0, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	230a      	movs	r3, #10
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	1c22      	adds	r2, r4, #0
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	2308      	movs	r3, #8
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	1c02      	adds	r2, r0, #0
 8004dac:	801a      	strh	r2, [r3, #0]
 8004dae:	1dbb      	adds	r3, r7, #6
 8004db0:	1c0a      	adds	r2, r1, #0
 8004db2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2241      	movs	r2, #65	; 0x41
 8004db8:	5c9b      	ldrb	r3, [r3, r2]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d000      	beq.n	8004dc2 <HAL_I2C_Mem_Read+0x32>
 8004dc0:	e110      	b.n	8004fe4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <HAL_I2C_Mem_Read+0x42>
 8004dc8:	232c      	movs	r3, #44	; 0x2c
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d105      	bne.n	8004dde <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2280      	movs	r2, #128	; 0x80
 8004dd6:	0092      	lsls	r2, r2, #2
 8004dd8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e103      	b.n	8004fe6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2240      	movs	r2, #64	; 0x40
 8004de2:	5c9b      	ldrb	r3, [r3, r2]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_I2C_Mem_Read+0x5c>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e0fc      	b.n	8004fe6 <HAL_I2C_Mem_Read+0x256>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2240      	movs	r2, #64	; 0x40
 8004df0:	2101      	movs	r1, #1
 8004df2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004df4:	f7ff fb42 	bl	800447c <HAL_GetTick>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	0219      	lsls	r1, r3, #8
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	2319      	movs	r3, #25
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f000 ff57 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	1e03      	subs	r3, r0, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e0e7      	b.n	8004fe6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2241      	movs	r2, #65	; 0x41
 8004e1a:	2122      	movs	r1, #34	; 0x22
 8004e1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2242      	movs	r2, #66	; 0x42
 8004e22:	2140      	movs	r1, #64	; 0x40
 8004e24:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	222c      	movs	r2, #44	; 0x2c
 8004e36:	18ba      	adds	r2, r7, r2
 8004e38:	8812      	ldrh	r2, [r2, #0]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e42:	1dbb      	adds	r3, r7, #6
 8004e44:	881c      	ldrh	r4, [r3, #0]
 8004e46:	2308      	movs	r3, #8
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	881a      	ldrh	r2, [r3, #0]
 8004e4c:	230a      	movs	r3, #10
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	8819      	ldrh	r1, [r3, #0]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	0023      	movs	r3, r4
 8004e5e:	f000 faf7 	bl	8005450 <I2C_RequestMemoryRead>
 8004e62:	1e03      	subs	r3, r0, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2240      	movs	r2, #64	; 0x40
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e0b9      	b.n	8004fe6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2bff      	cmp	r3, #255	; 0xff
 8004e7a:	d911      	bls.n	8004ea0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	22ff      	movs	r2, #255	; 0xff
 8004e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	045c      	lsls	r4, r3, #17
 8004e8c:	230a      	movs	r3, #10
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	8819      	ldrh	r1, [r3, #0]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	4b56      	ldr	r3, [pc, #344]	; (8004ff0 <HAL_I2C_Mem_Read+0x260>)
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	0023      	movs	r3, r4
 8004e9a:	f001 f843 	bl	8005f24 <I2C_TransferConfig>
 8004e9e:	e012      	b.n	8004ec6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	049c      	lsls	r4, r3, #18
 8004eb4:	230a      	movs	r3, #10
 8004eb6:	18fb      	adds	r3, r7, r3
 8004eb8:	8819      	ldrh	r1, [r3, #0]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	4b4c      	ldr	r3, [pc, #304]	; (8004ff0 <HAL_I2C_Mem_Read+0x260>)
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	0023      	movs	r3, r4
 8004ec2:	f001 f82f 	bl	8005f24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	0013      	movs	r3, r2
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2104      	movs	r1, #4
 8004ed4:	f000 fef2 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8004ed8:	1e03      	subs	r3, r0, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e082      	b.n	8004fe6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d03a      	beq.n	8004f92 <HAL_I2C_Mem_Read+0x202>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d136      	bne.n	8004f92 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	0013      	movs	r3, r2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	f000 fec3 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8004f36:	1e03      	subs	r3, r0, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e053      	b.n	8004fe6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2bff      	cmp	r3, #255	; 0xff
 8004f46:	d911      	bls.n	8004f6c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	22ff      	movs	r2, #255	; 0xff
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	045c      	lsls	r4, r3, #17
 8004f58:	230a      	movs	r3, #10
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	8819      	ldrh	r1, [r3, #0]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	2300      	movs	r3, #0
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	0023      	movs	r3, r4
 8004f66:	f000 ffdd 	bl	8005f24 <I2C_TransferConfig>
 8004f6a:	e012      	b.n	8004f92 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	049c      	lsls	r4, r3, #18
 8004f80:	230a      	movs	r3, #10
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	8819      	ldrh	r1, [r3, #0]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	0023      	movs	r3, r4
 8004f8e:	f000 ffc9 	bl	8005f24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d194      	bne.n	8004ec6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 ff08 	bl	8005db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fa8:	1e03      	subs	r3, r0, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e01a      	b.n	8004fe6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	490c      	ldr	r1, [pc, #48]	; (8004ff4 <HAL_I2C_Mem_Read+0x264>)
 8004fc4:	400a      	ands	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2241      	movs	r2, #65	; 0x41
 8004fcc:	2120      	movs	r1, #32
 8004fce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2242      	movs	r2, #66	; 0x42
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2240      	movs	r2, #64	; 0x40
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e000      	b.n	8004fe6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
  }
}
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b007      	add	sp, #28
 8004fec:	bd90      	pop	{r4, r7, pc}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	80002400 	.word	0x80002400
 8004ff4:	fe00e800 	.word	0xfe00e800

08004ff8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4798      	blx	r3
  }
}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	001a      	movs	r2, r3
 800504a:	2301      	movs	r3, #1
 800504c:	4013      	ands	r3, r2
 800504e:	d010      	beq.n	8005072 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	09db      	lsrs	r3, r3, #7
 8005054:	001a      	movs	r2, r3
 8005056:	2301      	movs	r3, #1
 8005058:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800505a:	d00a      	beq.n	8005072 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005060:	2201      	movs	r2, #1
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2280      	movs	r2, #128	; 0x80
 800506e:	0052      	lsls	r2, r2, #1
 8005070:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	0a9b      	lsrs	r3, r3, #10
 8005076:	001a      	movs	r2, r3
 8005078:	2301      	movs	r3, #1
 800507a:	4013      	ands	r3, r2
 800507c:	d010      	beq.n	80050a0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	09db      	lsrs	r3, r3, #7
 8005082:	001a      	movs	r2, r3
 8005084:	2301      	movs	r3, #1
 8005086:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005088:	d00a      	beq.n	80050a0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	2208      	movs	r2, #8
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2280      	movs	r2, #128	; 0x80
 800509c:	00d2      	lsls	r2, r2, #3
 800509e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	0a5b      	lsrs	r3, r3, #9
 80050a4:	001a      	movs	r2, r3
 80050a6:	2301      	movs	r3, #1
 80050a8:	4013      	ands	r3, r2
 80050aa:	d010      	beq.n	80050ce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	09db      	lsrs	r3, r3, #7
 80050b0:	001a      	movs	r2, r3
 80050b2:	2301      	movs	r3, #1
 80050b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80050b6:	d00a      	beq.n	80050ce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050bc:	2202      	movs	r2, #2
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2280      	movs	r2, #128	; 0x80
 80050ca:	0092      	lsls	r2, r2, #2
 80050cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	220b      	movs	r2, #11
 80050d8:	4013      	ands	r3, r2
 80050da:	d005      	beq.n	80050e8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	0011      	movs	r1, r2
 80050e2:	0018      	movs	r0, r3
 80050e4:	f000 fc9e 	bl	8005a24 <I2C_ITError>
  }
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b006      	add	sp, #24
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80050f8:	46c0      	nop			; (mov r8, r8)
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b002      	add	sp, #8
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	46bd      	mov	sp, r7
 800510c:	b002      	add	sp, #8
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	0008      	movs	r0, r1
 800511a:	0011      	movs	r1, r2
 800511c:	1cfb      	adds	r3, r7, #3
 800511e:	1c02      	adds	r2, r0, #0
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	003b      	movs	r3, r7
 8005124:	1c0a      	adds	r2, r1, #0
 8005126:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b002      	add	sp, #8
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b002      	add	sp, #8
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005148:	46c0      	nop			; (mov r8, r8)
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}

08005160 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2240      	movs	r2, #64	; 0x40
 800517a:	5c9b      	ldrb	r3, [r3, r2]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <I2C_Slave_ISR_IT+0x24>
 8005180:	2302      	movs	r3, #2
 8005182:	e0fa      	b.n	800537a <I2C_Slave_ISR_IT+0x21a>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2240      	movs	r2, #64	; 0x40
 8005188:	2101      	movs	r1, #1
 800518a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	001a      	movs	r2, r3
 8005192:	2301      	movs	r3, #1
 8005194:	4013      	ands	r3, r2
 8005196:	d00b      	beq.n	80051b0 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	001a      	movs	r2, r3
 800519e:	2301      	movs	r3, #1
 80051a0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80051a2:	d005      	beq.n	80051b0 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	0011      	movs	r1, r2
 80051aa:	0018      	movs	r0, r3
 80051ac:	f000 fabc 	bl	8005728 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	001a      	movs	r2, r3
 80051b6:	2301      	movs	r3, #1
 80051b8:	4013      	ands	r3, r2
 80051ba:	d054      	beq.n	8005266 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	001a      	movs	r2, r3
 80051c2:	2301      	movs	r3, #1
 80051c4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051c6:	d04e      	beq.n	8005266 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d12d      	bne.n	800522e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2241      	movs	r2, #65	; 0x41
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b28      	cmp	r3, #40	; 0x28
 80051dc:	d10b      	bne.n	80051f6 <I2C_Slave_ISR_IT+0x96>
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	049b      	lsls	r3, r3, #18
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d106      	bne.n	80051f6 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	0011      	movs	r1, r2
 80051ee:	0018      	movs	r0, r3
 80051f0:	f000 fbbe 	bl	8005970 <I2C_ITListenCplt>
 80051f4:	e036      	b.n	8005264 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2241      	movs	r2, #65	; 0x41
 80051fa:	5c9b      	ldrb	r3, [r3, r2]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b29      	cmp	r3, #41	; 0x29
 8005200:	d110      	bne.n	8005224 <I2C_Slave_ISR_IT+0xc4>
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	4a5f      	ldr	r2, [pc, #380]	; (8005384 <I2C_Slave_ISR_IT+0x224>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00c      	beq.n	8005224 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2210      	movs	r2, #16
 8005210:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	0018      	movs	r0, r3
 8005216:	f000 fd10 	bl	8005c3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	0018      	movs	r0, r3
 800521e:	f000 fa1d 	bl	800565c <I2C_ITSlaveSeqCplt>
 8005222:	e01f      	b.n	8005264 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2210      	movs	r2, #16
 800522a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800522c:	e09d      	b.n	800536a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2210      	movs	r2, #16
 8005234:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	2204      	movs	r2, #4
 800523c:	431a      	orrs	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <I2C_Slave_ISR_IT+0xf4>
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	2380      	movs	r3, #128	; 0x80
 800524c:	045b      	lsls	r3, r3, #17
 800524e:	429a      	cmp	r2, r3
 8005250:	d000      	beq.n	8005254 <I2C_Slave_ISR_IT+0xf4>
 8005252:	e08a      	b.n	800536a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	0011      	movs	r1, r2
 800525c:	0018      	movs	r0, r3
 800525e:	f000 fbe1 	bl	8005a24 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005262:	e082      	b.n	800536a <I2C_Slave_ISR_IT+0x20a>
 8005264:	e081      	b.n	800536a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	001a      	movs	r2, r3
 800526c:	2301      	movs	r3, #1
 800526e:	4013      	ands	r3, r2
 8005270:	d031      	beq.n	80052d6 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	089b      	lsrs	r3, r3, #2
 8005276:	001a      	movs	r2, r3
 8005278:	2301      	movs	r3, #1
 800527a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800527c:	d02b      	beq.n	80052d6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d018      	beq.n	80052ba <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d154      	bne.n	800536e <I2C_Slave_ISR_IT+0x20e>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <I2C_Slave_ISR_IT+0x224>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d050      	beq.n	800536e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	0018      	movs	r0, r3
 80052d0:	f000 f9c4 	bl	800565c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80052d4:	e04b      	b.n	800536e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	001a      	movs	r2, r3
 80052dc:	2301      	movs	r3, #1
 80052de:	4013      	ands	r3, r2
 80052e0:	d00c      	beq.n	80052fc <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	08db      	lsrs	r3, r3, #3
 80052e6:	001a      	movs	r2, r3
 80052e8:	2301      	movs	r3, #1
 80052ea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052ec:	d006      	beq.n	80052fc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	0011      	movs	r1, r2
 80052f4:	0018      	movs	r0, r3
 80052f6:	f000 f90d 	bl	8005514 <I2C_ITAddrCplt>
 80052fa:	e039      	b.n	8005370 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	001a      	movs	r2, r3
 8005302:	2301      	movs	r3, #1
 8005304:	4013      	ands	r3, r2
 8005306:	d033      	beq.n	8005370 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	001a      	movs	r2, r3
 800530e:	2301      	movs	r3, #1
 8005310:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005312:	d02d      	beq.n	8005370 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	851a      	strh	r2, [r3, #40]	; 0x28
 800534e:	e00f      	b.n	8005370 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	2380      	movs	r3, #128	; 0x80
 8005354:	045b      	lsls	r3, r3, #17
 8005356:	429a      	cmp	r2, r3
 8005358:	d002      	beq.n	8005360 <I2C_Slave_ISR_IT+0x200>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d107      	bne.n	8005370 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	0018      	movs	r0, r3
 8005364:	f000 f97a 	bl	800565c <I2C_ITSlaveSeqCplt>
 8005368:	e002      	b.n	8005370 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	e000      	b.n	8005370 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800536e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2240      	movs	r2, #64	; 0x40
 8005374:	2100      	movs	r1, #0
 8005376:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	0018      	movs	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	b006      	add	sp, #24
 8005380:	bd80      	pop	{r7, pc}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	ffff0000 	.word	0xffff0000

08005388 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005388:	b5b0      	push	{r4, r5, r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	000c      	movs	r4, r1
 8005392:	0010      	movs	r0, r2
 8005394:	0019      	movs	r1, r3
 8005396:	250a      	movs	r5, #10
 8005398:	197b      	adds	r3, r7, r5
 800539a:	1c22      	adds	r2, r4, #0
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	2308      	movs	r3, #8
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	1c02      	adds	r2, r0, #0
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	1dbb      	adds	r3, r7, #6
 80053a8:	1c0a      	adds	r2, r1, #0
 80053aa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053ac:	1dbb      	adds	r3, r7, #6
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	045c      	lsls	r4, r3, #17
 80053b6:	197b      	adds	r3, r7, r5
 80053b8:	8819      	ldrh	r1, [r3, #0]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	4b23      	ldr	r3, [pc, #140]	; (800544c <I2C_RequestMemoryWrite+0xc4>)
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	0023      	movs	r3, r4
 80053c2:	f000 fdaf 	bl	8005f24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c8:	6a39      	ldr	r1, [r7, #32]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 fcb4 	bl	8005d3a <I2C_WaitOnTXISFlagUntilTimeout>
 80053d2:	1e03      	subs	r3, r0, #0
 80053d4:	d001      	beq.n	80053da <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e033      	b.n	8005442 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053da:	1dbb      	adds	r3, r7, #6
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d107      	bne.n	80053f2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053e2:	2308      	movs	r3, #8
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	629a      	str	r2, [r3, #40]	; 0x28
 80053f0:	e019      	b.n	8005426 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053f2:	2308      	movs	r3, #8
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005406:	6a39      	ldr	r1, [r7, #32]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	0018      	movs	r0, r3
 800540c:	f000 fc95 	bl	8005d3a <I2C_WaitOnTXISFlagUntilTimeout>
 8005410:	1e03      	subs	r3, r0, #0
 8005412:	d001      	beq.n	8005418 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e014      	b.n	8005442 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005418:	2308      	movs	r3, #8
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005426:	6a3a      	ldr	r2, [r7, #32]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	0013      	movs	r3, r2
 8005430:	2200      	movs	r2, #0
 8005432:	2180      	movs	r1, #128	; 0x80
 8005434:	f000 fc42 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8005438:	1e03      	subs	r3, r0, #0
 800543a:	d001      	beq.n	8005440 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	0018      	movs	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	b004      	add	sp, #16
 8005448:	bdb0      	pop	{r4, r5, r7, pc}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	80002000 	.word	0x80002000

08005450 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005450:	b5b0      	push	{r4, r5, r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	000c      	movs	r4, r1
 800545a:	0010      	movs	r0, r2
 800545c:	0019      	movs	r1, r3
 800545e:	250a      	movs	r5, #10
 8005460:	197b      	adds	r3, r7, r5
 8005462:	1c22      	adds	r2, r4, #0
 8005464:	801a      	strh	r2, [r3, #0]
 8005466:	2308      	movs	r3, #8
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	1c02      	adds	r2, r0, #0
 800546c:	801a      	strh	r2, [r3, #0]
 800546e:	1dbb      	adds	r3, r7, #6
 8005470:	1c0a      	adds	r2, r1, #0
 8005472:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005474:	1dbb      	adds	r3, r7, #6
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b2da      	uxtb	r2, r3
 800547a:	197b      	adds	r3, r7, r5
 800547c:	8819      	ldrh	r1, [r3, #0]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	4b23      	ldr	r3, [pc, #140]	; (8005510 <I2C_RequestMemoryRead+0xc0>)
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	2300      	movs	r3, #0
 8005486:	f000 fd4d 	bl	8005f24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800548a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548c:	6a39      	ldr	r1, [r7, #32]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	0018      	movs	r0, r3
 8005492:	f000 fc52 	bl	8005d3a <I2C_WaitOnTXISFlagUntilTimeout>
 8005496:	1e03      	subs	r3, r0, #0
 8005498:	d001      	beq.n	800549e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e033      	b.n	8005506 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800549e:	1dbb      	adds	r3, r7, #6
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d107      	bne.n	80054b6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054a6:	2308      	movs	r3, #8
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	629a      	str	r2, [r3, #40]	; 0x28
 80054b4:	e019      	b.n	80054ea <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054b6:	2308      	movs	r3, #8
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	b29b      	uxth	r3, r3
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ca:	6a39      	ldr	r1, [r7, #32]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 fc33 	bl	8005d3a <I2C_WaitOnTXISFlagUntilTimeout>
 80054d4:	1e03      	subs	r3, r0, #0
 80054d6:	d001      	beq.n	80054dc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e014      	b.n	8005506 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054dc:	2308      	movs	r3, #8
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	0013      	movs	r3, r2
 80054f4:	2200      	movs	r2, #0
 80054f6:	2140      	movs	r1, #64	; 0x40
 80054f8:	f000 fbe0 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 80054fc:	1e03      	subs	r3, r0, #0
 80054fe:	d001      	beq.n	8005504 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	0018      	movs	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	b004      	add	sp, #16
 800550c:	bdb0      	pop	{r4, r5, r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	80002000 	.word	0x80002000

08005514 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005514:	b5b0      	push	{r4, r5, r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2241      	movs	r2, #65	; 0x41
 8005522:	5c9b      	ldrb	r3, [r3, r2]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	001a      	movs	r2, r3
 8005528:	2328      	movs	r3, #40	; 0x28
 800552a:	4013      	ands	r3, r2
 800552c:	2b28      	cmp	r3, #40	; 0x28
 800552e:	d000      	beq.n	8005532 <I2C_ITAddrCplt+0x1e>
 8005530:	e088      	b.n	8005644 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	0c1b      	lsrs	r3, r3, #16
 800553a:	b2da      	uxtb	r2, r3
 800553c:	250f      	movs	r5, #15
 800553e:	197b      	adds	r3, r7, r5
 8005540:	2101      	movs	r1, #1
 8005542:	400a      	ands	r2, r1
 8005544:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	0c1b      	lsrs	r3, r3, #16
 800554e:	b29a      	uxth	r2, r3
 8005550:	200c      	movs	r0, #12
 8005552:	183b      	adds	r3, r7, r0
 8005554:	21fe      	movs	r1, #254	; 0xfe
 8005556:	400a      	ands	r2, r1
 8005558:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	b29a      	uxth	r2, r3
 8005562:	240a      	movs	r4, #10
 8005564:	193b      	adds	r3, r7, r4
 8005566:	0592      	lsls	r2, r2, #22
 8005568:	0d92      	lsrs	r2, r2, #22
 800556a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	b29a      	uxth	r2, r3
 8005574:	2308      	movs	r3, #8
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	21fe      	movs	r1, #254	; 0xfe
 800557a:	400a      	ands	r2, r1
 800557c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d148      	bne.n	8005618 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005586:	0021      	movs	r1, r4
 8005588:	187b      	adds	r3, r7, r1
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	09db      	lsrs	r3, r3, #7
 800558e:	b29a      	uxth	r2, r3
 8005590:	183b      	adds	r3, r7, r0
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	4053      	eors	r3, r2
 8005596:	b29b      	uxth	r3, r3
 8005598:	001a      	movs	r2, r3
 800559a:	2306      	movs	r3, #6
 800559c:	4013      	ands	r3, r2
 800559e:	d120      	bne.n	80055e2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80055a0:	183b      	adds	r3, r7, r0
 80055a2:	187a      	adds	r2, r7, r1
 80055a4:	8812      	ldrh	r2, [r2, #0]
 80055a6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d14c      	bne.n	8005654 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2208      	movs	r2, #8
 80055c6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2240      	movs	r2, #64	; 0x40
 80055cc:	2100      	movs	r1, #0
 80055ce:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80055d0:	183b      	adds	r3, r7, r0
 80055d2:	881a      	ldrh	r2, [r3, #0]
 80055d4:	197b      	adds	r3, r7, r5
 80055d6:	7819      	ldrb	r1, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	0018      	movs	r0, r3
 80055dc:	f7ff fd98 	bl	8005110 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055e0:	e038      	b.n	8005654 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80055e2:	240c      	movs	r4, #12
 80055e4:	193b      	adds	r3, r7, r4
 80055e6:	2208      	movs	r2, #8
 80055e8:	18ba      	adds	r2, r7, r2
 80055ea:	8812      	ldrh	r2, [r2, #0]
 80055ec:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	021a      	lsls	r2, r3, #8
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	0011      	movs	r1, r2
 80055f6:	0018      	movs	r0, r3
 80055f8:	f000 fcca 	bl	8005f90 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2240      	movs	r2, #64	; 0x40
 8005600:	2100      	movs	r1, #0
 8005602:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005604:	193b      	adds	r3, r7, r4
 8005606:	881a      	ldrh	r2, [r3, #0]
 8005608:	230f      	movs	r3, #15
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	7819      	ldrb	r1, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0018      	movs	r0, r3
 8005612:	f7ff fd7d 	bl	8005110 <HAL_I2C_AddrCallback>
}
 8005616:	e01d      	b.n	8005654 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	0011      	movs	r1, r2
 8005620:	0018      	movs	r0, r3
 8005622:	f000 fcb5 	bl	8005f90 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2240      	movs	r2, #64	; 0x40
 800562a:	2100      	movs	r1, #0
 800562c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800562e:	230c      	movs	r3, #12
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	881a      	ldrh	r2, [r3, #0]
 8005634:	230f      	movs	r3, #15
 8005636:	18fb      	adds	r3, r7, r3
 8005638:	7819      	ldrb	r1, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	0018      	movs	r0, r3
 800563e:	f7ff fd67 	bl	8005110 <HAL_I2C_AddrCallback>
}
 8005642:	e007      	b.n	8005654 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2208      	movs	r2, #8
 800564a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2240      	movs	r2, #64	; 0x40
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]
}
 8005654:	46c0      	nop			; (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	b004      	add	sp, #16
 800565a:	bdb0      	pop	{r4, r5, r7, pc}

0800565c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2242      	movs	r2, #66	; 0x42
 8005670:	2100      	movs	r1, #0
 8005672:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	0b9b      	lsrs	r3, r3, #14
 8005678:	001a      	movs	r2, r3
 800567a:	2301      	movs	r3, #1
 800567c:	4013      	ands	r3, r2
 800567e:	d008      	beq.n	8005692 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4925      	ldr	r1, [pc, #148]	; (8005720 <I2C_ITSlaveSeqCplt+0xc4>)
 800568c:	400a      	ands	r2, r1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e00d      	b.n	80056ae <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	0bdb      	lsrs	r3, r3, #15
 8005696:	001a      	movs	r2, r3
 8005698:	2301      	movs	r3, #1
 800569a:	4013      	ands	r3, r2
 800569c:	d007      	beq.n	80056ae <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	491e      	ldr	r1, [pc, #120]	; (8005724 <I2C_ITSlaveSeqCplt+0xc8>)
 80056aa:	400a      	ands	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2241      	movs	r2, #65	; 0x41
 80056b2:	5c9b      	ldrb	r3, [r3, r2]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b29      	cmp	r3, #41	; 0x29
 80056b8:	d114      	bne.n	80056e4 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2241      	movs	r2, #65	; 0x41
 80056be:	2128      	movs	r1, #40	; 0x28
 80056c0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2221      	movs	r2, #33	; 0x21
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2101      	movs	r1, #1
 80056cc:	0018      	movs	r0, r3
 80056ce:	f000 fc5f 	bl	8005f90 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2240      	movs	r2, #64	; 0x40
 80056d6:	2100      	movs	r1, #0
 80056d8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0018      	movs	r0, r3
 80056de:	f7ff fd07 	bl	80050f0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80056e2:	e019      	b.n	8005718 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2241      	movs	r2, #65	; 0x41
 80056e8:	5c9b      	ldrb	r3, [r3, r2]
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b2a      	cmp	r3, #42	; 0x2a
 80056ee:	d113      	bne.n	8005718 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2241      	movs	r2, #65	; 0x41
 80056f4:	2128      	movs	r1, #40	; 0x28
 80056f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2222      	movs	r2, #34	; 0x22
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2102      	movs	r1, #2
 8005702:	0018      	movs	r0, r3
 8005704:	f000 fc44 	bl	8005f90 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2240      	movs	r2, #64	; 0x40
 800570c:	2100      	movs	r1, #0
 800570e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	0018      	movs	r0, r3
 8005714:	f7ff fcf4 	bl	8005100 <HAL_I2C_SlaveRxCpltCallback>
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	b004      	add	sp, #16
 800571e:	bd80      	pop	{r7, pc}
 8005720:	ffffbfff 	.word	0xffffbfff
 8005724:	ffff7fff 	.word	0xffff7fff

08005728 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800573e:	200f      	movs	r0, #15
 8005740:	183b      	adds	r3, r7, r0
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	2141      	movs	r1, #65	; 0x41
 8005746:	5c52      	ldrb	r2, [r2, r1]
 8005748:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2220      	movs	r2, #32
 8005750:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005752:	183b      	adds	r3, r7, r0
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b21      	cmp	r3, #33	; 0x21
 8005758:	d003      	beq.n	8005762 <I2C_ITSlaveCplt+0x3a>
 800575a:	183b      	adds	r3, r7, r0
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b29      	cmp	r3, #41	; 0x29
 8005760:	d109      	bne.n	8005776 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005762:	4a7d      	ldr	r2, [pc, #500]	; (8005958 <I2C_ITSlaveCplt+0x230>)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	0011      	movs	r1, r2
 8005768:	0018      	movs	r0, r3
 800576a:	f000 fc11 	bl	8005f90 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2221      	movs	r2, #33	; 0x21
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
 8005774:	e011      	b.n	800579a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005776:	220f      	movs	r2, #15
 8005778:	18bb      	adds	r3, r7, r2
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b22      	cmp	r3, #34	; 0x22
 800577e:	d003      	beq.n	8005788 <I2C_ITSlaveCplt+0x60>
 8005780:	18bb      	adds	r3, r7, r2
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b2a      	cmp	r3, #42	; 0x2a
 8005786:	d108      	bne.n	800579a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005788:	4a74      	ldr	r2, [pc, #464]	; (800595c <I2C_ITSlaveCplt+0x234>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	0011      	movs	r1, r2
 800578e:	0018      	movs	r0, r3
 8005790:	f000 fbfe 	bl	8005f90 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2222      	movs	r2, #34	; 0x22
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2180      	movs	r1, #128	; 0x80
 80057a6:	0209      	lsls	r1, r1, #8
 80057a8:	430a      	orrs	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	496a      	ldr	r1, [pc, #424]	; (8005960 <I2C_ITSlaveCplt+0x238>)
 80057b8:	400a      	ands	r2, r1
 80057ba:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 fa3b 	bl	8005c3a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	0b9b      	lsrs	r3, r3, #14
 80057c8:	001a      	movs	r2, r3
 80057ca:	2301      	movs	r3, #1
 80057cc:	4013      	ands	r3, r2
 80057ce:	d013      	beq.n	80057f8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4962      	ldr	r1, [pc, #392]	; (8005964 <I2C_ITSlaveCplt+0x23c>)
 80057dc:	400a      	ands	r2, r1
 80057de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d020      	beq.n	800582a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057f6:	e018      	b.n	800582a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	0bdb      	lsrs	r3, r3, #15
 80057fc:	001a      	movs	r2, r3
 80057fe:	2301      	movs	r3, #1
 8005800:	4013      	ands	r3, r2
 8005802:	d012      	beq.n	800582a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4956      	ldr	r1, [pc, #344]	; (8005968 <I2C_ITSlaveCplt+0x240>)
 8005810:	400a      	ands	r2, r1
 8005812:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d006      	beq.n	800582a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	089b      	lsrs	r3, r3, #2
 800582e:	001a      	movs	r2, r3
 8005830:	2301      	movs	r3, #1
 8005832:	4013      	ands	r3, r2
 8005834:	d020      	beq.n	8005878 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2204      	movs	r2, #4
 800583a:	4393      	bics	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00c      	beq.n	8005878 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	2204      	movs	r2, #4
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2242      	movs	r2, #66	; 0x42
 8005892:	2100      	movs	r1, #0
 8005894:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d013      	beq.n	80058cc <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f000 f8b9 	bl	8005a24 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2241      	movs	r2, #65	; 0x41
 80058b6:	5c9b      	ldrb	r3, [r3, r2]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b28      	cmp	r3, #40	; 0x28
 80058bc:	d147      	bne.n	800594e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	0011      	movs	r1, r2
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 f853 	bl	8005970 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058ca:	e040      	b.n	800594e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	4a26      	ldr	r2, [pc, #152]	; (800596c <I2C_ITSlaveCplt+0x244>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d016      	beq.n	8005904 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0018      	movs	r0, r3
 80058da:	f7ff febf 	bl	800565c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a22      	ldr	r2, [pc, #136]	; (800596c <I2C_ITSlaveCplt+0x244>)
 80058e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2241      	movs	r2, #65	; 0x41
 80058e8:	2120      	movs	r1, #32
 80058ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2240      	movs	r2, #64	; 0x40
 80058f6:	2100      	movs	r1, #0
 80058f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	0018      	movs	r0, r3
 80058fe:	f7ff fc17 	bl	8005130 <HAL_I2C_ListenCpltCallback>
}
 8005902:	e024      	b.n	800594e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2241      	movs	r2, #65	; 0x41
 8005908:	5c9b      	ldrb	r3, [r3, r2]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b22      	cmp	r3, #34	; 0x22
 800590e:	d10f      	bne.n	8005930 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2241      	movs	r2, #65	; 0x41
 8005914:	2120      	movs	r1, #32
 8005916:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2240      	movs	r2, #64	; 0x40
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	0018      	movs	r0, r3
 800592a:	f7ff fbe9 	bl	8005100 <HAL_I2C_SlaveRxCpltCallback>
}
 800592e:	e00e      	b.n	800594e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2241      	movs	r2, #65	; 0x41
 8005934:	2120      	movs	r1, #32
 8005936:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2240      	movs	r2, #64	; 0x40
 8005942:	2100      	movs	r1, #0
 8005944:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	0018      	movs	r0, r3
 800594a:	f7ff fbd1 	bl	80050f0 <HAL_I2C_SlaveTxCpltCallback>
}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	46bd      	mov	sp, r7
 8005952:	b006      	add	sp, #24
 8005954:	bd80      	pop	{r7, pc}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	00008001 	.word	0x00008001
 800595c:	00008002 	.word	0x00008002
 8005960:	fe00e800 	.word	0xfe00e800
 8005964:	ffffbfff 	.word	0xffffbfff
 8005968:	ffff7fff 	.word	0xffff7fff
 800596c:	ffff0000 	.word	0xffff0000

08005970 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <I2C_ITListenCplt+0xac>)
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2241      	movs	r2, #65	; 0x41
 800598a:	2120      	movs	r1, #32
 800598c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2242      	movs	r2, #66	; 0x42
 8005992:	2100      	movs	r1, #0
 8005994:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	089b      	lsrs	r3, r3, #2
 80059a0:	001a      	movs	r2, r3
 80059a2:	2301      	movs	r3, #1
 80059a4:	4013      	ands	r3, r2
 80059a6:	d022      	beq.n	80059ee <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d012      	beq.n	80059ee <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	2204      	movs	r2, #4
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80059ee:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <I2C_ITListenCplt+0xb0>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	0011      	movs	r1, r2
 80059f4:	0018      	movs	r0, r3
 80059f6:	f000 facb 	bl	8005f90 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2210      	movs	r2, #16
 8005a00:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2240      	movs	r2, #64	; 0x40
 8005a06:	2100      	movs	r1, #0
 8005a08:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7ff fb8f 	bl	8005130 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b002      	add	sp, #8
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	ffff0000 	.word	0xffff0000
 8005a20:	00008003 	.word	0x00008003

08005a24 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a2e:	200f      	movs	r0, #15
 8005a30:	183b      	adds	r3, r7, r0
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	2141      	movs	r1, #65	; 0x41
 8005a36:	5c52      	ldrb	r2, [r2, r1]
 8005a38:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2242      	movs	r2, #66	; 0x42
 8005a3e:	2100      	movs	r1, #0
 8005a40:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a62      	ldr	r2, [pc, #392]	; (8005bd0 <I2C_ITError+0x1ac>)
 8005a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005a5a:	183b      	adds	r3, r7, r0
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b28      	cmp	r3, #40	; 0x28
 8005a60:	d007      	beq.n	8005a72 <I2C_ITError+0x4e>
 8005a62:	183b      	adds	r3, r7, r0
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b29      	cmp	r3, #41	; 0x29
 8005a68:	d003      	beq.n	8005a72 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005a6a:	183b      	adds	r3, r7, r0
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a70:	d10c      	bne.n	8005a8c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2103      	movs	r1, #3
 8005a76:	0018      	movs	r0, r3
 8005a78:	f000 fa8a 	bl	8005f90 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2241      	movs	r2, #65	; 0x41
 8005a80:	2128      	movs	r1, #40	; 0x28
 8005a82:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a53      	ldr	r2, [pc, #332]	; (8005bd4 <I2C_ITError+0x1b0>)
 8005a88:	635a      	str	r2, [r3, #52]	; 0x34
 8005a8a:	e012      	b.n	8005ab2 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a8c:	4a52      	ldr	r2, [pc, #328]	; (8005bd8 <I2C_ITError+0x1b4>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0011      	movs	r1, r2
 8005a92:	0018      	movs	r0, r3
 8005a94:	f000 fa7c 	bl	8005f90 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2241      	movs	r2, #65	; 0x41
 8005a9c:	5c9b      	ldrb	r3, [r3, r2]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b60      	cmp	r3, #96	; 0x60
 8005aa2:	d003      	beq.n	8005aac <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2241      	movs	r2, #65	; 0x41
 8005aa8:	2120      	movs	r1, #32
 8005aaa:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d03b      	beq.n	8005b38 <I2C_ITError+0x114>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b11      	cmp	r3, #17
 8005ac4:	d002      	beq.n	8005acc <I2C_ITError+0xa8>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b21      	cmp	r3, #33	; 0x21
 8005aca:	d135      	bne.n	8005b38 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	2380      	movs	r3, #128	; 0x80
 8005ad4:	01db      	lsls	r3, r3, #7
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	01db      	lsls	r3, r3, #7
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d107      	bne.n	8005af0 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	493c      	ldr	r1, [pc, #240]	; (8005bdc <I2C_ITError+0x1b8>)
 8005aec:	400a      	ands	r2, r1
 8005aee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7fe fdee 	bl	80046d6 <HAL_DMA_GetState>
 8005afa:	0003      	movs	r3, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d016      	beq.n	8005b2e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	4a36      	ldr	r2, [pc, #216]	; (8005be0 <I2C_ITError+0x1bc>)
 8005b06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2240      	movs	r2, #64	; 0x40
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	0018      	movs	r0, r3
 8005b16:	f7fe fd99 	bl	800464c <HAL_DMA_Abort_IT>
 8005b1a:	1e03      	subs	r3, r0, #0
 8005b1c:	d051      	beq.n	8005bc2 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	0018      	movs	r0, r3
 8005b2a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b2c:	e049      	b.n	8005bc2 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	0018      	movs	r0, r3
 8005b32:	f000 f859 	bl	8005be8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b36:	e044      	b.n	8005bc2 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d03b      	beq.n	8005bb8 <I2C_ITError+0x194>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b12      	cmp	r3, #18
 8005b44:	d002      	beq.n	8005b4c <I2C_ITError+0x128>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b22      	cmp	r3, #34	; 0x22
 8005b4a:	d135      	bne.n	8005bb8 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	401a      	ands	r2, r3
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d107      	bne.n	8005b70 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	491e      	ldr	r1, [pc, #120]	; (8005be4 <I2C_ITError+0x1c0>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b74:	0018      	movs	r0, r3
 8005b76:	f7fe fdae 	bl	80046d6 <HAL_DMA_GetState>
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d016      	beq.n	8005bae <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <I2C_ITError+0x1bc>)
 8005b86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2240      	movs	r2, #64	; 0x40
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7fe fd59 	bl	800464c <HAL_DMA_Abort_IT>
 8005b9a:	1e03      	subs	r3, r0, #0
 8005b9c:	d013      	beq.n	8005bc6 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba8:	0018      	movs	r0, r3
 8005baa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bac:	e00b      	b.n	8005bc6 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f000 f819 	bl	8005be8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bb6:	e006      	b.n	8005bc6 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 f814 	bl	8005be8 <I2C_TreatErrorCallback>
  }
}
 8005bc0:	e002      	b.n	8005bc8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	e000      	b.n	8005bc8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bc6:	46c0      	nop			; (mov r8, r8)
}
 8005bc8:	46c0      	nop			; (mov r8, r8)
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b004      	add	sp, #16
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	ffff0000 	.word	0xffff0000
 8005bd4:	08005161 	.word	0x08005161
 8005bd8:	00008003 	.word	0x00008003
 8005bdc:	ffffbfff 	.word	0xffffbfff
 8005be0:	08005c7f 	.word	0x08005c7f
 8005be4:	ffff7fff 	.word	0xffff7fff

08005be8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2241      	movs	r2, #65	; 0x41
 8005bf4:	5c9b      	ldrb	r3, [r3, r2]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b60      	cmp	r3, #96	; 0x60
 8005bfa:	d10f      	bne.n	8005c1c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2241      	movs	r2, #65	; 0x41
 8005c00:	2120      	movs	r1, #32
 8005c02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2240      	movs	r2, #64	; 0x40
 8005c0e:	2100      	movs	r1, #0
 8005c10:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7ff fa9b 	bl	8005150 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c1a:	e00a      	b.n	8005c32 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2240      	movs	r2, #64	; 0x40
 8005c26:	2100      	movs	r1, #0
 8005c28:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff fa87 	bl	8005140 <HAL_I2C_ErrorCallback>
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b002      	add	sp, #8
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d103      	bne.n	8005c58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2200      	movs	r2, #0
 8005c56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d007      	beq.n	8005c76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699a      	ldr	r2, [r3, #24]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2101      	movs	r1, #1
 8005c72:	430a      	orrs	r2, r1
 8005c74:	619a      	str	r2, [r3, #24]
  }
}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b002      	add	sp, #8
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	2200      	movs	r2, #0
 8005c9a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	2200      	movs	r2, #0
 8005caa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f7ff ff9a 	bl	8005be8 <I2C_TreatErrorCallback>
}
 8005cb4:	46c0      	nop			; (mov r8, r8)
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b004      	add	sp, #16
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	1dfb      	adds	r3, r7, #7
 8005cca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ccc:	e021      	b.n	8005d12 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	d01e      	beq.n	8005d12 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd4:	f7fe fbd2 	bl	800447c <HAL_GetTick>
 8005cd8:	0002      	movs	r2, r0
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d302      	bcc.n	8005cea <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d113      	bne.n	8005d12 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cee:	2220      	movs	r2, #32
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2241      	movs	r2, #65	; 0x41
 8005cfa:	2120      	movs	r1, #32
 8005cfc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2242      	movs	r2, #66	; 0x42
 8005d02:	2100      	movs	r1, #0
 8005d04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2240      	movs	r2, #64	; 0x40
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e00f      	b.n	8005d32 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	425a      	negs	r2, r3
 8005d22:	4153      	adcs	r3, r2
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	001a      	movs	r2, r3
 8005d28:	1dfb      	adds	r3, r7, #7
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d0ce      	beq.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	0018      	movs	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b004      	add	sp, #16
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d46:	e02b      	b.n	8005da0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f000 f86e 	bl	8005e30 <I2C_IsAcknowledgeFailed>
 8005d54:	1e03      	subs	r3, r0, #0
 8005d56:	d001      	beq.n	8005d5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e029      	b.n	8005db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	d01e      	beq.n	8005da0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d62:	f7fe fb8b 	bl	800447c <HAL_GetTick>
 8005d66:	0002      	movs	r2, r0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d302      	bcc.n	8005d78 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d113      	bne.n	8005da0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2241      	movs	r2, #65	; 0x41
 8005d88:	2120      	movs	r1, #32
 8005d8a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2242      	movs	r2, #66	; 0x42
 8005d90:	2100      	movs	r1, #0
 8005d92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2240      	movs	r2, #64	; 0x40
 8005d98:	2100      	movs	r1, #0
 8005d9a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e007      	b.n	8005db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2202      	movs	r2, #2
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d1cc      	bne.n	8005d48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	0018      	movs	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b004      	add	sp, #16
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dc4:	e028      	b.n	8005e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f000 f82f 	bl	8005e30 <I2C_IsAcknowledgeFailed>
 8005dd2:	1e03      	subs	r3, r0, #0
 8005dd4:	d001      	beq.n	8005dda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e026      	b.n	8005e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fe fb4f 	bl	800447c <HAL_GetTick>
 8005dde:	0002      	movs	r2, r0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d113      	bne.n	8005e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df4:	2220      	movs	r2, #32
 8005df6:	431a      	orrs	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2241      	movs	r2, #65	; 0x41
 8005e00:	2120      	movs	r1, #32
 8005e02:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2242      	movs	r2, #66	; 0x42
 8005e08:	2100      	movs	r1, #0
 8005e0a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2240      	movs	r2, #64	; 0x40
 8005e10:	2100      	movs	r1, #0
 8005e12:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e007      	b.n	8005e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d1cf      	bne.n	8005dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b004      	add	sp, #16
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	2210      	movs	r2, #16
 8005e44:	4013      	ands	r3, r2
 8005e46:	2b10      	cmp	r3, #16
 8005e48:	d164      	bne.n	8005f14 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	049b      	lsls	r3, r3, #18
 8005e54:	401a      	ands	r2, r3
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	049b      	lsls	r3, r3, #18
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d02b      	beq.n	8005eb6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2180      	movs	r1, #128	; 0x80
 8005e6a:	01c9      	lsls	r1, r1, #7
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e70:	e021      	b.n	8005eb6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	3301      	adds	r3, #1
 8005e76:	d01e      	beq.n	8005eb6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e78:	f7fe fb00 	bl	800447c <HAL_GetTick>
 8005e7c:	0002      	movs	r2, r0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d302      	bcc.n	8005e8e <I2C_IsAcknowledgeFailed+0x5e>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d113      	bne.n	8005eb6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e92:	2220      	movs	r2, #32
 8005e94:	431a      	orrs	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2241      	movs	r2, #65	; 0x41
 8005e9e:	2120      	movs	r1, #32
 8005ea0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2242      	movs	r2, #66	; 0x42
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2240      	movs	r2, #64	; 0x40
 8005eae:	2100      	movs	r1, #0
 8005eb0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e02f      	b.n	8005f16 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d1d6      	bne.n	8005e72 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2210      	movs	r2, #16
 8005eca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f7ff feaf 	bl	8005c3a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	490e      	ldr	r1, [pc, #56]	; (8005f20 <I2C_IsAcknowledgeFailed+0xf0>)
 8005ee8:	400a      	ands	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2241      	movs	r2, #65	; 0x41
 8005efc:	2120      	movs	r1, #32
 8005efe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2242      	movs	r2, #66	; 0x42
 8005f04:	2100      	movs	r1, #0
 8005f06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2240      	movs	r2, #64	; 0x40
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	0018      	movs	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b004      	add	sp, #16
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	fe00e800 	.word	0xfe00e800

08005f24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f24:	b590      	push	{r4, r7, lr}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	0008      	movs	r0, r1
 8005f2e:	0011      	movs	r1, r2
 8005f30:	607b      	str	r3, [r7, #4]
 8005f32:	240a      	movs	r4, #10
 8005f34:	193b      	adds	r3, r7, r4
 8005f36:	1c02      	adds	r2, r0, #0
 8005f38:	801a      	strh	r2, [r3, #0]
 8005f3a:	2009      	movs	r0, #9
 8005f3c:	183b      	adds	r3, r7, r0
 8005f3e:	1c0a      	adds	r2, r1, #0
 8005f40:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	6a3a      	ldr	r2, [r7, #32]
 8005f4a:	0d51      	lsrs	r1, r2, #21
 8005f4c:	2280      	movs	r2, #128	; 0x80
 8005f4e:	00d2      	lsls	r2, r2, #3
 8005f50:	400a      	ands	r2, r1
 8005f52:	490e      	ldr	r1, [pc, #56]	; (8005f8c <I2C_TransferConfig+0x68>)
 8005f54:	430a      	orrs	r2, r1
 8005f56:	43d2      	mvns	r2, r2
 8005f58:	401a      	ands	r2, r3
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	193b      	adds	r3, r7, r4
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	059b      	lsls	r3, r3, #22
 8005f62:	0d9a      	lsrs	r2, r3, #22
 8005f64:	183b      	adds	r3, r7, r0
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	0418      	lsls	r0, r3, #16
 8005f6a:	23ff      	movs	r3, #255	; 0xff
 8005f6c:	041b      	lsls	r3, r3, #16
 8005f6e:	4003      	ands	r3, r0
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	431a      	orrs	r2, r3
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b005      	add	sp, #20
 8005f88:	bd90      	pop	{r4, r7, pc}
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	03ff63ff 	.word	0x03ff63ff

08005f90 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	000a      	movs	r2, r1
 8005f9a:	1cbb      	adds	r3, r7, #2
 8005f9c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005fa2:	1cbb      	adds	r3, r7, #2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d010      	beq.n	8005fce <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2242      	movs	r2, #66	; 0x42
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2241      	movs	r2, #65	; 0x41
 8005fb8:	5c9b      	ldrb	r3, [r3, r2]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	001a      	movs	r2, r3
 8005fbe:	2328      	movs	r3, #40	; 0x28
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2b28      	cmp	r3, #40	; 0x28
 8005fc4:	d003      	beq.n	8005fce <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	22b0      	movs	r2, #176	; 0xb0
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005fce:	1cbb      	adds	r3, r7, #2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	d010      	beq.n	8005ffa <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2244      	movs	r2, #68	; 0x44
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2241      	movs	r2, #65	; 0x41
 8005fe4:	5c9b      	ldrb	r3, [r3, r2]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	001a      	movs	r2, r3
 8005fea:	2328      	movs	r3, #40	; 0x28
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b28      	cmp	r3, #40	; 0x28
 8005ff0:	d003      	beq.n	8005ffa <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	22b0      	movs	r2, #176	; 0xb0
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ffa:	1cbb      	adds	r3, r7, #2
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	5e9b      	ldrsh	r3, [r3, r2]
 8006000:	2b00      	cmp	r3, #0
 8006002:	da03      	bge.n	800600c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	22b8      	movs	r2, #184	; 0xb8
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800600c:	1cbb      	adds	r3, r7, #2
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	2b10      	cmp	r3, #16
 8006012:	d103      	bne.n	800601c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2290      	movs	r2, #144	; 0x90
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800601c:	1cbb      	adds	r3, r7, #2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	2b20      	cmp	r3, #32
 8006022:	d103      	bne.n	800602c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800602c:	1cbb      	adds	r3, r7, #2
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d103      	bne.n	800603c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2240      	movs	r2, #64	; 0x40
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	43d9      	mvns	r1, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	400a      	ands	r2, r1
 800604c:	601a      	str	r2, [r3, #0]
}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	46bd      	mov	sp, r7
 8006052:	b004      	add	sp, #16
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2241      	movs	r2, #65	; 0x41
 8006066:	5c9b      	ldrb	r3, [r3, r2]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b20      	cmp	r3, #32
 800606c:	d138      	bne.n	80060e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2240      	movs	r2, #64	; 0x40
 8006072:	5c9b      	ldrb	r3, [r3, r2]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006078:	2302      	movs	r3, #2
 800607a:	e032      	b.n	80060e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2240      	movs	r2, #64	; 0x40
 8006080:	2101      	movs	r1, #1
 8006082:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2241      	movs	r2, #65	; 0x41
 8006088:	2124      	movs	r1, #36	; 0x24
 800608a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2101      	movs	r1, #1
 8006098:	438a      	bics	r2, r1
 800609a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4911      	ldr	r1, [pc, #68]	; (80060ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80060a8:	400a      	ands	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6819      	ldr	r1, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2101      	movs	r1, #1
 80060c8:	430a      	orrs	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2241      	movs	r2, #65	; 0x41
 80060d0:	2120      	movs	r1, #32
 80060d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2240      	movs	r2, #64	; 0x40
 80060d8:	2100      	movs	r1, #0
 80060da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	e000      	b.n	80060e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060e0:	2302      	movs	r3, #2
  }
}
 80060e2:	0018      	movs	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b002      	add	sp, #8
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	ffffefff 	.word	0xffffefff

080060f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2241      	movs	r2, #65	; 0x41
 80060fe:	5c9b      	ldrb	r3, [r3, r2]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b20      	cmp	r3, #32
 8006104:	d139      	bne.n	800617a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2240      	movs	r2, #64	; 0x40
 800610a:	5c9b      	ldrb	r3, [r3, r2]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006110:	2302      	movs	r3, #2
 8006112:	e033      	b.n	800617c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2240      	movs	r2, #64	; 0x40
 8006118:	2101      	movs	r1, #1
 800611a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2241      	movs	r2, #65	; 0x41
 8006120:	2124      	movs	r1, #36	; 0x24
 8006122:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2101      	movs	r1, #1
 8006130:	438a      	bics	r2, r1
 8006132:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4a11      	ldr	r2, [pc, #68]	; (8006184 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006140:	4013      	ands	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2101      	movs	r1, #1
 8006162:	430a      	orrs	r2, r1
 8006164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2241      	movs	r2, #65	; 0x41
 800616a:	2120      	movs	r1, #32
 800616c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2240      	movs	r2, #64	; 0x40
 8006172:	2100      	movs	r1, #0
 8006174:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	e000      	b.n	800617c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800617a:	2302      	movs	r3, #2
  }
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b004      	add	sp, #16
 8006182:	bd80      	pop	{r7, pc}
 8006184:	fffff0ff 	.word	0xfffff0ff

08006188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e301      	b.n	800679e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2201      	movs	r2, #1
 80061a0:	4013      	ands	r3, r2
 80061a2:	d100      	bne.n	80061a6 <HAL_RCC_OscConfig+0x1e>
 80061a4:	e08d      	b.n	80062c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80061a6:	4bc3      	ldr	r3, [pc, #780]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	220c      	movs	r2, #12
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d00e      	beq.n	80061d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061b2:	4bc0      	ldr	r3, [pc, #768]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	220c      	movs	r2, #12
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	d116      	bne.n	80061ec <HAL_RCC_OscConfig+0x64>
 80061be:	4bbd      	ldr	r3, [pc, #756]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	2380      	movs	r3, #128	; 0x80
 80061c4:	025b      	lsls	r3, r3, #9
 80061c6:	401a      	ands	r2, r3
 80061c8:	2380      	movs	r3, #128	; 0x80
 80061ca:	025b      	lsls	r3, r3, #9
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d10d      	bne.n	80061ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d0:	4bb8      	ldr	r3, [pc, #736]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	2380      	movs	r3, #128	; 0x80
 80061d6:	029b      	lsls	r3, r3, #10
 80061d8:	4013      	ands	r3, r2
 80061da:	d100      	bne.n	80061de <HAL_RCC_OscConfig+0x56>
 80061dc:	e070      	b.n	80062c0 <HAL_RCC_OscConfig+0x138>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d000      	beq.n	80061e8 <HAL_RCC_OscConfig+0x60>
 80061e6:	e06b      	b.n	80062c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e2d8      	b.n	800679e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d107      	bne.n	8006204 <HAL_RCC_OscConfig+0x7c>
 80061f4:	4baf      	ldr	r3, [pc, #700]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4bae      	ldr	r3, [pc, #696]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80061fa:	2180      	movs	r1, #128	; 0x80
 80061fc:	0249      	lsls	r1, r1, #9
 80061fe:	430a      	orrs	r2, r1
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	e02f      	b.n	8006264 <HAL_RCC_OscConfig+0xdc>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10c      	bne.n	8006226 <HAL_RCC_OscConfig+0x9e>
 800620c:	4ba9      	ldr	r3, [pc, #676]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	4ba8      	ldr	r3, [pc, #672]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006212:	49a9      	ldr	r1, [pc, #676]	; (80064b8 <HAL_RCC_OscConfig+0x330>)
 8006214:	400a      	ands	r2, r1
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	4ba6      	ldr	r3, [pc, #664]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4ba5      	ldr	r3, [pc, #660]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800621e:	49a7      	ldr	r1, [pc, #668]	; (80064bc <HAL_RCC_OscConfig+0x334>)
 8006220:	400a      	ands	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e01e      	b.n	8006264 <HAL_RCC_OscConfig+0xdc>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b05      	cmp	r3, #5
 800622c:	d10e      	bne.n	800624c <HAL_RCC_OscConfig+0xc4>
 800622e:	4ba1      	ldr	r3, [pc, #644]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4ba0      	ldr	r3, [pc, #640]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006234:	2180      	movs	r1, #128	; 0x80
 8006236:	02c9      	lsls	r1, r1, #11
 8006238:	430a      	orrs	r2, r1
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	4b9d      	ldr	r3, [pc, #628]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4b9c      	ldr	r3, [pc, #624]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	0249      	lsls	r1, r1, #9
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	e00b      	b.n	8006264 <HAL_RCC_OscConfig+0xdc>
 800624c:	4b99      	ldr	r3, [pc, #612]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b98      	ldr	r3, [pc, #608]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006252:	4999      	ldr	r1, [pc, #612]	; (80064b8 <HAL_RCC_OscConfig+0x330>)
 8006254:	400a      	ands	r2, r1
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	4b96      	ldr	r3, [pc, #600]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	4b95      	ldr	r3, [pc, #596]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800625e:	4997      	ldr	r1, [pc, #604]	; (80064bc <HAL_RCC_OscConfig+0x334>)
 8006260:	400a      	ands	r2, r1
 8006262:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d014      	beq.n	8006296 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626c:	f7fe f906 	bl	800447c <HAL_GetTick>
 8006270:	0003      	movs	r3, r0
 8006272:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006276:	f7fe f901 	bl	800447c <HAL_GetTick>
 800627a:	0002      	movs	r2, r0
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b64      	cmp	r3, #100	; 0x64
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e28a      	b.n	800679e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006288:	4b8a      	ldr	r3, [pc, #552]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	2380      	movs	r3, #128	; 0x80
 800628e:	029b      	lsls	r3, r3, #10
 8006290:	4013      	ands	r3, r2
 8006292:	d0f0      	beq.n	8006276 <HAL_RCC_OscConfig+0xee>
 8006294:	e015      	b.n	80062c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006296:	f7fe f8f1 	bl	800447c <HAL_GetTick>
 800629a:	0003      	movs	r3, r0
 800629c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062a0:	f7fe f8ec 	bl	800447c <HAL_GetTick>
 80062a4:	0002      	movs	r2, r0
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b64      	cmp	r3, #100	; 0x64
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e275      	b.n	800679e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062b2:	4b80      	ldr	r3, [pc, #512]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	2380      	movs	r3, #128	; 0x80
 80062b8:	029b      	lsls	r3, r3, #10
 80062ba:	4013      	ands	r3, r2
 80062bc:	d1f0      	bne.n	80062a0 <HAL_RCC_OscConfig+0x118>
 80062be:	e000      	b.n	80062c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2202      	movs	r2, #2
 80062c8:	4013      	ands	r3, r2
 80062ca:	d100      	bne.n	80062ce <HAL_RCC_OscConfig+0x146>
 80062cc:	e069      	b.n	80063a2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80062ce:	4b79      	ldr	r3, [pc, #484]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	220c      	movs	r2, #12
 80062d4:	4013      	ands	r3, r2
 80062d6:	d00b      	beq.n	80062f0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80062d8:	4b76      	ldr	r3, [pc, #472]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	220c      	movs	r2, #12
 80062de:	4013      	ands	r3, r2
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d11c      	bne.n	800631e <HAL_RCC_OscConfig+0x196>
 80062e4:	4b73      	ldr	r3, [pc, #460]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	025b      	lsls	r3, r3, #9
 80062ec:	4013      	ands	r3, r2
 80062ee:	d116      	bne.n	800631e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062f0:	4b70      	ldr	r3, [pc, #448]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2202      	movs	r2, #2
 80062f6:	4013      	ands	r3, r2
 80062f8:	d005      	beq.n	8006306 <HAL_RCC_OscConfig+0x17e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d001      	beq.n	8006306 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e24b      	b.n	800679e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006306:	4b6b      	ldr	r3, [pc, #428]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	22f8      	movs	r2, #248	; 0xf8
 800630c:	4393      	bics	r3, r2
 800630e:	0019      	movs	r1, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	00da      	lsls	r2, r3, #3
 8006316:	4b67      	ldr	r3, [pc, #412]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006318:	430a      	orrs	r2, r1
 800631a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800631c:	e041      	b.n	80063a2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d024      	beq.n	8006370 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006326:	4b63      	ldr	r3, [pc, #396]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	4b62      	ldr	r3, [pc, #392]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800632c:	2101      	movs	r1, #1
 800632e:	430a      	orrs	r2, r1
 8006330:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006332:	f7fe f8a3 	bl	800447c <HAL_GetTick>
 8006336:	0003      	movs	r3, r0
 8006338:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800633c:	f7fe f89e 	bl	800447c <HAL_GetTick>
 8006340:	0002      	movs	r2, r0
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e227      	b.n	800679e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634e:	4b59      	ldr	r3, [pc, #356]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2202      	movs	r2, #2
 8006354:	4013      	ands	r3, r2
 8006356:	d0f1      	beq.n	800633c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006358:	4b56      	ldr	r3, [pc, #344]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	22f8      	movs	r2, #248	; 0xf8
 800635e:	4393      	bics	r3, r2
 8006360:	0019      	movs	r1, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	00da      	lsls	r2, r3, #3
 8006368:	4b52      	ldr	r3, [pc, #328]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	e018      	b.n	80063a2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006370:	4b50      	ldr	r3, [pc, #320]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	4b4f      	ldr	r3, [pc, #316]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006376:	2101      	movs	r1, #1
 8006378:	438a      	bics	r2, r1
 800637a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637c:	f7fe f87e 	bl	800447c <HAL_GetTick>
 8006380:	0003      	movs	r3, r0
 8006382:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006386:	f7fe f879 	bl	800447c <HAL_GetTick>
 800638a:	0002      	movs	r2, r0
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e202      	b.n	800679e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006398:	4b46      	ldr	r3, [pc, #280]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2202      	movs	r2, #2
 800639e:	4013      	ands	r3, r2
 80063a0:	d1f1      	bne.n	8006386 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2208      	movs	r2, #8
 80063a8:	4013      	ands	r3, r2
 80063aa:	d036      	beq.n	800641a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d019      	beq.n	80063e8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b4:	4b3f      	ldr	r3, [pc, #252]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80063b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063b8:	4b3e      	ldr	r3, [pc, #248]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80063ba:	2101      	movs	r1, #1
 80063bc:	430a      	orrs	r2, r1
 80063be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063c0:	f7fe f85c 	bl	800447c <HAL_GetTick>
 80063c4:	0003      	movs	r3, r0
 80063c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ca:	f7fe f857 	bl	800447c <HAL_GetTick>
 80063ce:	0002      	movs	r2, r0
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e1e0      	b.n	800679e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063dc:	4b35      	ldr	r3, [pc, #212]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	2202      	movs	r2, #2
 80063e2:	4013      	ands	r3, r2
 80063e4:	d0f1      	beq.n	80063ca <HAL_RCC_OscConfig+0x242>
 80063e6:	e018      	b.n	800641a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e8:	4b32      	ldr	r3, [pc, #200]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80063ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ec:	4b31      	ldr	r3, [pc, #196]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80063ee:	2101      	movs	r1, #1
 80063f0:	438a      	bics	r2, r1
 80063f2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f4:	f7fe f842 	bl	800447c <HAL_GetTick>
 80063f8:	0003      	movs	r3, r0
 80063fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063fe:	f7fe f83d 	bl	800447c <HAL_GetTick>
 8006402:	0002      	movs	r2, r0
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e1c6      	b.n	800679e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006410:	4b28      	ldr	r3, [pc, #160]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	2202      	movs	r2, #2
 8006416:	4013      	ands	r3, r2
 8006418:	d1f1      	bne.n	80063fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2204      	movs	r2, #4
 8006420:	4013      	ands	r3, r2
 8006422:	d100      	bne.n	8006426 <HAL_RCC_OscConfig+0x29e>
 8006424:	e0b4      	b.n	8006590 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006426:	201f      	movs	r0, #31
 8006428:	183b      	adds	r3, r7, r0
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800642e:	4b21      	ldr	r3, [pc, #132]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	055b      	lsls	r3, r3, #21
 8006436:	4013      	ands	r3, r2
 8006438:	d110      	bne.n	800645c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800643a:	4b1e      	ldr	r3, [pc, #120]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800643c:	69da      	ldr	r2, [r3, #28]
 800643e:	4b1d      	ldr	r3, [pc, #116]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 8006440:	2180      	movs	r1, #128	; 0x80
 8006442:	0549      	lsls	r1, r1, #21
 8006444:	430a      	orrs	r2, r1
 8006446:	61da      	str	r2, [r3, #28]
 8006448:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	2380      	movs	r3, #128	; 0x80
 800644e:	055b      	lsls	r3, r3, #21
 8006450:	4013      	ands	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006456:	183b      	adds	r3, r7, r0
 8006458:	2201      	movs	r2, #1
 800645a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645c:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <HAL_RCC_OscConfig+0x338>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4013      	ands	r3, r2
 8006466:	d11a      	bne.n	800649e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006468:	4b15      	ldr	r3, [pc, #84]	; (80064c0 <HAL_RCC_OscConfig+0x338>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b14      	ldr	r3, [pc, #80]	; (80064c0 <HAL_RCC_OscConfig+0x338>)
 800646e:	2180      	movs	r1, #128	; 0x80
 8006470:	0049      	lsls	r1, r1, #1
 8006472:	430a      	orrs	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006476:	f7fe f801 	bl	800447c <HAL_GetTick>
 800647a:	0003      	movs	r3, r0
 800647c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006480:	f7fd fffc 	bl	800447c <HAL_GetTick>
 8006484:	0002      	movs	r2, r0
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b64      	cmp	r3, #100	; 0x64
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e185      	b.n	800679e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <HAL_RCC_OscConfig+0x338>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4013      	ands	r3, r2
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d10e      	bne.n	80064c4 <HAL_RCC_OscConfig+0x33c>
 80064a6:	4b03      	ldr	r3, [pc, #12]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80064a8:	6a1a      	ldr	r2, [r3, #32]
 80064aa:	4b02      	ldr	r3, [pc, #8]	; (80064b4 <HAL_RCC_OscConfig+0x32c>)
 80064ac:	2101      	movs	r1, #1
 80064ae:	430a      	orrs	r2, r1
 80064b0:	621a      	str	r2, [r3, #32]
 80064b2:	e035      	b.n	8006520 <HAL_RCC_OscConfig+0x398>
 80064b4:	40021000 	.word	0x40021000
 80064b8:	fffeffff 	.word	0xfffeffff
 80064bc:	fffbffff 	.word	0xfffbffff
 80064c0:	40007000 	.word	0x40007000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10c      	bne.n	80064e6 <HAL_RCC_OscConfig+0x35e>
 80064cc:	4bb6      	ldr	r3, [pc, #728]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80064ce:	6a1a      	ldr	r2, [r3, #32]
 80064d0:	4bb5      	ldr	r3, [pc, #724]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80064d2:	2101      	movs	r1, #1
 80064d4:	438a      	bics	r2, r1
 80064d6:	621a      	str	r2, [r3, #32]
 80064d8:	4bb3      	ldr	r3, [pc, #716]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80064da:	6a1a      	ldr	r2, [r3, #32]
 80064dc:	4bb2      	ldr	r3, [pc, #712]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80064de:	2104      	movs	r1, #4
 80064e0:	438a      	bics	r2, r1
 80064e2:	621a      	str	r2, [r3, #32]
 80064e4:	e01c      	b.n	8006520 <HAL_RCC_OscConfig+0x398>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b05      	cmp	r3, #5
 80064ec:	d10c      	bne.n	8006508 <HAL_RCC_OscConfig+0x380>
 80064ee:	4bae      	ldr	r3, [pc, #696]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80064f0:	6a1a      	ldr	r2, [r3, #32]
 80064f2:	4bad      	ldr	r3, [pc, #692]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80064f4:	2104      	movs	r1, #4
 80064f6:	430a      	orrs	r2, r1
 80064f8:	621a      	str	r2, [r3, #32]
 80064fa:	4bab      	ldr	r3, [pc, #684]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80064fc:	6a1a      	ldr	r2, [r3, #32]
 80064fe:	4baa      	ldr	r3, [pc, #680]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006500:	2101      	movs	r1, #1
 8006502:	430a      	orrs	r2, r1
 8006504:	621a      	str	r2, [r3, #32]
 8006506:	e00b      	b.n	8006520 <HAL_RCC_OscConfig+0x398>
 8006508:	4ba7      	ldr	r3, [pc, #668]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 800650a:	6a1a      	ldr	r2, [r3, #32]
 800650c:	4ba6      	ldr	r3, [pc, #664]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 800650e:	2101      	movs	r1, #1
 8006510:	438a      	bics	r2, r1
 8006512:	621a      	str	r2, [r3, #32]
 8006514:	4ba4      	ldr	r3, [pc, #656]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006516:	6a1a      	ldr	r2, [r3, #32]
 8006518:	4ba3      	ldr	r3, [pc, #652]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 800651a:	2104      	movs	r1, #4
 800651c:	438a      	bics	r2, r1
 800651e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d014      	beq.n	8006552 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006528:	f7fd ffa8 	bl	800447c <HAL_GetTick>
 800652c:	0003      	movs	r3, r0
 800652e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006530:	e009      	b.n	8006546 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006532:	f7fd ffa3 	bl	800447c <HAL_GetTick>
 8006536:	0002      	movs	r2, r0
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	4a9b      	ldr	r2, [pc, #620]	; (80067ac <HAL_RCC_OscConfig+0x624>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e12b      	b.n	800679e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006546:	4b98      	ldr	r3, [pc, #608]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	2202      	movs	r2, #2
 800654c:	4013      	ands	r3, r2
 800654e:	d0f0      	beq.n	8006532 <HAL_RCC_OscConfig+0x3aa>
 8006550:	e013      	b.n	800657a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006552:	f7fd ff93 	bl	800447c <HAL_GetTick>
 8006556:	0003      	movs	r3, r0
 8006558:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800655a:	e009      	b.n	8006570 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800655c:	f7fd ff8e 	bl	800447c <HAL_GetTick>
 8006560:	0002      	movs	r2, r0
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	4a91      	ldr	r2, [pc, #580]	; (80067ac <HAL_RCC_OscConfig+0x624>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e116      	b.n	800679e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006570:	4b8d      	ldr	r3, [pc, #564]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	2202      	movs	r2, #2
 8006576:	4013      	ands	r3, r2
 8006578:	d1f0      	bne.n	800655c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800657a:	231f      	movs	r3, #31
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d105      	bne.n	8006590 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006584:	4b88      	ldr	r3, [pc, #544]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	4b87      	ldr	r3, [pc, #540]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 800658a:	4989      	ldr	r1, [pc, #548]	; (80067b0 <HAL_RCC_OscConfig+0x628>)
 800658c:	400a      	ands	r2, r1
 800658e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2210      	movs	r2, #16
 8006596:	4013      	ands	r3, r2
 8006598:	d063      	beq.n	8006662 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d12a      	bne.n	80065f8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80065a2:	4b81      	ldr	r3, [pc, #516]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80065a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a6:	4b80      	ldr	r3, [pc, #512]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80065a8:	2104      	movs	r1, #4
 80065aa:	430a      	orrs	r2, r1
 80065ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80065ae:	4b7e      	ldr	r3, [pc, #504]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80065b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b2:	4b7d      	ldr	r3, [pc, #500]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80065b4:	2101      	movs	r1, #1
 80065b6:	430a      	orrs	r2, r1
 80065b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ba:	f7fd ff5f 	bl	800447c <HAL_GetTick>
 80065be:	0003      	movs	r3, r0
 80065c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80065c4:	f7fd ff5a 	bl	800447c <HAL_GetTick>
 80065c8:	0002      	movs	r2, r0
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e0e3      	b.n	800679e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80065d6:	4b74      	ldr	r3, [pc, #464]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	2202      	movs	r2, #2
 80065dc:	4013      	ands	r3, r2
 80065de:	d0f1      	beq.n	80065c4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80065e0:	4b71      	ldr	r3, [pc, #452]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80065e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e4:	22f8      	movs	r2, #248	; 0xf8
 80065e6:	4393      	bics	r3, r2
 80065e8:	0019      	movs	r1, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	00da      	lsls	r2, r3, #3
 80065f0:	4b6d      	ldr	r3, [pc, #436]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80065f2:	430a      	orrs	r2, r1
 80065f4:	635a      	str	r2, [r3, #52]	; 0x34
 80065f6:	e034      	b.n	8006662 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	3305      	adds	r3, #5
 80065fe:	d111      	bne.n	8006624 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006600:	4b69      	ldr	r3, [pc, #420]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006604:	4b68      	ldr	r3, [pc, #416]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006606:	2104      	movs	r1, #4
 8006608:	438a      	bics	r2, r1
 800660a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800660c:	4b66      	ldr	r3, [pc, #408]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 800660e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006610:	22f8      	movs	r2, #248	; 0xf8
 8006612:	4393      	bics	r3, r2
 8006614:	0019      	movs	r1, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	00da      	lsls	r2, r3, #3
 800661c:	4b62      	ldr	r3, [pc, #392]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 800661e:	430a      	orrs	r2, r1
 8006620:	635a      	str	r2, [r3, #52]	; 0x34
 8006622:	e01e      	b.n	8006662 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006624:	4b60      	ldr	r3, [pc, #384]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006628:	4b5f      	ldr	r3, [pc, #380]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 800662a:	2104      	movs	r1, #4
 800662c:	430a      	orrs	r2, r1
 800662e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006630:	4b5d      	ldr	r3, [pc, #372]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006634:	4b5c      	ldr	r3, [pc, #368]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006636:	2101      	movs	r1, #1
 8006638:	438a      	bics	r2, r1
 800663a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800663c:	f7fd ff1e 	bl	800447c <HAL_GetTick>
 8006640:	0003      	movs	r3, r0
 8006642:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006646:	f7fd ff19 	bl	800447c <HAL_GetTick>
 800664a:	0002      	movs	r2, r0
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e0a2      	b.n	800679e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006658:	4b53      	ldr	r3, [pc, #332]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 800665a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665c:	2202      	movs	r2, #2
 800665e:	4013      	ands	r3, r2
 8006660:	d1f1      	bne.n	8006646 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d100      	bne.n	800666c <HAL_RCC_OscConfig+0x4e4>
 800666a:	e097      	b.n	800679c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800666c:	4b4e      	ldr	r3, [pc, #312]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	220c      	movs	r2, #12
 8006672:	4013      	ands	r3, r2
 8006674:	2b08      	cmp	r3, #8
 8006676:	d100      	bne.n	800667a <HAL_RCC_OscConfig+0x4f2>
 8006678:	e06b      	b.n	8006752 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d14c      	bne.n	800671c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006682:	4b49      	ldr	r3, [pc, #292]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b48      	ldr	r3, [pc, #288]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006688:	494a      	ldr	r1, [pc, #296]	; (80067b4 <HAL_RCC_OscConfig+0x62c>)
 800668a:	400a      	ands	r2, r1
 800668c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668e:	f7fd fef5 	bl	800447c <HAL_GetTick>
 8006692:	0003      	movs	r3, r0
 8006694:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006698:	f7fd fef0 	bl	800447c <HAL_GetTick>
 800669c:	0002      	movs	r2, r0
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e079      	b.n	800679e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066aa:	4b3f      	ldr	r3, [pc, #252]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	049b      	lsls	r3, r3, #18
 80066b2:	4013      	ands	r3, r2
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066b6:	4b3c      	ldr	r3, [pc, #240]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	220f      	movs	r2, #15
 80066bc:	4393      	bics	r3, r2
 80066be:	0019      	movs	r1, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c4:	4b38      	ldr	r3, [pc, #224]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80066c6:	430a      	orrs	r2, r1
 80066c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80066ca:	4b37      	ldr	r3, [pc, #220]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4a3a      	ldr	r2, [pc, #232]	; (80067b8 <HAL_RCC_OscConfig+0x630>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	0019      	movs	r1, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	431a      	orrs	r2, r3
 80066de:	4b32      	ldr	r3, [pc, #200]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80066e0:	430a      	orrs	r2, r1
 80066e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066e4:	4b30      	ldr	r3, [pc, #192]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	4b2f      	ldr	r3, [pc, #188]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 80066ea:	2180      	movs	r1, #128	; 0x80
 80066ec:	0449      	lsls	r1, r1, #17
 80066ee:	430a      	orrs	r2, r1
 80066f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f2:	f7fd fec3 	bl	800447c <HAL_GetTick>
 80066f6:	0003      	movs	r3, r0
 80066f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066fc:	f7fd febe 	bl	800447c <HAL_GetTick>
 8006700:	0002      	movs	r2, r0
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e047      	b.n	800679e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800670e:	4b26      	ldr	r3, [pc, #152]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	049b      	lsls	r3, r3, #18
 8006716:	4013      	ands	r3, r2
 8006718:	d0f0      	beq.n	80066fc <HAL_RCC_OscConfig+0x574>
 800671a:	e03f      	b.n	800679c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671c:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	4b21      	ldr	r3, [pc, #132]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006722:	4924      	ldr	r1, [pc, #144]	; (80067b4 <HAL_RCC_OscConfig+0x62c>)
 8006724:	400a      	ands	r2, r1
 8006726:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006728:	f7fd fea8 	bl	800447c <HAL_GetTick>
 800672c:	0003      	movs	r3, r0
 800672e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006732:	f7fd fea3 	bl	800447c <HAL_GetTick>
 8006736:	0002      	movs	r2, r0
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e02c      	b.n	800679e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006744:	4b18      	ldr	r3, [pc, #96]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	2380      	movs	r3, #128	; 0x80
 800674a:	049b      	lsls	r3, r3, #18
 800674c:	4013      	ands	r3, r2
 800674e:	d1f0      	bne.n	8006732 <HAL_RCC_OscConfig+0x5aa>
 8006750:	e024      	b.n	800679c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e01f      	b.n	800679e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800675e:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006764:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <HAL_RCC_OscConfig+0x620>)
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	2380      	movs	r3, #128	; 0x80
 800676e:	025b      	lsls	r3, r3, #9
 8006770:	401a      	ands	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	429a      	cmp	r2, r3
 8006778:	d10e      	bne.n	8006798 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	220f      	movs	r2, #15
 800677e:	401a      	ands	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006784:	429a      	cmp	r2, r3
 8006786:	d107      	bne.n	8006798 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	23f0      	movs	r3, #240	; 0xf0
 800678c:	039b      	lsls	r3, r3, #14
 800678e:	401a      	ands	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006794:	429a      	cmp	r2, r3
 8006796:	d001      	beq.n	800679c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e000      	b.n	800679e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	0018      	movs	r0, r3
 80067a0:	46bd      	mov	sp, r7
 80067a2:	b008      	add	sp, #32
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	40021000 	.word	0x40021000
 80067ac:	00001388 	.word	0x00001388
 80067b0:	efffffff 	.word	0xefffffff
 80067b4:	feffffff 	.word	0xfeffffff
 80067b8:	ffc2ffff 	.word	0xffc2ffff

080067bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0b3      	b.n	8006938 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067d0:	4b5b      	ldr	r3, [pc, #364]	; (8006940 <HAL_RCC_ClockConfig+0x184>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2201      	movs	r2, #1
 80067d6:	4013      	ands	r3, r2
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d911      	bls.n	8006802 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	4b58      	ldr	r3, [pc, #352]	; (8006940 <HAL_RCC_ClockConfig+0x184>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2201      	movs	r2, #1
 80067e4:	4393      	bics	r3, r2
 80067e6:	0019      	movs	r1, r3
 80067e8:	4b55      	ldr	r3, [pc, #340]	; (8006940 <HAL_RCC_ClockConfig+0x184>)
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f0:	4b53      	ldr	r3, [pc, #332]	; (8006940 <HAL_RCC_ClockConfig+0x184>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2201      	movs	r2, #1
 80067f6:	4013      	ands	r3, r2
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d001      	beq.n	8006802 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e09a      	b.n	8006938 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2202      	movs	r2, #2
 8006808:	4013      	ands	r3, r2
 800680a:	d015      	beq.n	8006838 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2204      	movs	r2, #4
 8006812:	4013      	ands	r3, r2
 8006814:	d006      	beq.n	8006824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006816:	4b4b      	ldr	r3, [pc, #300]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	4b4a      	ldr	r3, [pc, #296]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 800681c:	21e0      	movs	r1, #224	; 0xe0
 800681e:	00c9      	lsls	r1, r1, #3
 8006820:	430a      	orrs	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006824:	4b47      	ldr	r3, [pc, #284]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	22f0      	movs	r2, #240	; 0xf0
 800682a:	4393      	bics	r3, r2
 800682c:	0019      	movs	r1, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	4b44      	ldr	r3, [pc, #272]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 8006834:	430a      	orrs	r2, r1
 8006836:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2201      	movs	r2, #1
 800683e:	4013      	ands	r3, r2
 8006840:	d040      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d107      	bne.n	800685a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800684a:	4b3e      	ldr	r3, [pc, #248]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	4013      	ands	r3, r2
 8006854:	d114      	bne.n	8006880 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e06e      	b.n	8006938 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d107      	bne.n	8006872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006862:	4b38      	ldr	r3, [pc, #224]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	2380      	movs	r3, #128	; 0x80
 8006868:	049b      	lsls	r3, r3, #18
 800686a:	4013      	ands	r3, r2
 800686c:	d108      	bne.n	8006880 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e062      	b.n	8006938 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006872:	4b34      	ldr	r3, [pc, #208]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2202      	movs	r2, #2
 8006878:	4013      	ands	r3, r2
 800687a:	d101      	bne.n	8006880 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e05b      	b.n	8006938 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006880:	4b30      	ldr	r3, [pc, #192]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2203      	movs	r2, #3
 8006886:	4393      	bics	r3, r2
 8006888:	0019      	movs	r1, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	4b2d      	ldr	r3, [pc, #180]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006894:	f7fd fdf2 	bl	800447c <HAL_GetTick>
 8006898:	0003      	movs	r3, r0
 800689a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800689c:	e009      	b.n	80068b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800689e:	f7fd fded 	bl	800447c <HAL_GetTick>
 80068a2:	0002      	movs	r2, r0
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	4a27      	ldr	r2, [pc, #156]	; (8006948 <HAL_RCC_ClockConfig+0x18c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e042      	b.n	8006938 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b2:	4b24      	ldr	r3, [pc, #144]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	220c      	movs	r2, #12
 80068b8:	401a      	ands	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d1ec      	bne.n	800689e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068c4:	4b1e      	ldr	r3, [pc, #120]	; (8006940 <HAL_RCC_ClockConfig+0x184>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2201      	movs	r2, #1
 80068ca:	4013      	ands	r3, r2
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d211      	bcs.n	80068f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d2:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <HAL_RCC_ClockConfig+0x184>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2201      	movs	r2, #1
 80068d8:	4393      	bics	r3, r2
 80068da:	0019      	movs	r1, r3
 80068dc:	4b18      	ldr	r3, [pc, #96]	; (8006940 <HAL_RCC_ClockConfig+0x184>)
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068e4:	4b16      	ldr	r3, [pc, #88]	; (8006940 <HAL_RCC_ClockConfig+0x184>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2201      	movs	r2, #1
 80068ea:	4013      	ands	r3, r2
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d001      	beq.n	80068f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e020      	b.n	8006938 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2204      	movs	r2, #4
 80068fc:	4013      	ands	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006900:	4b10      	ldr	r3, [pc, #64]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4a11      	ldr	r2, [pc, #68]	; (800694c <HAL_RCC_ClockConfig+0x190>)
 8006906:	4013      	ands	r3, r2
 8006908:	0019      	movs	r1, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006914:	f000 f820 	bl	8006958 <HAL_RCC_GetSysClockFreq>
 8006918:	0001      	movs	r1, r0
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <HAL_RCC_ClockConfig+0x188>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	091b      	lsrs	r3, r3, #4
 8006920:	220f      	movs	r2, #15
 8006922:	4013      	ands	r3, r2
 8006924:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <HAL_RCC_ClockConfig+0x194>)
 8006926:	5cd3      	ldrb	r3, [r2, r3]
 8006928:	000a      	movs	r2, r1
 800692a:	40da      	lsrs	r2, r3
 800692c:	4b09      	ldr	r3, [pc, #36]	; (8006954 <HAL_RCC_ClockConfig+0x198>)
 800692e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006930:	2000      	movs	r0, #0
 8006932:	f7fd fd5d 	bl	80043f0 <HAL_InitTick>
  
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	0018      	movs	r0, r3
 800693a:	46bd      	mov	sp, r7
 800693c:	b004      	add	sp, #16
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40022000 	.word	0x40022000
 8006944:	40021000 	.word	0x40021000
 8006948:	00001388 	.word	0x00001388
 800694c:	fffff8ff 	.word	0xfffff8ff
 8006950:	0800b1d8 	.word	0x0800b1d8
 8006954:	20000008 	.word	0x20000008

08006958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006958:	b590      	push	{r4, r7, lr}
 800695a:	b08f      	sub	sp, #60	; 0x3c
 800695c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800695e:	2314      	movs	r3, #20
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	4a2b      	ldr	r2, [pc, #172]	; (8006a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006964:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006966:	c313      	stmia	r3!, {r0, r1, r4}
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800696c:	1d3b      	adds	r3, r7, #4
 800696e:	4a29      	ldr	r2, [pc, #164]	; (8006a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006970:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006972:	c313      	stmia	r3!, {r0, r1, r4}
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697c:	2300      	movs	r3, #0
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006980:	2300      	movs	r3, #0
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
 8006984:	2300      	movs	r3, #0
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800698c:	4b22      	ldr	r3, [pc, #136]	; (8006a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006994:	220c      	movs	r2, #12
 8006996:	4013      	ands	r3, r2
 8006998:	2b04      	cmp	r3, #4
 800699a:	d002      	beq.n	80069a2 <HAL_RCC_GetSysClockFreq+0x4a>
 800699c:	2b08      	cmp	r3, #8
 800699e:	d003      	beq.n	80069a8 <HAL_RCC_GetSysClockFreq+0x50>
 80069a0:	e02d      	b.n	80069fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80069a2:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <HAL_RCC_GetSysClockFreq+0xc4>)
 80069a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80069a6:	e02d      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	0c9b      	lsrs	r3, r3, #18
 80069ac:	220f      	movs	r2, #15
 80069ae:	4013      	ands	r3, r2
 80069b0:	2214      	movs	r2, #20
 80069b2:	18ba      	adds	r2, r7, r2
 80069b4:	5cd3      	ldrb	r3, [r2, r3]
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80069b8:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	220f      	movs	r2, #15
 80069be:	4013      	ands	r3, r2
 80069c0:	1d3a      	adds	r2, r7, #4
 80069c2:	5cd3      	ldrb	r3, [r2, r3]
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80069c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c8:	2380      	movs	r3, #128	; 0x80
 80069ca:	025b      	lsls	r3, r3, #9
 80069cc:	4013      	ands	r3, r2
 80069ce:	d009      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80069d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069d2:	4812      	ldr	r0, [pc, #72]	; (8006a1c <HAL_RCC_GetSysClockFreq+0xc4>)
 80069d4:	f7f9 fbb4 	bl	8000140 <__udivsi3>
 80069d8:	0003      	movs	r3, r0
 80069da:	001a      	movs	r2, r3
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	4353      	muls	r3, r2
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
 80069e2:	e009      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80069e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069e6:	000a      	movs	r2, r1
 80069e8:	0152      	lsls	r2, r2, #5
 80069ea:	1a52      	subs	r2, r2, r1
 80069ec:	0193      	lsls	r3, r2, #6
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	185b      	adds	r3, r3, r1
 80069f4:	021b      	lsls	r3, r3, #8
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80069f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80069fc:	e002      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006a02:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006a06:	0018      	movs	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	b00f      	add	sp, #60	; 0x3c
 8006a0c:	bd90      	pop	{r4, r7, pc}
 8006a0e:	46c0      	nop			; (mov r8, r8)
 8006a10:	0800b078 	.word	0x0800b078
 8006a14:	0800b088 	.word	0x0800b088
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	007a1200 	.word	0x007a1200

08006a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	2380      	movs	r3, #128	; 0x80
 8006a36:	025b      	lsls	r3, r3, #9
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d100      	bne.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006a3c:	e08e      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006a3e:	2017      	movs	r0, #23
 8006a40:	183b      	adds	r3, r7, r0
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a46:	4b5f      	ldr	r3, [pc, #380]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a48:	69da      	ldr	r2, [r3, #28]
 8006a4a:	2380      	movs	r3, #128	; 0x80
 8006a4c:	055b      	lsls	r3, r3, #21
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d110      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a52:	4b5c      	ldr	r3, [pc, #368]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a54:	69da      	ldr	r2, [r3, #28]
 8006a56:	4b5b      	ldr	r3, [pc, #364]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a58:	2180      	movs	r1, #128	; 0x80
 8006a5a:	0549      	lsls	r1, r1, #21
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	61da      	str	r2, [r3, #28]
 8006a60:	4b58      	ldr	r3, [pc, #352]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a62:	69da      	ldr	r2, [r3, #28]
 8006a64:	2380      	movs	r3, #128	; 0x80
 8006a66:	055b      	lsls	r3, r3, #21
 8006a68:	4013      	ands	r3, r2
 8006a6a:	60bb      	str	r3, [r7, #8]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a6e:	183b      	adds	r3, r7, r0
 8006a70:	2201      	movs	r2, #1
 8006a72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a74:	4b54      	ldr	r3, [pc, #336]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	d11a      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a80:	4b51      	ldr	r3, [pc, #324]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4b50      	ldr	r3, [pc, #320]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a86:	2180      	movs	r1, #128	; 0x80
 8006a88:	0049      	lsls	r1, r1, #1
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a8e:	f7fd fcf5 	bl	800447c <HAL_GetTick>
 8006a92:	0003      	movs	r3, r0
 8006a94:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a96:	e008      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a98:	f7fd fcf0 	bl	800447c <HAL_GetTick>
 8006a9c:	0002      	movs	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b64      	cmp	r3, #100	; 0x64
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e087      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aaa:	4b47      	ldr	r3, [pc, #284]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	2380      	movs	r3, #128	; 0x80
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ab6:	4b43      	ldr	r3, [pc, #268]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ab8:	6a1a      	ldr	r2, [r3, #32]
 8006aba:	23c0      	movs	r3, #192	; 0xc0
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4013      	ands	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d034      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	23c0      	movs	r3, #192	; 0xc0
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d02c      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ad8:	4b3a      	ldr	r3, [pc, #232]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	4a3b      	ldr	r2, [pc, #236]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ae2:	4b38      	ldr	r3, [pc, #224]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	4b37      	ldr	r3, [pc, #220]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ae8:	2180      	movs	r1, #128	; 0x80
 8006aea:	0249      	lsls	r1, r1, #9
 8006aec:	430a      	orrs	r2, r1
 8006aee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006af0:	4b34      	ldr	r3, [pc, #208]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	4b33      	ldr	r3, [pc, #204]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006af6:	4936      	ldr	r1, [pc, #216]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006af8:	400a      	ands	r2, r1
 8006afa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006afc:	4b31      	ldr	r3, [pc, #196]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	4013      	ands	r3, r2
 8006b08:	d013      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b0a:	f7fd fcb7 	bl	800447c <HAL_GetTick>
 8006b0e:	0003      	movs	r3, r0
 8006b10:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b12:	e009      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b14:	f7fd fcb2 	bl	800447c <HAL_GetTick>
 8006b18:	0002      	movs	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	4a2d      	ldr	r2, [pc, #180]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e048      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b28:	4b26      	ldr	r3, [pc, #152]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	4013      	ands	r3, r2
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b32:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	4a25      	ldr	r2, [pc, #148]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	0019      	movs	r1, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	4b20      	ldr	r3, [pc, #128]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b42:	430a      	orrs	r2, r1
 8006b44:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b46:	2317      	movs	r3, #23
 8006b48:	18fb      	adds	r3, r7, r3
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d105      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b50:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b52:	69da      	ldr	r2, [r3, #28]
 8006b54:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b56:	4920      	ldr	r1, [pc, #128]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b58:	400a      	ands	r2, r1
 8006b5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2201      	movs	r2, #1
 8006b62:	4013      	ands	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b66:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	4393      	bics	r3, r2
 8006b6e:	0019      	movs	r1, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b76:	430a      	orrs	r2, r1
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	4013      	ands	r3, r2
 8006b82:	d009      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b84:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	2210      	movs	r2, #16
 8006b8a:	4393      	bics	r3, r2
 8006b8c:	0019      	movs	r1, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b94:	430a      	orrs	r2, r1
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	2380      	movs	r3, #128	; 0x80
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	d009      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba8:	2240      	movs	r2, #64	; 0x40
 8006baa:	4393      	bics	r3, r2
 8006bac:	0019      	movs	r1, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	0018      	movs	r0, r3
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b006      	add	sp, #24
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	46c0      	nop			; (mov r8, r8)
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	40007000 	.word	0x40007000
 8006bcc:	fffffcff 	.word	0xfffffcff
 8006bd0:	fffeffff 	.word	0xfffeffff
 8006bd4:	00001388 	.word	0x00001388
 8006bd8:	efffffff 	.word	0xefffffff

08006bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e042      	b.n	8006c74 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	223d      	movs	r2, #61	; 0x3d
 8006bf2:	5c9b      	ldrb	r3, [r3, r2]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d107      	bne.n	8006c0a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	223c      	movs	r2, #60	; 0x3c
 8006bfe:	2100      	movs	r1, #0
 8006c00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	0018      	movs	r0, r3
 8006c06:	f7fd f9cf 	bl	8003fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	223d      	movs	r2, #61	; 0x3d
 8006c0e:	2102      	movs	r1, #2
 8006c10:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	0019      	movs	r1, r3
 8006c1c:	0010      	movs	r0, r2
 8006c1e:	f000 fe41 	bl	80078a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2246      	movs	r2, #70	; 0x46
 8006c26:	2101      	movs	r1, #1
 8006c28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	223e      	movs	r2, #62	; 0x3e
 8006c2e:	2101      	movs	r1, #1
 8006c30:	5499      	strb	r1, [r3, r2]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	223f      	movs	r2, #63	; 0x3f
 8006c36:	2101      	movs	r1, #1
 8006c38:	5499      	strb	r1, [r3, r2]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2240      	movs	r2, #64	; 0x40
 8006c3e:	2101      	movs	r1, #1
 8006c40:	5499      	strb	r1, [r3, r2]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2241      	movs	r2, #65	; 0x41
 8006c46:	2101      	movs	r1, #1
 8006c48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2242      	movs	r2, #66	; 0x42
 8006c4e:	2101      	movs	r1, #1
 8006c50:	5499      	strb	r1, [r3, r2]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2243      	movs	r2, #67	; 0x43
 8006c56:	2101      	movs	r1, #1
 8006c58:	5499      	strb	r1, [r3, r2]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2244      	movs	r2, #68	; 0x44
 8006c5e:	2101      	movs	r1, #1
 8006c60:	5499      	strb	r1, [r3, r2]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2245      	movs	r2, #69	; 0x45
 8006c66:	2101      	movs	r1, #1
 8006c68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	223d      	movs	r2, #61	; 0x3d
 8006c6e:	2101      	movs	r1, #1
 8006c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	0018      	movs	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b002      	add	sp, #8
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e042      	b.n	8006d14 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	223d      	movs	r2, #61	; 0x3d
 8006c92:	5c9b      	ldrb	r3, [r3, r2]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d107      	bne.n	8006caa <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	223c      	movs	r2, #60	; 0x3c
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f000 f839 	bl	8006d1c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	223d      	movs	r2, #61	; 0x3d
 8006cae:	2102      	movs	r1, #2
 8006cb0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	0019      	movs	r1, r3
 8006cbc:	0010      	movs	r0, r2
 8006cbe:	f000 fdf1 	bl	80078a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2246      	movs	r2, #70	; 0x46
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	223e      	movs	r2, #62	; 0x3e
 8006cce:	2101      	movs	r1, #1
 8006cd0:	5499      	strb	r1, [r3, r2]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	223f      	movs	r2, #63	; 0x3f
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	5499      	strb	r1, [r3, r2]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2240      	movs	r2, #64	; 0x40
 8006cde:	2101      	movs	r1, #1
 8006ce0:	5499      	strb	r1, [r3, r2]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2241      	movs	r2, #65	; 0x41
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2242      	movs	r2, #66	; 0x42
 8006cee:	2101      	movs	r1, #1
 8006cf0:	5499      	strb	r1, [r3, r2]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2243      	movs	r2, #67	; 0x43
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	5499      	strb	r1, [r3, r2]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2244      	movs	r2, #68	; 0x44
 8006cfe:	2101      	movs	r1, #1
 8006d00:	5499      	strb	r1, [r3, r2]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2245      	movs	r2, #69	; 0x45
 8006d06:	2101      	movs	r1, #1
 8006d08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	223d      	movs	r2, #61	; 0x3d
 8006d0e:	2101      	movs	r1, #1
 8006d10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	0018      	movs	r0, r3
 8006d16:	46bd      	mov	sp, r7
 8006d18:	b002      	add	sp, #8
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006d24:	46c0      	nop			; (mov r8, r8)
 8006d26:	46bd      	mov	sp, r7
 8006d28:	b002      	add	sp, #8
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d36:	230f      	movs	r3, #15
 8006d38:	18fb      	adds	r3, r7, r3
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d108      	bne.n	8006d56 <HAL_TIM_OC_Start_IT+0x2a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	223e      	movs	r2, #62	; 0x3e
 8006d48:	5c9b      	ldrb	r3, [r3, r2]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	1e5a      	subs	r2, r3, #1
 8006d50:	4193      	sbcs	r3, r2
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	e01f      	b.n	8006d96 <HAL_TIM_OC_Start_IT+0x6a>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d108      	bne.n	8006d6e <HAL_TIM_OC_Start_IT+0x42>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	223f      	movs	r2, #63	; 0x3f
 8006d60:	5c9b      	ldrb	r3, [r3, r2]
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	1e5a      	subs	r2, r3, #1
 8006d68:	4193      	sbcs	r3, r2
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	e013      	b.n	8006d96 <HAL_TIM_OC_Start_IT+0x6a>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d108      	bne.n	8006d86 <HAL_TIM_OC_Start_IT+0x5a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2240      	movs	r2, #64	; 0x40
 8006d78:	5c9b      	ldrb	r3, [r3, r2]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	1e5a      	subs	r2, r3, #1
 8006d80:	4193      	sbcs	r3, r2
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	e007      	b.n	8006d96 <HAL_TIM_OC_Start_IT+0x6a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2241      	movs	r2, #65	; 0x41
 8006d8a:	5c9b      	ldrb	r3, [r3, r2]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	1e5a      	subs	r2, r3, #1
 8006d92:	4193      	sbcs	r3, r2
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e0b7      	b.n	8006f0e <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d104      	bne.n	8006dae <HAL_TIM_OC_Start_IT+0x82>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	223e      	movs	r2, #62	; 0x3e
 8006da8:	2102      	movs	r1, #2
 8006daa:	5499      	strb	r1, [r3, r2]
 8006dac:	e013      	b.n	8006dd6 <HAL_TIM_OC_Start_IT+0xaa>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d104      	bne.n	8006dbe <HAL_TIM_OC_Start_IT+0x92>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	223f      	movs	r2, #63	; 0x3f
 8006db8:	2102      	movs	r1, #2
 8006dba:	5499      	strb	r1, [r3, r2]
 8006dbc:	e00b      	b.n	8006dd6 <HAL_TIM_OC_Start_IT+0xaa>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d104      	bne.n	8006dce <HAL_TIM_OC_Start_IT+0xa2>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2240      	movs	r2, #64	; 0x40
 8006dc8:	2102      	movs	r1, #2
 8006dca:	5499      	strb	r1, [r3, r2]
 8006dcc:	e003      	b.n	8006dd6 <HAL_TIM_OC_Start_IT+0xaa>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2241      	movs	r2, #65	; 0x41
 8006dd2:	2102      	movs	r1, #2
 8006dd4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b0c      	cmp	r3, #12
 8006dda:	d02a      	beq.n	8006e32 <HAL_TIM_OC_Start_IT+0x106>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b0c      	cmp	r3, #12
 8006de0:	d830      	bhi.n	8006e44 <HAL_TIM_OC_Start_IT+0x118>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d01b      	beq.n	8006e20 <HAL_TIM_OC_Start_IT+0xf4>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d82a      	bhi.n	8006e44 <HAL_TIM_OC_Start_IT+0x118>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <HAL_TIM_OC_Start_IT+0xd0>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d009      	beq.n	8006e0e <HAL_TIM_OC_Start_IT+0xe2>
 8006dfa:	e023      	b.n	8006e44 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2102      	movs	r1, #2
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	60da      	str	r2, [r3, #12]
      break;
 8006e0c:	e01f      	b.n	8006e4e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2104      	movs	r1, #4
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	60da      	str	r2, [r3, #12]
      break;
 8006e1e:	e016      	b.n	8006e4e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2108      	movs	r1, #8
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	60da      	str	r2, [r3, #12]
      break;
 8006e30:	e00d      	b.n	8006e4e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2110      	movs	r1, #16
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	60da      	str	r2, [r3, #12]
      break;
 8006e42:	e004      	b.n	8006e4e <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8006e44:	230f      	movs	r3, #15
 8006e46:	18fb      	adds	r3, r7, r3
 8006e48:	2201      	movs	r2, #1
 8006e4a:	701a      	strb	r2, [r3, #0]
      break;
 8006e4c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006e4e:	230f      	movs	r3, #15
 8006e50:	18fb      	adds	r3, r7, r3
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d157      	bne.n	8006f08 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	0018      	movs	r0, r3
 8006e62:	f001 f835 	bl	8007ed0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a2b      	ldr	r2, [pc, #172]	; (8006f18 <HAL_TIM_OC_Start_IT+0x1ec>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00e      	beq.n	8006e8e <HAL_TIM_OC_Start_IT+0x162>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a29      	ldr	r2, [pc, #164]	; (8006f1c <HAL_TIM_OC_Start_IT+0x1f0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d009      	beq.n	8006e8e <HAL_TIM_OC_Start_IT+0x162>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a28      	ldr	r2, [pc, #160]	; (8006f20 <HAL_TIM_OC_Start_IT+0x1f4>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d004      	beq.n	8006e8e <HAL_TIM_OC_Start_IT+0x162>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a26      	ldr	r2, [pc, #152]	; (8006f24 <HAL_TIM_OC_Start_IT+0x1f8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d101      	bne.n	8006e92 <HAL_TIM_OC_Start_IT+0x166>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <HAL_TIM_OC_Start_IT+0x168>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d008      	beq.n	8006eaa <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2180      	movs	r1, #128	; 0x80
 8006ea4:	0209      	lsls	r1, r1, #8
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <HAL_TIM_OC_Start_IT+0x1ec>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00f      	beq.n	8006ed4 <HAL_TIM_OC_Start_IT+0x1a8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	2380      	movs	r3, #128	; 0x80
 8006eba:	05db      	lsls	r3, r3, #23
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d009      	beq.n	8006ed4 <HAL_TIM_OC_Start_IT+0x1a8>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a18      	ldr	r2, [pc, #96]	; (8006f28 <HAL_TIM_OC_Start_IT+0x1fc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d004      	beq.n	8006ed4 <HAL_TIM_OC_Start_IT+0x1a8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a13      	ldr	r2, [pc, #76]	; (8006f1c <HAL_TIM_OC_Start_IT+0x1f0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d111      	bne.n	8006ef8 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2207      	movs	r2, #7
 8006edc:	4013      	ands	r3, r2
 8006ede:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b06      	cmp	r3, #6
 8006ee4:	d010      	beq.n	8006f08 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef6:	e007      	b.n	8006f08 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2101      	movs	r1, #1
 8006f04:	430a      	orrs	r2, r1
 8006f06:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006f08:	230f      	movs	r3, #15
 8006f0a:	18fb      	adds	r3, r7, r3
 8006f0c:	781b      	ldrb	r3, [r3, #0]
}
 8006f0e:	0018      	movs	r0, r3
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b004      	add	sp, #16
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	40012c00 	.word	0x40012c00
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40014400 	.word	0x40014400
 8006f24:	40014800 	.word	0x40014800
 8006f28:	40000400 	.word	0x40000400

08006f2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e042      	b.n	8006fc4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	223d      	movs	r2, #61	; 0x3d
 8006f42:	5c9b      	ldrb	r3, [r3, r2]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d107      	bne.n	8006f5a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	223c      	movs	r2, #60	; 0x3c
 8006f4e:	2100      	movs	r1, #0
 8006f50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	0018      	movs	r0, r3
 8006f56:	f000 f839 	bl	8006fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	223d      	movs	r2, #61	; 0x3d
 8006f5e:	2102      	movs	r1, #2
 8006f60:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	0010      	movs	r0, r2
 8006f6e:	f000 fc99 	bl	80078a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2246      	movs	r2, #70	; 0x46
 8006f76:	2101      	movs	r1, #1
 8006f78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	223e      	movs	r2, #62	; 0x3e
 8006f7e:	2101      	movs	r1, #1
 8006f80:	5499      	strb	r1, [r3, r2]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	223f      	movs	r2, #63	; 0x3f
 8006f86:	2101      	movs	r1, #1
 8006f88:	5499      	strb	r1, [r3, r2]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2240      	movs	r2, #64	; 0x40
 8006f8e:	2101      	movs	r1, #1
 8006f90:	5499      	strb	r1, [r3, r2]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2241      	movs	r2, #65	; 0x41
 8006f96:	2101      	movs	r1, #1
 8006f98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2242      	movs	r2, #66	; 0x42
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	5499      	strb	r1, [r3, r2]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2243      	movs	r2, #67	; 0x43
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	5499      	strb	r1, [r3, r2]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2244      	movs	r2, #68	; 0x44
 8006fae:	2101      	movs	r1, #1
 8006fb0:	5499      	strb	r1, [r3, r2]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2245      	movs	r2, #69	; 0x45
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	223d      	movs	r2, #61	; 0x3d
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	b002      	add	sp, #8
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fd4:	46c0      	nop			; (mov r8, r8)
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b002      	add	sp, #8
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d108      	bne.n	8006ffe <HAL_TIM_PWM_Start+0x22>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	223e      	movs	r2, #62	; 0x3e
 8006ff0:	5c9b      	ldrb	r3, [r3, r2]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	1e5a      	subs	r2, r3, #1
 8006ff8:	4193      	sbcs	r3, r2
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	e01f      	b.n	800703e <HAL_TIM_PWM_Start+0x62>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d108      	bne.n	8007016 <HAL_TIM_PWM_Start+0x3a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	223f      	movs	r2, #63	; 0x3f
 8007008:	5c9b      	ldrb	r3, [r3, r2]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	1e5a      	subs	r2, r3, #1
 8007010:	4193      	sbcs	r3, r2
 8007012:	b2db      	uxtb	r3, r3
 8007014:	e013      	b.n	800703e <HAL_TIM_PWM_Start+0x62>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d108      	bne.n	800702e <HAL_TIM_PWM_Start+0x52>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2240      	movs	r2, #64	; 0x40
 8007020:	5c9b      	ldrb	r3, [r3, r2]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	1e5a      	subs	r2, r3, #1
 8007028:	4193      	sbcs	r3, r2
 800702a:	b2db      	uxtb	r3, r3
 800702c:	e007      	b.n	800703e <HAL_TIM_PWM_Start+0x62>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2241      	movs	r2, #65	; 0x41
 8007032:	5c9b      	ldrb	r3, [r3, r2]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	1e5a      	subs	r2, r3, #1
 800703a:	4193      	sbcs	r3, r2
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e074      	b.n	8007130 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d104      	bne.n	8007056 <HAL_TIM_PWM_Start+0x7a>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	223e      	movs	r2, #62	; 0x3e
 8007050:	2102      	movs	r1, #2
 8007052:	5499      	strb	r1, [r3, r2]
 8007054:	e013      	b.n	800707e <HAL_TIM_PWM_Start+0xa2>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d104      	bne.n	8007066 <HAL_TIM_PWM_Start+0x8a>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	223f      	movs	r2, #63	; 0x3f
 8007060:	2102      	movs	r1, #2
 8007062:	5499      	strb	r1, [r3, r2]
 8007064:	e00b      	b.n	800707e <HAL_TIM_PWM_Start+0xa2>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d104      	bne.n	8007076 <HAL_TIM_PWM_Start+0x9a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2240      	movs	r2, #64	; 0x40
 8007070:	2102      	movs	r1, #2
 8007072:	5499      	strb	r1, [r3, r2]
 8007074:	e003      	b.n	800707e <HAL_TIM_PWM_Start+0xa2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2241      	movs	r2, #65	; 0x41
 800707a:	2102      	movs	r1, #2
 800707c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	2201      	movs	r2, #1
 8007086:	0018      	movs	r0, r3
 8007088:	f000 ff22 	bl	8007ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a29      	ldr	r2, [pc, #164]	; (8007138 <HAL_TIM_PWM_Start+0x15c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00e      	beq.n	80070b4 <HAL_TIM_PWM_Start+0xd8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a28      	ldr	r2, [pc, #160]	; (800713c <HAL_TIM_PWM_Start+0x160>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d009      	beq.n	80070b4 <HAL_TIM_PWM_Start+0xd8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a26      	ldr	r2, [pc, #152]	; (8007140 <HAL_TIM_PWM_Start+0x164>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d004      	beq.n	80070b4 <HAL_TIM_PWM_Start+0xd8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a25      	ldr	r2, [pc, #148]	; (8007144 <HAL_TIM_PWM_Start+0x168>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d101      	bne.n	80070b8 <HAL_TIM_PWM_Start+0xdc>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <HAL_TIM_PWM_Start+0xde>
 80070b8:	2300      	movs	r3, #0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2180      	movs	r1, #128	; 0x80
 80070ca:	0209      	lsls	r1, r1, #8
 80070cc:	430a      	orrs	r2, r1
 80070ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a18      	ldr	r2, [pc, #96]	; (8007138 <HAL_TIM_PWM_Start+0x15c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00f      	beq.n	80070fa <HAL_TIM_PWM_Start+0x11e>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	2380      	movs	r3, #128	; 0x80
 80070e0:	05db      	lsls	r3, r3, #23
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d009      	beq.n	80070fa <HAL_TIM_PWM_Start+0x11e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a17      	ldr	r2, [pc, #92]	; (8007148 <HAL_TIM_PWM_Start+0x16c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d004      	beq.n	80070fa <HAL_TIM_PWM_Start+0x11e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a11      	ldr	r2, [pc, #68]	; (800713c <HAL_TIM_PWM_Start+0x160>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d111      	bne.n	800711e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2207      	movs	r2, #7
 8007102:	4013      	ands	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b06      	cmp	r3, #6
 800710a:	d010      	beq.n	800712e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2101      	movs	r1, #1
 8007118:	430a      	orrs	r2, r1
 800711a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711c:	e007      	b.n	800712e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2101      	movs	r1, #1
 800712a:	430a      	orrs	r2, r1
 800712c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	0018      	movs	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	b004      	add	sp, #16
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40014000 	.word	0x40014000
 8007140:	40014400 	.word	0x40014400
 8007144:	40014800 	.word	0x40014800
 8007148:	40000400 	.word	0x40000400

0800714c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	2200      	movs	r2, #0
 800715e:	0018      	movs	r0, r3
 8007160:	f000 feb6 	bl	8007ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2f      	ldr	r2, [pc, #188]	; (8007228 <HAL_TIM_PWM_Stop+0xdc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00e      	beq.n	800718c <HAL_TIM_PWM_Stop+0x40>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a2e      	ldr	r2, [pc, #184]	; (800722c <HAL_TIM_PWM_Stop+0xe0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d009      	beq.n	800718c <HAL_TIM_PWM_Stop+0x40>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a2c      	ldr	r2, [pc, #176]	; (8007230 <HAL_TIM_PWM_Stop+0xe4>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d004      	beq.n	800718c <HAL_TIM_PWM_Stop+0x40>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a2b      	ldr	r2, [pc, #172]	; (8007234 <HAL_TIM_PWM_Stop+0xe8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d101      	bne.n	8007190 <HAL_TIM_PWM_Stop+0x44>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <HAL_TIM_PWM_Stop+0x46>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d013      	beq.n	80071be <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	4a26      	ldr	r2, [pc, #152]	; (8007238 <HAL_TIM_PWM_Stop+0xec>)
 800719e:	4013      	ands	r3, r2
 80071a0:	d10d      	bne.n	80071be <HAL_TIM_PWM_Stop+0x72>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	4a24      	ldr	r2, [pc, #144]	; (800723c <HAL_TIM_PWM_Stop+0xf0>)
 80071aa:	4013      	ands	r3, r2
 80071ac:	d107      	bne.n	80071be <HAL_TIM_PWM_Stop+0x72>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4921      	ldr	r1, [pc, #132]	; (8007240 <HAL_TIM_PWM_Stop+0xf4>)
 80071ba:	400a      	ands	r2, r1
 80071bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <HAL_TIM_PWM_Stop+0xec>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	d10d      	bne.n	80071e6 <HAL_TIM_PWM_Stop+0x9a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	4a1a      	ldr	r2, [pc, #104]	; (800723c <HAL_TIM_PWM_Stop+0xf0>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	d107      	bne.n	80071e6 <HAL_TIM_PWM_Stop+0x9a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2101      	movs	r1, #1
 80071e2:	438a      	bics	r2, r1
 80071e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <HAL_TIM_PWM_Stop+0xaa>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	223e      	movs	r2, #62	; 0x3e
 80071f0:	2101      	movs	r1, #1
 80071f2:	5499      	strb	r1, [r3, r2]
 80071f4:	e013      	b.n	800721e <HAL_TIM_PWM_Stop+0xd2>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_Stop+0xba>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	223f      	movs	r2, #63	; 0x3f
 8007200:	2101      	movs	r1, #1
 8007202:	5499      	strb	r1, [r3, r2]
 8007204:	e00b      	b.n	800721e <HAL_TIM_PWM_Stop+0xd2>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d104      	bne.n	8007216 <HAL_TIM_PWM_Stop+0xca>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2240      	movs	r2, #64	; 0x40
 8007210:	2101      	movs	r1, #1
 8007212:	5499      	strb	r1, [r3, r2]
 8007214:	e003      	b.n	800721e <HAL_TIM_PWM_Stop+0xd2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2241      	movs	r2, #65	; 0x41
 800721a:	2101      	movs	r1, #1
 800721c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	0018      	movs	r0, r3
 8007222:	46bd      	mov	sp, r7
 8007224:	b002      	add	sp, #8
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40012c00 	.word	0x40012c00
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800
 8007238:	00001111 	.word	0x00001111
 800723c:	00000444 	.word	0x00000444
 8007240:	ffff7fff 	.word	0xffff7fff

08007244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2202      	movs	r2, #2
 8007254:	4013      	ands	r3, r2
 8007256:	2b02      	cmp	r3, #2
 8007258:	d124      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	2202      	movs	r2, #2
 8007262:	4013      	ands	r3, r2
 8007264:	2b02      	cmp	r3, #2
 8007266:	d11d      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2203      	movs	r2, #3
 800726e:	4252      	negs	r2, r2
 8007270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	2203      	movs	r2, #3
 8007280:	4013      	ands	r3, r2
 8007282:	d004      	beq.n	800728e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	0018      	movs	r0, r3
 8007288:	f000 faf4 	bl	8007874 <HAL_TIM_IC_CaptureCallback>
 800728c:	e007      	b.n	800729e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	0018      	movs	r0, r3
 8007292:	f000 fae7 	bl	8007864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	0018      	movs	r0, r3
 800729a:	f000 faf3 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2204      	movs	r2, #4
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d125      	bne.n	80072fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2204      	movs	r2, #4
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d11e      	bne.n	80072fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2205      	movs	r2, #5
 80072c6:	4252      	negs	r2, r2
 80072c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699a      	ldr	r2, [r3, #24]
 80072d6:	23c0      	movs	r3, #192	; 0xc0
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4013      	ands	r3, r2
 80072dc:	d004      	beq.n	80072e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	0018      	movs	r0, r3
 80072e2:	f000 fac7 	bl	8007874 <HAL_TIM_IC_CaptureCallback>
 80072e6:	e007      	b.n	80072f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	0018      	movs	r0, r3
 80072ec:	f000 faba 	bl	8007864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	0018      	movs	r0, r3
 80072f4:	f000 fac6 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2208      	movs	r2, #8
 8007306:	4013      	ands	r3, r2
 8007308:	2b08      	cmp	r3, #8
 800730a:	d124      	bne.n	8007356 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2208      	movs	r2, #8
 8007314:	4013      	ands	r3, r2
 8007316:	2b08      	cmp	r3, #8
 8007318:	d11d      	bne.n	8007356 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2209      	movs	r2, #9
 8007320:	4252      	negs	r2, r2
 8007322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2204      	movs	r2, #4
 8007328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	2203      	movs	r2, #3
 8007332:	4013      	ands	r3, r2
 8007334:	d004      	beq.n	8007340 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	0018      	movs	r0, r3
 800733a:	f000 fa9b 	bl	8007874 <HAL_TIM_IC_CaptureCallback>
 800733e:	e007      	b.n	8007350 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	0018      	movs	r0, r3
 8007344:	f000 fa8e 	bl	8007864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	0018      	movs	r0, r3
 800734c:	f000 fa9a 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2210      	movs	r2, #16
 800735e:	4013      	ands	r3, r2
 8007360:	2b10      	cmp	r3, #16
 8007362:	d125      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	2210      	movs	r2, #16
 800736c:	4013      	ands	r3, r2
 800736e:	2b10      	cmp	r3, #16
 8007370:	d11e      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2211      	movs	r2, #17
 8007378:	4252      	negs	r2, r2
 800737a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2208      	movs	r2, #8
 8007380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69da      	ldr	r2, [r3, #28]
 8007388:	23c0      	movs	r3, #192	; 0xc0
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4013      	ands	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	0018      	movs	r0, r3
 8007394:	f000 fa6e 	bl	8007874 <HAL_TIM_IC_CaptureCallback>
 8007398:	e007      	b.n	80073aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	0018      	movs	r0, r3
 800739e:	f000 fa61 	bl	8007864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	0018      	movs	r0, r3
 80073a6:	f000 fa6d 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	2201      	movs	r2, #1
 80073b8:	4013      	ands	r3, r2
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d10f      	bne.n	80073de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	4013      	ands	r3, r2
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d108      	bne.n	80073de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2202      	movs	r2, #2
 80073d2:	4252      	negs	r2, r2
 80073d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	0018      	movs	r0, r3
 80073da:	f000 fa3b 	bl	8007854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2280      	movs	r2, #128	; 0x80
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b80      	cmp	r3, #128	; 0x80
 80073ea:	d10f      	bne.n	800740c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2280      	movs	r2, #128	; 0x80
 80073f4:	4013      	ands	r3, r2
 80073f6:	2b80      	cmp	r3, #128	; 0x80
 80073f8:	d108      	bne.n	800740c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2281      	movs	r2, #129	; 0x81
 8007400:	4252      	negs	r2, r2
 8007402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	0018      	movs	r0, r3
 8007408:	f000 fdec 	bl	8007fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2240      	movs	r2, #64	; 0x40
 8007414:	4013      	ands	r3, r2
 8007416:	2b40      	cmp	r3, #64	; 0x40
 8007418:	d10f      	bne.n	800743a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2240      	movs	r2, #64	; 0x40
 8007422:	4013      	ands	r3, r2
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d108      	bne.n	800743a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2241      	movs	r2, #65	; 0x41
 800742e:	4252      	negs	r2, r2
 8007430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	0018      	movs	r0, r3
 8007436:	f000 fa2d 	bl	8007894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2220      	movs	r2, #32
 8007442:	4013      	ands	r3, r2
 8007444:	2b20      	cmp	r3, #32
 8007446:	d10f      	bne.n	8007468 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2220      	movs	r2, #32
 8007450:	4013      	ands	r3, r2
 8007452:	2b20      	cmp	r3, #32
 8007454:	d108      	bne.n	8007468 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2221      	movs	r2, #33	; 0x21
 800745c:	4252      	negs	r2, r2
 800745e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	0018      	movs	r0, r3
 8007464:	f000 fdb6 	bl	8007fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007468:	46c0      	nop			; (mov r8, r8)
 800746a:	46bd      	mov	sp, r7
 800746c:	b002      	add	sp, #8
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800747c:	2317      	movs	r3, #23
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	223c      	movs	r2, #60	; 0x3c
 8007488:	5c9b      	ldrb	r3, [r3, r2]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_TIM_OC_ConfigChannel+0x22>
 800748e:	2302      	movs	r3, #2
 8007490:	e042      	b.n	8007518 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	223c      	movs	r2, #60	; 0x3c
 8007496:	2101      	movs	r1, #1
 8007498:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b0c      	cmp	r3, #12
 800749e:	d027      	beq.n	80074f0 <HAL_TIM_OC_ConfigChannel+0x80>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b0c      	cmp	r3, #12
 80074a4:	d82c      	bhi.n	8007500 <HAL_TIM_OC_ConfigChannel+0x90>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d019      	beq.n	80074e0 <HAL_TIM_OC_ConfigChannel+0x70>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d826      	bhi.n	8007500 <HAL_TIM_OC_ConfigChannel+0x90>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_TIM_OC_ConfigChannel+0x50>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d008      	beq.n	80074d0 <HAL_TIM_OC_ConfigChannel+0x60>
 80074be:	e01f      	b.n	8007500 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	0011      	movs	r1, r2
 80074c8:	0018      	movs	r0, r3
 80074ca:	f000 fa6b 	bl	80079a4 <TIM_OC1_SetConfig>
      break;
 80074ce:	e01c      	b.n	800750a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	0011      	movs	r1, r2
 80074d8:	0018      	movs	r0, r3
 80074da:	f000 faeb 	bl	8007ab4 <TIM_OC2_SetConfig>
      break;
 80074de:	e014      	b.n	800750a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	0011      	movs	r1, r2
 80074e8:	0018      	movs	r0, r3
 80074ea:	f000 fb67 	bl	8007bbc <TIM_OC3_SetConfig>
      break;
 80074ee:	e00c      	b.n	800750a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	0011      	movs	r1, r2
 80074f8:	0018      	movs	r0, r3
 80074fa:	f000 fbe5 	bl	8007cc8 <TIM_OC4_SetConfig>
      break;
 80074fe:	e004      	b.n	800750a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8007500:	2317      	movs	r3, #23
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	2201      	movs	r2, #1
 8007506:	701a      	strb	r2, [r3, #0]
      break;
 8007508:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	223c      	movs	r2, #60	; 0x3c
 800750e:	2100      	movs	r1, #0
 8007510:	5499      	strb	r1, [r3, r2]

  return status;
 8007512:	2317      	movs	r3, #23
 8007514:	18fb      	adds	r3, r7, r3
 8007516:	781b      	ldrb	r3, [r3, #0]
}
 8007518:	0018      	movs	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	b006      	add	sp, #24
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800752c:	2317      	movs	r3, #23
 800752e:	18fb      	adds	r3, r7, r3
 8007530:	2200      	movs	r2, #0
 8007532:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	223c      	movs	r2, #60	; 0x3c
 8007538:	5c9b      	ldrb	r3, [r3, r2]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d101      	bne.n	8007542 <HAL_TIM_PWM_ConfigChannel+0x22>
 800753e:	2302      	movs	r3, #2
 8007540:	e0ad      	b.n	800769e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	223c      	movs	r2, #60	; 0x3c
 8007546:	2101      	movs	r1, #1
 8007548:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b0c      	cmp	r3, #12
 800754e:	d100      	bne.n	8007552 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007550:	e076      	b.n	8007640 <HAL_TIM_PWM_ConfigChannel+0x120>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b0c      	cmp	r3, #12
 8007556:	d900      	bls.n	800755a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007558:	e095      	b.n	8007686 <HAL_TIM_PWM_ConfigChannel+0x166>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b08      	cmp	r3, #8
 800755e:	d04e      	beq.n	80075fe <HAL_TIM_PWM_ConfigChannel+0xde>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b08      	cmp	r3, #8
 8007564:	d900      	bls.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x48>
 8007566:	e08e      	b.n	8007686 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_TIM_PWM_ConfigChannel+0x56>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b04      	cmp	r3, #4
 8007572:	d021      	beq.n	80075b8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8007574:	e087      	b.n	8007686 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	0011      	movs	r1, r2
 800757e:	0018      	movs	r0, r3
 8007580:	f000 fa10 	bl	80079a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699a      	ldr	r2, [r3, #24]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2108      	movs	r1, #8
 8007590:	430a      	orrs	r2, r1
 8007592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2104      	movs	r1, #4
 80075a0:	438a      	bics	r2, r1
 80075a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6999      	ldr	r1, [r3, #24]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	619a      	str	r2, [r3, #24]
      break;
 80075b6:	e06b      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	0011      	movs	r1, r2
 80075c0:	0018      	movs	r0, r3
 80075c2:	f000 fa77 	bl	8007ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2180      	movs	r1, #128	; 0x80
 80075d2:	0109      	lsls	r1, r1, #4
 80075d4:	430a      	orrs	r2, r1
 80075d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4931      	ldr	r1, [pc, #196]	; (80076a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80075e4:	400a      	ands	r2, r1
 80075e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6999      	ldr	r1, [r3, #24]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	021a      	lsls	r2, r3, #8
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	619a      	str	r2, [r3, #24]
      break;
 80075fc:	e048      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	0011      	movs	r1, r2
 8007606:	0018      	movs	r0, r3
 8007608:	f000 fad8 	bl	8007bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	69da      	ldr	r2, [r3, #28]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2108      	movs	r1, #8
 8007618:	430a      	orrs	r2, r1
 800761a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69da      	ldr	r2, [r3, #28]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2104      	movs	r1, #4
 8007628:	438a      	bics	r2, r1
 800762a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	69d9      	ldr	r1, [r3, #28]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	61da      	str	r2, [r3, #28]
      break;
 800763e:	e027      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	0011      	movs	r1, r2
 8007648:	0018      	movs	r0, r3
 800764a:	f000 fb3d 	bl	8007cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69da      	ldr	r2, [r3, #28]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2180      	movs	r1, #128	; 0x80
 800765a:	0109      	lsls	r1, r1, #4
 800765c:	430a      	orrs	r2, r1
 800765e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	69da      	ldr	r2, [r3, #28]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	490f      	ldr	r1, [pc, #60]	; (80076a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800766c:	400a      	ands	r2, r1
 800766e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	69d9      	ldr	r1, [r3, #28]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	021a      	lsls	r2, r3, #8
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	61da      	str	r2, [r3, #28]
      break;
 8007684:	e004      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8007686:	2317      	movs	r3, #23
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	2201      	movs	r2, #1
 800768c:	701a      	strb	r2, [r3, #0]
      break;
 800768e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	223c      	movs	r2, #60	; 0x3c
 8007694:	2100      	movs	r1, #0
 8007696:	5499      	strb	r1, [r3, r2]

  return status;
 8007698:	2317      	movs	r3, #23
 800769a:	18fb      	adds	r3, r7, r3
 800769c:	781b      	ldrb	r3, [r3, #0]
}
 800769e:	0018      	movs	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b006      	add	sp, #24
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	46c0      	nop			; (mov r8, r8)
 80076a8:	fffffbff 	.word	0xfffffbff

080076ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076b6:	230f      	movs	r3, #15
 80076b8:	18fb      	adds	r3, r7, r3
 80076ba:	2200      	movs	r2, #0
 80076bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	223c      	movs	r2, #60	; 0x3c
 80076c2:	5c9b      	ldrb	r3, [r3, r2]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_TIM_ConfigClockSource+0x20>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e0bc      	b.n	8007846 <HAL_TIM_ConfigClockSource+0x19a>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	223c      	movs	r2, #60	; 0x3c
 80076d0:	2101      	movs	r1, #1
 80076d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	223d      	movs	r2, #61	; 0x3d
 80076d8:	2102      	movs	r1, #2
 80076da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2277      	movs	r2, #119	; 0x77
 80076e8:	4393      	bics	r3, r2
 80076ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4a58      	ldr	r2, [pc, #352]	; (8007850 <HAL_TIM_ConfigClockSource+0x1a4>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2280      	movs	r2, #128	; 0x80
 8007702:	0192      	lsls	r2, r2, #6
 8007704:	4293      	cmp	r3, r2
 8007706:	d040      	beq.n	800778a <HAL_TIM_ConfigClockSource+0xde>
 8007708:	2280      	movs	r2, #128	; 0x80
 800770a:	0192      	lsls	r2, r2, #6
 800770c:	4293      	cmp	r3, r2
 800770e:	d900      	bls.n	8007712 <HAL_TIM_ConfigClockSource+0x66>
 8007710:	e088      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x178>
 8007712:	2280      	movs	r2, #128	; 0x80
 8007714:	0152      	lsls	r2, r2, #5
 8007716:	4293      	cmp	r3, r2
 8007718:	d100      	bne.n	800771c <HAL_TIM_ConfigClockSource+0x70>
 800771a:	e088      	b.n	800782e <HAL_TIM_ConfigClockSource+0x182>
 800771c:	2280      	movs	r2, #128	; 0x80
 800771e:	0152      	lsls	r2, r2, #5
 8007720:	4293      	cmp	r3, r2
 8007722:	d900      	bls.n	8007726 <HAL_TIM_ConfigClockSource+0x7a>
 8007724:	e07e      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x178>
 8007726:	2b70      	cmp	r3, #112	; 0x70
 8007728:	d018      	beq.n	800775c <HAL_TIM_ConfigClockSource+0xb0>
 800772a:	d900      	bls.n	800772e <HAL_TIM_ConfigClockSource+0x82>
 800772c:	e07a      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x178>
 800772e:	2b60      	cmp	r3, #96	; 0x60
 8007730:	d04f      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x126>
 8007732:	d900      	bls.n	8007736 <HAL_TIM_ConfigClockSource+0x8a>
 8007734:	e076      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x178>
 8007736:	2b50      	cmp	r3, #80	; 0x50
 8007738:	d03b      	beq.n	80077b2 <HAL_TIM_ConfigClockSource+0x106>
 800773a:	d900      	bls.n	800773e <HAL_TIM_ConfigClockSource+0x92>
 800773c:	e072      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x178>
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d057      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0x146>
 8007742:	d900      	bls.n	8007746 <HAL_TIM_ConfigClockSource+0x9a>
 8007744:	e06e      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x178>
 8007746:	2b30      	cmp	r3, #48	; 0x30
 8007748:	d063      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x166>
 800774a:	d86b      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x178>
 800774c:	2b20      	cmp	r3, #32
 800774e:	d060      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x166>
 8007750:	d868      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x178>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d05d      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x166>
 8007756:	2b10      	cmp	r3, #16
 8007758:	d05b      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x166>
 800775a:	e063      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	6899      	ldr	r1, [r3, #8]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f000 fb90 	bl	8007e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2277      	movs	r2, #119	; 0x77
 800777c:	4313      	orrs	r3, r2
 800777e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	609a      	str	r2, [r3, #8]
      break;
 8007788:	e052      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	6899      	ldr	r1, [r3, #8]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f000 fb79 	bl	8007e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2180      	movs	r1, #128	; 0x80
 80077aa:	01c9      	lsls	r1, r1, #7
 80077ac:	430a      	orrs	r2, r1
 80077ae:	609a      	str	r2, [r3, #8]
      break;
 80077b0:	e03e      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6859      	ldr	r1, [r3, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	001a      	movs	r2, r3
 80077c0:	f000 faec 	bl	8007d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2150      	movs	r1, #80	; 0x50
 80077ca:	0018      	movs	r0, r3
 80077cc:	f000 fb46 	bl	8007e5c <TIM_ITRx_SetConfig>
      break;
 80077d0:	e02e      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	6859      	ldr	r1, [r3, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	001a      	movs	r2, r3
 80077e0:	f000 fb0a 	bl	8007df8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2160      	movs	r1, #96	; 0x60
 80077ea:	0018      	movs	r0, r3
 80077ec:	f000 fb36 	bl	8007e5c <TIM_ITRx_SetConfig>
      break;
 80077f0:	e01e      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6859      	ldr	r1, [r3, #4]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	001a      	movs	r2, r3
 8007800:	f000 facc 	bl	8007d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2140      	movs	r1, #64	; 0x40
 800780a:	0018      	movs	r0, r3
 800780c:	f000 fb26 	bl	8007e5c <TIM_ITRx_SetConfig>
      break;
 8007810:	e00e      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	0019      	movs	r1, r3
 800781c:	0010      	movs	r0, r2
 800781e:	f000 fb1d 	bl	8007e5c <TIM_ITRx_SetConfig>
      break;
 8007822:	e005      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007824:	230f      	movs	r3, #15
 8007826:	18fb      	adds	r3, r7, r3
 8007828:	2201      	movs	r2, #1
 800782a:	701a      	strb	r2, [r3, #0]
      break;
 800782c:	e000      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800782e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	223d      	movs	r2, #61	; 0x3d
 8007834:	2101      	movs	r1, #1
 8007836:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	223c      	movs	r2, #60	; 0x3c
 800783c:	2100      	movs	r1, #0
 800783e:	5499      	strb	r1, [r3, r2]

  return status;
 8007840:	230f      	movs	r3, #15
 8007842:	18fb      	adds	r3, r7, r3
 8007844:	781b      	ldrb	r3, [r3, #0]
}
 8007846:	0018      	movs	r0, r3
 8007848:	46bd      	mov	sp, r7
 800784a:	b004      	add	sp, #16
 800784c:	bd80      	pop	{r7, pc}
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	ffff00ff 	.word	0xffff00ff

08007854 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800785c:	46c0      	nop			; (mov r8, r8)
 800785e:	46bd      	mov	sp, r7
 8007860:	b002      	add	sp, #8
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800786c:	46c0      	nop			; (mov r8, r8)
 800786e:	46bd      	mov	sp, r7
 8007870:	b002      	add	sp, #8
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800787c:	46c0      	nop			; (mov r8, r8)
 800787e:	46bd      	mov	sp, r7
 8007880:	b002      	add	sp, #8
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800788c:	46c0      	nop			; (mov r8, r8)
 800788e:	46bd      	mov	sp, r7
 8007890:	b002      	add	sp, #8
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800789c:	46c0      	nop			; (mov r8, r8)
 800789e:	46bd      	mov	sp, r7
 80078a0:	b002      	add	sp, #8
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a34      	ldr	r2, [pc, #208]	; (8007988 <TIM_Base_SetConfig+0xe4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d008      	beq.n	80078ce <TIM_Base_SetConfig+0x2a>
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	2380      	movs	r3, #128	; 0x80
 80078c0:	05db      	lsls	r3, r3, #23
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d003      	beq.n	80078ce <TIM_Base_SetConfig+0x2a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a30      	ldr	r2, [pc, #192]	; (800798c <TIM_Base_SetConfig+0xe8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d108      	bne.n	80078e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2270      	movs	r2, #112	; 0x70
 80078d2:	4393      	bics	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a29      	ldr	r2, [pc, #164]	; (8007988 <TIM_Base_SetConfig+0xe4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d018      	beq.n	800791a <TIM_Base_SetConfig+0x76>
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	2380      	movs	r3, #128	; 0x80
 80078ec:	05db      	lsls	r3, r3, #23
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d013      	beq.n	800791a <TIM_Base_SetConfig+0x76>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a25      	ldr	r2, [pc, #148]	; (800798c <TIM_Base_SetConfig+0xe8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00f      	beq.n	800791a <TIM_Base_SetConfig+0x76>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a24      	ldr	r2, [pc, #144]	; (8007990 <TIM_Base_SetConfig+0xec>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00b      	beq.n	800791a <TIM_Base_SetConfig+0x76>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a23      	ldr	r2, [pc, #140]	; (8007994 <TIM_Base_SetConfig+0xf0>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d007      	beq.n	800791a <TIM_Base_SetConfig+0x76>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a22      	ldr	r2, [pc, #136]	; (8007998 <TIM_Base_SetConfig+0xf4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d003      	beq.n	800791a <TIM_Base_SetConfig+0x76>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a21      	ldr	r2, [pc, #132]	; (800799c <TIM_Base_SetConfig+0xf8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d108      	bne.n	800792c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4a20      	ldr	r2, [pc, #128]	; (80079a0 <TIM_Base_SetConfig+0xfc>)
 800791e:	4013      	ands	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2280      	movs	r2, #128	; 0x80
 8007930:	4393      	bics	r3, r2
 8007932:	001a      	movs	r2, r3
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a0c      	ldr	r2, [pc, #48]	; (8007988 <TIM_Base_SetConfig+0xe4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00b      	beq.n	8007972 <TIM_Base_SetConfig+0xce>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a0d      	ldr	r2, [pc, #52]	; (8007994 <TIM_Base_SetConfig+0xf0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d007      	beq.n	8007972 <TIM_Base_SetConfig+0xce>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a0c      	ldr	r2, [pc, #48]	; (8007998 <TIM_Base_SetConfig+0xf4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d003      	beq.n	8007972 <TIM_Base_SetConfig+0xce>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a0b      	ldr	r2, [pc, #44]	; (800799c <TIM_Base_SetConfig+0xf8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d103      	bne.n	800797a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	615a      	str	r2, [r3, #20]
}
 8007980:	46c0      	nop			; (mov r8, r8)
 8007982:	46bd      	mov	sp, r7
 8007984:	b004      	add	sp, #16
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40000400 	.word	0x40000400
 8007990:	40002000 	.word	0x40002000
 8007994:	40014000 	.word	0x40014000
 8007998:	40014400 	.word	0x40014400
 800799c:	40014800 	.word	0x40014800
 80079a0:	fffffcff 	.word	0xfffffcff

080079a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	2201      	movs	r2, #1
 80079b4:	4393      	bics	r3, r2
 80079b6:	001a      	movs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2270      	movs	r2, #112	; 0x70
 80079d2:	4393      	bics	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2203      	movs	r2, #3
 80079da:	4393      	bics	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2202      	movs	r2, #2
 80079ec:	4393      	bics	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a27      	ldr	r2, [pc, #156]	; (8007a9c <TIM_OC1_SetConfig+0xf8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00b      	beq.n	8007a1a <TIM_OC1_SetConfig+0x76>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a26      	ldr	r2, [pc, #152]	; (8007aa0 <TIM_OC1_SetConfig+0xfc>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d007      	beq.n	8007a1a <TIM_OC1_SetConfig+0x76>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a25      	ldr	r2, [pc, #148]	; (8007aa4 <TIM_OC1_SetConfig+0x100>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d003      	beq.n	8007a1a <TIM_OC1_SetConfig+0x76>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a24      	ldr	r2, [pc, #144]	; (8007aa8 <TIM_OC1_SetConfig+0x104>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d10c      	bne.n	8007a34 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	4393      	bics	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2204      	movs	r2, #4
 8007a30:	4393      	bics	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a19      	ldr	r2, [pc, #100]	; (8007a9c <TIM_OC1_SetConfig+0xf8>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00b      	beq.n	8007a54 <TIM_OC1_SetConfig+0xb0>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a18      	ldr	r2, [pc, #96]	; (8007aa0 <TIM_OC1_SetConfig+0xfc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d007      	beq.n	8007a54 <TIM_OC1_SetConfig+0xb0>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a17      	ldr	r2, [pc, #92]	; (8007aa4 <TIM_OC1_SetConfig+0x100>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d003      	beq.n	8007a54 <TIM_OC1_SetConfig+0xb0>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a16      	ldr	r2, [pc, #88]	; (8007aa8 <TIM_OC1_SetConfig+0x104>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d111      	bne.n	8007a78 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	4a15      	ldr	r2, [pc, #84]	; (8007aac <TIM_OC1_SetConfig+0x108>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	4a14      	ldr	r2, [pc, #80]	; (8007ab0 <TIM_OC1_SetConfig+0x10c>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	621a      	str	r2, [r3, #32]
}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b006      	add	sp, #24
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	40012c00 	.word	0x40012c00
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800
 8007aac:	fffffeff 	.word	0xfffffeff
 8007ab0:	fffffdff 	.word	0xfffffdff

08007ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	2210      	movs	r2, #16
 8007ac4:	4393      	bics	r3, r2
 8007ac6:	001a      	movs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4a2e      	ldr	r2, [pc, #184]	; (8007b9c <TIM_OC2_SetConfig+0xe8>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <TIM_OC2_SetConfig+0xec>)
 8007aea:	4013      	ands	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2220      	movs	r2, #32
 8007afe:	4393      	bics	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a24      	ldr	r2, [pc, #144]	; (8007ba4 <TIM_OC2_SetConfig+0xf0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d10d      	bne.n	8007b32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2280      	movs	r2, #128	; 0x80
 8007b1a:	4393      	bics	r3, r2
 8007b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2240      	movs	r2, #64	; 0x40
 8007b2e:	4393      	bics	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <TIM_OC2_SetConfig+0xf0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00b      	beq.n	8007b52 <TIM_OC2_SetConfig+0x9e>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a1a      	ldr	r2, [pc, #104]	; (8007ba8 <TIM_OC2_SetConfig+0xf4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d007      	beq.n	8007b52 <TIM_OC2_SetConfig+0x9e>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <TIM_OC2_SetConfig+0xf8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d003      	beq.n	8007b52 <TIM_OC2_SetConfig+0x9e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a18      	ldr	r2, [pc, #96]	; (8007bb0 <TIM_OC2_SetConfig+0xfc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d113      	bne.n	8007b7a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	4a17      	ldr	r2, [pc, #92]	; (8007bb4 <TIM_OC2_SetConfig+0x100>)
 8007b56:	4013      	ands	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	4a16      	ldr	r2, [pc, #88]	; (8007bb8 <TIM_OC2_SetConfig+0x104>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	621a      	str	r2, [r3, #32]
}
 8007b94:	46c0      	nop			; (mov r8, r8)
 8007b96:	46bd      	mov	sp, r7
 8007b98:	b006      	add	sp, #24
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	ffff8fff 	.word	0xffff8fff
 8007ba0:	fffffcff 	.word	0xfffffcff
 8007ba4:	40012c00 	.word	0x40012c00
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40014400 	.word	0x40014400
 8007bb0:	40014800 	.word	0x40014800
 8007bb4:	fffffbff 	.word	0xfffffbff
 8007bb8:	fffff7ff 	.word	0xfffff7ff

08007bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	4a35      	ldr	r2, [pc, #212]	; (8007ca0 <TIM_OC3_SetConfig+0xe4>)
 8007bcc:	401a      	ands	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2270      	movs	r2, #112	; 0x70
 8007be8:	4393      	bics	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2203      	movs	r2, #3
 8007bf0:	4393      	bics	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	4a28      	ldr	r2, [pc, #160]	; (8007ca4 <TIM_OC3_SetConfig+0xe8>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a24      	ldr	r2, [pc, #144]	; (8007ca8 <TIM_OC3_SetConfig+0xec>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d10d      	bne.n	8007c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	4a23      	ldr	r2, [pc, #140]	; (8007cac <TIM_OC3_SetConfig+0xf0>)
 8007c1e:	4013      	ands	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	4a1f      	ldr	r2, [pc, #124]	; (8007cb0 <TIM_OC3_SetConfig+0xf4>)
 8007c32:	4013      	ands	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a1b      	ldr	r2, [pc, #108]	; (8007ca8 <TIM_OC3_SetConfig+0xec>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00b      	beq.n	8007c56 <TIM_OC3_SetConfig+0x9a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <TIM_OC3_SetConfig+0xf8>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d007      	beq.n	8007c56 <TIM_OC3_SetConfig+0x9a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1b      	ldr	r2, [pc, #108]	; (8007cb8 <TIM_OC3_SetConfig+0xfc>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <TIM_OC3_SetConfig+0x9a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1a      	ldr	r2, [pc, #104]	; (8007cbc <TIM_OC3_SetConfig+0x100>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d113      	bne.n	8007c7e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	4a19      	ldr	r2, [pc, #100]	; (8007cc0 <TIM_OC3_SetConfig+0x104>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	4a18      	ldr	r2, [pc, #96]	; (8007cc4 <TIM_OC3_SetConfig+0x108>)
 8007c62:	4013      	ands	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	621a      	str	r2, [r3, #32]
}
 8007c98:	46c0      	nop			; (mov r8, r8)
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	b006      	add	sp, #24
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	fffffeff 	.word	0xfffffeff
 8007ca4:	fffffdff 	.word	0xfffffdff
 8007ca8:	40012c00 	.word	0x40012c00
 8007cac:	fffff7ff 	.word	0xfffff7ff
 8007cb0:	fffffbff 	.word	0xfffffbff
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800
 8007cc0:	ffffefff 	.word	0xffffefff
 8007cc4:	ffffdfff 	.word	0xffffdfff

08007cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	4a28      	ldr	r2, [pc, #160]	; (8007d78 <TIM_OC4_SetConfig+0xb0>)
 8007cd8:	401a      	ands	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4a22      	ldr	r2, [pc, #136]	; (8007d7c <TIM_OC4_SetConfig+0xb4>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4a21      	ldr	r2, [pc, #132]	; (8007d80 <TIM_OC4_SetConfig+0xb8>)
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <TIM_OC4_SetConfig+0xbc>)
 8007d10:	4013      	ands	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	031b      	lsls	r3, r3, #12
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <TIM_OC4_SetConfig+0xc0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00b      	beq.n	8007d40 <TIM_OC4_SetConfig+0x78>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a18      	ldr	r2, [pc, #96]	; (8007d8c <TIM_OC4_SetConfig+0xc4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d007      	beq.n	8007d40 <TIM_OC4_SetConfig+0x78>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a17      	ldr	r2, [pc, #92]	; (8007d90 <TIM_OC4_SetConfig+0xc8>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <TIM_OC4_SetConfig+0x78>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a16      	ldr	r2, [pc, #88]	; (8007d94 <TIM_OC4_SetConfig+0xcc>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d109      	bne.n	8007d54 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	4a15      	ldr	r2, [pc, #84]	; (8007d98 <TIM_OC4_SetConfig+0xd0>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	019b      	lsls	r3, r3, #6
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	621a      	str	r2, [r3, #32]
}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b006      	add	sp, #24
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	ffffefff 	.word	0xffffefff
 8007d7c:	ffff8fff 	.word	0xffff8fff
 8007d80:	fffffcff 	.word	0xfffffcff
 8007d84:	ffffdfff 	.word	0xffffdfff
 8007d88:	40012c00 	.word	0x40012c00
 8007d8c:	40014000 	.word	0x40014000
 8007d90:	40014400 	.word	0x40014400
 8007d94:	40014800 	.word	0x40014800
 8007d98:	ffffbfff 	.word	0xffffbfff

08007d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	2201      	movs	r2, #1
 8007db4:	4393      	bics	r3, r2
 8007db6:	001a      	movs	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	22f0      	movs	r2, #240	; 0xf0
 8007dc6:	4393      	bics	r3, r2
 8007dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	011b      	lsls	r3, r3, #4
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	220a      	movs	r2, #10
 8007dd8:	4393      	bics	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	621a      	str	r2, [r3, #32]
}
 8007df0:	46c0      	nop			; (mov r8, r8)
 8007df2:	46bd      	mov	sp, r7
 8007df4:	b006      	add	sp, #24
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	2210      	movs	r2, #16
 8007e0a:	4393      	bics	r3, r2
 8007e0c:	001a      	movs	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	4a0d      	ldr	r2, [pc, #52]	; (8007e58 <TIM_TI2_ConfigInputStage+0x60>)
 8007e22:	4013      	ands	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	031b      	lsls	r3, r3, #12
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	22a0      	movs	r2, #160	; 0xa0
 8007e34:	4393      	bics	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	621a      	str	r2, [r3, #32]
}
 8007e4e:	46c0      	nop			; (mov r8, r8)
 8007e50:	46bd      	mov	sp, r7
 8007e52:	b006      	add	sp, #24
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	46c0      	nop			; (mov r8, r8)
 8007e58:	ffff0fff 	.word	0xffff0fff

08007e5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2270      	movs	r2, #112	; 0x70
 8007e70:	4393      	bics	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	2207      	movs	r2, #7
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	609a      	str	r2, [r3, #8]
}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	b004      	add	sp, #16
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	4a09      	ldr	r2, [pc, #36]	; (8007ecc <TIM_ETR_SetConfig+0x3c>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	021a      	lsls	r2, r3, #8
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	609a      	str	r2, [r3, #8]
}
 8007ec4:	46c0      	nop			; (mov r8, r8)
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	b006      	add	sp, #24
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	ffff00ff 	.word	0xffff00ff

08007ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	221f      	movs	r2, #31
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	409a      	lsls	r2, r3
 8007ee6:	0013      	movs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	43d2      	mvns	r2, r2
 8007ef2:	401a      	ands	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a1a      	ldr	r2, [r3, #32]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	211f      	movs	r1, #31
 8007f00:	400b      	ands	r3, r1
 8007f02:	6879      	ldr	r1, [r7, #4]
 8007f04:	4099      	lsls	r1, r3
 8007f06:	000b      	movs	r3, r1
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	621a      	str	r2, [r3, #32]
}
 8007f0e:	46c0      	nop			; (mov r8, r8)
 8007f10:	46bd      	mov	sp, r7
 8007f12:	b006      	add	sp, #24
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	223c      	movs	r2, #60	; 0x3c
 8007f26:	5c9b      	ldrb	r3, [r3, r2]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e047      	b.n	8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	223c      	movs	r2, #60	; 0x3c
 8007f34:	2101      	movs	r1, #1
 8007f36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	223d      	movs	r2, #61	; 0x3d
 8007f3c:	2102      	movs	r1, #2
 8007f3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2270      	movs	r2, #112	; 0x70
 8007f54:	4393      	bics	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a16      	ldr	r2, [pc, #88]	; (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00f      	beq.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	2380      	movs	r3, #128	; 0x80
 8007f7a:	05db      	lsls	r3, r3, #23
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d009      	beq.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a10      	ldr	r2, [pc, #64]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d10c      	bne.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2280      	movs	r2, #128	; 0x80
 8007f98:	4393      	bics	r3, r2
 8007f9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	223d      	movs	r2, #61	; 0x3d
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	223c      	movs	r2, #60	; 0x3c
 8007fba:	2100      	movs	r1, #0
 8007fbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	0018      	movs	r0, r3
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	b004      	add	sp, #16
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	40012c00 	.word	0x40012c00
 8007fcc:	40000400 	.word	0x40000400
 8007fd0:	40014000 	.word	0x40014000

08007fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fdc:	46c0      	nop			; (mov r8, r8)
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	b002      	add	sp, #8
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fec:	46c0      	nop			; (mov r8, r8)
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	b002      	add	sp, #8
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <__errno>:
 8007ff4:	4b01      	ldr	r3, [pc, #4]	; (8007ffc <__errno+0x8>)
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	4770      	bx	lr
 8007ffa:	46c0      	nop			; (mov r8, r8)
 8007ffc:	20000014 	.word	0x20000014

08008000 <__libc_init_array>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	2600      	movs	r6, #0
 8008004:	4d0c      	ldr	r5, [pc, #48]	; (8008038 <__libc_init_array+0x38>)
 8008006:	4c0d      	ldr	r4, [pc, #52]	; (800803c <__libc_init_array+0x3c>)
 8008008:	1b64      	subs	r4, r4, r5
 800800a:	10a4      	asrs	r4, r4, #2
 800800c:	42a6      	cmp	r6, r4
 800800e:	d109      	bne.n	8008024 <__libc_init_array+0x24>
 8008010:	2600      	movs	r6, #0
 8008012:	f003 f823 	bl	800b05c <_init>
 8008016:	4d0a      	ldr	r5, [pc, #40]	; (8008040 <__libc_init_array+0x40>)
 8008018:	4c0a      	ldr	r4, [pc, #40]	; (8008044 <__libc_init_array+0x44>)
 800801a:	1b64      	subs	r4, r4, r5
 800801c:	10a4      	asrs	r4, r4, #2
 800801e:	42a6      	cmp	r6, r4
 8008020:	d105      	bne.n	800802e <__libc_init_array+0x2e>
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	00b3      	lsls	r3, r6, #2
 8008026:	58eb      	ldr	r3, [r5, r3]
 8008028:	4798      	blx	r3
 800802a:	3601      	adds	r6, #1
 800802c:	e7ee      	b.n	800800c <__libc_init_array+0xc>
 800802e:	00b3      	lsls	r3, r6, #2
 8008030:	58eb      	ldr	r3, [r5, r3]
 8008032:	4798      	blx	r3
 8008034:	3601      	adds	r6, #1
 8008036:	e7f2      	b.n	800801e <__libc_init_array+0x1e>
 8008038:	0800b638 	.word	0x0800b638
 800803c:	0800b638 	.word	0x0800b638
 8008040:	0800b638 	.word	0x0800b638
 8008044:	0800b63c 	.word	0x0800b63c

08008048 <memset>:
 8008048:	0003      	movs	r3, r0
 800804a:	1882      	adds	r2, r0, r2
 800804c:	4293      	cmp	r3, r2
 800804e:	d100      	bne.n	8008052 <memset+0xa>
 8008050:	4770      	bx	lr
 8008052:	7019      	strb	r1, [r3, #0]
 8008054:	3301      	adds	r3, #1
 8008056:	e7f9      	b.n	800804c <memset+0x4>

08008058 <__cvt>:
 8008058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805a:	001e      	movs	r6, r3
 800805c:	2300      	movs	r3, #0
 800805e:	0014      	movs	r4, r2
 8008060:	b08b      	sub	sp, #44	; 0x2c
 8008062:	429e      	cmp	r6, r3
 8008064:	da04      	bge.n	8008070 <__cvt+0x18>
 8008066:	2180      	movs	r1, #128	; 0x80
 8008068:	0609      	lsls	r1, r1, #24
 800806a:	1873      	adds	r3, r6, r1
 800806c:	001e      	movs	r6, r3
 800806e:	232d      	movs	r3, #45	; 0x2d
 8008070:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008072:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008074:	7013      	strb	r3, [r2, #0]
 8008076:	2320      	movs	r3, #32
 8008078:	2203      	movs	r2, #3
 800807a:	439f      	bics	r7, r3
 800807c:	2f46      	cmp	r7, #70	; 0x46
 800807e:	d007      	beq.n	8008090 <__cvt+0x38>
 8008080:	003b      	movs	r3, r7
 8008082:	3b45      	subs	r3, #69	; 0x45
 8008084:	4259      	negs	r1, r3
 8008086:	414b      	adcs	r3, r1
 8008088:	9910      	ldr	r1, [sp, #64]	; 0x40
 800808a:	3a01      	subs	r2, #1
 800808c:	18cb      	adds	r3, r1, r3
 800808e:	9310      	str	r3, [sp, #64]	; 0x40
 8008090:	ab09      	add	r3, sp, #36	; 0x24
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	ab08      	add	r3, sp, #32
 8008096:	9303      	str	r3, [sp, #12]
 8008098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800809a:	9200      	str	r2, [sp, #0]
 800809c:	9302      	str	r3, [sp, #8]
 800809e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080a0:	0022      	movs	r2, r4
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	0033      	movs	r3, r6
 80080a6:	f000 fcd1 	bl	8008a4c <_dtoa_r>
 80080aa:	0005      	movs	r5, r0
 80080ac:	2f47      	cmp	r7, #71	; 0x47
 80080ae:	d102      	bne.n	80080b6 <__cvt+0x5e>
 80080b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080b2:	07db      	lsls	r3, r3, #31
 80080b4:	d528      	bpl.n	8008108 <__cvt+0xb0>
 80080b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080b8:	18eb      	adds	r3, r5, r3
 80080ba:	9307      	str	r3, [sp, #28]
 80080bc:	2f46      	cmp	r7, #70	; 0x46
 80080be:	d114      	bne.n	80080ea <__cvt+0x92>
 80080c0:	782b      	ldrb	r3, [r5, #0]
 80080c2:	2b30      	cmp	r3, #48	; 0x30
 80080c4:	d10c      	bne.n	80080e0 <__cvt+0x88>
 80080c6:	2200      	movs	r2, #0
 80080c8:	2300      	movs	r3, #0
 80080ca:	0020      	movs	r0, r4
 80080cc:	0031      	movs	r1, r6
 80080ce:	f7f8 f9bd 	bl	800044c <__aeabi_dcmpeq>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d104      	bne.n	80080e0 <__cvt+0x88>
 80080d6:	2301      	movs	r3, #1
 80080d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080da:	1a9b      	subs	r3, r3, r2
 80080dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080e2:	9a07      	ldr	r2, [sp, #28]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	18d3      	adds	r3, r2, r3
 80080e8:	9307      	str	r3, [sp, #28]
 80080ea:	2200      	movs	r2, #0
 80080ec:	2300      	movs	r3, #0
 80080ee:	0020      	movs	r0, r4
 80080f0:	0031      	movs	r1, r6
 80080f2:	f7f8 f9ab 	bl	800044c <__aeabi_dcmpeq>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d001      	beq.n	80080fe <__cvt+0xa6>
 80080fa:	9b07      	ldr	r3, [sp, #28]
 80080fc:	9309      	str	r3, [sp, #36]	; 0x24
 80080fe:	2230      	movs	r2, #48	; 0x30
 8008100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008102:	9907      	ldr	r1, [sp, #28]
 8008104:	428b      	cmp	r3, r1
 8008106:	d306      	bcc.n	8008116 <__cvt+0xbe>
 8008108:	0028      	movs	r0, r5
 800810a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800810e:	1b5b      	subs	r3, r3, r5
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	b00b      	add	sp, #44	; 0x2c
 8008114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008116:	1c59      	adds	r1, r3, #1
 8008118:	9109      	str	r1, [sp, #36]	; 0x24
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	e7f0      	b.n	8008100 <__cvt+0xa8>

0800811e <__exponent>:
 800811e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008120:	1c83      	adds	r3, r0, #2
 8008122:	b087      	sub	sp, #28
 8008124:	9303      	str	r3, [sp, #12]
 8008126:	0005      	movs	r5, r0
 8008128:	000c      	movs	r4, r1
 800812a:	232b      	movs	r3, #43	; 0x2b
 800812c:	7002      	strb	r2, [r0, #0]
 800812e:	2900      	cmp	r1, #0
 8008130:	da01      	bge.n	8008136 <__exponent+0x18>
 8008132:	424c      	negs	r4, r1
 8008134:	3302      	adds	r3, #2
 8008136:	706b      	strb	r3, [r5, #1]
 8008138:	2c09      	cmp	r4, #9
 800813a:	dd31      	ble.n	80081a0 <__exponent+0x82>
 800813c:	270a      	movs	r7, #10
 800813e:	ab04      	add	r3, sp, #16
 8008140:	1dde      	adds	r6, r3, #7
 8008142:	0020      	movs	r0, r4
 8008144:	0039      	movs	r1, r7
 8008146:	9601      	str	r6, [sp, #4]
 8008148:	f7f8 f96a 	bl	8000420 <__aeabi_idivmod>
 800814c:	3e01      	subs	r6, #1
 800814e:	3130      	adds	r1, #48	; 0x30
 8008150:	0020      	movs	r0, r4
 8008152:	7031      	strb	r1, [r6, #0]
 8008154:	0039      	movs	r1, r7
 8008156:	9402      	str	r4, [sp, #8]
 8008158:	f7f8 f87c 	bl	8000254 <__divsi3>
 800815c:	9b02      	ldr	r3, [sp, #8]
 800815e:	0004      	movs	r4, r0
 8008160:	2b63      	cmp	r3, #99	; 0x63
 8008162:	dcee      	bgt.n	8008142 <__exponent+0x24>
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	3430      	adds	r4, #48	; 0x30
 8008168:	1e9a      	subs	r2, r3, #2
 800816a:	0013      	movs	r3, r2
 800816c:	9903      	ldr	r1, [sp, #12]
 800816e:	7014      	strb	r4, [r2, #0]
 8008170:	a804      	add	r0, sp, #16
 8008172:	3007      	adds	r0, #7
 8008174:	4298      	cmp	r0, r3
 8008176:	d80e      	bhi.n	8008196 <__exponent+0x78>
 8008178:	ab04      	add	r3, sp, #16
 800817a:	3307      	adds	r3, #7
 800817c:	2000      	movs	r0, #0
 800817e:	429a      	cmp	r2, r3
 8008180:	d804      	bhi.n	800818c <__exponent+0x6e>
 8008182:	ab04      	add	r3, sp, #16
 8008184:	3009      	adds	r0, #9
 8008186:	18c0      	adds	r0, r0, r3
 8008188:	9b01      	ldr	r3, [sp, #4]
 800818a:	1ac0      	subs	r0, r0, r3
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	1818      	adds	r0, r3, r0
 8008190:	1b40      	subs	r0, r0, r5
 8008192:	b007      	add	sp, #28
 8008194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008196:	7818      	ldrb	r0, [r3, #0]
 8008198:	3301      	adds	r3, #1
 800819a:	7008      	strb	r0, [r1, #0]
 800819c:	3101      	adds	r1, #1
 800819e:	e7e7      	b.n	8008170 <__exponent+0x52>
 80081a0:	2330      	movs	r3, #48	; 0x30
 80081a2:	18e4      	adds	r4, r4, r3
 80081a4:	70ab      	strb	r3, [r5, #2]
 80081a6:	1d28      	adds	r0, r5, #4
 80081a8:	70ec      	strb	r4, [r5, #3]
 80081aa:	e7f1      	b.n	8008190 <__exponent+0x72>

080081ac <_printf_float>:
 80081ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ae:	b095      	sub	sp, #84	; 0x54
 80081b0:	000c      	movs	r4, r1
 80081b2:	9209      	str	r2, [sp, #36]	; 0x24
 80081b4:	001e      	movs	r6, r3
 80081b6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80081b8:	0007      	movs	r7, r0
 80081ba:	f001 fa61 	bl	8009680 <_localeconv_r>
 80081be:	6803      	ldr	r3, [r0, #0]
 80081c0:	0018      	movs	r0, r3
 80081c2:	930c      	str	r3, [sp, #48]	; 0x30
 80081c4:	f7f7 ffa0 	bl	8000108 <strlen>
 80081c8:	2300      	movs	r3, #0
 80081ca:	9312      	str	r3, [sp, #72]	; 0x48
 80081cc:	7e23      	ldrb	r3, [r4, #24]
 80081ce:	2207      	movs	r2, #7
 80081d0:	930a      	str	r3, [sp, #40]	; 0x28
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	900e      	str	r0, [sp, #56]	; 0x38
 80081d6:	930d      	str	r3, [sp, #52]	; 0x34
 80081d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081da:	682b      	ldr	r3, [r5, #0]
 80081dc:	05c9      	lsls	r1, r1, #23
 80081de:	d547      	bpl.n	8008270 <_printf_float+0xc4>
 80081e0:	189b      	adds	r3, r3, r2
 80081e2:	4393      	bics	r3, r2
 80081e4:	001a      	movs	r2, r3
 80081e6:	3208      	adds	r2, #8
 80081e8:	602a      	str	r2, [r5, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	64a2      	str	r2, [r4, #72]	; 0x48
 80081f0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80081f2:	2201      	movs	r2, #1
 80081f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80081f6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80081f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80081fa:	006b      	lsls	r3, r5, #1
 80081fc:	085b      	lsrs	r3, r3, #1
 80081fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008200:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008202:	4ba7      	ldr	r3, [pc, #668]	; (80084a0 <_printf_float+0x2f4>)
 8008204:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008206:	4252      	negs	r2, r2
 8008208:	f7fa fd8e 	bl	8002d28 <__aeabi_dcmpun>
 800820c:	2800      	cmp	r0, #0
 800820e:	d131      	bne.n	8008274 <_printf_float+0xc8>
 8008210:	2201      	movs	r2, #1
 8008212:	4ba3      	ldr	r3, [pc, #652]	; (80084a0 <_printf_float+0x2f4>)
 8008214:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008216:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008218:	4252      	negs	r2, r2
 800821a:	f7f8 f927 	bl	800046c <__aeabi_dcmple>
 800821e:	2800      	cmp	r0, #0
 8008220:	d128      	bne.n	8008274 <_printf_float+0xc8>
 8008222:	2200      	movs	r2, #0
 8008224:	2300      	movs	r3, #0
 8008226:	0029      	movs	r1, r5
 8008228:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800822a:	f7f8 f915 	bl	8000458 <__aeabi_dcmplt>
 800822e:	2800      	cmp	r0, #0
 8008230:	d003      	beq.n	800823a <_printf_float+0x8e>
 8008232:	0023      	movs	r3, r4
 8008234:	222d      	movs	r2, #45	; 0x2d
 8008236:	3343      	adds	r3, #67	; 0x43
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823c:	4d99      	ldr	r5, [pc, #612]	; (80084a4 <_printf_float+0x2f8>)
 800823e:	2b47      	cmp	r3, #71	; 0x47
 8008240:	d900      	bls.n	8008244 <_printf_float+0x98>
 8008242:	4d99      	ldr	r5, [pc, #612]	; (80084a8 <_printf_float+0x2fc>)
 8008244:	2303      	movs	r3, #3
 8008246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008248:	6123      	str	r3, [r4, #16]
 800824a:	3301      	adds	r3, #1
 800824c:	439a      	bics	r2, r3
 800824e:	2300      	movs	r3, #0
 8008250:	6022      	str	r2, [r4, #0]
 8008252:	930b      	str	r3, [sp, #44]	; 0x2c
 8008254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008256:	0021      	movs	r1, r4
 8008258:	0038      	movs	r0, r7
 800825a:	9600      	str	r6, [sp, #0]
 800825c:	aa13      	add	r2, sp, #76	; 0x4c
 800825e:	f000 f9e7 	bl	8008630 <_printf_common>
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	d000      	beq.n	8008268 <_printf_float+0xbc>
 8008266:	e0a2      	b.n	80083ae <_printf_float+0x202>
 8008268:	2001      	movs	r0, #1
 800826a:	4240      	negs	r0, r0
 800826c:	b015      	add	sp, #84	; 0x54
 800826e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008270:	3307      	adds	r3, #7
 8008272:	e7b6      	b.n	80081e2 <_printf_float+0x36>
 8008274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008276:	002b      	movs	r3, r5
 8008278:	0010      	movs	r0, r2
 800827a:	0029      	movs	r1, r5
 800827c:	f7fa fd54 	bl	8002d28 <__aeabi_dcmpun>
 8008280:	2800      	cmp	r0, #0
 8008282:	d00b      	beq.n	800829c <_printf_float+0xf0>
 8008284:	2d00      	cmp	r5, #0
 8008286:	da03      	bge.n	8008290 <_printf_float+0xe4>
 8008288:	0023      	movs	r3, r4
 800828a:	222d      	movs	r2, #45	; 0x2d
 800828c:	3343      	adds	r3, #67	; 0x43
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008292:	4d86      	ldr	r5, [pc, #536]	; (80084ac <_printf_float+0x300>)
 8008294:	2b47      	cmp	r3, #71	; 0x47
 8008296:	d9d5      	bls.n	8008244 <_printf_float+0x98>
 8008298:	4d85      	ldr	r5, [pc, #532]	; (80084b0 <_printf_float+0x304>)
 800829a:	e7d3      	b.n	8008244 <_printf_float+0x98>
 800829c:	2220      	movs	r2, #32
 800829e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082a0:	6863      	ldr	r3, [r4, #4]
 80082a2:	4391      	bics	r1, r2
 80082a4:	910f      	str	r1, [sp, #60]	; 0x3c
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	d149      	bne.n	800833e <_printf_float+0x192>
 80082aa:	3307      	adds	r3, #7
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	2380      	movs	r3, #128	; 0x80
 80082b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	4313      	orrs	r3, r2
 80082b6:	2200      	movs	r2, #0
 80082b8:	9206      	str	r2, [sp, #24]
 80082ba:	aa12      	add	r2, sp, #72	; 0x48
 80082bc:	9205      	str	r2, [sp, #20]
 80082be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082c0:	a908      	add	r1, sp, #32
 80082c2:	9204      	str	r2, [sp, #16]
 80082c4:	aa11      	add	r2, sp, #68	; 0x44
 80082c6:	9203      	str	r2, [sp, #12]
 80082c8:	2223      	movs	r2, #35	; 0x23
 80082ca:	6023      	str	r3, [r4, #0]
 80082cc:	9301      	str	r3, [sp, #4]
 80082ce:	6863      	ldr	r3, [r4, #4]
 80082d0:	1852      	adds	r2, r2, r1
 80082d2:	9202      	str	r2, [sp, #8]
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	0038      	movs	r0, r7
 80082d8:	002b      	movs	r3, r5
 80082da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082dc:	f7ff febc 	bl	8008058 <__cvt>
 80082e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082e2:	0005      	movs	r5, r0
 80082e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082e6:	2b47      	cmp	r3, #71	; 0x47
 80082e8:	d108      	bne.n	80082fc <_printf_float+0x150>
 80082ea:	1ccb      	adds	r3, r1, #3
 80082ec:	db02      	blt.n	80082f4 <_printf_float+0x148>
 80082ee:	6863      	ldr	r3, [r4, #4]
 80082f0:	4299      	cmp	r1, r3
 80082f2:	dd48      	ble.n	8008386 <_printf_float+0x1da>
 80082f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f6:	3b02      	subs	r3, #2
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	930a      	str	r3, [sp, #40]	; 0x28
 80082fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fe:	2b65      	cmp	r3, #101	; 0x65
 8008300:	d824      	bhi.n	800834c <_printf_float+0x1a0>
 8008302:	0020      	movs	r0, r4
 8008304:	001a      	movs	r2, r3
 8008306:	3901      	subs	r1, #1
 8008308:	3050      	adds	r0, #80	; 0x50
 800830a:	9111      	str	r1, [sp, #68]	; 0x44
 800830c:	f7ff ff07 	bl	800811e <__exponent>
 8008310:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008312:	900b      	str	r0, [sp, #44]	; 0x2c
 8008314:	1813      	adds	r3, r2, r0
 8008316:	6123      	str	r3, [r4, #16]
 8008318:	2a01      	cmp	r2, #1
 800831a:	dc02      	bgt.n	8008322 <_printf_float+0x176>
 800831c:	6822      	ldr	r2, [r4, #0]
 800831e:	07d2      	lsls	r2, r2, #31
 8008320:	d501      	bpl.n	8008326 <_printf_float+0x17a>
 8008322:	3301      	adds	r3, #1
 8008324:	6123      	str	r3, [r4, #16]
 8008326:	2323      	movs	r3, #35	; 0x23
 8008328:	aa08      	add	r2, sp, #32
 800832a:	189b      	adds	r3, r3, r2
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d100      	bne.n	8008334 <_printf_float+0x188>
 8008332:	e78f      	b.n	8008254 <_printf_float+0xa8>
 8008334:	0023      	movs	r3, r4
 8008336:	222d      	movs	r2, #45	; 0x2d
 8008338:	3343      	adds	r3, #67	; 0x43
 800833a:	701a      	strb	r2, [r3, #0]
 800833c:	e78a      	b.n	8008254 <_printf_float+0xa8>
 800833e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008340:	2a47      	cmp	r2, #71	; 0x47
 8008342:	d1b4      	bne.n	80082ae <_printf_float+0x102>
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1b2      	bne.n	80082ae <_printf_float+0x102>
 8008348:	3301      	adds	r3, #1
 800834a:	e7af      	b.n	80082ac <_printf_float+0x100>
 800834c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834e:	2b66      	cmp	r3, #102	; 0x66
 8008350:	d11b      	bne.n	800838a <_printf_float+0x1de>
 8008352:	6863      	ldr	r3, [r4, #4]
 8008354:	2900      	cmp	r1, #0
 8008356:	dd0d      	ble.n	8008374 <_printf_float+0x1c8>
 8008358:	6121      	str	r1, [r4, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d102      	bne.n	8008364 <_printf_float+0x1b8>
 800835e:	6822      	ldr	r2, [r4, #0]
 8008360:	07d2      	lsls	r2, r2, #31
 8008362:	d502      	bpl.n	800836a <_printf_float+0x1be>
 8008364:	3301      	adds	r3, #1
 8008366:	1859      	adds	r1, r3, r1
 8008368:	6121      	str	r1, [r4, #16]
 800836a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800836c:	65a3      	str	r3, [r4, #88]	; 0x58
 800836e:	2300      	movs	r3, #0
 8008370:	930b      	str	r3, [sp, #44]	; 0x2c
 8008372:	e7d8      	b.n	8008326 <_printf_float+0x17a>
 8008374:	2b00      	cmp	r3, #0
 8008376:	d103      	bne.n	8008380 <_printf_float+0x1d4>
 8008378:	2201      	movs	r2, #1
 800837a:	6821      	ldr	r1, [r4, #0]
 800837c:	4211      	tst	r1, r2
 800837e:	d000      	beq.n	8008382 <_printf_float+0x1d6>
 8008380:	1c9a      	adds	r2, r3, #2
 8008382:	6122      	str	r2, [r4, #16]
 8008384:	e7f1      	b.n	800836a <_printf_float+0x1be>
 8008386:	2367      	movs	r3, #103	; 0x67
 8008388:	930a      	str	r3, [sp, #40]	; 0x28
 800838a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800838c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800838e:	4293      	cmp	r3, r2
 8008390:	db06      	blt.n	80083a0 <_printf_float+0x1f4>
 8008392:	6822      	ldr	r2, [r4, #0]
 8008394:	6123      	str	r3, [r4, #16]
 8008396:	07d2      	lsls	r2, r2, #31
 8008398:	d5e7      	bpl.n	800836a <_printf_float+0x1be>
 800839a:	3301      	adds	r3, #1
 800839c:	6123      	str	r3, [r4, #16]
 800839e:	e7e4      	b.n	800836a <_printf_float+0x1be>
 80083a0:	2101      	movs	r1, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dc01      	bgt.n	80083aa <_printf_float+0x1fe>
 80083a6:	1849      	adds	r1, r1, r1
 80083a8:	1ac9      	subs	r1, r1, r3
 80083aa:	1852      	adds	r2, r2, r1
 80083ac:	e7e9      	b.n	8008382 <_printf_float+0x1d6>
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	0553      	lsls	r3, r2, #21
 80083b2:	d407      	bmi.n	80083c4 <_printf_float+0x218>
 80083b4:	6923      	ldr	r3, [r4, #16]
 80083b6:	002a      	movs	r2, r5
 80083b8:	0038      	movs	r0, r7
 80083ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083bc:	47b0      	blx	r6
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	d128      	bne.n	8008414 <_printf_float+0x268>
 80083c2:	e751      	b.n	8008268 <_printf_float+0xbc>
 80083c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c6:	2b65      	cmp	r3, #101	; 0x65
 80083c8:	d800      	bhi.n	80083cc <_printf_float+0x220>
 80083ca:	e0e1      	b.n	8008590 <_printf_float+0x3e4>
 80083cc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80083ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80083d0:	2200      	movs	r2, #0
 80083d2:	2300      	movs	r3, #0
 80083d4:	f7f8 f83a 	bl	800044c <__aeabi_dcmpeq>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d031      	beq.n	8008440 <_printf_float+0x294>
 80083dc:	2301      	movs	r3, #1
 80083de:	0038      	movs	r0, r7
 80083e0:	4a34      	ldr	r2, [pc, #208]	; (80084b4 <_printf_float+0x308>)
 80083e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e4:	47b0      	blx	r6
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	d100      	bne.n	80083ec <_printf_float+0x240>
 80083ea:	e73d      	b.n	8008268 <_printf_float+0xbc>
 80083ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083f0:	4293      	cmp	r3, r2
 80083f2:	db02      	blt.n	80083fa <_printf_float+0x24e>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	07db      	lsls	r3, r3, #31
 80083f8:	d50c      	bpl.n	8008414 <_printf_float+0x268>
 80083fa:	0038      	movs	r0, r7
 80083fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008402:	47b0      	blx	r6
 8008404:	2500      	movs	r5, #0
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d100      	bne.n	800840c <_printf_float+0x260>
 800840a:	e72d      	b.n	8008268 <_printf_float+0xbc>
 800840c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800840e:	3b01      	subs	r3, #1
 8008410:	42ab      	cmp	r3, r5
 8008412:	dc0a      	bgt.n	800842a <_printf_float+0x27e>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	079b      	lsls	r3, r3, #30
 8008418:	d500      	bpl.n	800841c <_printf_float+0x270>
 800841a:	e106      	b.n	800862a <_printf_float+0x47e>
 800841c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800841e:	68e0      	ldr	r0, [r4, #12]
 8008420:	4298      	cmp	r0, r3
 8008422:	db00      	blt.n	8008426 <_printf_float+0x27a>
 8008424:	e722      	b.n	800826c <_printf_float+0xc0>
 8008426:	0018      	movs	r0, r3
 8008428:	e720      	b.n	800826c <_printf_float+0xc0>
 800842a:	0022      	movs	r2, r4
 800842c:	2301      	movs	r3, #1
 800842e:	0038      	movs	r0, r7
 8008430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008432:	321a      	adds	r2, #26
 8008434:	47b0      	blx	r6
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	d100      	bne.n	800843c <_printf_float+0x290>
 800843a:	e715      	b.n	8008268 <_printf_float+0xbc>
 800843c:	3501      	adds	r5, #1
 800843e:	e7e5      	b.n	800840c <_printf_float+0x260>
 8008440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008442:	2b00      	cmp	r3, #0
 8008444:	dc38      	bgt.n	80084b8 <_printf_float+0x30c>
 8008446:	2301      	movs	r3, #1
 8008448:	0038      	movs	r0, r7
 800844a:	4a1a      	ldr	r2, [pc, #104]	; (80084b4 <_printf_float+0x308>)
 800844c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800844e:	47b0      	blx	r6
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d100      	bne.n	8008456 <_printf_float+0x2aa>
 8008454:	e708      	b.n	8008268 <_printf_float+0xbc>
 8008456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008458:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800845a:	4313      	orrs	r3, r2
 800845c:	d102      	bne.n	8008464 <_printf_float+0x2b8>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	07db      	lsls	r3, r3, #31
 8008462:	d5d7      	bpl.n	8008414 <_printf_float+0x268>
 8008464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008466:	0038      	movs	r0, r7
 8008468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800846a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800846c:	47b0      	blx	r6
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	d100      	bne.n	8008474 <_printf_float+0x2c8>
 8008472:	e6f9      	b.n	8008268 <_printf_float+0xbc>
 8008474:	2300      	movs	r3, #0
 8008476:	930a      	str	r3, [sp, #40]	; 0x28
 8008478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800847a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800847c:	425b      	negs	r3, r3
 800847e:	4293      	cmp	r3, r2
 8008480:	dc01      	bgt.n	8008486 <_printf_float+0x2da>
 8008482:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008484:	e797      	b.n	80083b6 <_printf_float+0x20a>
 8008486:	0022      	movs	r2, r4
 8008488:	2301      	movs	r3, #1
 800848a:	0038      	movs	r0, r7
 800848c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800848e:	321a      	adds	r2, #26
 8008490:	47b0      	blx	r6
 8008492:	1c43      	adds	r3, r0, #1
 8008494:	d100      	bne.n	8008498 <_printf_float+0x2ec>
 8008496:	e6e7      	b.n	8008268 <_printf_float+0xbc>
 8008498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849a:	3301      	adds	r3, #1
 800849c:	e7eb      	b.n	8008476 <_printf_float+0x2ca>
 800849e:	46c0      	nop			; (mov r8, r8)
 80084a0:	7fefffff 	.word	0x7fefffff
 80084a4:	0800b1ec 	.word	0x0800b1ec
 80084a8:	0800b1f0 	.word	0x0800b1f0
 80084ac:	0800b1f4 	.word	0x0800b1f4
 80084b0:	0800b1f8 	.word	0x0800b1f8
 80084b4:	0800b1fc 	.word	0x0800b1fc
 80084b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084bc:	920a      	str	r2, [sp, #40]	; 0x28
 80084be:	429a      	cmp	r2, r3
 80084c0:	dd00      	ble.n	80084c4 <_printf_float+0x318>
 80084c2:	930a      	str	r3, [sp, #40]	; 0x28
 80084c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	dc3c      	bgt.n	8008544 <_printf_float+0x398>
 80084ca:	2300      	movs	r3, #0
 80084cc:	930d      	str	r3, [sp, #52]	; 0x34
 80084ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d0:	43db      	mvns	r3, r3
 80084d2:	17db      	asrs	r3, r3, #31
 80084d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80084d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084da:	930b      	str	r3, [sp, #44]	; 0x2c
 80084dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084de:	4013      	ands	r3, r2
 80084e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084e6:	4293      	cmp	r3, r2
 80084e8:	dc34      	bgt.n	8008554 <_printf_float+0x3a8>
 80084ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084ee:	4293      	cmp	r3, r2
 80084f0:	db3d      	blt.n	800856e <_printf_float+0x3c2>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	07db      	lsls	r3, r3, #31
 80084f6:	d43a      	bmi.n	800856e <_printf_float+0x3c2>
 80084f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	1a52      	subs	r2, r2, r1
 8008502:	920a      	str	r2, [sp, #40]	; 0x28
 8008504:	429a      	cmp	r2, r3
 8008506:	dd00      	ble.n	800850a <_printf_float+0x35e>
 8008508:	930a      	str	r3, [sp, #40]	; 0x28
 800850a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800850c:	2b00      	cmp	r3, #0
 800850e:	dc36      	bgt.n	800857e <_printf_float+0x3d2>
 8008510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008512:	2500      	movs	r5, #0
 8008514:	43db      	mvns	r3, r3
 8008516:	17db      	asrs	r3, r3, #31
 8008518:	930b      	str	r3, [sp, #44]	; 0x2c
 800851a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800851c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800851e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008520:	1a9b      	subs	r3, r3, r2
 8008522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008524:	400a      	ands	r2, r1
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	42ab      	cmp	r3, r5
 800852a:	dc00      	bgt.n	800852e <_printf_float+0x382>
 800852c:	e772      	b.n	8008414 <_printf_float+0x268>
 800852e:	0022      	movs	r2, r4
 8008530:	2301      	movs	r3, #1
 8008532:	0038      	movs	r0, r7
 8008534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008536:	321a      	adds	r2, #26
 8008538:	47b0      	blx	r6
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	d100      	bne.n	8008540 <_printf_float+0x394>
 800853e:	e693      	b.n	8008268 <_printf_float+0xbc>
 8008540:	3501      	adds	r5, #1
 8008542:	e7ea      	b.n	800851a <_printf_float+0x36e>
 8008544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008546:	002a      	movs	r2, r5
 8008548:	0038      	movs	r0, r7
 800854a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800854c:	47b0      	blx	r6
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d1bb      	bne.n	80084ca <_printf_float+0x31e>
 8008552:	e689      	b.n	8008268 <_printf_float+0xbc>
 8008554:	0022      	movs	r2, r4
 8008556:	2301      	movs	r3, #1
 8008558:	0038      	movs	r0, r7
 800855a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800855c:	321a      	adds	r2, #26
 800855e:	47b0      	blx	r6
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	d100      	bne.n	8008566 <_printf_float+0x3ba>
 8008564:	e680      	b.n	8008268 <_printf_float+0xbc>
 8008566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008568:	3301      	adds	r3, #1
 800856a:	930d      	str	r3, [sp, #52]	; 0x34
 800856c:	e7b3      	b.n	80084d6 <_printf_float+0x32a>
 800856e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008570:	0038      	movs	r0, r7
 8008572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008576:	47b0      	blx	r6
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d1bd      	bne.n	80084f8 <_printf_float+0x34c>
 800857c:	e674      	b.n	8008268 <_printf_float+0xbc>
 800857e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008580:	0038      	movs	r0, r7
 8008582:	18ea      	adds	r2, r5, r3
 8008584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008588:	47b0      	blx	r6
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d1c0      	bne.n	8008510 <_printf_float+0x364>
 800858e:	e66b      	b.n	8008268 <_printf_float+0xbc>
 8008590:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008592:	2b01      	cmp	r3, #1
 8008594:	dc02      	bgt.n	800859c <_printf_float+0x3f0>
 8008596:	2301      	movs	r3, #1
 8008598:	421a      	tst	r2, r3
 800859a:	d034      	beq.n	8008606 <_printf_float+0x45a>
 800859c:	2301      	movs	r3, #1
 800859e:	002a      	movs	r2, r5
 80085a0:	0038      	movs	r0, r7
 80085a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085a4:	47b0      	blx	r6
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	d100      	bne.n	80085ac <_printf_float+0x400>
 80085aa:	e65d      	b.n	8008268 <_printf_float+0xbc>
 80085ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ae:	0038      	movs	r0, r7
 80085b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085b4:	47b0      	blx	r6
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d100      	bne.n	80085bc <_printf_float+0x410>
 80085ba:	e655      	b.n	8008268 <_printf_float+0xbc>
 80085bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80085be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80085c0:	2200      	movs	r2, #0
 80085c2:	2300      	movs	r3, #0
 80085c4:	f7f7 ff42 	bl	800044c <__aeabi_dcmpeq>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d11a      	bne.n	8008602 <_printf_float+0x456>
 80085cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ce:	1c6a      	adds	r2, r5, #1
 80085d0:	3b01      	subs	r3, #1
 80085d2:	0038      	movs	r0, r7
 80085d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085d6:	47b0      	blx	r6
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d10e      	bne.n	80085fa <_printf_float+0x44e>
 80085dc:	e644      	b.n	8008268 <_printf_float+0xbc>
 80085de:	0022      	movs	r2, r4
 80085e0:	2301      	movs	r3, #1
 80085e2:	0038      	movs	r0, r7
 80085e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085e6:	321a      	adds	r2, #26
 80085e8:	47b0      	blx	r6
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	d100      	bne.n	80085f0 <_printf_float+0x444>
 80085ee:	e63b      	b.n	8008268 <_printf_float+0xbc>
 80085f0:	3501      	adds	r5, #1
 80085f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085f4:	3b01      	subs	r3, #1
 80085f6:	42ab      	cmp	r3, r5
 80085f8:	dcf1      	bgt.n	80085de <_printf_float+0x432>
 80085fa:	0022      	movs	r2, r4
 80085fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085fe:	3250      	adds	r2, #80	; 0x50
 8008600:	e6da      	b.n	80083b8 <_printf_float+0x20c>
 8008602:	2500      	movs	r5, #0
 8008604:	e7f5      	b.n	80085f2 <_printf_float+0x446>
 8008606:	002a      	movs	r2, r5
 8008608:	e7e3      	b.n	80085d2 <_printf_float+0x426>
 800860a:	0022      	movs	r2, r4
 800860c:	2301      	movs	r3, #1
 800860e:	0038      	movs	r0, r7
 8008610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008612:	3219      	adds	r2, #25
 8008614:	47b0      	blx	r6
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d100      	bne.n	800861c <_printf_float+0x470>
 800861a:	e625      	b.n	8008268 <_printf_float+0xbc>
 800861c:	3501      	adds	r5, #1
 800861e:	68e3      	ldr	r3, [r4, #12]
 8008620:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	42ab      	cmp	r3, r5
 8008626:	dcf0      	bgt.n	800860a <_printf_float+0x45e>
 8008628:	e6f8      	b.n	800841c <_printf_float+0x270>
 800862a:	2500      	movs	r5, #0
 800862c:	e7f7      	b.n	800861e <_printf_float+0x472>
 800862e:	46c0      	nop			; (mov r8, r8)

08008630 <_printf_common>:
 8008630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008632:	0015      	movs	r5, r2
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	688a      	ldr	r2, [r1, #8]
 8008638:	690b      	ldr	r3, [r1, #16]
 800863a:	000c      	movs	r4, r1
 800863c:	9000      	str	r0, [sp, #0]
 800863e:	4293      	cmp	r3, r2
 8008640:	da00      	bge.n	8008644 <_printf_common+0x14>
 8008642:	0013      	movs	r3, r2
 8008644:	0022      	movs	r2, r4
 8008646:	602b      	str	r3, [r5, #0]
 8008648:	3243      	adds	r2, #67	; 0x43
 800864a:	7812      	ldrb	r2, [r2, #0]
 800864c:	2a00      	cmp	r2, #0
 800864e:	d001      	beq.n	8008654 <_printf_common+0x24>
 8008650:	3301      	adds	r3, #1
 8008652:	602b      	str	r3, [r5, #0]
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	069b      	lsls	r3, r3, #26
 8008658:	d502      	bpl.n	8008660 <_printf_common+0x30>
 800865a:	682b      	ldr	r3, [r5, #0]
 800865c:	3302      	adds	r3, #2
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	6822      	ldr	r2, [r4, #0]
 8008662:	2306      	movs	r3, #6
 8008664:	0017      	movs	r7, r2
 8008666:	401f      	ands	r7, r3
 8008668:	421a      	tst	r2, r3
 800866a:	d027      	beq.n	80086bc <_printf_common+0x8c>
 800866c:	0023      	movs	r3, r4
 800866e:	3343      	adds	r3, #67	; 0x43
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	1e5a      	subs	r2, r3, #1
 8008674:	4193      	sbcs	r3, r2
 8008676:	6822      	ldr	r2, [r4, #0]
 8008678:	0692      	lsls	r2, r2, #26
 800867a:	d430      	bmi.n	80086de <_printf_common+0xae>
 800867c:	0022      	movs	r2, r4
 800867e:	9901      	ldr	r1, [sp, #4]
 8008680:	9800      	ldr	r0, [sp, #0]
 8008682:	9e08      	ldr	r6, [sp, #32]
 8008684:	3243      	adds	r2, #67	; 0x43
 8008686:	47b0      	blx	r6
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	d025      	beq.n	80086d8 <_printf_common+0xa8>
 800868c:	2306      	movs	r3, #6
 800868e:	6820      	ldr	r0, [r4, #0]
 8008690:	682a      	ldr	r2, [r5, #0]
 8008692:	68e1      	ldr	r1, [r4, #12]
 8008694:	2500      	movs	r5, #0
 8008696:	4003      	ands	r3, r0
 8008698:	2b04      	cmp	r3, #4
 800869a:	d103      	bne.n	80086a4 <_printf_common+0x74>
 800869c:	1a8d      	subs	r5, r1, r2
 800869e:	43eb      	mvns	r3, r5
 80086a0:	17db      	asrs	r3, r3, #31
 80086a2:	401d      	ands	r5, r3
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	6922      	ldr	r2, [r4, #16]
 80086a8:	4293      	cmp	r3, r2
 80086aa:	dd01      	ble.n	80086b0 <_printf_common+0x80>
 80086ac:	1a9b      	subs	r3, r3, r2
 80086ae:	18ed      	adds	r5, r5, r3
 80086b0:	2700      	movs	r7, #0
 80086b2:	42bd      	cmp	r5, r7
 80086b4:	d120      	bne.n	80086f8 <_printf_common+0xc8>
 80086b6:	2000      	movs	r0, #0
 80086b8:	e010      	b.n	80086dc <_printf_common+0xac>
 80086ba:	3701      	adds	r7, #1
 80086bc:	68e3      	ldr	r3, [r4, #12]
 80086be:	682a      	ldr	r2, [r5, #0]
 80086c0:	1a9b      	subs	r3, r3, r2
 80086c2:	42bb      	cmp	r3, r7
 80086c4:	ddd2      	ble.n	800866c <_printf_common+0x3c>
 80086c6:	0022      	movs	r2, r4
 80086c8:	2301      	movs	r3, #1
 80086ca:	9901      	ldr	r1, [sp, #4]
 80086cc:	9800      	ldr	r0, [sp, #0]
 80086ce:	9e08      	ldr	r6, [sp, #32]
 80086d0:	3219      	adds	r2, #25
 80086d2:	47b0      	blx	r6
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d1f0      	bne.n	80086ba <_printf_common+0x8a>
 80086d8:	2001      	movs	r0, #1
 80086da:	4240      	negs	r0, r0
 80086dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086de:	2030      	movs	r0, #48	; 0x30
 80086e0:	18e1      	adds	r1, r4, r3
 80086e2:	3143      	adds	r1, #67	; 0x43
 80086e4:	7008      	strb	r0, [r1, #0]
 80086e6:	0021      	movs	r1, r4
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	3145      	adds	r1, #69	; 0x45
 80086ec:	7809      	ldrb	r1, [r1, #0]
 80086ee:	18a2      	adds	r2, r4, r2
 80086f0:	3243      	adds	r2, #67	; 0x43
 80086f2:	3302      	adds	r3, #2
 80086f4:	7011      	strb	r1, [r2, #0]
 80086f6:	e7c1      	b.n	800867c <_printf_common+0x4c>
 80086f8:	0022      	movs	r2, r4
 80086fa:	2301      	movs	r3, #1
 80086fc:	9901      	ldr	r1, [sp, #4]
 80086fe:	9800      	ldr	r0, [sp, #0]
 8008700:	9e08      	ldr	r6, [sp, #32]
 8008702:	321a      	adds	r2, #26
 8008704:	47b0      	blx	r6
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	d0e6      	beq.n	80086d8 <_printf_common+0xa8>
 800870a:	3701      	adds	r7, #1
 800870c:	e7d1      	b.n	80086b2 <_printf_common+0x82>
	...

08008710 <_printf_i>:
 8008710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008712:	b08b      	sub	sp, #44	; 0x2c
 8008714:	9206      	str	r2, [sp, #24]
 8008716:	000a      	movs	r2, r1
 8008718:	3243      	adds	r2, #67	; 0x43
 800871a:	9307      	str	r3, [sp, #28]
 800871c:	9005      	str	r0, [sp, #20]
 800871e:	9204      	str	r2, [sp, #16]
 8008720:	7e0a      	ldrb	r2, [r1, #24]
 8008722:	000c      	movs	r4, r1
 8008724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008726:	2a78      	cmp	r2, #120	; 0x78
 8008728:	d807      	bhi.n	800873a <_printf_i+0x2a>
 800872a:	2a62      	cmp	r2, #98	; 0x62
 800872c:	d809      	bhi.n	8008742 <_printf_i+0x32>
 800872e:	2a00      	cmp	r2, #0
 8008730:	d100      	bne.n	8008734 <_printf_i+0x24>
 8008732:	e0c1      	b.n	80088b8 <_printf_i+0x1a8>
 8008734:	2a58      	cmp	r2, #88	; 0x58
 8008736:	d100      	bne.n	800873a <_printf_i+0x2a>
 8008738:	e08c      	b.n	8008854 <_printf_i+0x144>
 800873a:	0026      	movs	r6, r4
 800873c:	3642      	adds	r6, #66	; 0x42
 800873e:	7032      	strb	r2, [r6, #0]
 8008740:	e022      	b.n	8008788 <_printf_i+0x78>
 8008742:	0010      	movs	r0, r2
 8008744:	3863      	subs	r0, #99	; 0x63
 8008746:	2815      	cmp	r0, #21
 8008748:	d8f7      	bhi.n	800873a <_printf_i+0x2a>
 800874a:	f7f7 fcef 	bl	800012c <__gnu_thumb1_case_shi>
 800874e:	0016      	.short	0x0016
 8008750:	fff6001f 	.word	0xfff6001f
 8008754:	fff6fff6 	.word	0xfff6fff6
 8008758:	001ffff6 	.word	0x001ffff6
 800875c:	fff6fff6 	.word	0xfff6fff6
 8008760:	fff6fff6 	.word	0xfff6fff6
 8008764:	003600a8 	.word	0x003600a8
 8008768:	fff6009a 	.word	0xfff6009a
 800876c:	00b9fff6 	.word	0x00b9fff6
 8008770:	0036fff6 	.word	0x0036fff6
 8008774:	fff6fff6 	.word	0xfff6fff6
 8008778:	009e      	.short	0x009e
 800877a:	0026      	movs	r6, r4
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	3642      	adds	r6, #66	; 0x42
 8008780:	1d11      	adds	r1, r2, #4
 8008782:	6019      	str	r1, [r3, #0]
 8008784:	6813      	ldr	r3, [r2, #0]
 8008786:	7033      	strb	r3, [r6, #0]
 8008788:	2301      	movs	r3, #1
 800878a:	e0a7      	b.n	80088dc <_printf_i+0x1cc>
 800878c:	6808      	ldr	r0, [r1, #0]
 800878e:	6819      	ldr	r1, [r3, #0]
 8008790:	1d0a      	adds	r2, r1, #4
 8008792:	0605      	lsls	r5, r0, #24
 8008794:	d50b      	bpl.n	80087ae <_printf_i+0x9e>
 8008796:	680d      	ldr	r5, [r1, #0]
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	2d00      	cmp	r5, #0
 800879c:	da03      	bge.n	80087a6 <_printf_i+0x96>
 800879e:	232d      	movs	r3, #45	; 0x2d
 80087a0:	9a04      	ldr	r2, [sp, #16]
 80087a2:	426d      	negs	r5, r5
 80087a4:	7013      	strb	r3, [r2, #0]
 80087a6:	4b61      	ldr	r3, [pc, #388]	; (800892c <_printf_i+0x21c>)
 80087a8:	270a      	movs	r7, #10
 80087aa:	9303      	str	r3, [sp, #12]
 80087ac:	e01b      	b.n	80087e6 <_printf_i+0xd6>
 80087ae:	680d      	ldr	r5, [r1, #0]
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	0641      	lsls	r1, r0, #25
 80087b4:	d5f1      	bpl.n	800879a <_printf_i+0x8a>
 80087b6:	b22d      	sxth	r5, r5
 80087b8:	e7ef      	b.n	800879a <_printf_i+0x8a>
 80087ba:	680d      	ldr	r5, [r1, #0]
 80087bc:	6819      	ldr	r1, [r3, #0]
 80087be:	1d08      	adds	r0, r1, #4
 80087c0:	6018      	str	r0, [r3, #0]
 80087c2:	062e      	lsls	r6, r5, #24
 80087c4:	d501      	bpl.n	80087ca <_printf_i+0xba>
 80087c6:	680d      	ldr	r5, [r1, #0]
 80087c8:	e003      	b.n	80087d2 <_printf_i+0xc2>
 80087ca:	066d      	lsls	r5, r5, #25
 80087cc:	d5fb      	bpl.n	80087c6 <_printf_i+0xb6>
 80087ce:	680d      	ldr	r5, [r1, #0]
 80087d0:	b2ad      	uxth	r5, r5
 80087d2:	4b56      	ldr	r3, [pc, #344]	; (800892c <_printf_i+0x21c>)
 80087d4:	2708      	movs	r7, #8
 80087d6:	9303      	str	r3, [sp, #12]
 80087d8:	2a6f      	cmp	r2, #111	; 0x6f
 80087da:	d000      	beq.n	80087de <_printf_i+0xce>
 80087dc:	3702      	adds	r7, #2
 80087de:	0023      	movs	r3, r4
 80087e0:	2200      	movs	r2, #0
 80087e2:	3343      	adds	r3, #67	; 0x43
 80087e4:	701a      	strb	r2, [r3, #0]
 80087e6:	6863      	ldr	r3, [r4, #4]
 80087e8:	60a3      	str	r3, [r4, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	db03      	blt.n	80087f6 <_printf_i+0xe6>
 80087ee:	2204      	movs	r2, #4
 80087f0:	6821      	ldr	r1, [r4, #0]
 80087f2:	4391      	bics	r1, r2
 80087f4:	6021      	str	r1, [r4, #0]
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	d102      	bne.n	8008800 <_printf_i+0xf0>
 80087fa:	9e04      	ldr	r6, [sp, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00c      	beq.n	800881a <_printf_i+0x10a>
 8008800:	9e04      	ldr	r6, [sp, #16]
 8008802:	0028      	movs	r0, r5
 8008804:	0039      	movs	r1, r7
 8008806:	f7f7 fd21 	bl	800024c <__aeabi_uidivmod>
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	3e01      	subs	r6, #1
 800880e:	5c5b      	ldrb	r3, [r3, r1]
 8008810:	7033      	strb	r3, [r6, #0]
 8008812:	002b      	movs	r3, r5
 8008814:	0005      	movs	r5, r0
 8008816:	429f      	cmp	r7, r3
 8008818:	d9f3      	bls.n	8008802 <_printf_i+0xf2>
 800881a:	2f08      	cmp	r7, #8
 800881c:	d109      	bne.n	8008832 <_printf_i+0x122>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	07db      	lsls	r3, r3, #31
 8008822:	d506      	bpl.n	8008832 <_printf_i+0x122>
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	6922      	ldr	r2, [r4, #16]
 8008828:	4293      	cmp	r3, r2
 800882a:	dc02      	bgt.n	8008832 <_printf_i+0x122>
 800882c:	2330      	movs	r3, #48	; 0x30
 800882e:	3e01      	subs	r6, #1
 8008830:	7033      	strb	r3, [r6, #0]
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	1b9b      	subs	r3, r3, r6
 8008836:	6123      	str	r3, [r4, #16]
 8008838:	9b07      	ldr	r3, [sp, #28]
 800883a:	0021      	movs	r1, r4
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	9805      	ldr	r0, [sp, #20]
 8008840:	9b06      	ldr	r3, [sp, #24]
 8008842:	aa09      	add	r2, sp, #36	; 0x24
 8008844:	f7ff fef4 	bl	8008630 <_printf_common>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d14c      	bne.n	80088e6 <_printf_i+0x1d6>
 800884c:	2001      	movs	r0, #1
 800884e:	4240      	negs	r0, r0
 8008850:	b00b      	add	sp, #44	; 0x2c
 8008852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008854:	3145      	adds	r1, #69	; 0x45
 8008856:	700a      	strb	r2, [r1, #0]
 8008858:	4a34      	ldr	r2, [pc, #208]	; (800892c <_printf_i+0x21c>)
 800885a:	9203      	str	r2, [sp, #12]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	6821      	ldr	r1, [r4, #0]
 8008860:	ca20      	ldmia	r2!, {r5}
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	0608      	lsls	r0, r1, #24
 8008866:	d516      	bpl.n	8008896 <_printf_i+0x186>
 8008868:	07cb      	lsls	r3, r1, #31
 800886a:	d502      	bpl.n	8008872 <_printf_i+0x162>
 800886c:	2320      	movs	r3, #32
 800886e:	4319      	orrs	r1, r3
 8008870:	6021      	str	r1, [r4, #0]
 8008872:	2710      	movs	r7, #16
 8008874:	2d00      	cmp	r5, #0
 8008876:	d1b2      	bne.n	80087de <_printf_i+0xce>
 8008878:	2320      	movs	r3, #32
 800887a:	6822      	ldr	r2, [r4, #0]
 800887c:	439a      	bics	r2, r3
 800887e:	6022      	str	r2, [r4, #0]
 8008880:	e7ad      	b.n	80087de <_printf_i+0xce>
 8008882:	2220      	movs	r2, #32
 8008884:	6809      	ldr	r1, [r1, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	6022      	str	r2, [r4, #0]
 800888a:	0022      	movs	r2, r4
 800888c:	2178      	movs	r1, #120	; 0x78
 800888e:	3245      	adds	r2, #69	; 0x45
 8008890:	7011      	strb	r1, [r2, #0]
 8008892:	4a27      	ldr	r2, [pc, #156]	; (8008930 <_printf_i+0x220>)
 8008894:	e7e1      	b.n	800885a <_printf_i+0x14a>
 8008896:	0648      	lsls	r0, r1, #25
 8008898:	d5e6      	bpl.n	8008868 <_printf_i+0x158>
 800889a:	b2ad      	uxth	r5, r5
 800889c:	e7e4      	b.n	8008868 <_printf_i+0x158>
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	680d      	ldr	r5, [r1, #0]
 80088a2:	1d10      	adds	r0, r2, #4
 80088a4:	6949      	ldr	r1, [r1, #20]
 80088a6:	6018      	str	r0, [r3, #0]
 80088a8:	6813      	ldr	r3, [r2, #0]
 80088aa:	062e      	lsls	r6, r5, #24
 80088ac:	d501      	bpl.n	80088b2 <_printf_i+0x1a2>
 80088ae:	6019      	str	r1, [r3, #0]
 80088b0:	e002      	b.n	80088b8 <_printf_i+0x1a8>
 80088b2:	066d      	lsls	r5, r5, #25
 80088b4:	d5fb      	bpl.n	80088ae <_printf_i+0x19e>
 80088b6:	8019      	strh	r1, [r3, #0]
 80088b8:	2300      	movs	r3, #0
 80088ba:	9e04      	ldr	r6, [sp, #16]
 80088bc:	6123      	str	r3, [r4, #16]
 80088be:	e7bb      	b.n	8008838 <_printf_i+0x128>
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	1d11      	adds	r1, r2, #4
 80088c4:	6019      	str	r1, [r3, #0]
 80088c6:	6816      	ldr	r6, [r2, #0]
 80088c8:	2100      	movs	r1, #0
 80088ca:	0030      	movs	r0, r6
 80088cc:	6862      	ldr	r2, [r4, #4]
 80088ce:	f000 fee5 	bl	800969c <memchr>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d001      	beq.n	80088da <_printf_i+0x1ca>
 80088d6:	1b80      	subs	r0, r0, r6
 80088d8:	6060      	str	r0, [r4, #4]
 80088da:	6863      	ldr	r3, [r4, #4]
 80088dc:	6123      	str	r3, [r4, #16]
 80088de:	2300      	movs	r3, #0
 80088e0:	9a04      	ldr	r2, [sp, #16]
 80088e2:	7013      	strb	r3, [r2, #0]
 80088e4:	e7a8      	b.n	8008838 <_printf_i+0x128>
 80088e6:	6923      	ldr	r3, [r4, #16]
 80088e8:	0032      	movs	r2, r6
 80088ea:	9906      	ldr	r1, [sp, #24]
 80088ec:	9805      	ldr	r0, [sp, #20]
 80088ee:	9d07      	ldr	r5, [sp, #28]
 80088f0:	47a8      	blx	r5
 80088f2:	1c43      	adds	r3, r0, #1
 80088f4:	d0aa      	beq.n	800884c <_printf_i+0x13c>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	079b      	lsls	r3, r3, #30
 80088fa:	d415      	bmi.n	8008928 <_printf_i+0x218>
 80088fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fe:	68e0      	ldr	r0, [r4, #12]
 8008900:	4298      	cmp	r0, r3
 8008902:	daa5      	bge.n	8008850 <_printf_i+0x140>
 8008904:	0018      	movs	r0, r3
 8008906:	e7a3      	b.n	8008850 <_printf_i+0x140>
 8008908:	0022      	movs	r2, r4
 800890a:	2301      	movs	r3, #1
 800890c:	9906      	ldr	r1, [sp, #24]
 800890e:	9805      	ldr	r0, [sp, #20]
 8008910:	9e07      	ldr	r6, [sp, #28]
 8008912:	3219      	adds	r2, #25
 8008914:	47b0      	blx	r6
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	d098      	beq.n	800884c <_printf_i+0x13c>
 800891a:	3501      	adds	r5, #1
 800891c:	68e3      	ldr	r3, [r4, #12]
 800891e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008920:	1a9b      	subs	r3, r3, r2
 8008922:	42ab      	cmp	r3, r5
 8008924:	dcf0      	bgt.n	8008908 <_printf_i+0x1f8>
 8008926:	e7e9      	b.n	80088fc <_printf_i+0x1ec>
 8008928:	2500      	movs	r5, #0
 800892a:	e7f7      	b.n	800891c <_printf_i+0x20c>
 800892c:	0800b1fe 	.word	0x0800b1fe
 8008930:	0800b20f 	.word	0x0800b20f

08008934 <quorem>:
 8008934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008936:	0006      	movs	r6, r0
 8008938:	690b      	ldr	r3, [r1, #16]
 800893a:	6932      	ldr	r2, [r6, #16]
 800893c:	b087      	sub	sp, #28
 800893e:	2000      	movs	r0, #0
 8008940:	9103      	str	r1, [sp, #12]
 8008942:	429a      	cmp	r2, r3
 8008944:	db65      	blt.n	8008a12 <quorem+0xde>
 8008946:	3b01      	subs	r3, #1
 8008948:	009c      	lsls	r4, r3, #2
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	000b      	movs	r3, r1
 800894e:	3314      	adds	r3, #20
 8008950:	9305      	str	r3, [sp, #20]
 8008952:	191b      	adds	r3, r3, r4
 8008954:	9304      	str	r3, [sp, #16]
 8008956:	0033      	movs	r3, r6
 8008958:	3314      	adds	r3, #20
 800895a:	9302      	str	r3, [sp, #8]
 800895c:	191c      	adds	r4, r3, r4
 800895e:	9b04      	ldr	r3, [sp, #16]
 8008960:	6827      	ldr	r7, [r4, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	0038      	movs	r0, r7
 8008966:	1c5d      	adds	r5, r3, #1
 8008968:	0029      	movs	r1, r5
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	f7f7 fbe8 	bl	8000140 <__udivsi3>
 8008970:	9001      	str	r0, [sp, #4]
 8008972:	42af      	cmp	r7, r5
 8008974:	d324      	bcc.n	80089c0 <quorem+0x8c>
 8008976:	2500      	movs	r5, #0
 8008978:	46ac      	mov	ip, r5
 800897a:	9802      	ldr	r0, [sp, #8]
 800897c:	9f05      	ldr	r7, [sp, #20]
 800897e:	cf08      	ldmia	r7!, {r3}
 8008980:	9a01      	ldr	r2, [sp, #4]
 8008982:	b299      	uxth	r1, r3
 8008984:	4351      	muls	r1, r2
 8008986:	0c1b      	lsrs	r3, r3, #16
 8008988:	4353      	muls	r3, r2
 800898a:	1949      	adds	r1, r1, r5
 800898c:	0c0a      	lsrs	r2, r1, #16
 800898e:	189b      	adds	r3, r3, r2
 8008990:	6802      	ldr	r2, [r0, #0]
 8008992:	b289      	uxth	r1, r1
 8008994:	b292      	uxth	r2, r2
 8008996:	4462      	add	r2, ip
 8008998:	1a52      	subs	r2, r2, r1
 800899a:	6801      	ldr	r1, [r0, #0]
 800899c:	0c1d      	lsrs	r5, r3, #16
 800899e:	0c09      	lsrs	r1, r1, #16
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	1acb      	subs	r3, r1, r3
 80089a4:	1411      	asrs	r1, r2, #16
 80089a6:	185b      	adds	r3, r3, r1
 80089a8:	1419      	asrs	r1, r3, #16
 80089aa:	b292      	uxth	r2, r2
 80089ac:	041b      	lsls	r3, r3, #16
 80089ae:	431a      	orrs	r2, r3
 80089b0:	9b04      	ldr	r3, [sp, #16]
 80089b2:	468c      	mov	ip, r1
 80089b4:	c004      	stmia	r0!, {r2}
 80089b6:	42bb      	cmp	r3, r7
 80089b8:	d2e1      	bcs.n	800897e <quorem+0x4a>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d030      	beq.n	8008a22 <quorem+0xee>
 80089c0:	0030      	movs	r0, r6
 80089c2:	9903      	ldr	r1, [sp, #12]
 80089c4:	f001 f902 	bl	8009bcc <__mcmp>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	db21      	blt.n	8008a10 <quorem+0xdc>
 80089cc:	0030      	movs	r0, r6
 80089ce:	2400      	movs	r4, #0
 80089d0:	9b01      	ldr	r3, [sp, #4]
 80089d2:	9903      	ldr	r1, [sp, #12]
 80089d4:	3301      	adds	r3, #1
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	3014      	adds	r0, #20
 80089da:	3114      	adds	r1, #20
 80089dc:	6803      	ldr	r3, [r0, #0]
 80089de:	c920      	ldmia	r1!, {r5}
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	1914      	adds	r4, r2, r4
 80089e4:	b2aa      	uxth	r2, r5
 80089e6:	1aa2      	subs	r2, r4, r2
 80089e8:	0c1b      	lsrs	r3, r3, #16
 80089ea:	0c2d      	lsrs	r5, r5, #16
 80089ec:	1414      	asrs	r4, r2, #16
 80089ee:	1b5b      	subs	r3, r3, r5
 80089f0:	191b      	adds	r3, r3, r4
 80089f2:	141c      	asrs	r4, r3, #16
 80089f4:	b292      	uxth	r2, r2
 80089f6:	041b      	lsls	r3, r3, #16
 80089f8:	4313      	orrs	r3, r2
 80089fa:	c008      	stmia	r0!, {r3}
 80089fc:	9b04      	ldr	r3, [sp, #16]
 80089fe:	428b      	cmp	r3, r1
 8008a00:	d2ec      	bcs.n	80089dc <quorem+0xa8>
 8008a02:	9b00      	ldr	r3, [sp, #0]
 8008a04:	9a02      	ldr	r2, [sp, #8]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	18d3      	adds	r3, r2, r3
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	2a00      	cmp	r2, #0
 8008a0e:	d015      	beq.n	8008a3c <quorem+0x108>
 8008a10:	9801      	ldr	r0, [sp, #4]
 8008a12:	b007      	add	sp, #28
 8008a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d106      	bne.n	8008a2a <quorem+0xf6>
 8008a1c:	9b00      	ldr	r3, [sp, #0]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	9b02      	ldr	r3, [sp, #8]
 8008a24:	3c04      	subs	r4, #4
 8008a26:	42a3      	cmp	r3, r4
 8008a28:	d3f5      	bcc.n	8008a16 <quorem+0xe2>
 8008a2a:	9b00      	ldr	r3, [sp, #0]
 8008a2c:	6133      	str	r3, [r6, #16]
 8008a2e:	e7c7      	b.n	80089c0 <quorem+0x8c>
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	d106      	bne.n	8008a44 <quorem+0x110>
 8008a36:	9a00      	ldr	r2, [sp, #0]
 8008a38:	3a01      	subs	r2, #1
 8008a3a:	9200      	str	r2, [sp, #0]
 8008a3c:	9a02      	ldr	r2, [sp, #8]
 8008a3e:	3b04      	subs	r3, #4
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d3f5      	bcc.n	8008a30 <quorem+0xfc>
 8008a44:	9b00      	ldr	r3, [sp, #0]
 8008a46:	6133      	str	r3, [r6, #16]
 8008a48:	e7e2      	b.n	8008a10 <quorem+0xdc>
	...

08008a4c <_dtoa_r>:
 8008a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a4e:	b09d      	sub	sp, #116	; 0x74
 8008a50:	9202      	str	r2, [sp, #8]
 8008a52:	9303      	str	r3, [sp, #12]
 8008a54:	9b02      	ldr	r3, [sp, #8]
 8008a56:	9c03      	ldr	r4, [sp, #12]
 8008a58:	9308      	str	r3, [sp, #32]
 8008a5a:	9409      	str	r4, [sp, #36]	; 0x24
 8008a5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a5e:	0007      	movs	r7, r0
 8008a60:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008a62:	2c00      	cmp	r4, #0
 8008a64:	d10e      	bne.n	8008a84 <_dtoa_r+0x38>
 8008a66:	2010      	movs	r0, #16
 8008a68:	f000 fe0e 	bl	8009688 <malloc>
 8008a6c:	1e02      	subs	r2, r0, #0
 8008a6e:	6278      	str	r0, [r7, #36]	; 0x24
 8008a70:	d104      	bne.n	8008a7c <_dtoa_r+0x30>
 8008a72:	21ea      	movs	r1, #234	; 0xea
 8008a74:	4bc7      	ldr	r3, [pc, #796]	; (8008d94 <_dtoa_r+0x348>)
 8008a76:	48c8      	ldr	r0, [pc, #800]	; (8008d98 <_dtoa_r+0x34c>)
 8008a78:	f001 fae0 	bl	800a03c <__assert_func>
 8008a7c:	6044      	str	r4, [r0, #4]
 8008a7e:	6084      	str	r4, [r0, #8]
 8008a80:	6004      	str	r4, [r0, #0]
 8008a82:	60c4      	str	r4, [r0, #12]
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	6819      	ldr	r1, [r3, #0]
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	d00a      	beq.n	8008aa2 <_dtoa_r+0x56>
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	2301      	movs	r3, #1
 8008a90:	4093      	lsls	r3, r2
 8008a92:	604a      	str	r2, [r1, #4]
 8008a94:	608b      	str	r3, [r1, #8]
 8008a96:	0038      	movs	r0, r7
 8008a98:	f000 fe58 	bl	800974c <_Bfree>
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da20      	bge.n	8008aea <_dtoa_r+0x9e>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	602b      	str	r3, [r5, #0]
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	085b      	lsrs	r3, r3, #1
 8008ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ab6:	4bb9      	ldr	r3, [pc, #740]	; (8008d9c <_dtoa_r+0x350>)
 8008ab8:	4ab8      	ldr	r2, [pc, #736]	; (8008d9c <_dtoa_r+0x350>)
 8008aba:	402b      	ands	r3, r5
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d117      	bne.n	8008af0 <_dtoa_r+0xa4>
 8008ac0:	4bb7      	ldr	r3, [pc, #732]	; (8008da0 <_dtoa_r+0x354>)
 8008ac2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ac4:	0328      	lsls	r0, r5, #12
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	9b02      	ldr	r3, [sp, #8]
 8008aca:	0b00      	lsrs	r0, r0, #12
 8008acc:	4318      	orrs	r0, r3
 8008ace:	d101      	bne.n	8008ad4 <_dtoa_r+0x88>
 8008ad0:	f000 fdbf 	bl	8009652 <_dtoa_r+0xc06>
 8008ad4:	48b3      	ldr	r0, [pc, #716]	; (8008da4 <_dtoa_r+0x358>)
 8008ad6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ad8:	9006      	str	r0, [sp, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <_dtoa_r+0x98>
 8008ade:	4bb2      	ldr	r3, [pc, #712]	; (8008da8 <_dtoa_r+0x35c>)
 8008ae0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	9806      	ldr	r0, [sp, #24]
 8008ae6:	b01d      	add	sp, #116	; 0x74
 8008ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aea:	2300      	movs	r3, #0
 8008aec:	602b      	str	r3, [r5, #0]
 8008aee:	e7e1      	b.n	8008ab4 <_dtoa_r+0x68>
 8008af0:	9b08      	ldr	r3, [sp, #32]
 8008af2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008af4:	9312      	str	r3, [sp, #72]	; 0x48
 8008af6:	9413      	str	r4, [sp, #76]	; 0x4c
 8008af8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008afa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008afc:	2200      	movs	r2, #0
 8008afe:	2300      	movs	r3, #0
 8008b00:	f7f7 fca4 	bl	800044c <__aeabi_dcmpeq>
 8008b04:	1e04      	subs	r4, r0, #0
 8008b06:	d009      	beq.n	8008b1c <_dtoa_r+0xd0>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	4ba7      	ldr	r3, [pc, #668]	; (8008dac <_dtoa_r+0x360>)
 8008b10:	9306      	str	r3, [sp, #24]
 8008b12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0e5      	beq.n	8008ae4 <_dtoa_r+0x98>
 8008b18:	4ba5      	ldr	r3, [pc, #660]	; (8008db0 <_dtoa_r+0x364>)
 8008b1a:	e7e1      	b.n	8008ae0 <_dtoa_r+0x94>
 8008b1c:	ab1a      	add	r3, sp, #104	; 0x68
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	ab1b      	add	r3, sp, #108	; 0x6c
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	0038      	movs	r0, r7
 8008b26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b2a:	f001 f903 	bl	8009d34 <__d2b>
 8008b2e:	006e      	lsls	r6, r5, #1
 8008b30:	9005      	str	r0, [sp, #20]
 8008b32:	0d76      	lsrs	r6, r6, #21
 8008b34:	d100      	bne.n	8008b38 <_dtoa_r+0xec>
 8008b36:	e07c      	b.n	8008c32 <_dtoa_r+0x1e6>
 8008b38:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b3e:	4a9d      	ldr	r2, [pc, #628]	; (8008db4 <_dtoa_r+0x368>)
 8008b40:	031b      	lsls	r3, r3, #12
 8008b42:	0b1b      	lsrs	r3, r3, #12
 8008b44:	431a      	orrs	r2, r3
 8008b46:	0011      	movs	r1, r2
 8008b48:	4b9b      	ldr	r3, [pc, #620]	; (8008db8 <_dtoa_r+0x36c>)
 8008b4a:	9418      	str	r4, [sp, #96]	; 0x60
 8008b4c:	18f6      	adds	r6, r6, r3
 8008b4e:	2200      	movs	r2, #0
 8008b50:	4b9a      	ldr	r3, [pc, #616]	; (8008dbc <_dtoa_r+0x370>)
 8008b52:	f7f9 fd57 	bl	8002604 <__aeabi_dsub>
 8008b56:	4a9a      	ldr	r2, [pc, #616]	; (8008dc0 <_dtoa_r+0x374>)
 8008b58:	4b9a      	ldr	r3, [pc, #616]	; (8008dc4 <_dtoa_r+0x378>)
 8008b5a:	f7f9 fae7 	bl	800212c <__aeabi_dmul>
 8008b5e:	4a9a      	ldr	r2, [pc, #616]	; (8008dc8 <_dtoa_r+0x37c>)
 8008b60:	4b9a      	ldr	r3, [pc, #616]	; (8008dcc <_dtoa_r+0x380>)
 8008b62:	f7f8 fba5 	bl	80012b0 <__aeabi_dadd>
 8008b66:	0004      	movs	r4, r0
 8008b68:	0030      	movs	r0, r6
 8008b6a:	000d      	movs	r5, r1
 8008b6c:	f7fa f930 	bl	8002dd0 <__aeabi_i2d>
 8008b70:	4a97      	ldr	r2, [pc, #604]	; (8008dd0 <_dtoa_r+0x384>)
 8008b72:	4b98      	ldr	r3, [pc, #608]	; (8008dd4 <_dtoa_r+0x388>)
 8008b74:	f7f9 fada 	bl	800212c <__aeabi_dmul>
 8008b78:	0002      	movs	r2, r0
 8008b7a:	000b      	movs	r3, r1
 8008b7c:	0020      	movs	r0, r4
 8008b7e:	0029      	movs	r1, r5
 8008b80:	f7f8 fb96 	bl	80012b0 <__aeabi_dadd>
 8008b84:	0004      	movs	r4, r0
 8008b86:	000d      	movs	r5, r1
 8008b88:	f7fa f8ec 	bl	8002d64 <__aeabi_d2iz>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	9002      	str	r0, [sp, #8]
 8008b90:	2300      	movs	r3, #0
 8008b92:	0020      	movs	r0, r4
 8008b94:	0029      	movs	r1, r5
 8008b96:	f7f7 fc5f 	bl	8000458 <__aeabi_dcmplt>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d00b      	beq.n	8008bb6 <_dtoa_r+0x16a>
 8008b9e:	9802      	ldr	r0, [sp, #8]
 8008ba0:	f7fa f916 	bl	8002dd0 <__aeabi_i2d>
 8008ba4:	002b      	movs	r3, r5
 8008ba6:	0022      	movs	r2, r4
 8008ba8:	f7f7 fc50 	bl	800044c <__aeabi_dcmpeq>
 8008bac:	4243      	negs	r3, r0
 8008bae:	4158      	adcs	r0, r3
 8008bb0:	9b02      	ldr	r3, [sp, #8]
 8008bb2:	1a1b      	subs	r3, r3, r0
 8008bb4:	9302      	str	r3, [sp, #8]
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	9316      	str	r3, [sp, #88]	; 0x58
 8008bba:	9b02      	ldr	r3, [sp, #8]
 8008bbc:	2b16      	cmp	r3, #22
 8008bbe:	d80f      	bhi.n	8008be0 <_dtoa_r+0x194>
 8008bc0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008bc2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008bc4:	00da      	lsls	r2, r3, #3
 8008bc6:	4b84      	ldr	r3, [pc, #528]	; (8008dd8 <_dtoa_r+0x38c>)
 8008bc8:	189b      	adds	r3, r3, r2
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f7f7 fc43 	bl	8000458 <__aeabi_dcmplt>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	d049      	beq.n	8008c6a <_dtoa_r+0x21e>
 8008bd6:	9b02      	ldr	r3, [sp, #8]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	9302      	str	r3, [sp, #8]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	9316      	str	r3, [sp, #88]	; 0x58
 8008be0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008be2:	1b9e      	subs	r6, r3, r6
 8008be4:	2300      	movs	r3, #0
 8008be6:	930a      	str	r3, [sp, #40]	; 0x28
 8008be8:	0033      	movs	r3, r6
 8008bea:	3b01      	subs	r3, #1
 8008bec:	930d      	str	r3, [sp, #52]	; 0x34
 8008bee:	d504      	bpl.n	8008bfa <_dtoa_r+0x1ae>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	1b9b      	subs	r3, r3, r6
 8008bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	930d      	str	r3, [sp, #52]	; 0x34
 8008bfa:	9b02      	ldr	r3, [sp, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	db36      	blt.n	8008c6e <_dtoa_r+0x222>
 8008c00:	9a02      	ldr	r2, [sp, #8]
 8008c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c04:	4694      	mov	ip, r2
 8008c06:	4463      	add	r3, ip
 8008c08:	930d      	str	r3, [sp, #52]	; 0x34
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	9215      	str	r2, [sp, #84]	; 0x54
 8008c0e:	930e      	str	r3, [sp, #56]	; 0x38
 8008c10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c12:	2401      	movs	r4, #1
 8008c14:	2b09      	cmp	r3, #9
 8008c16:	d864      	bhi.n	8008ce2 <_dtoa_r+0x296>
 8008c18:	2b05      	cmp	r3, #5
 8008c1a:	dd02      	ble.n	8008c22 <_dtoa_r+0x1d6>
 8008c1c:	2400      	movs	r4, #0
 8008c1e:	3b04      	subs	r3, #4
 8008c20:	9322      	str	r3, [sp, #136]	; 0x88
 8008c22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c24:	1e98      	subs	r0, r3, #2
 8008c26:	2803      	cmp	r0, #3
 8008c28:	d864      	bhi.n	8008cf4 <_dtoa_r+0x2a8>
 8008c2a:	f7f7 fa75 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008c2e:	3829      	.short	0x3829
 8008c30:	5836      	.short	0x5836
 8008c32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008c34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c36:	189e      	adds	r6, r3, r2
 8008c38:	4b68      	ldr	r3, [pc, #416]	; (8008ddc <_dtoa_r+0x390>)
 8008c3a:	18f2      	adds	r2, r6, r3
 8008c3c:	2a20      	cmp	r2, #32
 8008c3e:	dd0f      	ble.n	8008c60 <_dtoa_r+0x214>
 8008c40:	2340      	movs	r3, #64	; 0x40
 8008c42:	1a9b      	subs	r3, r3, r2
 8008c44:	409d      	lsls	r5, r3
 8008c46:	4b66      	ldr	r3, [pc, #408]	; (8008de0 <_dtoa_r+0x394>)
 8008c48:	9802      	ldr	r0, [sp, #8]
 8008c4a:	18f3      	adds	r3, r6, r3
 8008c4c:	40d8      	lsrs	r0, r3
 8008c4e:	4328      	orrs	r0, r5
 8008c50:	f7fa f8ee 	bl	8002e30 <__aeabi_ui2d>
 8008c54:	2301      	movs	r3, #1
 8008c56:	4c63      	ldr	r4, [pc, #396]	; (8008de4 <_dtoa_r+0x398>)
 8008c58:	3e01      	subs	r6, #1
 8008c5a:	1909      	adds	r1, r1, r4
 8008c5c:	9318      	str	r3, [sp, #96]	; 0x60
 8008c5e:	e776      	b.n	8008b4e <_dtoa_r+0x102>
 8008c60:	2320      	movs	r3, #32
 8008c62:	9802      	ldr	r0, [sp, #8]
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	4098      	lsls	r0, r3
 8008c68:	e7f2      	b.n	8008c50 <_dtoa_r+0x204>
 8008c6a:	9016      	str	r0, [sp, #88]	; 0x58
 8008c6c:	e7b8      	b.n	8008be0 <_dtoa_r+0x194>
 8008c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c70:	9a02      	ldr	r2, [sp, #8]
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	930a      	str	r3, [sp, #40]	; 0x28
 8008c76:	4253      	negs	r3, r2
 8008c78:	930e      	str	r3, [sp, #56]	; 0x38
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9315      	str	r3, [sp, #84]	; 0x54
 8008c7e:	e7c7      	b.n	8008c10 <_dtoa_r+0x1c4>
 8008c80:	2300      	movs	r3, #0
 8008c82:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c86:	930c      	str	r3, [sp, #48]	; 0x30
 8008c88:	9307      	str	r3, [sp, #28]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	dc13      	bgt.n	8008cb6 <_dtoa_r+0x26a>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	001a      	movs	r2, r3
 8008c92:	930c      	str	r3, [sp, #48]	; 0x30
 8008c94:	9307      	str	r3, [sp, #28]
 8008c96:	9223      	str	r2, [sp, #140]	; 0x8c
 8008c98:	e00d      	b.n	8008cb6 <_dtoa_r+0x26a>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e7f1      	b.n	8008c82 <_dtoa_r+0x236>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008ca2:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ca4:	4694      	mov	ip, r2
 8008ca6:	9b02      	ldr	r3, [sp, #8]
 8008ca8:	4463      	add	r3, ip
 8008caa:	930c      	str	r3, [sp, #48]	; 0x30
 8008cac:	3301      	adds	r3, #1
 8008cae:	9307      	str	r3, [sp, #28]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	dc00      	bgt.n	8008cb6 <_dtoa_r+0x26a>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cba:	6042      	str	r2, [r0, #4]
 8008cbc:	3204      	adds	r2, #4
 8008cbe:	0015      	movs	r5, r2
 8008cc0:	3514      	adds	r5, #20
 8008cc2:	6841      	ldr	r1, [r0, #4]
 8008cc4:	429d      	cmp	r5, r3
 8008cc6:	d919      	bls.n	8008cfc <_dtoa_r+0x2b0>
 8008cc8:	0038      	movs	r0, r7
 8008cca:	f000 fcfb 	bl	80096c4 <_Balloc>
 8008cce:	9006      	str	r0, [sp, #24]
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d117      	bne.n	8008d04 <_dtoa_r+0x2b8>
 8008cd4:	21d5      	movs	r1, #213	; 0xd5
 8008cd6:	0002      	movs	r2, r0
 8008cd8:	4b43      	ldr	r3, [pc, #268]	; (8008de8 <_dtoa_r+0x39c>)
 8008cda:	0049      	lsls	r1, r1, #1
 8008cdc:	e6cb      	b.n	8008a76 <_dtoa_r+0x2a>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e7de      	b.n	8008ca0 <_dtoa_r+0x254>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	940f      	str	r4, [sp, #60]	; 0x3c
 8008ce6:	9322      	str	r3, [sp, #136]	; 0x88
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	930c      	str	r3, [sp, #48]	; 0x30
 8008cec:	9307      	str	r3, [sp, #28]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	3313      	adds	r3, #19
 8008cf2:	e7d0      	b.n	8008c96 <_dtoa_r+0x24a>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cf8:	3b02      	subs	r3, #2
 8008cfa:	e7f6      	b.n	8008cea <_dtoa_r+0x29e>
 8008cfc:	3101      	adds	r1, #1
 8008cfe:	6041      	str	r1, [r0, #4]
 8008d00:	0052      	lsls	r2, r2, #1
 8008d02:	e7dc      	b.n	8008cbe <_dtoa_r+0x272>
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	9a06      	ldr	r2, [sp, #24]
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	9b07      	ldr	r3, [sp, #28]
 8008d0c:	2b0e      	cmp	r3, #14
 8008d0e:	d900      	bls.n	8008d12 <_dtoa_r+0x2c6>
 8008d10:	e0eb      	b.n	8008eea <_dtoa_r+0x49e>
 8008d12:	2c00      	cmp	r4, #0
 8008d14:	d100      	bne.n	8008d18 <_dtoa_r+0x2cc>
 8008d16:	e0e8      	b.n	8008eea <_dtoa_r+0x49e>
 8008d18:	9b02      	ldr	r3, [sp, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	dd68      	ble.n	8008df0 <_dtoa_r+0x3a4>
 8008d1e:	001a      	movs	r2, r3
 8008d20:	210f      	movs	r1, #15
 8008d22:	4b2d      	ldr	r3, [pc, #180]	; (8008dd8 <_dtoa_r+0x38c>)
 8008d24:	400a      	ands	r2, r1
 8008d26:	00d2      	lsls	r2, r2, #3
 8008d28:	189b      	adds	r3, r3, r2
 8008d2a:	681d      	ldr	r5, [r3, #0]
 8008d2c:	685e      	ldr	r6, [r3, #4]
 8008d2e:	9b02      	ldr	r3, [sp, #8]
 8008d30:	111c      	asrs	r4, r3, #4
 8008d32:	2302      	movs	r3, #2
 8008d34:	9310      	str	r3, [sp, #64]	; 0x40
 8008d36:	9b02      	ldr	r3, [sp, #8]
 8008d38:	05db      	lsls	r3, r3, #23
 8008d3a:	d50b      	bpl.n	8008d54 <_dtoa_r+0x308>
 8008d3c:	4b2b      	ldr	r3, [pc, #172]	; (8008dec <_dtoa_r+0x3a0>)
 8008d3e:	400c      	ands	r4, r1
 8008d40:	6a1a      	ldr	r2, [r3, #32]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008d46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008d48:	f7f8 fdee 	bl	8001928 <__aeabi_ddiv>
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	9008      	str	r0, [sp, #32]
 8008d50:	9109      	str	r1, [sp, #36]	; 0x24
 8008d52:	9310      	str	r3, [sp, #64]	; 0x40
 8008d54:	4b25      	ldr	r3, [pc, #148]	; (8008dec <_dtoa_r+0x3a0>)
 8008d56:	9314      	str	r3, [sp, #80]	; 0x50
 8008d58:	2c00      	cmp	r4, #0
 8008d5a:	d108      	bne.n	8008d6e <_dtoa_r+0x322>
 8008d5c:	9808      	ldr	r0, [sp, #32]
 8008d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d60:	002a      	movs	r2, r5
 8008d62:	0033      	movs	r3, r6
 8008d64:	f7f8 fde0 	bl	8001928 <__aeabi_ddiv>
 8008d68:	9008      	str	r0, [sp, #32]
 8008d6a:	9109      	str	r1, [sp, #36]	; 0x24
 8008d6c:	e05c      	b.n	8008e28 <_dtoa_r+0x3dc>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	421c      	tst	r4, r3
 8008d72:	d00b      	beq.n	8008d8c <_dtoa_r+0x340>
 8008d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d76:	0028      	movs	r0, r5
 8008d78:	3301      	adds	r3, #1
 8008d7a:	9310      	str	r3, [sp, #64]	; 0x40
 8008d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d7e:	0031      	movs	r1, r6
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f7f9 f9d2 	bl	800212c <__aeabi_dmul>
 8008d88:	0005      	movs	r5, r0
 8008d8a:	000e      	movs	r6, r1
 8008d8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d8e:	1064      	asrs	r4, r4, #1
 8008d90:	3308      	adds	r3, #8
 8008d92:	e7e0      	b.n	8008d56 <_dtoa_r+0x30a>
 8008d94:	0800b22d 	.word	0x0800b22d
 8008d98:	0800b244 	.word	0x0800b244
 8008d9c:	7ff00000 	.word	0x7ff00000
 8008da0:	0000270f 	.word	0x0000270f
 8008da4:	0800b229 	.word	0x0800b229
 8008da8:	0800b22c 	.word	0x0800b22c
 8008dac:	0800b1fc 	.word	0x0800b1fc
 8008db0:	0800b1fd 	.word	0x0800b1fd
 8008db4:	3ff00000 	.word	0x3ff00000
 8008db8:	fffffc01 	.word	0xfffffc01
 8008dbc:	3ff80000 	.word	0x3ff80000
 8008dc0:	636f4361 	.word	0x636f4361
 8008dc4:	3fd287a7 	.word	0x3fd287a7
 8008dc8:	8b60c8b3 	.word	0x8b60c8b3
 8008dcc:	3fc68a28 	.word	0x3fc68a28
 8008dd0:	509f79fb 	.word	0x509f79fb
 8008dd4:	3fd34413 	.word	0x3fd34413
 8008dd8:	0800b338 	.word	0x0800b338
 8008ddc:	00000432 	.word	0x00000432
 8008de0:	00000412 	.word	0x00000412
 8008de4:	fe100000 	.word	0xfe100000
 8008de8:	0800b29f 	.word	0x0800b29f
 8008dec:	0800b310 	.word	0x0800b310
 8008df0:	2302      	movs	r3, #2
 8008df2:	9310      	str	r3, [sp, #64]	; 0x40
 8008df4:	9b02      	ldr	r3, [sp, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d016      	beq.n	8008e28 <_dtoa_r+0x3dc>
 8008dfa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008dfc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008dfe:	425c      	negs	r4, r3
 8008e00:	230f      	movs	r3, #15
 8008e02:	4ab6      	ldr	r2, [pc, #728]	; (80090dc <_dtoa_r+0x690>)
 8008e04:	4023      	ands	r3, r4
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	18d3      	adds	r3, r2, r3
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f7f9 f98d 	bl	800212c <__aeabi_dmul>
 8008e12:	2601      	movs	r6, #1
 8008e14:	2300      	movs	r3, #0
 8008e16:	9008      	str	r0, [sp, #32]
 8008e18:	9109      	str	r1, [sp, #36]	; 0x24
 8008e1a:	4db1      	ldr	r5, [pc, #708]	; (80090e0 <_dtoa_r+0x694>)
 8008e1c:	1124      	asrs	r4, r4, #4
 8008e1e:	2c00      	cmp	r4, #0
 8008e20:	d000      	beq.n	8008e24 <_dtoa_r+0x3d8>
 8008e22:	e094      	b.n	8008f4e <_dtoa_r+0x502>
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d19f      	bne.n	8008d68 <_dtoa_r+0x31c>
 8008e28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d100      	bne.n	8008e30 <_dtoa_r+0x3e4>
 8008e2e:	e09b      	b.n	8008f68 <_dtoa_r+0x51c>
 8008e30:	9c08      	ldr	r4, [sp, #32]
 8008e32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e34:	2200      	movs	r2, #0
 8008e36:	0020      	movs	r0, r4
 8008e38:	0029      	movs	r1, r5
 8008e3a:	4baa      	ldr	r3, [pc, #680]	; (80090e4 <_dtoa_r+0x698>)
 8008e3c:	f7f7 fb0c 	bl	8000458 <__aeabi_dcmplt>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d100      	bne.n	8008e46 <_dtoa_r+0x3fa>
 8008e44:	e090      	b.n	8008f68 <_dtoa_r+0x51c>
 8008e46:	9b07      	ldr	r3, [sp, #28]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d100      	bne.n	8008e4e <_dtoa_r+0x402>
 8008e4c:	e08c      	b.n	8008f68 <_dtoa_r+0x51c>
 8008e4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dd46      	ble.n	8008ee2 <_dtoa_r+0x496>
 8008e54:	9b02      	ldr	r3, [sp, #8]
 8008e56:	2200      	movs	r2, #0
 8008e58:	0020      	movs	r0, r4
 8008e5a:	0029      	movs	r1, r5
 8008e5c:	1e5e      	subs	r6, r3, #1
 8008e5e:	4ba2      	ldr	r3, [pc, #648]	; (80090e8 <_dtoa_r+0x69c>)
 8008e60:	f7f9 f964 	bl	800212c <__aeabi_dmul>
 8008e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e66:	9008      	str	r0, [sp, #32]
 8008e68:	9109      	str	r1, [sp, #36]	; 0x24
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	9310      	str	r3, [sp, #64]	; 0x40
 8008e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e70:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e72:	9c08      	ldr	r4, [sp, #32]
 8008e74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e76:	9314      	str	r3, [sp, #80]	; 0x50
 8008e78:	f7f9 ffaa 	bl	8002dd0 <__aeabi_i2d>
 8008e7c:	0022      	movs	r2, r4
 8008e7e:	002b      	movs	r3, r5
 8008e80:	f7f9 f954 	bl	800212c <__aeabi_dmul>
 8008e84:	2200      	movs	r2, #0
 8008e86:	4b99      	ldr	r3, [pc, #612]	; (80090ec <_dtoa_r+0x6a0>)
 8008e88:	f7f8 fa12 	bl	80012b0 <__aeabi_dadd>
 8008e8c:	9010      	str	r0, [sp, #64]	; 0x40
 8008e8e:	9111      	str	r1, [sp, #68]	; 0x44
 8008e90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e94:	9208      	str	r2, [sp, #32]
 8008e96:	9309      	str	r3, [sp, #36]	; 0x24
 8008e98:	4a95      	ldr	r2, [pc, #596]	; (80090f0 <_dtoa_r+0x6a4>)
 8008e9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e9c:	4694      	mov	ip, r2
 8008e9e:	4463      	add	r3, ip
 8008ea0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d161      	bne.n	8008f6e <_dtoa_r+0x522>
 8008eaa:	2200      	movs	r2, #0
 8008eac:	0020      	movs	r0, r4
 8008eae:	0029      	movs	r1, r5
 8008eb0:	4b90      	ldr	r3, [pc, #576]	; (80090f4 <_dtoa_r+0x6a8>)
 8008eb2:	f7f9 fba7 	bl	8002604 <__aeabi_dsub>
 8008eb6:	9a08      	ldr	r2, [sp, #32]
 8008eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008eba:	0004      	movs	r4, r0
 8008ebc:	000d      	movs	r5, r1
 8008ebe:	f7f7 fadf 	bl	8000480 <__aeabi_dcmpgt>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d000      	beq.n	8008ec8 <_dtoa_r+0x47c>
 8008ec6:	e2af      	b.n	8009428 <_dtoa_r+0x9dc>
 8008ec8:	488b      	ldr	r0, [pc, #556]	; (80090f8 <_dtoa_r+0x6ac>)
 8008eca:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ecc:	4684      	mov	ip, r0
 8008ece:	4461      	add	r1, ip
 8008ed0:	000b      	movs	r3, r1
 8008ed2:	0020      	movs	r0, r4
 8008ed4:	0029      	movs	r1, r5
 8008ed6:	9a08      	ldr	r2, [sp, #32]
 8008ed8:	f7f7 fabe 	bl	8000458 <__aeabi_dcmplt>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d000      	beq.n	8008ee2 <_dtoa_r+0x496>
 8008ee0:	e29f      	b.n	8009422 <_dtoa_r+0x9d6>
 8008ee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ee4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008ee6:	9308      	str	r3, [sp, #32]
 8008ee8:	9409      	str	r4, [sp, #36]	; 0x24
 8008eea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	da00      	bge.n	8008ef2 <_dtoa_r+0x4a6>
 8008ef0:	e172      	b.n	80091d8 <_dtoa_r+0x78c>
 8008ef2:	9a02      	ldr	r2, [sp, #8]
 8008ef4:	2a0e      	cmp	r2, #14
 8008ef6:	dd00      	ble.n	8008efa <_dtoa_r+0x4ae>
 8008ef8:	e16e      	b.n	80091d8 <_dtoa_r+0x78c>
 8008efa:	4b78      	ldr	r3, [pc, #480]	; (80090dc <_dtoa_r+0x690>)
 8008efc:	00d2      	lsls	r2, r2, #3
 8008efe:	189b      	adds	r3, r3, r2
 8008f00:	685c      	ldr	r4, [r3, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	930a      	str	r3, [sp, #40]	; 0x28
 8008f06:	940b      	str	r4, [sp, #44]	; 0x2c
 8008f08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	db00      	blt.n	8008f10 <_dtoa_r+0x4c4>
 8008f0e:	e0f7      	b.n	8009100 <_dtoa_r+0x6b4>
 8008f10:	9b07      	ldr	r3, [sp, #28]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	dd00      	ble.n	8008f18 <_dtoa_r+0x4cc>
 8008f16:	e0f3      	b.n	8009100 <_dtoa_r+0x6b4>
 8008f18:	d000      	beq.n	8008f1c <_dtoa_r+0x4d0>
 8008f1a:	e282      	b.n	8009422 <_dtoa_r+0x9d6>
 8008f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f20:	2200      	movs	r2, #0
 8008f22:	4b74      	ldr	r3, [pc, #464]	; (80090f4 <_dtoa_r+0x6a8>)
 8008f24:	f7f9 f902 	bl	800212c <__aeabi_dmul>
 8008f28:	9a08      	ldr	r2, [sp, #32]
 8008f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2c:	f7f7 fab2 	bl	8000494 <__aeabi_dcmpge>
 8008f30:	9e07      	ldr	r6, [sp, #28]
 8008f32:	0035      	movs	r5, r6
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d000      	beq.n	8008f3a <_dtoa_r+0x4ee>
 8008f38:	e259      	b.n	80093ee <_dtoa_r+0x9a2>
 8008f3a:	9b06      	ldr	r3, [sp, #24]
 8008f3c:	9a06      	ldr	r2, [sp, #24]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	9308      	str	r3, [sp, #32]
 8008f42:	2331      	movs	r3, #49	; 0x31
 8008f44:	7013      	strb	r3, [r2, #0]
 8008f46:	9b02      	ldr	r3, [sp, #8]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	9302      	str	r3, [sp, #8]
 8008f4c:	e254      	b.n	80093f8 <_dtoa_r+0x9ac>
 8008f4e:	4234      	tst	r4, r6
 8008f50:	d007      	beq.n	8008f62 <_dtoa_r+0x516>
 8008f52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f54:	3301      	adds	r3, #1
 8008f56:	9310      	str	r3, [sp, #64]	; 0x40
 8008f58:	682a      	ldr	r2, [r5, #0]
 8008f5a:	686b      	ldr	r3, [r5, #4]
 8008f5c:	f7f9 f8e6 	bl	800212c <__aeabi_dmul>
 8008f60:	0033      	movs	r3, r6
 8008f62:	1064      	asrs	r4, r4, #1
 8008f64:	3508      	adds	r5, #8
 8008f66:	e75a      	b.n	8008e1e <_dtoa_r+0x3d2>
 8008f68:	9e02      	ldr	r6, [sp, #8]
 8008f6a:	9b07      	ldr	r3, [sp, #28]
 8008f6c:	e780      	b.n	8008e70 <_dtoa_r+0x424>
 8008f6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f72:	1e5a      	subs	r2, r3, #1
 8008f74:	4b59      	ldr	r3, [pc, #356]	; (80090dc <_dtoa_r+0x690>)
 8008f76:	00d2      	lsls	r2, r2, #3
 8008f78:	189b      	adds	r3, r3, r2
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2900      	cmp	r1, #0
 8008f80:	d051      	beq.n	8009026 <_dtoa_r+0x5da>
 8008f82:	2000      	movs	r0, #0
 8008f84:	495d      	ldr	r1, [pc, #372]	; (80090fc <_dtoa_r+0x6b0>)
 8008f86:	f7f8 fccf 	bl	8001928 <__aeabi_ddiv>
 8008f8a:	9a08      	ldr	r2, [sp, #32]
 8008f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8e:	f7f9 fb39 	bl	8002604 <__aeabi_dsub>
 8008f92:	9a06      	ldr	r2, [sp, #24]
 8008f94:	9b06      	ldr	r3, [sp, #24]
 8008f96:	4694      	mov	ip, r2
 8008f98:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f9c:	9010      	str	r0, [sp, #64]	; 0x40
 8008f9e:	9111      	str	r1, [sp, #68]	; 0x44
 8008fa0:	4463      	add	r3, ip
 8008fa2:	9319      	str	r3, [sp, #100]	; 0x64
 8008fa4:	0029      	movs	r1, r5
 8008fa6:	0020      	movs	r0, r4
 8008fa8:	f7f9 fedc 	bl	8002d64 <__aeabi_d2iz>
 8008fac:	9014      	str	r0, [sp, #80]	; 0x50
 8008fae:	f7f9 ff0f 	bl	8002dd0 <__aeabi_i2d>
 8008fb2:	0002      	movs	r2, r0
 8008fb4:	000b      	movs	r3, r1
 8008fb6:	0020      	movs	r0, r4
 8008fb8:	0029      	movs	r1, r5
 8008fba:	f7f9 fb23 	bl	8002604 <__aeabi_dsub>
 8008fbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	9308      	str	r3, [sp, #32]
 8008fc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fc8:	0004      	movs	r4, r0
 8008fca:	3330      	adds	r3, #48	; 0x30
 8008fcc:	7013      	strb	r3, [r2, #0]
 8008fce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fd2:	000d      	movs	r5, r1
 8008fd4:	f7f7 fa40 	bl	8000458 <__aeabi_dcmplt>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d175      	bne.n	80090c8 <_dtoa_r+0x67c>
 8008fdc:	0022      	movs	r2, r4
 8008fde:	002b      	movs	r3, r5
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	4940      	ldr	r1, [pc, #256]	; (80090e4 <_dtoa_r+0x698>)
 8008fe4:	f7f9 fb0e 	bl	8002604 <__aeabi_dsub>
 8008fe8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fec:	f7f7 fa34 	bl	8000458 <__aeabi_dcmplt>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d000      	beq.n	8008ff6 <_dtoa_r+0x5aa>
 8008ff4:	e0d2      	b.n	800919c <_dtoa_r+0x750>
 8008ff6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ff8:	9a08      	ldr	r2, [sp, #32]
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d100      	bne.n	8009000 <_dtoa_r+0x5b4>
 8008ffe:	e770      	b.n	8008ee2 <_dtoa_r+0x496>
 8009000:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009002:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009004:	2200      	movs	r2, #0
 8009006:	4b38      	ldr	r3, [pc, #224]	; (80090e8 <_dtoa_r+0x69c>)
 8009008:	f7f9 f890 	bl	800212c <__aeabi_dmul>
 800900c:	4b36      	ldr	r3, [pc, #216]	; (80090e8 <_dtoa_r+0x69c>)
 800900e:	9010      	str	r0, [sp, #64]	; 0x40
 8009010:	9111      	str	r1, [sp, #68]	; 0x44
 8009012:	2200      	movs	r2, #0
 8009014:	0020      	movs	r0, r4
 8009016:	0029      	movs	r1, r5
 8009018:	f7f9 f888 	bl	800212c <__aeabi_dmul>
 800901c:	9b08      	ldr	r3, [sp, #32]
 800901e:	0004      	movs	r4, r0
 8009020:	000d      	movs	r5, r1
 8009022:	9317      	str	r3, [sp, #92]	; 0x5c
 8009024:	e7be      	b.n	8008fa4 <_dtoa_r+0x558>
 8009026:	9808      	ldr	r0, [sp, #32]
 8009028:	9909      	ldr	r1, [sp, #36]	; 0x24
 800902a:	f7f9 f87f 	bl	800212c <__aeabi_dmul>
 800902e:	9a06      	ldr	r2, [sp, #24]
 8009030:	9b06      	ldr	r3, [sp, #24]
 8009032:	4694      	mov	ip, r2
 8009034:	9308      	str	r3, [sp, #32]
 8009036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009038:	9010      	str	r0, [sp, #64]	; 0x40
 800903a:	9111      	str	r1, [sp, #68]	; 0x44
 800903c:	4463      	add	r3, ip
 800903e:	9319      	str	r3, [sp, #100]	; 0x64
 8009040:	0029      	movs	r1, r5
 8009042:	0020      	movs	r0, r4
 8009044:	f7f9 fe8e 	bl	8002d64 <__aeabi_d2iz>
 8009048:	9017      	str	r0, [sp, #92]	; 0x5c
 800904a:	f7f9 fec1 	bl	8002dd0 <__aeabi_i2d>
 800904e:	0002      	movs	r2, r0
 8009050:	000b      	movs	r3, r1
 8009052:	0020      	movs	r0, r4
 8009054:	0029      	movs	r1, r5
 8009056:	f7f9 fad5 	bl	8002604 <__aeabi_dsub>
 800905a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800905c:	9a08      	ldr	r2, [sp, #32]
 800905e:	3330      	adds	r3, #48	; 0x30
 8009060:	7013      	strb	r3, [r2, #0]
 8009062:	0013      	movs	r3, r2
 8009064:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009066:	3301      	adds	r3, #1
 8009068:	0004      	movs	r4, r0
 800906a:	000d      	movs	r5, r1
 800906c:	9308      	str	r3, [sp, #32]
 800906e:	4293      	cmp	r3, r2
 8009070:	d12c      	bne.n	80090cc <_dtoa_r+0x680>
 8009072:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009074:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009076:	9a06      	ldr	r2, [sp, #24]
 8009078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800907a:	4694      	mov	ip, r2
 800907c:	4463      	add	r3, ip
 800907e:	2200      	movs	r2, #0
 8009080:	9308      	str	r3, [sp, #32]
 8009082:	4b1e      	ldr	r3, [pc, #120]	; (80090fc <_dtoa_r+0x6b0>)
 8009084:	f7f8 f914 	bl	80012b0 <__aeabi_dadd>
 8009088:	0002      	movs	r2, r0
 800908a:	000b      	movs	r3, r1
 800908c:	0020      	movs	r0, r4
 800908e:	0029      	movs	r1, r5
 8009090:	f7f7 f9f6 	bl	8000480 <__aeabi_dcmpgt>
 8009094:	2800      	cmp	r0, #0
 8009096:	d000      	beq.n	800909a <_dtoa_r+0x64e>
 8009098:	e080      	b.n	800919c <_dtoa_r+0x750>
 800909a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800909c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800909e:	2000      	movs	r0, #0
 80090a0:	4916      	ldr	r1, [pc, #88]	; (80090fc <_dtoa_r+0x6b0>)
 80090a2:	f7f9 faaf 	bl	8002604 <__aeabi_dsub>
 80090a6:	0002      	movs	r2, r0
 80090a8:	000b      	movs	r3, r1
 80090aa:	0020      	movs	r0, r4
 80090ac:	0029      	movs	r1, r5
 80090ae:	f7f7 f9d3 	bl	8000458 <__aeabi_dcmplt>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d100      	bne.n	80090b8 <_dtoa_r+0x66c>
 80090b6:	e714      	b.n	8008ee2 <_dtoa_r+0x496>
 80090b8:	9b08      	ldr	r3, [sp, #32]
 80090ba:	001a      	movs	r2, r3
 80090bc:	3a01      	subs	r2, #1
 80090be:	9208      	str	r2, [sp, #32]
 80090c0:	7812      	ldrb	r2, [r2, #0]
 80090c2:	2a30      	cmp	r2, #48	; 0x30
 80090c4:	d0f8      	beq.n	80090b8 <_dtoa_r+0x66c>
 80090c6:	9308      	str	r3, [sp, #32]
 80090c8:	9602      	str	r6, [sp, #8]
 80090ca:	e055      	b.n	8009178 <_dtoa_r+0x72c>
 80090cc:	2200      	movs	r2, #0
 80090ce:	4b06      	ldr	r3, [pc, #24]	; (80090e8 <_dtoa_r+0x69c>)
 80090d0:	f7f9 f82c 	bl	800212c <__aeabi_dmul>
 80090d4:	0004      	movs	r4, r0
 80090d6:	000d      	movs	r5, r1
 80090d8:	e7b2      	b.n	8009040 <_dtoa_r+0x5f4>
 80090da:	46c0      	nop			; (mov r8, r8)
 80090dc:	0800b338 	.word	0x0800b338
 80090e0:	0800b310 	.word	0x0800b310
 80090e4:	3ff00000 	.word	0x3ff00000
 80090e8:	40240000 	.word	0x40240000
 80090ec:	401c0000 	.word	0x401c0000
 80090f0:	fcc00000 	.word	0xfcc00000
 80090f4:	40140000 	.word	0x40140000
 80090f8:	7cc00000 	.word	0x7cc00000
 80090fc:	3fe00000 	.word	0x3fe00000
 8009100:	9b07      	ldr	r3, [sp, #28]
 8009102:	9e06      	ldr	r6, [sp, #24]
 8009104:	3b01      	subs	r3, #1
 8009106:	199b      	adds	r3, r3, r6
 8009108:	930c      	str	r3, [sp, #48]	; 0x30
 800910a:	9c08      	ldr	r4, [sp, #32]
 800910c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800910e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009112:	0020      	movs	r0, r4
 8009114:	0029      	movs	r1, r5
 8009116:	f7f8 fc07 	bl	8001928 <__aeabi_ddiv>
 800911a:	f7f9 fe23 	bl	8002d64 <__aeabi_d2iz>
 800911e:	9007      	str	r0, [sp, #28]
 8009120:	f7f9 fe56 	bl	8002dd0 <__aeabi_i2d>
 8009124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009128:	f7f9 f800 	bl	800212c <__aeabi_dmul>
 800912c:	0002      	movs	r2, r0
 800912e:	000b      	movs	r3, r1
 8009130:	0020      	movs	r0, r4
 8009132:	0029      	movs	r1, r5
 8009134:	f7f9 fa66 	bl	8002604 <__aeabi_dsub>
 8009138:	0033      	movs	r3, r6
 800913a:	9a07      	ldr	r2, [sp, #28]
 800913c:	3601      	adds	r6, #1
 800913e:	3230      	adds	r2, #48	; 0x30
 8009140:	701a      	strb	r2, [r3, #0]
 8009142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009144:	9608      	str	r6, [sp, #32]
 8009146:	429a      	cmp	r2, r3
 8009148:	d139      	bne.n	80091be <_dtoa_r+0x772>
 800914a:	0002      	movs	r2, r0
 800914c:	000b      	movs	r3, r1
 800914e:	f7f8 f8af 	bl	80012b0 <__aeabi_dadd>
 8009152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009156:	0004      	movs	r4, r0
 8009158:	000d      	movs	r5, r1
 800915a:	f7f7 f991 	bl	8000480 <__aeabi_dcmpgt>
 800915e:	2800      	cmp	r0, #0
 8009160:	d11b      	bne.n	800919a <_dtoa_r+0x74e>
 8009162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009166:	0020      	movs	r0, r4
 8009168:	0029      	movs	r1, r5
 800916a:	f7f7 f96f 	bl	800044c <__aeabi_dcmpeq>
 800916e:	2800      	cmp	r0, #0
 8009170:	d002      	beq.n	8009178 <_dtoa_r+0x72c>
 8009172:	9b07      	ldr	r3, [sp, #28]
 8009174:	07db      	lsls	r3, r3, #31
 8009176:	d410      	bmi.n	800919a <_dtoa_r+0x74e>
 8009178:	0038      	movs	r0, r7
 800917a:	9905      	ldr	r1, [sp, #20]
 800917c:	f000 fae6 	bl	800974c <_Bfree>
 8009180:	2300      	movs	r3, #0
 8009182:	9a08      	ldr	r2, [sp, #32]
 8009184:	9802      	ldr	r0, [sp, #8]
 8009186:	7013      	strb	r3, [r2, #0]
 8009188:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800918a:	3001      	adds	r0, #1
 800918c:	6018      	str	r0, [r3, #0]
 800918e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009190:	2b00      	cmp	r3, #0
 8009192:	d100      	bne.n	8009196 <_dtoa_r+0x74a>
 8009194:	e4a6      	b.n	8008ae4 <_dtoa_r+0x98>
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	e4a4      	b.n	8008ae4 <_dtoa_r+0x98>
 800919a:	9e02      	ldr	r6, [sp, #8]
 800919c:	9b08      	ldr	r3, [sp, #32]
 800919e:	9308      	str	r3, [sp, #32]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	2a39      	cmp	r2, #57	; 0x39
 80091a6:	d106      	bne.n	80091b6 <_dtoa_r+0x76a>
 80091a8:	9a06      	ldr	r2, [sp, #24]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d1f7      	bne.n	800919e <_dtoa_r+0x752>
 80091ae:	2230      	movs	r2, #48	; 0x30
 80091b0:	9906      	ldr	r1, [sp, #24]
 80091b2:	3601      	adds	r6, #1
 80091b4:	700a      	strb	r2, [r1, #0]
 80091b6:	781a      	ldrb	r2, [r3, #0]
 80091b8:	3201      	adds	r2, #1
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	e784      	b.n	80090c8 <_dtoa_r+0x67c>
 80091be:	2200      	movs	r2, #0
 80091c0:	4baa      	ldr	r3, [pc, #680]	; (800946c <_dtoa_r+0xa20>)
 80091c2:	f7f8 ffb3 	bl	800212c <__aeabi_dmul>
 80091c6:	2200      	movs	r2, #0
 80091c8:	2300      	movs	r3, #0
 80091ca:	0004      	movs	r4, r0
 80091cc:	000d      	movs	r5, r1
 80091ce:	f7f7 f93d 	bl	800044c <__aeabi_dcmpeq>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d09b      	beq.n	800910e <_dtoa_r+0x6c2>
 80091d6:	e7cf      	b.n	8009178 <_dtoa_r+0x72c>
 80091d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80091dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80091de:	2d00      	cmp	r5, #0
 80091e0:	d012      	beq.n	8009208 <_dtoa_r+0x7bc>
 80091e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80091e4:	2a01      	cmp	r2, #1
 80091e6:	dc66      	bgt.n	80092b6 <_dtoa_r+0x86a>
 80091e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	d05d      	beq.n	80092aa <_dtoa_r+0x85e>
 80091ee:	4aa0      	ldr	r2, [pc, #640]	; (8009470 <_dtoa_r+0xa24>)
 80091f0:	189b      	adds	r3, r3, r2
 80091f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f4:	2101      	movs	r1, #1
 80091f6:	18d2      	adds	r2, r2, r3
 80091f8:	920a      	str	r2, [sp, #40]	; 0x28
 80091fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091fc:	0038      	movs	r0, r7
 80091fe:	18d3      	adds	r3, r2, r3
 8009200:	930d      	str	r3, [sp, #52]	; 0x34
 8009202:	f000 fb53 	bl	80098ac <__i2b>
 8009206:	0005      	movs	r5, r0
 8009208:	2c00      	cmp	r4, #0
 800920a:	dd0e      	ble.n	800922a <_dtoa_r+0x7de>
 800920c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800920e:	2b00      	cmp	r3, #0
 8009210:	dd0b      	ble.n	800922a <_dtoa_r+0x7de>
 8009212:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009214:	0023      	movs	r3, r4
 8009216:	4294      	cmp	r4, r2
 8009218:	dd00      	ble.n	800921c <_dtoa_r+0x7d0>
 800921a:	0013      	movs	r3, r2
 800921c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800921e:	1ae4      	subs	r4, r4, r3
 8009220:	1ad2      	subs	r2, r2, r3
 8009222:	920a      	str	r2, [sp, #40]	; 0x28
 8009224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	930d      	str	r3, [sp, #52]	; 0x34
 800922a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01f      	beq.n	8009270 <_dtoa_r+0x824>
 8009230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009232:	2b00      	cmp	r3, #0
 8009234:	d054      	beq.n	80092e0 <_dtoa_r+0x894>
 8009236:	2e00      	cmp	r6, #0
 8009238:	dd11      	ble.n	800925e <_dtoa_r+0x812>
 800923a:	0029      	movs	r1, r5
 800923c:	0032      	movs	r2, r6
 800923e:	0038      	movs	r0, r7
 8009240:	f000 fbfa 	bl	8009a38 <__pow5mult>
 8009244:	9a05      	ldr	r2, [sp, #20]
 8009246:	0001      	movs	r1, r0
 8009248:	0005      	movs	r5, r0
 800924a:	0038      	movs	r0, r7
 800924c:	f000 fb44 	bl	80098d8 <__multiply>
 8009250:	9905      	ldr	r1, [sp, #20]
 8009252:	9014      	str	r0, [sp, #80]	; 0x50
 8009254:	0038      	movs	r0, r7
 8009256:	f000 fa79 	bl	800974c <_Bfree>
 800925a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800925c:	9305      	str	r3, [sp, #20]
 800925e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009260:	1b9a      	subs	r2, r3, r6
 8009262:	42b3      	cmp	r3, r6
 8009264:	d004      	beq.n	8009270 <_dtoa_r+0x824>
 8009266:	0038      	movs	r0, r7
 8009268:	9905      	ldr	r1, [sp, #20]
 800926a:	f000 fbe5 	bl	8009a38 <__pow5mult>
 800926e:	9005      	str	r0, [sp, #20]
 8009270:	2101      	movs	r1, #1
 8009272:	0038      	movs	r0, r7
 8009274:	f000 fb1a 	bl	80098ac <__i2b>
 8009278:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800927a:	0006      	movs	r6, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	dd31      	ble.n	80092e4 <_dtoa_r+0x898>
 8009280:	001a      	movs	r2, r3
 8009282:	0001      	movs	r1, r0
 8009284:	0038      	movs	r0, r7
 8009286:	f000 fbd7 	bl	8009a38 <__pow5mult>
 800928a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800928c:	0006      	movs	r6, r0
 800928e:	2b01      	cmp	r3, #1
 8009290:	dd2d      	ble.n	80092ee <_dtoa_r+0x8a2>
 8009292:	2300      	movs	r3, #0
 8009294:	930e      	str	r3, [sp, #56]	; 0x38
 8009296:	6933      	ldr	r3, [r6, #16]
 8009298:	3303      	adds	r3, #3
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	18f3      	adds	r3, r6, r3
 800929e:	6858      	ldr	r0, [r3, #4]
 80092a0:	f000 fabc 	bl	800981c <__hi0bits>
 80092a4:	2320      	movs	r3, #32
 80092a6:	1a18      	subs	r0, r3, r0
 80092a8:	e039      	b.n	800931e <_dtoa_r+0x8d2>
 80092aa:	2336      	movs	r3, #54	; 0x36
 80092ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80092ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80092b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	e79d      	b.n	80091f2 <_dtoa_r+0x7a6>
 80092b6:	9b07      	ldr	r3, [sp, #28]
 80092b8:	1e5e      	subs	r6, r3, #1
 80092ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092bc:	42b3      	cmp	r3, r6
 80092be:	db07      	blt.n	80092d0 <_dtoa_r+0x884>
 80092c0:	1b9e      	subs	r6, r3, r6
 80092c2:	9b07      	ldr	r3, [sp, #28]
 80092c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	da93      	bge.n	80091f2 <_dtoa_r+0x7a6>
 80092ca:	1ae4      	subs	r4, r4, r3
 80092cc:	2300      	movs	r3, #0
 80092ce:	e790      	b.n	80091f2 <_dtoa_r+0x7a6>
 80092d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80092d4:	1af3      	subs	r3, r6, r3
 80092d6:	18d3      	adds	r3, r2, r3
 80092d8:	960e      	str	r6, [sp, #56]	; 0x38
 80092da:	9315      	str	r3, [sp, #84]	; 0x54
 80092dc:	2600      	movs	r6, #0
 80092de:	e7f0      	b.n	80092c2 <_dtoa_r+0x876>
 80092e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092e2:	e7c0      	b.n	8009266 <_dtoa_r+0x81a>
 80092e4:	2300      	movs	r3, #0
 80092e6:	930e      	str	r3, [sp, #56]	; 0x38
 80092e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	dc13      	bgt.n	8009316 <_dtoa_r+0x8ca>
 80092ee:	2300      	movs	r3, #0
 80092f0:	930e      	str	r3, [sp, #56]	; 0x38
 80092f2:	9b08      	ldr	r3, [sp, #32]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10e      	bne.n	8009316 <_dtoa_r+0x8ca>
 80092f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fa:	031b      	lsls	r3, r3, #12
 80092fc:	d10b      	bne.n	8009316 <_dtoa_r+0x8ca>
 80092fe:	4b5d      	ldr	r3, [pc, #372]	; (8009474 <_dtoa_r+0xa28>)
 8009300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009302:	4213      	tst	r3, r2
 8009304:	d007      	beq.n	8009316 <_dtoa_r+0x8ca>
 8009306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009308:	3301      	adds	r3, #1
 800930a:	930a      	str	r3, [sp, #40]	; 0x28
 800930c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800930e:	3301      	adds	r3, #1
 8009310:	930d      	str	r3, [sp, #52]	; 0x34
 8009312:	2301      	movs	r3, #1
 8009314:	930e      	str	r3, [sp, #56]	; 0x38
 8009316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009318:	2001      	movs	r0, #1
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1bb      	bne.n	8009296 <_dtoa_r+0x84a>
 800931e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009320:	221f      	movs	r2, #31
 8009322:	1818      	adds	r0, r3, r0
 8009324:	0003      	movs	r3, r0
 8009326:	4013      	ands	r3, r2
 8009328:	4210      	tst	r0, r2
 800932a:	d046      	beq.n	80093ba <_dtoa_r+0x96e>
 800932c:	3201      	adds	r2, #1
 800932e:	1ad2      	subs	r2, r2, r3
 8009330:	2a04      	cmp	r2, #4
 8009332:	dd3f      	ble.n	80093b4 <_dtoa_r+0x968>
 8009334:	221c      	movs	r2, #28
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800933a:	18e4      	adds	r4, r4, r3
 800933c:	18d2      	adds	r2, r2, r3
 800933e:	920a      	str	r2, [sp, #40]	; 0x28
 8009340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009342:	18d3      	adds	r3, r2, r3
 8009344:	930d      	str	r3, [sp, #52]	; 0x34
 8009346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009348:	2b00      	cmp	r3, #0
 800934a:	dd05      	ble.n	8009358 <_dtoa_r+0x90c>
 800934c:	001a      	movs	r2, r3
 800934e:	0038      	movs	r0, r7
 8009350:	9905      	ldr	r1, [sp, #20]
 8009352:	f000 fbcd 	bl	8009af0 <__lshift>
 8009356:	9005      	str	r0, [sp, #20]
 8009358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800935a:	2b00      	cmp	r3, #0
 800935c:	dd05      	ble.n	800936a <_dtoa_r+0x91e>
 800935e:	0031      	movs	r1, r6
 8009360:	001a      	movs	r2, r3
 8009362:	0038      	movs	r0, r7
 8009364:	f000 fbc4 	bl	8009af0 <__lshift>
 8009368:	0006      	movs	r6, r0
 800936a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800936c:	2b00      	cmp	r3, #0
 800936e:	d026      	beq.n	80093be <_dtoa_r+0x972>
 8009370:	0031      	movs	r1, r6
 8009372:	9805      	ldr	r0, [sp, #20]
 8009374:	f000 fc2a 	bl	8009bcc <__mcmp>
 8009378:	2800      	cmp	r0, #0
 800937a:	da20      	bge.n	80093be <_dtoa_r+0x972>
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	220a      	movs	r2, #10
 8009380:	3b01      	subs	r3, #1
 8009382:	9302      	str	r3, [sp, #8]
 8009384:	0038      	movs	r0, r7
 8009386:	2300      	movs	r3, #0
 8009388:	9905      	ldr	r1, [sp, #20]
 800938a:	f000 fa03 	bl	8009794 <__multadd>
 800938e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009390:	9005      	str	r0, [sp, #20]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d100      	bne.n	8009398 <_dtoa_r+0x94c>
 8009396:	e166      	b.n	8009666 <_dtoa_r+0xc1a>
 8009398:	2300      	movs	r3, #0
 800939a:	0029      	movs	r1, r5
 800939c:	220a      	movs	r2, #10
 800939e:	0038      	movs	r0, r7
 80093a0:	f000 f9f8 	bl	8009794 <__multadd>
 80093a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093a6:	0005      	movs	r5, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dc47      	bgt.n	800943c <_dtoa_r+0x9f0>
 80093ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	dc0d      	bgt.n	80093ce <_dtoa_r+0x982>
 80093b2:	e043      	b.n	800943c <_dtoa_r+0x9f0>
 80093b4:	2a04      	cmp	r2, #4
 80093b6:	d0c6      	beq.n	8009346 <_dtoa_r+0x8fa>
 80093b8:	0013      	movs	r3, r2
 80093ba:	331c      	adds	r3, #28
 80093bc:	e7bc      	b.n	8009338 <_dtoa_r+0x8ec>
 80093be:	9b07      	ldr	r3, [sp, #28]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	dc35      	bgt.n	8009430 <_dtoa_r+0x9e4>
 80093c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	dd32      	ble.n	8009430 <_dtoa_r+0x9e4>
 80093ca:	9b07      	ldr	r3, [sp, #28]
 80093cc:	930c      	str	r3, [sp, #48]	; 0x30
 80093ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10c      	bne.n	80093ee <_dtoa_r+0x9a2>
 80093d4:	0031      	movs	r1, r6
 80093d6:	2205      	movs	r2, #5
 80093d8:	0038      	movs	r0, r7
 80093da:	f000 f9db 	bl	8009794 <__multadd>
 80093de:	0006      	movs	r6, r0
 80093e0:	0001      	movs	r1, r0
 80093e2:	9805      	ldr	r0, [sp, #20]
 80093e4:	f000 fbf2 	bl	8009bcc <__mcmp>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	dd00      	ble.n	80093ee <_dtoa_r+0x9a2>
 80093ec:	e5a5      	b.n	8008f3a <_dtoa_r+0x4ee>
 80093ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093f0:	43db      	mvns	r3, r3
 80093f2:	9302      	str	r3, [sp, #8]
 80093f4:	9b06      	ldr	r3, [sp, #24]
 80093f6:	9308      	str	r3, [sp, #32]
 80093f8:	2400      	movs	r4, #0
 80093fa:	0031      	movs	r1, r6
 80093fc:	0038      	movs	r0, r7
 80093fe:	f000 f9a5 	bl	800974c <_Bfree>
 8009402:	2d00      	cmp	r5, #0
 8009404:	d100      	bne.n	8009408 <_dtoa_r+0x9bc>
 8009406:	e6b7      	b.n	8009178 <_dtoa_r+0x72c>
 8009408:	2c00      	cmp	r4, #0
 800940a:	d005      	beq.n	8009418 <_dtoa_r+0x9cc>
 800940c:	42ac      	cmp	r4, r5
 800940e:	d003      	beq.n	8009418 <_dtoa_r+0x9cc>
 8009410:	0021      	movs	r1, r4
 8009412:	0038      	movs	r0, r7
 8009414:	f000 f99a 	bl	800974c <_Bfree>
 8009418:	0029      	movs	r1, r5
 800941a:	0038      	movs	r0, r7
 800941c:	f000 f996 	bl	800974c <_Bfree>
 8009420:	e6aa      	b.n	8009178 <_dtoa_r+0x72c>
 8009422:	2600      	movs	r6, #0
 8009424:	0035      	movs	r5, r6
 8009426:	e7e2      	b.n	80093ee <_dtoa_r+0x9a2>
 8009428:	9602      	str	r6, [sp, #8]
 800942a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800942c:	0035      	movs	r5, r6
 800942e:	e584      	b.n	8008f3a <_dtoa_r+0x4ee>
 8009430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009432:	2b00      	cmp	r3, #0
 8009434:	d100      	bne.n	8009438 <_dtoa_r+0x9ec>
 8009436:	e0ce      	b.n	80095d6 <_dtoa_r+0xb8a>
 8009438:	9b07      	ldr	r3, [sp, #28]
 800943a:	930c      	str	r3, [sp, #48]	; 0x30
 800943c:	2c00      	cmp	r4, #0
 800943e:	dd05      	ble.n	800944c <_dtoa_r+0xa00>
 8009440:	0029      	movs	r1, r5
 8009442:	0022      	movs	r2, r4
 8009444:	0038      	movs	r0, r7
 8009446:	f000 fb53 	bl	8009af0 <__lshift>
 800944a:	0005      	movs	r5, r0
 800944c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800944e:	0028      	movs	r0, r5
 8009450:	2b00      	cmp	r3, #0
 8009452:	d022      	beq.n	800949a <_dtoa_r+0xa4e>
 8009454:	0038      	movs	r0, r7
 8009456:	6869      	ldr	r1, [r5, #4]
 8009458:	f000 f934 	bl	80096c4 <_Balloc>
 800945c:	1e04      	subs	r4, r0, #0
 800945e:	d10f      	bne.n	8009480 <_dtoa_r+0xa34>
 8009460:	0002      	movs	r2, r0
 8009462:	4b05      	ldr	r3, [pc, #20]	; (8009478 <_dtoa_r+0xa2c>)
 8009464:	4905      	ldr	r1, [pc, #20]	; (800947c <_dtoa_r+0xa30>)
 8009466:	f7ff fb06 	bl	8008a76 <_dtoa_r+0x2a>
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	40240000 	.word	0x40240000
 8009470:	00000433 	.word	0x00000433
 8009474:	7ff00000 	.word	0x7ff00000
 8009478:	0800b29f 	.word	0x0800b29f
 800947c:	000002ea 	.word	0x000002ea
 8009480:	0029      	movs	r1, r5
 8009482:	692b      	ldr	r3, [r5, #16]
 8009484:	310c      	adds	r1, #12
 8009486:	1c9a      	adds	r2, r3, #2
 8009488:	0092      	lsls	r2, r2, #2
 800948a:	300c      	adds	r0, #12
 800948c:	f000 f911 	bl	80096b2 <memcpy>
 8009490:	2201      	movs	r2, #1
 8009492:	0021      	movs	r1, r4
 8009494:	0038      	movs	r0, r7
 8009496:	f000 fb2b 	bl	8009af0 <__lshift>
 800949a:	9b06      	ldr	r3, [sp, #24]
 800949c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800949e:	930a      	str	r3, [sp, #40]	; 0x28
 80094a0:	3b01      	subs	r3, #1
 80094a2:	189b      	adds	r3, r3, r2
 80094a4:	2201      	movs	r2, #1
 80094a6:	002c      	movs	r4, r5
 80094a8:	0005      	movs	r5, r0
 80094aa:	9314      	str	r3, [sp, #80]	; 0x50
 80094ac:	9b08      	ldr	r3, [sp, #32]
 80094ae:	4013      	ands	r3, r2
 80094b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80094b2:	0031      	movs	r1, r6
 80094b4:	9805      	ldr	r0, [sp, #20]
 80094b6:	f7ff fa3d 	bl	8008934 <quorem>
 80094ba:	0003      	movs	r3, r0
 80094bc:	0021      	movs	r1, r4
 80094be:	3330      	adds	r3, #48	; 0x30
 80094c0:	900d      	str	r0, [sp, #52]	; 0x34
 80094c2:	9805      	ldr	r0, [sp, #20]
 80094c4:	9307      	str	r3, [sp, #28]
 80094c6:	f000 fb81 	bl	8009bcc <__mcmp>
 80094ca:	002a      	movs	r2, r5
 80094cc:	900e      	str	r0, [sp, #56]	; 0x38
 80094ce:	0031      	movs	r1, r6
 80094d0:	0038      	movs	r0, r7
 80094d2:	f000 fb97 	bl	8009c04 <__mdiff>
 80094d6:	68c3      	ldr	r3, [r0, #12]
 80094d8:	9008      	str	r0, [sp, #32]
 80094da:	9310      	str	r3, [sp, #64]	; 0x40
 80094dc:	2301      	movs	r3, #1
 80094de:	930c      	str	r3, [sp, #48]	; 0x30
 80094e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <_dtoa_r+0xaa4>
 80094e6:	0001      	movs	r1, r0
 80094e8:	9805      	ldr	r0, [sp, #20]
 80094ea:	f000 fb6f 	bl	8009bcc <__mcmp>
 80094ee:	900c      	str	r0, [sp, #48]	; 0x30
 80094f0:	0038      	movs	r0, r7
 80094f2:	9908      	ldr	r1, [sp, #32]
 80094f4:	f000 f92a 	bl	800974c <_Bfree>
 80094f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094fc:	3301      	adds	r3, #1
 80094fe:	9308      	str	r3, [sp, #32]
 8009500:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009502:	4313      	orrs	r3, r2
 8009504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009506:	4313      	orrs	r3, r2
 8009508:	d10c      	bne.n	8009524 <_dtoa_r+0xad8>
 800950a:	9b07      	ldr	r3, [sp, #28]
 800950c:	2b39      	cmp	r3, #57	; 0x39
 800950e:	d026      	beq.n	800955e <_dtoa_r+0xb12>
 8009510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009512:	2b00      	cmp	r3, #0
 8009514:	dd02      	ble.n	800951c <_dtoa_r+0xad0>
 8009516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009518:	3331      	adds	r3, #49	; 0x31
 800951a:	9307      	str	r3, [sp, #28]
 800951c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800951e:	9a07      	ldr	r2, [sp, #28]
 8009520:	701a      	strb	r2, [r3, #0]
 8009522:	e76a      	b.n	80093fa <_dtoa_r+0x9ae>
 8009524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009526:	2b00      	cmp	r3, #0
 8009528:	db04      	blt.n	8009534 <_dtoa_r+0xae8>
 800952a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800952c:	4313      	orrs	r3, r2
 800952e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009530:	4313      	orrs	r3, r2
 8009532:	d11f      	bne.n	8009574 <_dtoa_r+0xb28>
 8009534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009536:	2b00      	cmp	r3, #0
 8009538:	ddf0      	ble.n	800951c <_dtoa_r+0xad0>
 800953a:	9905      	ldr	r1, [sp, #20]
 800953c:	2201      	movs	r2, #1
 800953e:	0038      	movs	r0, r7
 8009540:	f000 fad6 	bl	8009af0 <__lshift>
 8009544:	0031      	movs	r1, r6
 8009546:	9005      	str	r0, [sp, #20]
 8009548:	f000 fb40 	bl	8009bcc <__mcmp>
 800954c:	2800      	cmp	r0, #0
 800954e:	dc03      	bgt.n	8009558 <_dtoa_r+0xb0c>
 8009550:	d1e4      	bne.n	800951c <_dtoa_r+0xad0>
 8009552:	9b07      	ldr	r3, [sp, #28]
 8009554:	07db      	lsls	r3, r3, #31
 8009556:	d5e1      	bpl.n	800951c <_dtoa_r+0xad0>
 8009558:	9b07      	ldr	r3, [sp, #28]
 800955a:	2b39      	cmp	r3, #57	; 0x39
 800955c:	d1db      	bne.n	8009516 <_dtoa_r+0xaca>
 800955e:	2339      	movs	r3, #57	; 0x39
 8009560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009562:	7013      	strb	r3, [r2, #0]
 8009564:	9b08      	ldr	r3, [sp, #32]
 8009566:	9308      	str	r3, [sp, #32]
 8009568:	3b01      	subs	r3, #1
 800956a:	781a      	ldrb	r2, [r3, #0]
 800956c:	2a39      	cmp	r2, #57	; 0x39
 800956e:	d068      	beq.n	8009642 <_dtoa_r+0xbf6>
 8009570:	3201      	adds	r2, #1
 8009572:	e7d5      	b.n	8009520 <_dtoa_r+0xad4>
 8009574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009576:	2b00      	cmp	r3, #0
 8009578:	dd07      	ble.n	800958a <_dtoa_r+0xb3e>
 800957a:	9b07      	ldr	r3, [sp, #28]
 800957c:	2b39      	cmp	r3, #57	; 0x39
 800957e:	d0ee      	beq.n	800955e <_dtoa_r+0xb12>
 8009580:	9b07      	ldr	r3, [sp, #28]
 8009582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009584:	3301      	adds	r3, #1
 8009586:	7013      	strb	r3, [r2, #0]
 8009588:	e737      	b.n	80093fa <_dtoa_r+0x9ae>
 800958a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800958c:	9a07      	ldr	r2, [sp, #28]
 800958e:	701a      	strb	r2, [r3, #0]
 8009590:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009594:	4293      	cmp	r3, r2
 8009596:	d03e      	beq.n	8009616 <_dtoa_r+0xbca>
 8009598:	2300      	movs	r3, #0
 800959a:	220a      	movs	r2, #10
 800959c:	9905      	ldr	r1, [sp, #20]
 800959e:	0038      	movs	r0, r7
 80095a0:	f000 f8f8 	bl	8009794 <__multadd>
 80095a4:	2300      	movs	r3, #0
 80095a6:	9005      	str	r0, [sp, #20]
 80095a8:	220a      	movs	r2, #10
 80095aa:	0021      	movs	r1, r4
 80095ac:	0038      	movs	r0, r7
 80095ae:	42ac      	cmp	r4, r5
 80095b0:	d106      	bne.n	80095c0 <_dtoa_r+0xb74>
 80095b2:	f000 f8ef 	bl	8009794 <__multadd>
 80095b6:	0004      	movs	r4, r0
 80095b8:	0005      	movs	r5, r0
 80095ba:	9b08      	ldr	r3, [sp, #32]
 80095bc:	930a      	str	r3, [sp, #40]	; 0x28
 80095be:	e778      	b.n	80094b2 <_dtoa_r+0xa66>
 80095c0:	f000 f8e8 	bl	8009794 <__multadd>
 80095c4:	0029      	movs	r1, r5
 80095c6:	0004      	movs	r4, r0
 80095c8:	2300      	movs	r3, #0
 80095ca:	220a      	movs	r2, #10
 80095cc:	0038      	movs	r0, r7
 80095ce:	f000 f8e1 	bl	8009794 <__multadd>
 80095d2:	0005      	movs	r5, r0
 80095d4:	e7f1      	b.n	80095ba <_dtoa_r+0xb6e>
 80095d6:	9b07      	ldr	r3, [sp, #28]
 80095d8:	930c      	str	r3, [sp, #48]	; 0x30
 80095da:	2400      	movs	r4, #0
 80095dc:	0031      	movs	r1, r6
 80095de:	9805      	ldr	r0, [sp, #20]
 80095e0:	f7ff f9a8 	bl	8008934 <quorem>
 80095e4:	9b06      	ldr	r3, [sp, #24]
 80095e6:	3030      	adds	r0, #48	; 0x30
 80095e8:	5518      	strb	r0, [r3, r4]
 80095ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095ec:	3401      	adds	r4, #1
 80095ee:	9007      	str	r0, [sp, #28]
 80095f0:	42a3      	cmp	r3, r4
 80095f2:	dd07      	ble.n	8009604 <_dtoa_r+0xbb8>
 80095f4:	2300      	movs	r3, #0
 80095f6:	220a      	movs	r2, #10
 80095f8:	0038      	movs	r0, r7
 80095fa:	9905      	ldr	r1, [sp, #20]
 80095fc:	f000 f8ca 	bl	8009794 <__multadd>
 8009600:	9005      	str	r0, [sp, #20]
 8009602:	e7eb      	b.n	80095dc <_dtoa_r+0xb90>
 8009604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009606:	2001      	movs	r0, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	dd00      	ble.n	800960e <_dtoa_r+0xbc2>
 800960c:	0018      	movs	r0, r3
 800960e:	2400      	movs	r4, #0
 8009610:	9b06      	ldr	r3, [sp, #24]
 8009612:	181b      	adds	r3, r3, r0
 8009614:	9308      	str	r3, [sp, #32]
 8009616:	9905      	ldr	r1, [sp, #20]
 8009618:	2201      	movs	r2, #1
 800961a:	0038      	movs	r0, r7
 800961c:	f000 fa68 	bl	8009af0 <__lshift>
 8009620:	0031      	movs	r1, r6
 8009622:	9005      	str	r0, [sp, #20]
 8009624:	f000 fad2 	bl	8009bcc <__mcmp>
 8009628:	2800      	cmp	r0, #0
 800962a:	dc9b      	bgt.n	8009564 <_dtoa_r+0xb18>
 800962c:	d102      	bne.n	8009634 <_dtoa_r+0xbe8>
 800962e:	9b07      	ldr	r3, [sp, #28]
 8009630:	07db      	lsls	r3, r3, #31
 8009632:	d497      	bmi.n	8009564 <_dtoa_r+0xb18>
 8009634:	9b08      	ldr	r3, [sp, #32]
 8009636:	9308      	str	r3, [sp, #32]
 8009638:	3b01      	subs	r3, #1
 800963a:	781a      	ldrb	r2, [r3, #0]
 800963c:	2a30      	cmp	r2, #48	; 0x30
 800963e:	d0fa      	beq.n	8009636 <_dtoa_r+0xbea>
 8009640:	e6db      	b.n	80093fa <_dtoa_r+0x9ae>
 8009642:	9a06      	ldr	r2, [sp, #24]
 8009644:	429a      	cmp	r2, r3
 8009646:	d18e      	bne.n	8009566 <_dtoa_r+0xb1a>
 8009648:	9b02      	ldr	r3, [sp, #8]
 800964a:	3301      	adds	r3, #1
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	2331      	movs	r3, #49	; 0x31
 8009650:	e799      	b.n	8009586 <_dtoa_r+0xb3a>
 8009652:	4b09      	ldr	r3, [pc, #36]	; (8009678 <_dtoa_r+0xc2c>)
 8009654:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009656:	9306      	str	r3, [sp, #24]
 8009658:	4b08      	ldr	r3, [pc, #32]	; (800967c <_dtoa_r+0xc30>)
 800965a:	2a00      	cmp	r2, #0
 800965c:	d001      	beq.n	8009662 <_dtoa_r+0xc16>
 800965e:	f7ff fa3f 	bl	8008ae0 <_dtoa_r+0x94>
 8009662:	f7ff fa3f 	bl	8008ae4 <_dtoa_r+0x98>
 8009666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	dcb6      	bgt.n	80095da <_dtoa_r+0xb8e>
 800966c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800966e:	2b02      	cmp	r3, #2
 8009670:	dd00      	ble.n	8009674 <_dtoa_r+0xc28>
 8009672:	e6ac      	b.n	80093ce <_dtoa_r+0x982>
 8009674:	e7b1      	b.n	80095da <_dtoa_r+0xb8e>
 8009676:	46c0      	nop			; (mov r8, r8)
 8009678:	0800b220 	.word	0x0800b220
 800967c:	0800b228 	.word	0x0800b228

08009680 <_localeconv_r>:
 8009680:	4800      	ldr	r0, [pc, #0]	; (8009684 <_localeconv_r+0x4>)
 8009682:	4770      	bx	lr
 8009684:	20000168 	.word	0x20000168

08009688 <malloc>:
 8009688:	b510      	push	{r4, lr}
 800968a:	4b03      	ldr	r3, [pc, #12]	; (8009698 <malloc+0x10>)
 800968c:	0001      	movs	r1, r0
 800968e:	6818      	ldr	r0, [r3, #0]
 8009690:	f000 fc4c 	bl	8009f2c <_malloc_r>
 8009694:	bd10      	pop	{r4, pc}
 8009696:	46c0      	nop			; (mov r8, r8)
 8009698:	20000014 	.word	0x20000014

0800969c <memchr>:
 800969c:	b2c9      	uxtb	r1, r1
 800969e:	1882      	adds	r2, r0, r2
 80096a0:	4290      	cmp	r0, r2
 80096a2:	d101      	bne.n	80096a8 <memchr+0xc>
 80096a4:	2000      	movs	r0, #0
 80096a6:	4770      	bx	lr
 80096a8:	7803      	ldrb	r3, [r0, #0]
 80096aa:	428b      	cmp	r3, r1
 80096ac:	d0fb      	beq.n	80096a6 <memchr+0xa>
 80096ae:	3001      	adds	r0, #1
 80096b0:	e7f6      	b.n	80096a0 <memchr+0x4>

080096b2 <memcpy>:
 80096b2:	2300      	movs	r3, #0
 80096b4:	b510      	push	{r4, lr}
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d100      	bne.n	80096bc <memcpy+0xa>
 80096ba:	bd10      	pop	{r4, pc}
 80096bc:	5ccc      	ldrb	r4, [r1, r3]
 80096be:	54c4      	strb	r4, [r0, r3]
 80096c0:	3301      	adds	r3, #1
 80096c2:	e7f8      	b.n	80096b6 <memcpy+0x4>

080096c4 <_Balloc>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096c8:	0006      	movs	r6, r0
 80096ca:	000c      	movs	r4, r1
 80096cc:	2d00      	cmp	r5, #0
 80096ce:	d10e      	bne.n	80096ee <_Balloc+0x2a>
 80096d0:	2010      	movs	r0, #16
 80096d2:	f7ff ffd9 	bl	8009688 <malloc>
 80096d6:	1e02      	subs	r2, r0, #0
 80096d8:	6270      	str	r0, [r6, #36]	; 0x24
 80096da:	d104      	bne.n	80096e6 <_Balloc+0x22>
 80096dc:	2166      	movs	r1, #102	; 0x66
 80096de:	4b19      	ldr	r3, [pc, #100]	; (8009744 <_Balloc+0x80>)
 80096e0:	4819      	ldr	r0, [pc, #100]	; (8009748 <_Balloc+0x84>)
 80096e2:	f000 fcab 	bl	800a03c <__assert_func>
 80096e6:	6045      	str	r5, [r0, #4]
 80096e8:	6085      	str	r5, [r0, #8]
 80096ea:	6005      	str	r5, [r0, #0]
 80096ec:	60c5      	str	r5, [r0, #12]
 80096ee:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80096f0:	68eb      	ldr	r3, [r5, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d013      	beq.n	800971e <_Balloc+0x5a>
 80096f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80096f8:	00a2      	lsls	r2, r4, #2
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	189b      	adds	r3, r3, r2
 80096fe:	6818      	ldr	r0, [r3, #0]
 8009700:	2800      	cmp	r0, #0
 8009702:	d118      	bne.n	8009736 <_Balloc+0x72>
 8009704:	2101      	movs	r1, #1
 8009706:	000d      	movs	r5, r1
 8009708:	40a5      	lsls	r5, r4
 800970a:	1d6a      	adds	r2, r5, #5
 800970c:	0030      	movs	r0, r6
 800970e:	0092      	lsls	r2, r2, #2
 8009710:	f000 fb74 	bl	8009dfc <_calloc_r>
 8009714:	2800      	cmp	r0, #0
 8009716:	d00c      	beq.n	8009732 <_Balloc+0x6e>
 8009718:	6044      	str	r4, [r0, #4]
 800971a:	6085      	str	r5, [r0, #8]
 800971c:	e00d      	b.n	800973a <_Balloc+0x76>
 800971e:	2221      	movs	r2, #33	; 0x21
 8009720:	2104      	movs	r1, #4
 8009722:	0030      	movs	r0, r6
 8009724:	f000 fb6a 	bl	8009dfc <_calloc_r>
 8009728:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800972a:	60e8      	str	r0, [r5, #12]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e1      	bne.n	80096f6 <_Balloc+0x32>
 8009732:	2000      	movs	r0, #0
 8009734:	bd70      	pop	{r4, r5, r6, pc}
 8009736:	6802      	ldr	r2, [r0, #0]
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	2300      	movs	r3, #0
 800973c:	6103      	str	r3, [r0, #16]
 800973e:	60c3      	str	r3, [r0, #12]
 8009740:	e7f8      	b.n	8009734 <_Balloc+0x70>
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	0800b22d 	.word	0x0800b22d
 8009748:	0800b2b0 	.word	0x0800b2b0

0800974c <_Bfree>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009750:	0005      	movs	r5, r0
 8009752:	000c      	movs	r4, r1
 8009754:	2e00      	cmp	r6, #0
 8009756:	d10e      	bne.n	8009776 <_Bfree+0x2a>
 8009758:	2010      	movs	r0, #16
 800975a:	f7ff ff95 	bl	8009688 <malloc>
 800975e:	1e02      	subs	r2, r0, #0
 8009760:	6268      	str	r0, [r5, #36]	; 0x24
 8009762:	d104      	bne.n	800976e <_Bfree+0x22>
 8009764:	218a      	movs	r1, #138	; 0x8a
 8009766:	4b09      	ldr	r3, [pc, #36]	; (800978c <_Bfree+0x40>)
 8009768:	4809      	ldr	r0, [pc, #36]	; (8009790 <_Bfree+0x44>)
 800976a:	f000 fc67 	bl	800a03c <__assert_func>
 800976e:	6046      	str	r6, [r0, #4]
 8009770:	6086      	str	r6, [r0, #8]
 8009772:	6006      	str	r6, [r0, #0]
 8009774:	60c6      	str	r6, [r0, #12]
 8009776:	2c00      	cmp	r4, #0
 8009778:	d007      	beq.n	800978a <_Bfree+0x3e>
 800977a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800977c:	6862      	ldr	r2, [r4, #4]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	0092      	lsls	r2, r2, #2
 8009782:	189b      	adds	r3, r3, r2
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	6022      	str	r2, [r4, #0]
 8009788:	601c      	str	r4, [r3, #0]
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	0800b22d 	.word	0x0800b22d
 8009790:	0800b2b0 	.word	0x0800b2b0

08009794 <__multadd>:
 8009794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009796:	000e      	movs	r6, r1
 8009798:	9001      	str	r0, [sp, #4]
 800979a:	000c      	movs	r4, r1
 800979c:	001d      	movs	r5, r3
 800979e:	2000      	movs	r0, #0
 80097a0:	690f      	ldr	r7, [r1, #16]
 80097a2:	3614      	adds	r6, #20
 80097a4:	6833      	ldr	r3, [r6, #0]
 80097a6:	3001      	adds	r0, #1
 80097a8:	b299      	uxth	r1, r3
 80097aa:	4351      	muls	r1, r2
 80097ac:	0c1b      	lsrs	r3, r3, #16
 80097ae:	4353      	muls	r3, r2
 80097b0:	1949      	adds	r1, r1, r5
 80097b2:	0c0d      	lsrs	r5, r1, #16
 80097b4:	195b      	adds	r3, r3, r5
 80097b6:	0c1d      	lsrs	r5, r3, #16
 80097b8:	b289      	uxth	r1, r1
 80097ba:	041b      	lsls	r3, r3, #16
 80097bc:	185b      	adds	r3, r3, r1
 80097be:	c608      	stmia	r6!, {r3}
 80097c0:	4287      	cmp	r7, r0
 80097c2:	dcef      	bgt.n	80097a4 <__multadd+0x10>
 80097c4:	2d00      	cmp	r5, #0
 80097c6:	d022      	beq.n	800980e <__multadd+0x7a>
 80097c8:	68a3      	ldr	r3, [r4, #8]
 80097ca:	42bb      	cmp	r3, r7
 80097cc:	dc19      	bgt.n	8009802 <__multadd+0x6e>
 80097ce:	6863      	ldr	r3, [r4, #4]
 80097d0:	9801      	ldr	r0, [sp, #4]
 80097d2:	1c59      	adds	r1, r3, #1
 80097d4:	f7ff ff76 	bl	80096c4 <_Balloc>
 80097d8:	1e06      	subs	r6, r0, #0
 80097da:	d105      	bne.n	80097e8 <__multadd+0x54>
 80097dc:	0002      	movs	r2, r0
 80097de:	21b5      	movs	r1, #181	; 0xb5
 80097e0:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <__multadd+0x80>)
 80097e2:	480d      	ldr	r0, [pc, #52]	; (8009818 <__multadd+0x84>)
 80097e4:	f000 fc2a 	bl	800a03c <__assert_func>
 80097e8:	0021      	movs	r1, r4
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	310c      	adds	r1, #12
 80097ee:	1c9a      	adds	r2, r3, #2
 80097f0:	0092      	lsls	r2, r2, #2
 80097f2:	300c      	adds	r0, #12
 80097f4:	f7ff ff5d 	bl	80096b2 <memcpy>
 80097f8:	0021      	movs	r1, r4
 80097fa:	9801      	ldr	r0, [sp, #4]
 80097fc:	f7ff ffa6 	bl	800974c <_Bfree>
 8009800:	0034      	movs	r4, r6
 8009802:	1d3b      	adds	r3, r7, #4
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	18e3      	adds	r3, r4, r3
 8009808:	605d      	str	r5, [r3, #4]
 800980a:	1c7b      	adds	r3, r7, #1
 800980c:	6123      	str	r3, [r4, #16]
 800980e:	0020      	movs	r0, r4
 8009810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	0800b29f 	.word	0x0800b29f
 8009818:	0800b2b0 	.word	0x0800b2b0

0800981c <__hi0bits>:
 800981c:	0003      	movs	r3, r0
 800981e:	0c02      	lsrs	r2, r0, #16
 8009820:	2000      	movs	r0, #0
 8009822:	4282      	cmp	r2, r0
 8009824:	d101      	bne.n	800982a <__hi0bits+0xe>
 8009826:	041b      	lsls	r3, r3, #16
 8009828:	3010      	adds	r0, #16
 800982a:	0e1a      	lsrs	r2, r3, #24
 800982c:	d101      	bne.n	8009832 <__hi0bits+0x16>
 800982e:	3008      	adds	r0, #8
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	0f1a      	lsrs	r2, r3, #28
 8009834:	d101      	bne.n	800983a <__hi0bits+0x1e>
 8009836:	3004      	adds	r0, #4
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	0f9a      	lsrs	r2, r3, #30
 800983c:	d101      	bne.n	8009842 <__hi0bits+0x26>
 800983e:	3002      	adds	r0, #2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	2b00      	cmp	r3, #0
 8009844:	db03      	blt.n	800984e <__hi0bits+0x32>
 8009846:	3001      	adds	r0, #1
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	d400      	bmi.n	800984e <__hi0bits+0x32>
 800984c:	2020      	movs	r0, #32
 800984e:	4770      	bx	lr

08009850 <__lo0bits>:
 8009850:	6803      	ldr	r3, [r0, #0]
 8009852:	0002      	movs	r2, r0
 8009854:	2107      	movs	r1, #7
 8009856:	0018      	movs	r0, r3
 8009858:	4008      	ands	r0, r1
 800985a:	420b      	tst	r3, r1
 800985c:	d00d      	beq.n	800987a <__lo0bits+0x2a>
 800985e:	3906      	subs	r1, #6
 8009860:	2000      	movs	r0, #0
 8009862:	420b      	tst	r3, r1
 8009864:	d105      	bne.n	8009872 <__lo0bits+0x22>
 8009866:	3002      	adds	r0, #2
 8009868:	4203      	tst	r3, r0
 800986a:	d003      	beq.n	8009874 <__lo0bits+0x24>
 800986c:	40cb      	lsrs	r3, r1
 800986e:	0008      	movs	r0, r1
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	4770      	bx	lr
 8009874:	089b      	lsrs	r3, r3, #2
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	e7fb      	b.n	8009872 <__lo0bits+0x22>
 800987a:	b299      	uxth	r1, r3
 800987c:	2900      	cmp	r1, #0
 800987e:	d101      	bne.n	8009884 <__lo0bits+0x34>
 8009880:	2010      	movs	r0, #16
 8009882:	0c1b      	lsrs	r3, r3, #16
 8009884:	b2d9      	uxtb	r1, r3
 8009886:	2900      	cmp	r1, #0
 8009888:	d101      	bne.n	800988e <__lo0bits+0x3e>
 800988a:	3008      	adds	r0, #8
 800988c:	0a1b      	lsrs	r3, r3, #8
 800988e:	0719      	lsls	r1, r3, #28
 8009890:	d101      	bne.n	8009896 <__lo0bits+0x46>
 8009892:	3004      	adds	r0, #4
 8009894:	091b      	lsrs	r3, r3, #4
 8009896:	0799      	lsls	r1, r3, #30
 8009898:	d101      	bne.n	800989e <__lo0bits+0x4e>
 800989a:	3002      	adds	r0, #2
 800989c:	089b      	lsrs	r3, r3, #2
 800989e:	07d9      	lsls	r1, r3, #31
 80098a0:	d4e9      	bmi.n	8009876 <__lo0bits+0x26>
 80098a2:	3001      	adds	r0, #1
 80098a4:	085b      	lsrs	r3, r3, #1
 80098a6:	d1e6      	bne.n	8009876 <__lo0bits+0x26>
 80098a8:	2020      	movs	r0, #32
 80098aa:	e7e2      	b.n	8009872 <__lo0bits+0x22>

080098ac <__i2b>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	000c      	movs	r4, r1
 80098b0:	2101      	movs	r1, #1
 80098b2:	f7ff ff07 	bl	80096c4 <_Balloc>
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d106      	bne.n	80098c8 <__i2b+0x1c>
 80098ba:	21a0      	movs	r1, #160	; 0xa0
 80098bc:	0002      	movs	r2, r0
 80098be:	4b04      	ldr	r3, [pc, #16]	; (80098d0 <__i2b+0x24>)
 80098c0:	4804      	ldr	r0, [pc, #16]	; (80098d4 <__i2b+0x28>)
 80098c2:	0049      	lsls	r1, r1, #1
 80098c4:	f000 fbba 	bl	800a03c <__assert_func>
 80098c8:	2301      	movs	r3, #1
 80098ca:	6144      	str	r4, [r0, #20]
 80098cc:	6103      	str	r3, [r0, #16]
 80098ce:	bd10      	pop	{r4, pc}
 80098d0:	0800b29f 	.word	0x0800b29f
 80098d4:	0800b2b0 	.word	0x0800b2b0

080098d8 <__multiply>:
 80098d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098da:	690b      	ldr	r3, [r1, #16]
 80098dc:	0014      	movs	r4, r2
 80098de:	6912      	ldr	r2, [r2, #16]
 80098e0:	000d      	movs	r5, r1
 80098e2:	b089      	sub	sp, #36	; 0x24
 80098e4:	4293      	cmp	r3, r2
 80098e6:	da01      	bge.n	80098ec <__multiply+0x14>
 80098e8:	0025      	movs	r5, r4
 80098ea:	000c      	movs	r4, r1
 80098ec:	692f      	ldr	r7, [r5, #16]
 80098ee:	6926      	ldr	r6, [r4, #16]
 80098f0:	6869      	ldr	r1, [r5, #4]
 80098f2:	19bb      	adds	r3, r7, r6
 80098f4:	9302      	str	r3, [sp, #8]
 80098f6:	68ab      	ldr	r3, [r5, #8]
 80098f8:	19ba      	adds	r2, r7, r6
 80098fa:	4293      	cmp	r3, r2
 80098fc:	da00      	bge.n	8009900 <__multiply+0x28>
 80098fe:	3101      	adds	r1, #1
 8009900:	f7ff fee0 	bl	80096c4 <_Balloc>
 8009904:	9001      	str	r0, [sp, #4]
 8009906:	2800      	cmp	r0, #0
 8009908:	d106      	bne.n	8009918 <__multiply+0x40>
 800990a:	215e      	movs	r1, #94	; 0x5e
 800990c:	0002      	movs	r2, r0
 800990e:	4b48      	ldr	r3, [pc, #288]	; (8009a30 <__multiply+0x158>)
 8009910:	4848      	ldr	r0, [pc, #288]	; (8009a34 <__multiply+0x15c>)
 8009912:	31ff      	adds	r1, #255	; 0xff
 8009914:	f000 fb92 	bl	800a03c <__assert_func>
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	3314      	adds	r3, #20
 800991e:	469c      	mov	ip, r3
 8009920:	19bb      	adds	r3, r7, r6
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4463      	add	r3, ip
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	4663      	mov	r3, ip
 800992a:	9903      	ldr	r1, [sp, #12]
 800992c:	428b      	cmp	r3, r1
 800992e:	d32c      	bcc.n	800998a <__multiply+0xb2>
 8009930:	002b      	movs	r3, r5
 8009932:	0022      	movs	r2, r4
 8009934:	3314      	adds	r3, #20
 8009936:	00bf      	lsls	r7, r7, #2
 8009938:	3214      	adds	r2, #20
 800993a:	9306      	str	r3, [sp, #24]
 800993c:	00b6      	lsls	r6, r6, #2
 800993e:	19db      	adds	r3, r3, r7
 8009940:	9304      	str	r3, [sp, #16]
 8009942:	1993      	adds	r3, r2, r6
 8009944:	9307      	str	r3, [sp, #28]
 8009946:	2304      	movs	r3, #4
 8009948:	9305      	str	r3, [sp, #20]
 800994a:	002b      	movs	r3, r5
 800994c:	9904      	ldr	r1, [sp, #16]
 800994e:	3315      	adds	r3, #21
 8009950:	9200      	str	r2, [sp, #0]
 8009952:	4299      	cmp	r1, r3
 8009954:	d305      	bcc.n	8009962 <__multiply+0x8a>
 8009956:	1b4b      	subs	r3, r1, r5
 8009958:	3b15      	subs	r3, #21
 800995a:	089b      	lsrs	r3, r3, #2
 800995c:	3301      	adds	r3, #1
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	9305      	str	r3, [sp, #20]
 8009962:	9b07      	ldr	r3, [sp, #28]
 8009964:	9a00      	ldr	r2, [sp, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d311      	bcc.n	800998e <__multiply+0xb6>
 800996a:	9b02      	ldr	r3, [sp, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	dd06      	ble.n	800997e <__multiply+0xa6>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	3b04      	subs	r3, #4
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d053      	beq.n	8009a26 <__multiply+0x14e>
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	9a02      	ldr	r2, [sp, #8]
 8009982:	0018      	movs	r0, r3
 8009984:	611a      	str	r2, [r3, #16]
 8009986:	b009      	add	sp, #36	; 0x24
 8009988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800998a:	c304      	stmia	r3!, {r2}
 800998c:	e7cd      	b.n	800992a <__multiply+0x52>
 800998e:	9b00      	ldr	r3, [sp, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	b298      	uxth	r0, r3
 8009994:	2800      	cmp	r0, #0
 8009996:	d01b      	beq.n	80099d0 <__multiply+0xf8>
 8009998:	4667      	mov	r7, ip
 800999a:	2400      	movs	r4, #0
 800999c:	9e06      	ldr	r6, [sp, #24]
 800999e:	ce02      	ldmia	r6!, {r1}
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	b28b      	uxth	r3, r1
 80099a4:	4343      	muls	r3, r0
 80099a6:	b292      	uxth	r2, r2
 80099a8:	189b      	adds	r3, r3, r2
 80099aa:	191b      	adds	r3, r3, r4
 80099ac:	0c0c      	lsrs	r4, r1, #16
 80099ae:	4344      	muls	r4, r0
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	0c11      	lsrs	r1, r2, #16
 80099b4:	1861      	adds	r1, r4, r1
 80099b6:	0c1c      	lsrs	r4, r3, #16
 80099b8:	1909      	adds	r1, r1, r4
 80099ba:	0c0c      	lsrs	r4, r1, #16
 80099bc:	b29b      	uxth	r3, r3
 80099be:	0409      	lsls	r1, r1, #16
 80099c0:	430b      	orrs	r3, r1
 80099c2:	c708      	stmia	r7!, {r3}
 80099c4:	9b04      	ldr	r3, [sp, #16]
 80099c6:	42b3      	cmp	r3, r6
 80099c8:	d8e9      	bhi.n	800999e <__multiply+0xc6>
 80099ca:	4663      	mov	r3, ip
 80099cc:	9a05      	ldr	r2, [sp, #20]
 80099ce:	509c      	str	r4, [r3, r2]
 80099d0:	9b00      	ldr	r3, [sp, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	0c1e      	lsrs	r6, r3, #16
 80099d6:	d020      	beq.n	8009a1a <__multiply+0x142>
 80099d8:	4663      	mov	r3, ip
 80099da:	002c      	movs	r4, r5
 80099dc:	4660      	mov	r0, ip
 80099de:	2700      	movs	r7, #0
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3414      	adds	r4, #20
 80099e4:	6822      	ldr	r2, [r4, #0]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	b291      	uxth	r1, r2
 80099ea:	4371      	muls	r1, r6
 80099ec:	6802      	ldr	r2, [r0, #0]
 80099ee:	0c12      	lsrs	r2, r2, #16
 80099f0:	1889      	adds	r1, r1, r2
 80099f2:	19cf      	adds	r7, r1, r7
 80099f4:	0439      	lsls	r1, r7, #16
 80099f6:	430b      	orrs	r3, r1
 80099f8:	6003      	str	r3, [r0, #0]
 80099fa:	cc02      	ldmia	r4!, {r1}
 80099fc:	6843      	ldr	r3, [r0, #4]
 80099fe:	0c09      	lsrs	r1, r1, #16
 8009a00:	4371      	muls	r1, r6
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	0c3f      	lsrs	r7, r7, #16
 8009a06:	18cb      	adds	r3, r1, r3
 8009a08:	9a04      	ldr	r2, [sp, #16]
 8009a0a:	19db      	adds	r3, r3, r7
 8009a0c:	0c1f      	lsrs	r7, r3, #16
 8009a0e:	3004      	adds	r0, #4
 8009a10:	42a2      	cmp	r2, r4
 8009a12:	d8e7      	bhi.n	80099e4 <__multiply+0x10c>
 8009a14:	4662      	mov	r2, ip
 8009a16:	9905      	ldr	r1, [sp, #20]
 8009a18:	5053      	str	r3, [r2, r1]
 8009a1a:	9b00      	ldr	r3, [sp, #0]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	2304      	movs	r3, #4
 8009a22:	449c      	add	ip, r3
 8009a24:	e79d      	b.n	8009962 <__multiply+0x8a>
 8009a26:	9b02      	ldr	r3, [sp, #8]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	9302      	str	r3, [sp, #8]
 8009a2c:	e79d      	b.n	800996a <__multiply+0x92>
 8009a2e:	46c0      	nop			; (mov r8, r8)
 8009a30:	0800b29f 	.word	0x0800b29f
 8009a34:	0800b2b0 	.word	0x0800b2b0

08009a38 <__pow5mult>:
 8009a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	0015      	movs	r5, r2
 8009a3e:	0007      	movs	r7, r0
 8009a40:	000e      	movs	r6, r1
 8009a42:	401a      	ands	r2, r3
 8009a44:	421d      	tst	r5, r3
 8009a46:	d008      	beq.n	8009a5a <__pow5mult+0x22>
 8009a48:	4925      	ldr	r1, [pc, #148]	; (8009ae0 <__pow5mult+0xa8>)
 8009a4a:	3a01      	subs	r2, #1
 8009a4c:	0092      	lsls	r2, r2, #2
 8009a4e:	5852      	ldr	r2, [r2, r1]
 8009a50:	2300      	movs	r3, #0
 8009a52:	0031      	movs	r1, r6
 8009a54:	f7ff fe9e 	bl	8009794 <__multadd>
 8009a58:	0006      	movs	r6, r0
 8009a5a:	10ad      	asrs	r5, r5, #2
 8009a5c:	d03d      	beq.n	8009ada <__pow5mult+0xa2>
 8009a5e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009a60:	2c00      	cmp	r4, #0
 8009a62:	d10f      	bne.n	8009a84 <__pow5mult+0x4c>
 8009a64:	2010      	movs	r0, #16
 8009a66:	f7ff fe0f 	bl	8009688 <malloc>
 8009a6a:	1e02      	subs	r2, r0, #0
 8009a6c:	6278      	str	r0, [r7, #36]	; 0x24
 8009a6e:	d105      	bne.n	8009a7c <__pow5mult+0x44>
 8009a70:	21d7      	movs	r1, #215	; 0xd7
 8009a72:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <__pow5mult+0xac>)
 8009a74:	481c      	ldr	r0, [pc, #112]	; (8009ae8 <__pow5mult+0xb0>)
 8009a76:	0049      	lsls	r1, r1, #1
 8009a78:	f000 fae0 	bl	800a03c <__assert_func>
 8009a7c:	6044      	str	r4, [r0, #4]
 8009a7e:	6084      	str	r4, [r0, #8]
 8009a80:	6004      	str	r4, [r0, #0]
 8009a82:	60c4      	str	r4, [r0, #12]
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	689c      	ldr	r4, [r3, #8]
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	2c00      	cmp	r4, #0
 8009a8c:	d108      	bne.n	8009aa0 <__pow5mult+0x68>
 8009a8e:	0038      	movs	r0, r7
 8009a90:	4916      	ldr	r1, [pc, #88]	; (8009aec <__pow5mult+0xb4>)
 8009a92:	f7ff ff0b 	bl	80098ac <__i2b>
 8009a96:	9b01      	ldr	r3, [sp, #4]
 8009a98:	0004      	movs	r4, r0
 8009a9a:	6098      	str	r0, [r3, #8]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	6003      	str	r3, [r0, #0]
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	421d      	tst	r5, r3
 8009aa4:	d00a      	beq.n	8009abc <__pow5mult+0x84>
 8009aa6:	0031      	movs	r1, r6
 8009aa8:	0022      	movs	r2, r4
 8009aaa:	0038      	movs	r0, r7
 8009aac:	f7ff ff14 	bl	80098d8 <__multiply>
 8009ab0:	0031      	movs	r1, r6
 8009ab2:	9001      	str	r0, [sp, #4]
 8009ab4:	0038      	movs	r0, r7
 8009ab6:	f7ff fe49 	bl	800974c <_Bfree>
 8009aba:	9e01      	ldr	r6, [sp, #4]
 8009abc:	106d      	asrs	r5, r5, #1
 8009abe:	d00c      	beq.n	8009ada <__pow5mult+0xa2>
 8009ac0:	6820      	ldr	r0, [r4, #0]
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d107      	bne.n	8009ad6 <__pow5mult+0x9e>
 8009ac6:	0022      	movs	r2, r4
 8009ac8:	0021      	movs	r1, r4
 8009aca:	0038      	movs	r0, r7
 8009acc:	f7ff ff04 	bl	80098d8 <__multiply>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	6020      	str	r0, [r4, #0]
 8009ad4:	6003      	str	r3, [r0, #0]
 8009ad6:	0004      	movs	r4, r0
 8009ad8:	e7e2      	b.n	8009aa0 <__pow5mult+0x68>
 8009ada:	0030      	movs	r0, r6
 8009adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ade:	46c0      	nop			; (mov r8, r8)
 8009ae0:	0800b400 	.word	0x0800b400
 8009ae4:	0800b22d 	.word	0x0800b22d
 8009ae8:	0800b2b0 	.word	0x0800b2b0
 8009aec:	00000271 	.word	0x00000271

08009af0 <__lshift>:
 8009af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009af2:	000c      	movs	r4, r1
 8009af4:	0017      	movs	r7, r2
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	1155      	asrs	r5, r2, #5
 8009afa:	b087      	sub	sp, #28
 8009afc:	18eb      	adds	r3, r5, r3
 8009afe:	9302      	str	r3, [sp, #8]
 8009b00:	3301      	adds	r3, #1
 8009b02:	9301      	str	r3, [sp, #4]
 8009b04:	6849      	ldr	r1, [r1, #4]
 8009b06:	68a3      	ldr	r3, [r4, #8]
 8009b08:	9004      	str	r0, [sp, #16]
 8009b0a:	9a01      	ldr	r2, [sp, #4]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	db10      	blt.n	8009b32 <__lshift+0x42>
 8009b10:	9804      	ldr	r0, [sp, #16]
 8009b12:	f7ff fdd7 	bl	80096c4 <_Balloc>
 8009b16:	2300      	movs	r3, #0
 8009b18:	0002      	movs	r2, r0
 8009b1a:	0006      	movs	r6, r0
 8009b1c:	0019      	movs	r1, r3
 8009b1e:	3214      	adds	r2, #20
 8009b20:	4298      	cmp	r0, r3
 8009b22:	d10c      	bne.n	8009b3e <__lshift+0x4e>
 8009b24:	21da      	movs	r1, #218	; 0xda
 8009b26:	0002      	movs	r2, r0
 8009b28:	4b26      	ldr	r3, [pc, #152]	; (8009bc4 <__lshift+0xd4>)
 8009b2a:	4827      	ldr	r0, [pc, #156]	; (8009bc8 <__lshift+0xd8>)
 8009b2c:	31ff      	adds	r1, #255	; 0xff
 8009b2e:	f000 fa85 	bl	800a03c <__assert_func>
 8009b32:	3101      	adds	r1, #1
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	e7e8      	b.n	8009b0a <__lshift+0x1a>
 8009b38:	0098      	lsls	r0, r3, #2
 8009b3a:	5011      	str	r1, [r2, r0]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	42ab      	cmp	r3, r5
 8009b40:	dbfa      	blt.n	8009b38 <__lshift+0x48>
 8009b42:	43eb      	mvns	r3, r5
 8009b44:	17db      	asrs	r3, r3, #31
 8009b46:	401d      	ands	r5, r3
 8009b48:	211f      	movs	r1, #31
 8009b4a:	0023      	movs	r3, r4
 8009b4c:	0038      	movs	r0, r7
 8009b4e:	00ad      	lsls	r5, r5, #2
 8009b50:	1955      	adds	r5, r2, r5
 8009b52:	6922      	ldr	r2, [r4, #16]
 8009b54:	3314      	adds	r3, #20
 8009b56:	0092      	lsls	r2, r2, #2
 8009b58:	4008      	ands	r0, r1
 8009b5a:	4684      	mov	ip, r0
 8009b5c:	189a      	adds	r2, r3, r2
 8009b5e:	420f      	tst	r7, r1
 8009b60:	d02a      	beq.n	8009bb8 <__lshift+0xc8>
 8009b62:	3101      	adds	r1, #1
 8009b64:	1a09      	subs	r1, r1, r0
 8009b66:	9105      	str	r1, [sp, #20]
 8009b68:	2100      	movs	r1, #0
 8009b6a:	9503      	str	r5, [sp, #12]
 8009b6c:	4667      	mov	r7, ip
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	40b8      	lsls	r0, r7
 8009b72:	4301      	orrs	r1, r0
 8009b74:	9803      	ldr	r0, [sp, #12]
 8009b76:	c002      	stmia	r0!, {r1}
 8009b78:	cb02      	ldmia	r3!, {r1}
 8009b7a:	9003      	str	r0, [sp, #12]
 8009b7c:	9805      	ldr	r0, [sp, #20]
 8009b7e:	40c1      	lsrs	r1, r0
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d8f3      	bhi.n	8009b6c <__lshift+0x7c>
 8009b84:	0020      	movs	r0, r4
 8009b86:	3015      	adds	r0, #21
 8009b88:	2304      	movs	r3, #4
 8009b8a:	4282      	cmp	r2, r0
 8009b8c:	d304      	bcc.n	8009b98 <__lshift+0xa8>
 8009b8e:	1b13      	subs	r3, r2, r4
 8009b90:	3b15      	subs	r3, #21
 8009b92:	089b      	lsrs	r3, r3, #2
 8009b94:	3301      	adds	r3, #1
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	50e9      	str	r1, [r5, r3]
 8009b9a:	2900      	cmp	r1, #0
 8009b9c:	d002      	beq.n	8009ba4 <__lshift+0xb4>
 8009b9e:	9b02      	ldr	r3, [sp, #8]
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	9804      	ldr	r0, [sp, #16]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	0021      	movs	r1, r4
 8009bac:	6133      	str	r3, [r6, #16]
 8009bae:	f7ff fdcd 	bl	800974c <_Bfree>
 8009bb2:	0030      	movs	r0, r6
 8009bb4:	b007      	add	sp, #28
 8009bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb8:	cb02      	ldmia	r3!, {r1}
 8009bba:	c502      	stmia	r5!, {r1}
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d8fb      	bhi.n	8009bb8 <__lshift+0xc8>
 8009bc0:	e7f0      	b.n	8009ba4 <__lshift+0xb4>
 8009bc2:	46c0      	nop			; (mov r8, r8)
 8009bc4:	0800b29f 	.word	0x0800b29f
 8009bc8:	0800b2b0 	.word	0x0800b2b0

08009bcc <__mcmp>:
 8009bcc:	6902      	ldr	r2, [r0, #16]
 8009bce:	690b      	ldr	r3, [r1, #16]
 8009bd0:	b530      	push	{r4, r5, lr}
 8009bd2:	0004      	movs	r4, r0
 8009bd4:	1ad0      	subs	r0, r2, r3
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d10d      	bne.n	8009bf6 <__mcmp+0x2a>
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	3414      	adds	r4, #20
 8009bde:	3114      	adds	r1, #20
 8009be0:	18e2      	adds	r2, r4, r3
 8009be2:	18c9      	adds	r1, r1, r3
 8009be4:	3a04      	subs	r2, #4
 8009be6:	3904      	subs	r1, #4
 8009be8:	6815      	ldr	r5, [r2, #0]
 8009bea:	680b      	ldr	r3, [r1, #0]
 8009bec:	429d      	cmp	r5, r3
 8009bee:	d003      	beq.n	8009bf8 <__mcmp+0x2c>
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	429d      	cmp	r5, r3
 8009bf4:	d303      	bcc.n	8009bfe <__mcmp+0x32>
 8009bf6:	bd30      	pop	{r4, r5, pc}
 8009bf8:	4294      	cmp	r4, r2
 8009bfa:	d3f3      	bcc.n	8009be4 <__mcmp+0x18>
 8009bfc:	e7fb      	b.n	8009bf6 <__mcmp+0x2a>
 8009bfe:	4240      	negs	r0, r0
 8009c00:	e7f9      	b.n	8009bf6 <__mcmp+0x2a>
	...

08009c04 <__mdiff>:
 8009c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c06:	000e      	movs	r6, r1
 8009c08:	0007      	movs	r7, r0
 8009c0a:	0011      	movs	r1, r2
 8009c0c:	0030      	movs	r0, r6
 8009c0e:	b087      	sub	sp, #28
 8009c10:	0014      	movs	r4, r2
 8009c12:	f7ff ffdb 	bl	8009bcc <__mcmp>
 8009c16:	1e05      	subs	r5, r0, #0
 8009c18:	d110      	bne.n	8009c3c <__mdiff+0x38>
 8009c1a:	0001      	movs	r1, r0
 8009c1c:	0038      	movs	r0, r7
 8009c1e:	f7ff fd51 	bl	80096c4 <_Balloc>
 8009c22:	1e02      	subs	r2, r0, #0
 8009c24:	d104      	bne.n	8009c30 <__mdiff+0x2c>
 8009c26:	4b40      	ldr	r3, [pc, #256]	; (8009d28 <__mdiff+0x124>)
 8009c28:	4940      	ldr	r1, [pc, #256]	; (8009d2c <__mdiff+0x128>)
 8009c2a:	4841      	ldr	r0, [pc, #260]	; (8009d30 <__mdiff+0x12c>)
 8009c2c:	f000 fa06 	bl	800a03c <__assert_func>
 8009c30:	2301      	movs	r3, #1
 8009c32:	6145      	str	r5, [r0, #20]
 8009c34:	6103      	str	r3, [r0, #16]
 8009c36:	0010      	movs	r0, r2
 8009c38:	b007      	add	sp, #28
 8009c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	2800      	cmp	r0, #0
 8009c42:	db04      	blt.n	8009c4e <__mdiff+0x4a>
 8009c44:	0023      	movs	r3, r4
 8009c46:	0034      	movs	r4, r6
 8009c48:	001e      	movs	r6, r3
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	0038      	movs	r0, r7
 8009c50:	6861      	ldr	r1, [r4, #4]
 8009c52:	f7ff fd37 	bl	80096c4 <_Balloc>
 8009c56:	1e02      	subs	r2, r0, #0
 8009c58:	d103      	bne.n	8009c62 <__mdiff+0x5e>
 8009c5a:	2190      	movs	r1, #144	; 0x90
 8009c5c:	4b32      	ldr	r3, [pc, #200]	; (8009d28 <__mdiff+0x124>)
 8009c5e:	0089      	lsls	r1, r1, #2
 8009c60:	e7e3      	b.n	8009c2a <__mdiff+0x26>
 8009c62:	9b01      	ldr	r3, [sp, #4]
 8009c64:	2700      	movs	r7, #0
 8009c66:	60c3      	str	r3, [r0, #12]
 8009c68:	6920      	ldr	r0, [r4, #16]
 8009c6a:	3414      	adds	r4, #20
 8009c6c:	9401      	str	r4, [sp, #4]
 8009c6e:	9b01      	ldr	r3, [sp, #4]
 8009c70:	0084      	lsls	r4, r0, #2
 8009c72:	191b      	adds	r3, r3, r4
 8009c74:	0034      	movs	r4, r6
 8009c76:	9302      	str	r3, [sp, #8]
 8009c78:	6933      	ldr	r3, [r6, #16]
 8009c7a:	3414      	adds	r4, #20
 8009c7c:	0099      	lsls	r1, r3, #2
 8009c7e:	1863      	adds	r3, r4, r1
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	0013      	movs	r3, r2
 8009c84:	3314      	adds	r3, #20
 8009c86:	469c      	mov	ip, r3
 8009c88:	9305      	str	r3, [sp, #20]
 8009c8a:	9b01      	ldr	r3, [sp, #4]
 8009c8c:	9304      	str	r3, [sp, #16]
 8009c8e:	9b04      	ldr	r3, [sp, #16]
 8009c90:	cc02      	ldmia	r4!, {r1}
 8009c92:	cb20      	ldmia	r3!, {r5}
 8009c94:	9304      	str	r3, [sp, #16]
 8009c96:	b2ab      	uxth	r3, r5
 8009c98:	19df      	adds	r7, r3, r7
 8009c9a:	b28b      	uxth	r3, r1
 8009c9c:	1afb      	subs	r3, r7, r3
 8009c9e:	0c09      	lsrs	r1, r1, #16
 8009ca0:	0c2d      	lsrs	r5, r5, #16
 8009ca2:	1a6d      	subs	r5, r5, r1
 8009ca4:	1419      	asrs	r1, r3, #16
 8009ca6:	186d      	adds	r5, r5, r1
 8009ca8:	4661      	mov	r1, ip
 8009caa:	142f      	asrs	r7, r5, #16
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	042d      	lsls	r5, r5, #16
 8009cb0:	432b      	orrs	r3, r5
 8009cb2:	c108      	stmia	r1!, {r3}
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	468c      	mov	ip, r1
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d8e8      	bhi.n	8009c8e <__mdiff+0x8a>
 8009cbc:	0031      	movs	r1, r6
 8009cbe:	9c03      	ldr	r4, [sp, #12]
 8009cc0:	3115      	adds	r1, #21
 8009cc2:	2304      	movs	r3, #4
 8009cc4:	428c      	cmp	r4, r1
 8009cc6:	d304      	bcc.n	8009cd2 <__mdiff+0xce>
 8009cc8:	1ba3      	subs	r3, r4, r6
 8009cca:	3b15      	subs	r3, #21
 8009ccc:	089b      	lsrs	r3, r3, #2
 8009cce:	3301      	adds	r3, #1
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	9901      	ldr	r1, [sp, #4]
 8009cd4:	18cc      	adds	r4, r1, r3
 8009cd6:	9905      	ldr	r1, [sp, #20]
 8009cd8:	0026      	movs	r6, r4
 8009cda:	18cb      	adds	r3, r1, r3
 8009cdc:	469c      	mov	ip, r3
 8009cde:	9902      	ldr	r1, [sp, #8]
 8009ce0:	428e      	cmp	r6, r1
 8009ce2:	d310      	bcc.n	8009d06 <__mdiff+0x102>
 8009ce4:	9e02      	ldr	r6, [sp, #8]
 8009ce6:	1ee1      	subs	r1, r4, #3
 8009ce8:	2500      	movs	r5, #0
 8009cea:	428e      	cmp	r6, r1
 8009cec:	d304      	bcc.n	8009cf8 <__mdiff+0xf4>
 8009cee:	0031      	movs	r1, r6
 8009cf0:	3103      	adds	r1, #3
 8009cf2:	1b0c      	subs	r4, r1, r4
 8009cf4:	08a4      	lsrs	r4, r4, #2
 8009cf6:	00a5      	lsls	r5, r4, #2
 8009cf8:	195b      	adds	r3, r3, r5
 8009cfa:	3b04      	subs	r3, #4
 8009cfc:	6819      	ldr	r1, [r3, #0]
 8009cfe:	2900      	cmp	r1, #0
 8009d00:	d00f      	beq.n	8009d22 <__mdiff+0x11e>
 8009d02:	6110      	str	r0, [r2, #16]
 8009d04:	e797      	b.n	8009c36 <__mdiff+0x32>
 8009d06:	ce02      	ldmia	r6!, {r1}
 8009d08:	b28d      	uxth	r5, r1
 8009d0a:	19ed      	adds	r5, r5, r7
 8009d0c:	0c0f      	lsrs	r7, r1, #16
 8009d0e:	1429      	asrs	r1, r5, #16
 8009d10:	1879      	adds	r1, r7, r1
 8009d12:	140f      	asrs	r7, r1, #16
 8009d14:	b2ad      	uxth	r5, r5
 8009d16:	0409      	lsls	r1, r1, #16
 8009d18:	430d      	orrs	r5, r1
 8009d1a:	4661      	mov	r1, ip
 8009d1c:	c120      	stmia	r1!, {r5}
 8009d1e:	468c      	mov	ip, r1
 8009d20:	e7dd      	b.n	8009cde <__mdiff+0xda>
 8009d22:	3801      	subs	r0, #1
 8009d24:	e7e9      	b.n	8009cfa <__mdiff+0xf6>
 8009d26:	46c0      	nop			; (mov r8, r8)
 8009d28:	0800b29f 	.word	0x0800b29f
 8009d2c:	00000232 	.word	0x00000232
 8009d30:	0800b2b0 	.word	0x0800b2b0

08009d34 <__d2b>:
 8009d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d36:	2101      	movs	r1, #1
 8009d38:	0014      	movs	r4, r2
 8009d3a:	001e      	movs	r6, r3
 8009d3c:	9f08      	ldr	r7, [sp, #32]
 8009d3e:	f7ff fcc1 	bl	80096c4 <_Balloc>
 8009d42:	1e05      	subs	r5, r0, #0
 8009d44:	d105      	bne.n	8009d52 <__d2b+0x1e>
 8009d46:	0002      	movs	r2, r0
 8009d48:	4b26      	ldr	r3, [pc, #152]	; (8009de4 <__d2b+0xb0>)
 8009d4a:	4927      	ldr	r1, [pc, #156]	; (8009de8 <__d2b+0xb4>)
 8009d4c:	4827      	ldr	r0, [pc, #156]	; (8009dec <__d2b+0xb8>)
 8009d4e:	f000 f975 	bl	800a03c <__assert_func>
 8009d52:	0333      	lsls	r3, r6, #12
 8009d54:	0076      	lsls	r6, r6, #1
 8009d56:	0b1b      	lsrs	r3, r3, #12
 8009d58:	0d76      	lsrs	r6, r6, #21
 8009d5a:	d124      	bne.n	8009da6 <__d2b+0x72>
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	2c00      	cmp	r4, #0
 8009d60:	d027      	beq.n	8009db2 <__d2b+0x7e>
 8009d62:	4668      	mov	r0, sp
 8009d64:	9400      	str	r4, [sp, #0]
 8009d66:	f7ff fd73 	bl	8009850 <__lo0bits>
 8009d6a:	9c00      	ldr	r4, [sp, #0]
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d01e      	beq.n	8009dae <__d2b+0x7a>
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	2120      	movs	r1, #32
 8009d74:	001a      	movs	r2, r3
 8009d76:	1a09      	subs	r1, r1, r0
 8009d78:	408a      	lsls	r2, r1
 8009d7a:	40c3      	lsrs	r3, r0
 8009d7c:	4322      	orrs	r2, r4
 8009d7e:	616a      	str	r2, [r5, #20]
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	9c01      	ldr	r4, [sp, #4]
 8009d84:	61ac      	str	r4, [r5, #24]
 8009d86:	1e63      	subs	r3, r4, #1
 8009d88:	419c      	sbcs	r4, r3
 8009d8a:	3401      	adds	r4, #1
 8009d8c:	612c      	str	r4, [r5, #16]
 8009d8e:	2e00      	cmp	r6, #0
 8009d90:	d018      	beq.n	8009dc4 <__d2b+0x90>
 8009d92:	4b17      	ldr	r3, [pc, #92]	; (8009df0 <__d2b+0xbc>)
 8009d94:	18f6      	adds	r6, r6, r3
 8009d96:	2335      	movs	r3, #53	; 0x35
 8009d98:	1836      	adds	r6, r6, r0
 8009d9a:	1a18      	subs	r0, r3, r0
 8009d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d9e:	603e      	str	r6, [r7, #0]
 8009da0:	6018      	str	r0, [r3, #0]
 8009da2:	0028      	movs	r0, r5
 8009da4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009da6:	2280      	movs	r2, #128	; 0x80
 8009da8:	0352      	lsls	r2, r2, #13
 8009daa:	4313      	orrs	r3, r2
 8009dac:	e7d6      	b.n	8009d5c <__d2b+0x28>
 8009dae:	616c      	str	r4, [r5, #20]
 8009db0:	e7e7      	b.n	8009d82 <__d2b+0x4e>
 8009db2:	a801      	add	r0, sp, #4
 8009db4:	f7ff fd4c 	bl	8009850 <__lo0bits>
 8009db8:	2401      	movs	r4, #1
 8009dba:	9b01      	ldr	r3, [sp, #4]
 8009dbc:	612c      	str	r4, [r5, #16]
 8009dbe:	616b      	str	r3, [r5, #20]
 8009dc0:	3020      	adds	r0, #32
 8009dc2:	e7e4      	b.n	8009d8e <__d2b+0x5a>
 8009dc4:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <__d2b+0xc0>)
 8009dc6:	18c0      	adds	r0, r0, r3
 8009dc8:	4b0b      	ldr	r3, [pc, #44]	; (8009df8 <__d2b+0xc4>)
 8009dca:	6038      	str	r0, [r7, #0]
 8009dcc:	18e3      	adds	r3, r4, r3
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	18eb      	adds	r3, r5, r3
 8009dd2:	6958      	ldr	r0, [r3, #20]
 8009dd4:	f7ff fd22 	bl	800981c <__hi0bits>
 8009dd8:	0164      	lsls	r4, r4, #5
 8009dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ddc:	1a24      	subs	r4, r4, r0
 8009dde:	601c      	str	r4, [r3, #0]
 8009de0:	e7df      	b.n	8009da2 <__d2b+0x6e>
 8009de2:	46c0      	nop			; (mov r8, r8)
 8009de4:	0800b29f 	.word	0x0800b29f
 8009de8:	0000030a 	.word	0x0000030a
 8009dec:	0800b2b0 	.word	0x0800b2b0
 8009df0:	fffffbcd 	.word	0xfffffbcd
 8009df4:	fffffbce 	.word	0xfffffbce
 8009df8:	3fffffff 	.word	0x3fffffff

08009dfc <_calloc_r>:
 8009dfc:	b570      	push	{r4, r5, r6, lr}
 8009dfe:	0c13      	lsrs	r3, r2, #16
 8009e00:	0c0d      	lsrs	r5, r1, #16
 8009e02:	d11e      	bne.n	8009e42 <_calloc_r+0x46>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10c      	bne.n	8009e22 <_calloc_r+0x26>
 8009e08:	b289      	uxth	r1, r1
 8009e0a:	b294      	uxth	r4, r2
 8009e0c:	434c      	muls	r4, r1
 8009e0e:	0021      	movs	r1, r4
 8009e10:	f000 f88c 	bl	8009f2c <_malloc_r>
 8009e14:	1e05      	subs	r5, r0, #0
 8009e16:	d01b      	beq.n	8009e50 <_calloc_r+0x54>
 8009e18:	0022      	movs	r2, r4
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	f7fe f914 	bl	8008048 <memset>
 8009e20:	e016      	b.n	8009e50 <_calloc_r+0x54>
 8009e22:	1c1d      	adds	r5, r3, #0
 8009e24:	1c0b      	adds	r3, r1, #0
 8009e26:	b292      	uxth	r2, r2
 8009e28:	b289      	uxth	r1, r1
 8009e2a:	b29c      	uxth	r4, r3
 8009e2c:	4351      	muls	r1, r2
 8009e2e:	b2ab      	uxth	r3, r5
 8009e30:	4363      	muls	r3, r4
 8009e32:	0c0c      	lsrs	r4, r1, #16
 8009e34:	191c      	adds	r4, r3, r4
 8009e36:	0c22      	lsrs	r2, r4, #16
 8009e38:	d107      	bne.n	8009e4a <_calloc_r+0x4e>
 8009e3a:	0424      	lsls	r4, r4, #16
 8009e3c:	b289      	uxth	r1, r1
 8009e3e:	430c      	orrs	r4, r1
 8009e40:	e7e5      	b.n	8009e0e <_calloc_r+0x12>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <_calloc_r+0x4e>
 8009e46:	1c13      	adds	r3, r2, #0
 8009e48:	e7ed      	b.n	8009e26 <_calloc_r+0x2a>
 8009e4a:	230c      	movs	r3, #12
 8009e4c:	2500      	movs	r5, #0
 8009e4e:	6003      	str	r3, [r0, #0]
 8009e50:	0028      	movs	r0, r5
 8009e52:	bd70      	pop	{r4, r5, r6, pc}

08009e54 <_free_r>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	0005      	movs	r5, r0
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	d010      	beq.n	8009e7e <_free_r+0x2a>
 8009e5c:	1f0c      	subs	r4, r1, #4
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	da00      	bge.n	8009e66 <_free_r+0x12>
 8009e64:	18e4      	adds	r4, r4, r3
 8009e66:	0028      	movs	r0, r5
 8009e68:	f000 f928 	bl	800a0bc <__malloc_lock>
 8009e6c:	4a1d      	ldr	r2, [pc, #116]	; (8009ee4 <_free_r+0x90>)
 8009e6e:	6813      	ldr	r3, [r2, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d105      	bne.n	8009e80 <_free_r+0x2c>
 8009e74:	6063      	str	r3, [r4, #4]
 8009e76:	6014      	str	r4, [r2, #0]
 8009e78:	0028      	movs	r0, r5
 8009e7a:	f000 f927 	bl	800a0cc <__malloc_unlock>
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	d908      	bls.n	8009e96 <_free_r+0x42>
 8009e84:	6821      	ldr	r1, [r4, #0]
 8009e86:	1860      	adds	r0, r4, r1
 8009e88:	4283      	cmp	r3, r0
 8009e8a:	d1f3      	bne.n	8009e74 <_free_r+0x20>
 8009e8c:	6818      	ldr	r0, [r3, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	1841      	adds	r1, r0, r1
 8009e92:	6021      	str	r1, [r4, #0]
 8009e94:	e7ee      	b.n	8009e74 <_free_r+0x20>
 8009e96:	001a      	movs	r2, r3
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <_free_r+0x4e>
 8009e9e:	42a3      	cmp	r3, r4
 8009ea0:	d9f9      	bls.n	8009e96 <_free_r+0x42>
 8009ea2:	6811      	ldr	r1, [r2, #0]
 8009ea4:	1850      	adds	r0, r2, r1
 8009ea6:	42a0      	cmp	r0, r4
 8009ea8:	d10b      	bne.n	8009ec2 <_free_r+0x6e>
 8009eaa:	6820      	ldr	r0, [r4, #0]
 8009eac:	1809      	adds	r1, r1, r0
 8009eae:	1850      	adds	r0, r2, r1
 8009eb0:	6011      	str	r1, [r2, #0]
 8009eb2:	4283      	cmp	r3, r0
 8009eb4:	d1e0      	bne.n	8009e78 <_free_r+0x24>
 8009eb6:	6818      	ldr	r0, [r3, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	1841      	adds	r1, r0, r1
 8009ebc:	6011      	str	r1, [r2, #0]
 8009ebe:	6053      	str	r3, [r2, #4]
 8009ec0:	e7da      	b.n	8009e78 <_free_r+0x24>
 8009ec2:	42a0      	cmp	r0, r4
 8009ec4:	d902      	bls.n	8009ecc <_free_r+0x78>
 8009ec6:	230c      	movs	r3, #12
 8009ec8:	602b      	str	r3, [r5, #0]
 8009eca:	e7d5      	b.n	8009e78 <_free_r+0x24>
 8009ecc:	6821      	ldr	r1, [r4, #0]
 8009ece:	1860      	adds	r0, r4, r1
 8009ed0:	4283      	cmp	r3, r0
 8009ed2:	d103      	bne.n	8009edc <_free_r+0x88>
 8009ed4:	6818      	ldr	r0, [r3, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	1841      	adds	r1, r0, r1
 8009eda:	6021      	str	r1, [r4, #0]
 8009edc:	6063      	str	r3, [r4, #4]
 8009ede:	6054      	str	r4, [r2, #4]
 8009ee0:	e7ca      	b.n	8009e78 <_free_r+0x24>
 8009ee2:	46c0      	nop			; (mov r8, r8)
 8009ee4:	200003b0 	.word	0x200003b0

08009ee8 <sbrk_aligned>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	4e0f      	ldr	r6, [pc, #60]	; (8009f28 <sbrk_aligned+0x40>)
 8009eec:	000d      	movs	r5, r1
 8009eee:	6831      	ldr	r1, [r6, #0]
 8009ef0:	0004      	movs	r4, r0
 8009ef2:	2900      	cmp	r1, #0
 8009ef4:	d102      	bne.n	8009efc <sbrk_aligned+0x14>
 8009ef6:	f000 f88f 	bl	800a018 <_sbrk_r>
 8009efa:	6030      	str	r0, [r6, #0]
 8009efc:	0029      	movs	r1, r5
 8009efe:	0020      	movs	r0, r4
 8009f00:	f000 f88a 	bl	800a018 <_sbrk_r>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d00a      	beq.n	8009f1e <sbrk_aligned+0x36>
 8009f08:	2303      	movs	r3, #3
 8009f0a:	1cc5      	adds	r5, r0, #3
 8009f0c:	439d      	bics	r5, r3
 8009f0e:	42a8      	cmp	r0, r5
 8009f10:	d007      	beq.n	8009f22 <sbrk_aligned+0x3a>
 8009f12:	1a29      	subs	r1, r5, r0
 8009f14:	0020      	movs	r0, r4
 8009f16:	f000 f87f 	bl	800a018 <_sbrk_r>
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	d101      	bne.n	8009f22 <sbrk_aligned+0x3a>
 8009f1e:	2501      	movs	r5, #1
 8009f20:	426d      	negs	r5, r5
 8009f22:	0028      	movs	r0, r5
 8009f24:	bd70      	pop	{r4, r5, r6, pc}
 8009f26:	46c0      	nop			; (mov r8, r8)
 8009f28:	200003b4 	.word	0x200003b4

08009f2c <_malloc_r>:
 8009f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f2e:	2203      	movs	r2, #3
 8009f30:	1ccb      	adds	r3, r1, #3
 8009f32:	4393      	bics	r3, r2
 8009f34:	3308      	adds	r3, #8
 8009f36:	0006      	movs	r6, r0
 8009f38:	001f      	movs	r7, r3
 8009f3a:	2b0c      	cmp	r3, #12
 8009f3c:	d232      	bcs.n	8009fa4 <_malloc_r+0x78>
 8009f3e:	270c      	movs	r7, #12
 8009f40:	42b9      	cmp	r1, r7
 8009f42:	d831      	bhi.n	8009fa8 <_malloc_r+0x7c>
 8009f44:	0030      	movs	r0, r6
 8009f46:	f000 f8b9 	bl	800a0bc <__malloc_lock>
 8009f4a:	4d32      	ldr	r5, [pc, #200]	; (800a014 <_malloc_r+0xe8>)
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	001c      	movs	r4, r3
 8009f50:	2c00      	cmp	r4, #0
 8009f52:	d12e      	bne.n	8009fb2 <_malloc_r+0x86>
 8009f54:	0039      	movs	r1, r7
 8009f56:	0030      	movs	r0, r6
 8009f58:	f7ff ffc6 	bl	8009ee8 <sbrk_aligned>
 8009f5c:	0004      	movs	r4, r0
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	d11e      	bne.n	8009fa0 <_malloc_r+0x74>
 8009f62:	682c      	ldr	r4, [r5, #0]
 8009f64:	0025      	movs	r5, r4
 8009f66:	2d00      	cmp	r5, #0
 8009f68:	d14a      	bne.n	800a000 <_malloc_r+0xd4>
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	0029      	movs	r1, r5
 8009f6e:	18e3      	adds	r3, r4, r3
 8009f70:	0030      	movs	r0, r6
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	f000 f850 	bl	800a018 <_sbrk_r>
 8009f78:	9b01      	ldr	r3, [sp, #4]
 8009f7a:	4283      	cmp	r3, r0
 8009f7c:	d143      	bne.n	800a006 <_malloc_r+0xda>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	3703      	adds	r7, #3
 8009f82:	1aff      	subs	r7, r7, r3
 8009f84:	2303      	movs	r3, #3
 8009f86:	439f      	bics	r7, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	2f0c      	cmp	r7, #12
 8009f8c:	d200      	bcs.n	8009f90 <_malloc_r+0x64>
 8009f8e:	270c      	movs	r7, #12
 8009f90:	0039      	movs	r1, r7
 8009f92:	0030      	movs	r0, r6
 8009f94:	f7ff ffa8 	bl	8009ee8 <sbrk_aligned>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d034      	beq.n	800a006 <_malloc_r+0xda>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	19df      	adds	r7, r3, r7
 8009fa0:	6027      	str	r7, [r4, #0]
 8009fa2:	e013      	b.n	8009fcc <_malloc_r+0xa0>
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	dacb      	bge.n	8009f40 <_malloc_r+0x14>
 8009fa8:	230c      	movs	r3, #12
 8009faa:	2500      	movs	r5, #0
 8009fac:	6033      	str	r3, [r6, #0]
 8009fae:	0028      	movs	r0, r5
 8009fb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009fb2:	6822      	ldr	r2, [r4, #0]
 8009fb4:	1bd1      	subs	r1, r2, r7
 8009fb6:	d420      	bmi.n	8009ffa <_malloc_r+0xce>
 8009fb8:	290b      	cmp	r1, #11
 8009fba:	d917      	bls.n	8009fec <_malloc_r+0xc0>
 8009fbc:	19e2      	adds	r2, r4, r7
 8009fbe:	6027      	str	r7, [r4, #0]
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	d111      	bne.n	8009fe8 <_malloc_r+0xbc>
 8009fc4:	602a      	str	r2, [r5, #0]
 8009fc6:	6863      	ldr	r3, [r4, #4]
 8009fc8:	6011      	str	r1, [r2, #0]
 8009fca:	6053      	str	r3, [r2, #4]
 8009fcc:	0030      	movs	r0, r6
 8009fce:	0025      	movs	r5, r4
 8009fd0:	f000 f87c 	bl	800a0cc <__malloc_unlock>
 8009fd4:	2207      	movs	r2, #7
 8009fd6:	350b      	adds	r5, #11
 8009fd8:	1d23      	adds	r3, r4, #4
 8009fda:	4395      	bics	r5, r2
 8009fdc:	1aea      	subs	r2, r5, r3
 8009fde:	429d      	cmp	r5, r3
 8009fe0:	d0e5      	beq.n	8009fae <_malloc_r+0x82>
 8009fe2:	1b5b      	subs	r3, r3, r5
 8009fe4:	50a3      	str	r3, [r4, r2]
 8009fe6:	e7e2      	b.n	8009fae <_malloc_r+0x82>
 8009fe8:	605a      	str	r2, [r3, #4]
 8009fea:	e7ec      	b.n	8009fc6 <_malloc_r+0x9a>
 8009fec:	6862      	ldr	r2, [r4, #4]
 8009fee:	42a3      	cmp	r3, r4
 8009ff0:	d101      	bne.n	8009ff6 <_malloc_r+0xca>
 8009ff2:	602a      	str	r2, [r5, #0]
 8009ff4:	e7ea      	b.n	8009fcc <_malloc_r+0xa0>
 8009ff6:	605a      	str	r2, [r3, #4]
 8009ff8:	e7e8      	b.n	8009fcc <_malloc_r+0xa0>
 8009ffa:	0023      	movs	r3, r4
 8009ffc:	6864      	ldr	r4, [r4, #4]
 8009ffe:	e7a7      	b.n	8009f50 <_malloc_r+0x24>
 800a000:	002c      	movs	r4, r5
 800a002:	686d      	ldr	r5, [r5, #4]
 800a004:	e7af      	b.n	8009f66 <_malloc_r+0x3a>
 800a006:	230c      	movs	r3, #12
 800a008:	0030      	movs	r0, r6
 800a00a:	6033      	str	r3, [r6, #0]
 800a00c:	f000 f85e 	bl	800a0cc <__malloc_unlock>
 800a010:	e7cd      	b.n	8009fae <_malloc_r+0x82>
 800a012:	46c0      	nop			; (mov r8, r8)
 800a014:	200003b0 	.word	0x200003b0

0800a018 <_sbrk_r>:
 800a018:	2300      	movs	r3, #0
 800a01a:	b570      	push	{r4, r5, r6, lr}
 800a01c:	4d06      	ldr	r5, [pc, #24]	; (800a038 <_sbrk_r+0x20>)
 800a01e:	0004      	movs	r4, r0
 800a020:	0008      	movs	r0, r1
 800a022:	602b      	str	r3, [r5, #0]
 800a024:	f7fa f96a 	bl	80042fc <_sbrk>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d103      	bne.n	800a034 <_sbrk_r+0x1c>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d000      	beq.n	800a034 <_sbrk_r+0x1c>
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	bd70      	pop	{r4, r5, r6, pc}
 800a036:	46c0      	nop			; (mov r8, r8)
 800a038:	200003b8 	.word	0x200003b8

0800a03c <__assert_func>:
 800a03c:	b530      	push	{r4, r5, lr}
 800a03e:	0014      	movs	r4, r2
 800a040:	001a      	movs	r2, r3
 800a042:	4b09      	ldr	r3, [pc, #36]	; (800a068 <__assert_func+0x2c>)
 800a044:	0005      	movs	r5, r0
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	b085      	sub	sp, #20
 800a04a:	68d8      	ldr	r0, [r3, #12]
 800a04c:	4b07      	ldr	r3, [pc, #28]	; (800a06c <__assert_func+0x30>)
 800a04e:	2c00      	cmp	r4, #0
 800a050:	d101      	bne.n	800a056 <__assert_func+0x1a>
 800a052:	4b07      	ldr	r3, [pc, #28]	; (800a070 <__assert_func+0x34>)
 800a054:	001c      	movs	r4, r3
 800a056:	9301      	str	r3, [sp, #4]
 800a058:	9100      	str	r1, [sp, #0]
 800a05a:	002b      	movs	r3, r5
 800a05c:	4905      	ldr	r1, [pc, #20]	; (800a074 <__assert_func+0x38>)
 800a05e:	9402      	str	r4, [sp, #8]
 800a060:	f000 f80a 	bl	800a078 <fiprintf>
 800a064:	f000 fa78 	bl	800a558 <abort>
 800a068:	20000014 	.word	0x20000014
 800a06c:	0800b40c 	.word	0x0800b40c
 800a070:	0800b447 	.word	0x0800b447
 800a074:	0800b419 	.word	0x0800b419

0800a078 <fiprintf>:
 800a078:	b40e      	push	{r1, r2, r3}
 800a07a:	b503      	push	{r0, r1, lr}
 800a07c:	0001      	movs	r1, r0
 800a07e:	ab03      	add	r3, sp, #12
 800a080:	4804      	ldr	r0, [pc, #16]	; (800a094 <fiprintf+0x1c>)
 800a082:	cb04      	ldmia	r3!, {r2}
 800a084:	6800      	ldr	r0, [r0, #0]
 800a086:	9301      	str	r3, [sp, #4]
 800a088:	f000 f850 	bl	800a12c <_vfiprintf_r>
 800a08c:	b002      	add	sp, #8
 800a08e:	bc08      	pop	{r3}
 800a090:	b003      	add	sp, #12
 800a092:	4718      	bx	r3
 800a094:	20000014 	.word	0x20000014

0800a098 <__ascii_mbtowc>:
 800a098:	b082      	sub	sp, #8
 800a09a:	2900      	cmp	r1, #0
 800a09c:	d100      	bne.n	800a0a0 <__ascii_mbtowc+0x8>
 800a09e:	a901      	add	r1, sp, #4
 800a0a0:	1e10      	subs	r0, r2, #0
 800a0a2:	d006      	beq.n	800a0b2 <__ascii_mbtowc+0x1a>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d006      	beq.n	800a0b6 <__ascii_mbtowc+0x1e>
 800a0a8:	7813      	ldrb	r3, [r2, #0]
 800a0aa:	600b      	str	r3, [r1, #0]
 800a0ac:	7810      	ldrb	r0, [r2, #0]
 800a0ae:	1e43      	subs	r3, r0, #1
 800a0b0:	4198      	sbcs	r0, r3
 800a0b2:	b002      	add	sp, #8
 800a0b4:	4770      	bx	lr
 800a0b6:	2002      	movs	r0, #2
 800a0b8:	4240      	negs	r0, r0
 800a0ba:	e7fa      	b.n	800a0b2 <__ascii_mbtowc+0x1a>

0800a0bc <__malloc_lock>:
 800a0bc:	b510      	push	{r4, lr}
 800a0be:	4802      	ldr	r0, [pc, #8]	; (800a0c8 <__malloc_lock+0xc>)
 800a0c0:	f000 fc21 	bl	800a906 <__retarget_lock_acquire_recursive>
 800a0c4:	bd10      	pop	{r4, pc}
 800a0c6:	46c0      	nop			; (mov r8, r8)
 800a0c8:	200003bc 	.word	0x200003bc

0800a0cc <__malloc_unlock>:
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	4802      	ldr	r0, [pc, #8]	; (800a0d8 <__malloc_unlock+0xc>)
 800a0d0:	f000 fc1a 	bl	800a908 <__retarget_lock_release_recursive>
 800a0d4:	bd10      	pop	{r4, pc}
 800a0d6:	46c0      	nop			; (mov r8, r8)
 800a0d8:	200003bc 	.word	0x200003bc

0800a0dc <__sfputc_r>:
 800a0dc:	6893      	ldr	r3, [r2, #8]
 800a0de:	b510      	push	{r4, lr}
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	6093      	str	r3, [r2, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	da04      	bge.n	800a0f2 <__sfputc_r+0x16>
 800a0e8:	6994      	ldr	r4, [r2, #24]
 800a0ea:	42a3      	cmp	r3, r4
 800a0ec:	db07      	blt.n	800a0fe <__sfputc_r+0x22>
 800a0ee:	290a      	cmp	r1, #10
 800a0f0:	d005      	beq.n	800a0fe <__sfputc_r+0x22>
 800a0f2:	6813      	ldr	r3, [r2, #0]
 800a0f4:	1c58      	adds	r0, r3, #1
 800a0f6:	6010      	str	r0, [r2, #0]
 800a0f8:	7019      	strb	r1, [r3, #0]
 800a0fa:	0008      	movs	r0, r1
 800a0fc:	bd10      	pop	{r4, pc}
 800a0fe:	f000 f94f 	bl	800a3a0 <__swbuf_r>
 800a102:	0001      	movs	r1, r0
 800a104:	e7f9      	b.n	800a0fa <__sfputc_r+0x1e>

0800a106 <__sfputs_r>:
 800a106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a108:	0006      	movs	r6, r0
 800a10a:	000f      	movs	r7, r1
 800a10c:	0014      	movs	r4, r2
 800a10e:	18d5      	adds	r5, r2, r3
 800a110:	42ac      	cmp	r4, r5
 800a112:	d101      	bne.n	800a118 <__sfputs_r+0x12>
 800a114:	2000      	movs	r0, #0
 800a116:	e007      	b.n	800a128 <__sfputs_r+0x22>
 800a118:	7821      	ldrb	r1, [r4, #0]
 800a11a:	003a      	movs	r2, r7
 800a11c:	0030      	movs	r0, r6
 800a11e:	f7ff ffdd 	bl	800a0dc <__sfputc_r>
 800a122:	3401      	adds	r4, #1
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d1f3      	bne.n	800a110 <__sfputs_r+0xa>
 800a128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a12c <_vfiprintf_r>:
 800a12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a12e:	b0a1      	sub	sp, #132	; 0x84
 800a130:	0006      	movs	r6, r0
 800a132:	000c      	movs	r4, r1
 800a134:	001f      	movs	r7, r3
 800a136:	9203      	str	r2, [sp, #12]
 800a138:	2800      	cmp	r0, #0
 800a13a:	d004      	beq.n	800a146 <_vfiprintf_r+0x1a>
 800a13c:	6983      	ldr	r3, [r0, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <_vfiprintf_r+0x1a>
 800a142:	f000 fb3f 	bl	800a7c4 <__sinit>
 800a146:	4b8e      	ldr	r3, [pc, #568]	; (800a380 <_vfiprintf_r+0x254>)
 800a148:	429c      	cmp	r4, r3
 800a14a:	d11c      	bne.n	800a186 <_vfiprintf_r+0x5a>
 800a14c:	6874      	ldr	r4, [r6, #4]
 800a14e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a150:	07db      	lsls	r3, r3, #31
 800a152:	d405      	bmi.n	800a160 <_vfiprintf_r+0x34>
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	059b      	lsls	r3, r3, #22
 800a158:	d402      	bmi.n	800a160 <_vfiprintf_r+0x34>
 800a15a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a15c:	f000 fbd3 	bl	800a906 <__retarget_lock_acquire_recursive>
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	071b      	lsls	r3, r3, #28
 800a164:	d502      	bpl.n	800a16c <_vfiprintf_r+0x40>
 800a166:	6923      	ldr	r3, [r4, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d11d      	bne.n	800a1a8 <_vfiprintf_r+0x7c>
 800a16c:	0021      	movs	r1, r4
 800a16e:	0030      	movs	r0, r6
 800a170:	f000 f97a 	bl	800a468 <__swsetup_r>
 800a174:	2800      	cmp	r0, #0
 800a176:	d017      	beq.n	800a1a8 <_vfiprintf_r+0x7c>
 800a178:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a17a:	07db      	lsls	r3, r3, #31
 800a17c:	d50d      	bpl.n	800a19a <_vfiprintf_r+0x6e>
 800a17e:	2001      	movs	r0, #1
 800a180:	4240      	negs	r0, r0
 800a182:	b021      	add	sp, #132	; 0x84
 800a184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a186:	4b7f      	ldr	r3, [pc, #508]	; (800a384 <_vfiprintf_r+0x258>)
 800a188:	429c      	cmp	r4, r3
 800a18a:	d101      	bne.n	800a190 <_vfiprintf_r+0x64>
 800a18c:	68b4      	ldr	r4, [r6, #8]
 800a18e:	e7de      	b.n	800a14e <_vfiprintf_r+0x22>
 800a190:	4b7d      	ldr	r3, [pc, #500]	; (800a388 <_vfiprintf_r+0x25c>)
 800a192:	429c      	cmp	r4, r3
 800a194:	d1db      	bne.n	800a14e <_vfiprintf_r+0x22>
 800a196:	68f4      	ldr	r4, [r6, #12]
 800a198:	e7d9      	b.n	800a14e <_vfiprintf_r+0x22>
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	059b      	lsls	r3, r3, #22
 800a19e:	d4ee      	bmi.n	800a17e <_vfiprintf_r+0x52>
 800a1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1a2:	f000 fbb1 	bl	800a908 <__retarget_lock_release_recursive>
 800a1a6:	e7ea      	b.n	800a17e <_vfiprintf_r+0x52>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	ad08      	add	r5, sp, #32
 800a1ac:	616b      	str	r3, [r5, #20]
 800a1ae:	3320      	adds	r3, #32
 800a1b0:	766b      	strb	r3, [r5, #25]
 800a1b2:	3310      	adds	r3, #16
 800a1b4:	76ab      	strb	r3, [r5, #26]
 800a1b6:	9707      	str	r7, [sp, #28]
 800a1b8:	9f03      	ldr	r7, [sp, #12]
 800a1ba:	783b      	ldrb	r3, [r7, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <_vfiprintf_r+0x98>
 800a1c0:	2b25      	cmp	r3, #37	; 0x25
 800a1c2:	d14e      	bne.n	800a262 <_vfiprintf_r+0x136>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	1afb      	subs	r3, r7, r3
 800a1c8:	9305      	str	r3, [sp, #20]
 800a1ca:	9b03      	ldr	r3, [sp, #12]
 800a1cc:	429f      	cmp	r7, r3
 800a1ce:	d00d      	beq.n	800a1ec <_vfiprintf_r+0xc0>
 800a1d0:	9b05      	ldr	r3, [sp, #20]
 800a1d2:	0021      	movs	r1, r4
 800a1d4:	0030      	movs	r0, r6
 800a1d6:	9a03      	ldr	r2, [sp, #12]
 800a1d8:	f7ff ff95 	bl	800a106 <__sfputs_r>
 800a1dc:	1c43      	adds	r3, r0, #1
 800a1de:	d100      	bne.n	800a1e2 <_vfiprintf_r+0xb6>
 800a1e0:	e0b5      	b.n	800a34e <_vfiprintf_r+0x222>
 800a1e2:	696a      	ldr	r2, [r5, #20]
 800a1e4:	9b05      	ldr	r3, [sp, #20]
 800a1e6:	4694      	mov	ip, r2
 800a1e8:	4463      	add	r3, ip
 800a1ea:	616b      	str	r3, [r5, #20]
 800a1ec:	783b      	ldrb	r3, [r7, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d100      	bne.n	800a1f4 <_vfiprintf_r+0xc8>
 800a1f2:	e0ac      	b.n	800a34e <_vfiprintf_r+0x222>
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	1c7b      	adds	r3, r7, #1
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	4252      	negs	r2, r2
 800a1fe:	606a      	str	r2, [r5, #4]
 800a200:	a904      	add	r1, sp, #16
 800a202:	3254      	adds	r2, #84	; 0x54
 800a204:	1852      	adds	r2, r2, r1
 800a206:	602b      	str	r3, [r5, #0]
 800a208:	60eb      	str	r3, [r5, #12]
 800a20a:	60ab      	str	r3, [r5, #8]
 800a20c:	7013      	strb	r3, [r2, #0]
 800a20e:	65ab      	str	r3, [r5, #88]	; 0x58
 800a210:	9b03      	ldr	r3, [sp, #12]
 800a212:	2205      	movs	r2, #5
 800a214:	7819      	ldrb	r1, [r3, #0]
 800a216:	485d      	ldr	r0, [pc, #372]	; (800a38c <_vfiprintf_r+0x260>)
 800a218:	f7ff fa40 	bl	800969c <memchr>
 800a21c:	9b03      	ldr	r3, [sp, #12]
 800a21e:	1c5f      	adds	r7, r3, #1
 800a220:	2800      	cmp	r0, #0
 800a222:	d120      	bne.n	800a266 <_vfiprintf_r+0x13a>
 800a224:	682a      	ldr	r2, [r5, #0]
 800a226:	06d3      	lsls	r3, r2, #27
 800a228:	d504      	bpl.n	800a234 <_vfiprintf_r+0x108>
 800a22a:	2353      	movs	r3, #83	; 0x53
 800a22c:	a904      	add	r1, sp, #16
 800a22e:	185b      	adds	r3, r3, r1
 800a230:	2120      	movs	r1, #32
 800a232:	7019      	strb	r1, [r3, #0]
 800a234:	0713      	lsls	r3, r2, #28
 800a236:	d504      	bpl.n	800a242 <_vfiprintf_r+0x116>
 800a238:	2353      	movs	r3, #83	; 0x53
 800a23a:	a904      	add	r1, sp, #16
 800a23c:	185b      	adds	r3, r3, r1
 800a23e:	212b      	movs	r1, #43	; 0x2b
 800a240:	7019      	strb	r1, [r3, #0]
 800a242:	9b03      	ldr	r3, [sp, #12]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	2b2a      	cmp	r3, #42	; 0x2a
 800a248:	d016      	beq.n	800a278 <_vfiprintf_r+0x14c>
 800a24a:	2100      	movs	r1, #0
 800a24c:	68eb      	ldr	r3, [r5, #12]
 800a24e:	9f03      	ldr	r7, [sp, #12]
 800a250:	783a      	ldrb	r2, [r7, #0]
 800a252:	1c78      	adds	r0, r7, #1
 800a254:	3a30      	subs	r2, #48	; 0x30
 800a256:	4684      	mov	ip, r0
 800a258:	2a09      	cmp	r2, #9
 800a25a:	d94f      	bls.n	800a2fc <_vfiprintf_r+0x1d0>
 800a25c:	2900      	cmp	r1, #0
 800a25e:	d111      	bne.n	800a284 <_vfiprintf_r+0x158>
 800a260:	e017      	b.n	800a292 <_vfiprintf_r+0x166>
 800a262:	3701      	adds	r7, #1
 800a264:	e7a9      	b.n	800a1ba <_vfiprintf_r+0x8e>
 800a266:	4b49      	ldr	r3, [pc, #292]	; (800a38c <_vfiprintf_r+0x260>)
 800a268:	682a      	ldr	r2, [r5, #0]
 800a26a:	1ac0      	subs	r0, r0, r3
 800a26c:	2301      	movs	r3, #1
 800a26e:	4083      	lsls	r3, r0
 800a270:	4313      	orrs	r3, r2
 800a272:	602b      	str	r3, [r5, #0]
 800a274:	9703      	str	r7, [sp, #12]
 800a276:	e7cb      	b.n	800a210 <_vfiprintf_r+0xe4>
 800a278:	9b07      	ldr	r3, [sp, #28]
 800a27a:	1d19      	adds	r1, r3, #4
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	9107      	str	r1, [sp, #28]
 800a280:	2b00      	cmp	r3, #0
 800a282:	db01      	blt.n	800a288 <_vfiprintf_r+0x15c>
 800a284:	930b      	str	r3, [sp, #44]	; 0x2c
 800a286:	e004      	b.n	800a292 <_vfiprintf_r+0x166>
 800a288:	425b      	negs	r3, r3
 800a28a:	60eb      	str	r3, [r5, #12]
 800a28c:	2302      	movs	r3, #2
 800a28e:	4313      	orrs	r3, r2
 800a290:	602b      	str	r3, [r5, #0]
 800a292:	783b      	ldrb	r3, [r7, #0]
 800a294:	2b2e      	cmp	r3, #46	; 0x2e
 800a296:	d10a      	bne.n	800a2ae <_vfiprintf_r+0x182>
 800a298:	787b      	ldrb	r3, [r7, #1]
 800a29a:	2b2a      	cmp	r3, #42	; 0x2a
 800a29c:	d137      	bne.n	800a30e <_vfiprintf_r+0x1e2>
 800a29e:	9b07      	ldr	r3, [sp, #28]
 800a2a0:	3702      	adds	r7, #2
 800a2a2:	1d1a      	adds	r2, r3, #4
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	9207      	str	r2, [sp, #28]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	db2d      	blt.n	800a308 <_vfiprintf_r+0x1dc>
 800a2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ae:	2203      	movs	r2, #3
 800a2b0:	7839      	ldrb	r1, [r7, #0]
 800a2b2:	4837      	ldr	r0, [pc, #220]	; (800a390 <_vfiprintf_r+0x264>)
 800a2b4:	f7ff f9f2 	bl	800969c <memchr>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d007      	beq.n	800a2cc <_vfiprintf_r+0x1a0>
 800a2bc:	4b34      	ldr	r3, [pc, #208]	; (800a390 <_vfiprintf_r+0x264>)
 800a2be:	682a      	ldr	r2, [r5, #0]
 800a2c0:	1ac0      	subs	r0, r0, r3
 800a2c2:	2340      	movs	r3, #64	; 0x40
 800a2c4:	4083      	lsls	r3, r0
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	3701      	adds	r7, #1
 800a2ca:	602b      	str	r3, [r5, #0]
 800a2cc:	7839      	ldrb	r1, [r7, #0]
 800a2ce:	1c7b      	adds	r3, r7, #1
 800a2d0:	2206      	movs	r2, #6
 800a2d2:	4830      	ldr	r0, [pc, #192]	; (800a394 <_vfiprintf_r+0x268>)
 800a2d4:	9303      	str	r3, [sp, #12]
 800a2d6:	7629      	strb	r1, [r5, #24]
 800a2d8:	f7ff f9e0 	bl	800969c <memchr>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d045      	beq.n	800a36c <_vfiprintf_r+0x240>
 800a2e0:	4b2d      	ldr	r3, [pc, #180]	; (800a398 <_vfiprintf_r+0x26c>)
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d127      	bne.n	800a336 <_vfiprintf_r+0x20a>
 800a2e6:	2207      	movs	r2, #7
 800a2e8:	9b07      	ldr	r3, [sp, #28]
 800a2ea:	3307      	adds	r3, #7
 800a2ec:	4393      	bics	r3, r2
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	9307      	str	r3, [sp, #28]
 800a2f2:	696b      	ldr	r3, [r5, #20]
 800a2f4:	9a04      	ldr	r2, [sp, #16]
 800a2f6:	189b      	adds	r3, r3, r2
 800a2f8:	616b      	str	r3, [r5, #20]
 800a2fa:	e75d      	b.n	800a1b8 <_vfiprintf_r+0x8c>
 800a2fc:	210a      	movs	r1, #10
 800a2fe:	434b      	muls	r3, r1
 800a300:	4667      	mov	r7, ip
 800a302:	189b      	adds	r3, r3, r2
 800a304:	3909      	subs	r1, #9
 800a306:	e7a3      	b.n	800a250 <_vfiprintf_r+0x124>
 800a308:	2301      	movs	r3, #1
 800a30a:	425b      	negs	r3, r3
 800a30c:	e7ce      	b.n	800a2ac <_vfiprintf_r+0x180>
 800a30e:	2300      	movs	r3, #0
 800a310:	001a      	movs	r2, r3
 800a312:	3701      	adds	r7, #1
 800a314:	606b      	str	r3, [r5, #4]
 800a316:	7839      	ldrb	r1, [r7, #0]
 800a318:	1c78      	adds	r0, r7, #1
 800a31a:	3930      	subs	r1, #48	; 0x30
 800a31c:	4684      	mov	ip, r0
 800a31e:	2909      	cmp	r1, #9
 800a320:	d903      	bls.n	800a32a <_vfiprintf_r+0x1fe>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0c3      	beq.n	800a2ae <_vfiprintf_r+0x182>
 800a326:	9209      	str	r2, [sp, #36]	; 0x24
 800a328:	e7c1      	b.n	800a2ae <_vfiprintf_r+0x182>
 800a32a:	230a      	movs	r3, #10
 800a32c:	435a      	muls	r2, r3
 800a32e:	4667      	mov	r7, ip
 800a330:	1852      	adds	r2, r2, r1
 800a332:	3b09      	subs	r3, #9
 800a334:	e7ef      	b.n	800a316 <_vfiprintf_r+0x1ea>
 800a336:	ab07      	add	r3, sp, #28
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	0022      	movs	r2, r4
 800a33c:	0029      	movs	r1, r5
 800a33e:	0030      	movs	r0, r6
 800a340:	4b16      	ldr	r3, [pc, #88]	; (800a39c <_vfiprintf_r+0x270>)
 800a342:	f7fd ff33 	bl	80081ac <_printf_float>
 800a346:	9004      	str	r0, [sp, #16]
 800a348:	9b04      	ldr	r3, [sp, #16]
 800a34a:	3301      	adds	r3, #1
 800a34c:	d1d1      	bne.n	800a2f2 <_vfiprintf_r+0x1c6>
 800a34e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a350:	07db      	lsls	r3, r3, #31
 800a352:	d405      	bmi.n	800a360 <_vfiprintf_r+0x234>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	059b      	lsls	r3, r3, #22
 800a358:	d402      	bmi.n	800a360 <_vfiprintf_r+0x234>
 800a35a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a35c:	f000 fad4 	bl	800a908 <__retarget_lock_release_recursive>
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	065b      	lsls	r3, r3, #25
 800a364:	d500      	bpl.n	800a368 <_vfiprintf_r+0x23c>
 800a366:	e70a      	b.n	800a17e <_vfiprintf_r+0x52>
 800a368:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a36a:	e70a      	b.n	800a182 <_vfiprintf_r+0x56>
 800a36c:	ab07      	add	r3, sp, #28
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	0022      	movs	r2, r4
 800a372:	0029      	movs	r1, r5
 800a374:	0030      	movs	r0, r6
 800a376:	4b09      	ldr	r3, [pc, #36]	; (800a39c <_vfiprintf_r+0x270>)
 800a378:	f7fe f9ca 	bl	8008710 <_printf_i>
 800a37c:	e7e3      	b.n	800a346 <_vfiprintf_r+0x21a>
 800a37e:	46c0      	nop			; (mov r8, r8)
 800a380:	0800b584 	.word	0x0800b584
 800a384:	0800b5a4 	.word	0x0800b5a4
 800a388:	0800b564 	.word	0x0800b564
 800a38c:	0800b452 	.word	0x0800b452
 800a390:	0800b458 	.word	0x0800b458
 800a394:	0800b45c 	.word	0x0800b45c
 800a398:	080081ad 	.word	0x080081ad
 800a39c:	0800a107 	.word	0x0800a107

0800a3a0 <__swbuf_r>:
 800a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a2:	0005      	movs	r5, r0
 800a3a4:	000e      	movs	r6, r1
 800a3a6:	0014      	movs	r4, r2
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d004      	beq.n	800a3b6 <__swbuf_r+0x16>
 800a3ac:	6983      	ldr	r3, [r0, #24]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <__swbuf_r+0x16>
 800a3b2:	f000 fa07 	bl	800a7c4 <__sinit>
 800a3b6:	4b22      	ldr	r3, [pc, #136]	; (800a440 <__swbuf_r+0xa0>)
 800a3b8:	429c      	cmp	r4, r3
 800a3ba:	d12e      	bne.n	800a41a <__swbuf_r+0x7a>
 800a3bc:	686c      	ldr	r4, [r5, #4]
 800a3be:	69a3      	ldr	r3, [r4, #24]
 800a3c0:	60a3      	str	r3, [r4, #8]
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	071b      	lsls	r3, r3, #28
 800a3c6:	d532      	bpl.n	800a42e <__swbuf_r+0x8e>
 800a3c8:	6923      	ldr	r3, [r4, #16]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d02f      	beq.n	800a42e <__swbuf_r+0x8e>
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	6922      	ldr	r2, [r4, #16]
 800a3d2:	b2f7      	uxtb	r7, r6
 800a3d4:	1a98      	subs	r0, r3, r2
 800a3d6:	6963      	ldr	r3, [r4, #20]
 800a3d8:	b2f6      	uxtb	r6, r6
 800a3da:	4283      	cmp	r3, r0
 800a3dc:	dc05      	bgt.n	800a3ea <__swbuf_r+0x4a>
 800a3de:	0021      	movs	r1, r4
 800a3e0:	0028      	movs	r0, r5
 800a3e2:	f000 f94d 	bl	800a680 <_fflush_r>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d127      	bne.n	800a43a <__swbuf_r+0x9a>
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	60a3      	str	r3, [r4, #8]
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	6022      	str	r2, [r4, #0]
 800a3f8:	701f      	strb	r7, [r3, #0]
 800a3fa:	6963      	ldr	r3, [r4, #20]
 800a3fc:	4283      	cmp	r3, r0
 800a3fe:	d004      	beq.n	800a40a <__swbuf_r+0x6a>
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	07db      	lsls	r3, r3, #31
 800a404:	d507      	bpl.n	800a416 <__swbuf_r+0x76>
 800a406:	2e0a      	cmp	r6, #10
 800a408:	d105      	bne.n	800a416 <__swbuf_r+0x76>
 800a40a:	0021      	movs	r1, r4
 800a40c:	0028      	movs	r0, r5
 800a40e:	f000 f937 	bl	800a680 <_fflush_r>
 800a412:	2800      	cmp	r0, #0
 800a414:	d111      	bne.n	800a43a <__swbuf_r+0x9a>
 800a416:	0030      	movs	r0, r6
 800a418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a41a:	4b0a      	ldr	r3, [pc, #40]	; (800a444 <__swbuf_r+0xa4>)
 800a41c:	429c      	cmp	r4, r3
 800a41e:	d101      	bne.n	800a424 <__swbuf_r+0x84>
 800a420:	68ac      	ldr	r4, [r5, #8]
 800a422:	e7cc      	b.n	800a3be <__swbuf_r+0x1e>
 800a424:	4b08      	ldr	r3, [pc, #32]	; (800a448 <__swbuf_r+0xa8>)
 800a426:	429c      	cmp	r4, r3
 800a428:	d1c9      	bne.n	800a3be <__swbuf_r+0x1e>
 800a42a:	68ec      	ldr	r4, [r5, #12]
 800a42c:	e7c7      	b.n	800a3be <__swbuf_r+0x1e>
 800a42e:	0021      	movs	r1, r4
 800a430:	0028      	movs	r0, r5
 800a432:	f000 f819 	bl	800a468 <__swsetup_r>
 800a436:	2800      	cmp	r0, #0
 800a438:	d0c9      	beq.n	800a3ce <__swbuf_r+0x2e>
 800a43a:	2601      	movs	r6, #1
 800a43c:	4276      	negs	r6, r6
 800a43e:	e7ea      	b.n	800a416 <__swbuf_r+0x76>
 800a440:	0800b584 	.word	0x0800b584
 800a444:	0800b5a4 	.word	0x0800b5a4
 800a448:	0800b564 	.word	0x0800b564

0800a44c <__ascii_wctomb>:
 800a44c:	0003      	movs	r3, r0
 800a44e:	1e08      	subs	r0, r1, #0
 800a450:	d005      	beq.n	800a45e <__ascii_wctomb+0x12>
 800a452:	2aff      	cmp	r2, #255	; 0xff
 800a454:	d904      	bls.n	800a460 <__ascii_wctomb+0x14>
 800a456:	228a      	movs	r2, #138	; 0x8a
 800a458:	2001      	movs	r0, #1
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	4240      	negs	r0, r0
 800a45e:	4770      	bx	lr
 800a460:	2001      	movs	r0, #1
 800a462:	700a      	strb	r2, [r1, #0]
 800a464:	e7fb      	b.n	800a45e <__ascii_wctomb+0x12>
	...

0800a468 <__swsetup_r>:
 800a468:	4b37      	ldr	r3, [pc, #220]	; (800a548 <__swsetup_r+0xe0>)
 800a46a:	b570      	push	{r4, r5, r6, lr}
 800a46c:	681d      	ldr	r5, [r3, #0]
 800a46e:	0006      	movs	r6, r0
 800a470:	000c      	movs	r4, r1
 800a472:	2d00      	cmp	r5, #0
 800a474:	d005      	beq.n	800a482 <__swsetup_r+0x1a>
 800a476:	69ab      	ldr	r3, [r5, #24]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d102      	bne.n	800a482 <__swsetup_r+0x1a>
 800a47c:	0028      	movs	r0, r5
 800a47e:	f000 f9a1 	bl	800a7c4 <__sinit>
 800a482:	4b32      	ldr	r3, [pc, #200]	; (800a54c <__swsetup_r+0xe4>)
 800a484:	429c      	cmp	r4, r3
 800a486:	d10f      	bne.n	800a4a8 <__swsetup_r+0x40>
 800a488:	686c      	ldr	r4, [r5, #4]
 800a48a:	230c      	movs	r3, #12
 800a48c:	5ee2      	ldrsh	r2, [r4, r3]
 800a48e:	b293      	uxth	r3, r2
 800a490:	0711      	lsls	r1, r2, #28
 800a492:	d42d      	bmi.n	800a4f0 <__swsetup_r+0x88>
 800a494:	06d9      	lsls	r1, r3, #27
 800a496:	d411      	bmi.n	800a4bc <__swsetup_r+0x54>
 800a498:	2309      	movs	r3, #9
 800a49a:	2001      	movs	r0, #1
 800a49c:	6033      	str	r3, [r6, #0]
 800a49e:	3337      	adds	r3, #55	; 0x37
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	81a3      	strh	r3, [r4, #12]
 800a4a4:	4240      	negs	r0, r0
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	4b29      	ldr	r3, [pc, #164]	; (800a550 <__swsetup_r+0xe8>)
 800a4aa:	429c      	cmp	r4, r3
 800a4ac:	d101      	bne.n	800a4b2 <__swsetup_r+0x4a>
 800a4ae:	68ac      	ldr	r4, [r5, #8]
 800a4b0:	e7eb      	b.n	800a48a <__swsetup_r+0x22>
 800a4b2:	4b28      	ldr	r3, [pc, #160]	; (800a554 <__swsetup_r+0xec>)
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	d1e8      	bne.n	800a48a <__swsetup_r+0x22>
 800a4b8:	68ec      	ldr	r4, [r5, #12]
 800a4ba:	e7e6      	b.n	800a48a <__swsetup_r+0x22>
 800a4bc:	075b      	lsls	r3, r3, #29
 800a4be:	d513      	bpl.n	800a4e8 <__swsetup_r+0x80>
 800a4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4c2:	2900      	cmp	r1, #0
 800a4c4:	d008      	beq.n	800a4d8 <__swsetup_r+0x70>
 800a4c6:	0023      	movs	r3, r4
 800a4c8:	3344      	adds	r3, #68	; 0x44
 800a4ca:	4299      	cmp	r1, r3
 800a4cc:	d002      	beq.n	800a4d4 <__swsetup_r+0x6c>
 800a4ce:	0030      	movs	r0, r6
 800a4d0:	f7ff fcc0 	bl	8009e54 <_free_r>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	6363      	str	r3, [r4, #52]	; 0x34
 800a4d8:	2224      	movs	r2, #36	; 0x24
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	4393      	bics	r3, r2
 800a4de:	81a3      	strh	r3, [r4, #12]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	6063      	str	r3, [r4, #4]
 800a4e4:	6923      	ldr	r3, [r4, #16]
 800a4e6:	6023      	str	r3, [r4, #0]
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	89a2      	ldrh	r2, [r4, #12]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	81a3      	strh	r3, [r4, #12]
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10b      	bne.n	800a50e <__swsetup_r+0xa6>
 800a4f6:	21a0      	movs	r1, #160	; 0xa0
 800a4f8:	2280      	movs	r2, #128	; 0x80
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	0089      	lsls	r1, r1, #2
 800a4fe:	0092      	lsls	r2, r2, #2
 800a500:	400b      	ands	r3, r1
 800a502:	4293      	cmp	r3, r2
 800a504:	d003      	beq.n	800a50e <__swsetup_r+0xa6>
 800a506:	0021      	movs	r1, r4
 800a508:	0030      	movs	r0, r6
 800a50a:	f000 fa27 	bl	800a95c <__smakebuf_r>
 800a50e:	220c      	movs	r2, #12
 800a510:	5ea3      	ldrsh	r3, [r4, r2]
 800a512:	2001      	movs	r0, #1
 800a514:	001a      	movs	r2, r3
 800a516:	b299      	uxth	r1, r3
 800a518:	4002      	ands	r2, r0
 800a51a:	4203      	tst	r3, r0
 800a51c:	d00f      	beq.n	800a53e <__swsetup_r+0xd6>
 800a51e:	2200      	movs	r2, #0
 800a520:	60a2      	str	r2, [r4, #8]
 800a522:	6962      	ldr	r2, [r4, #20]
 800a524:	4252      	negs	r2, r2
 800a526:	61a2      	str	r2, [r4, #24]
 800a528:	2000      	movs	r0, #0
 800a52a:	6922      	ldr	r2, [r4, #16]
 800a52c:	4282      	cmp	r2, r0
 800a52e:	d1ba      	bne.n	800a4a6 <__swsetup_r+0x3e>
 800a530:	060a      	lsls	r2, r1, #24
 800a532:	d5b8      	bpl.n	800a4a6 <__swsetup_r+0x3e>
 800a534:	2240      	movs	r2, #64	; 0x40
 800a536:	4313      	orrs	r3, r2
 800a538:	81a3      	strh	r3, [r4, #12]
 800a53a:	3801      	subs	r0, #1
 800a53c:	e7b3      	b.n	800a4a6 <__swsetup_r+0x3e>
 800a53e:	0788      	lsls	r0, r1, #30
 800a540:	d400      	bmi.n	800a544 <__swsetup_r+0xdc>
 800a542:	6962      	ldr	r2, [r4, #20]
 800a544:	60a2      	str	r2, [r4, #8]
 800a546:	e7ef      	b.n	800a528 <__swsetup_r+0xc0>
 800a548:	20000014 	.word	0x20000014
 800a54c:	0800b584 	.word	0x0800b584
 800a550:	0800b5a4 	.word	0x0800b5a4
 800a554:	0800b564 	.word	0x0800b564

0800a558 <abort>:
 800a558:	2006      	movs	r0, #6
 800a55a:	b510      	push	{r4, lr}
 800a55c:	f000 fa6c 	bl	800aa38 <raise>
 800a560:	2001      	movs	r0, #1
 800a562:	f7f9 fe59 	bl	8004218 <_exit>
	...

0800a568 <__sflush_r>:
 800a568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a56a:	898b      	ldrh	r3, [r1, #12]
 800a56c:	0005      	movs	r5, r0
 800a56e:	000c      	movs	r4, r1
 800a570:	071a      	lsls	r2, r3, #28
 800a572:	d45f      	bmi.n	800a634 <__sflush_r+0xcc>
 800a574:	684a      	ldr	r2, [r1, #4]
 800a576:	2a00      	cmp	r2, #0
 800a578:	dc04      	bgt.n	800a584 <__sflush_r+0x1c>
 800a57a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a57c:	2a00      	cmp	r2, #0
 800a57e:	dc01      	bgt.n	800a584 <__sflush_r+0x1c>
 800a580:	2000      	movs	r0, #0
 800a582:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a584:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a586:	2f00      	cmp	r7, #0
 800a588:	d0fa      	beq.n	800a580 <__sflush_r+0x18>
 800a58a:	2200      	movs	r2, #0
 800a58c:	2180      	movs	r1, #128	; 0x80
 800a58e:	682e      	ldr	r6, [r5, #0]
 800a590:	602a      	str	r2, [r5, #0]
 800a592:	001a      	movs	r2, r3
 800a594:	0149      	lsls	r1, r1, #5
 800a596:	400a      	ands	r2, r1
 800a598:	420b      	tst	r3, r1
 800a59a:	d034      	beq.n	800a606 <__sflush_r+0x9e>
 800a59c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	075b      	lsls	r3, r3, #29
 800a5a2:	d506      	bpl.n	800a5b2 <__sflush_r+0x4a>
 800a5a4:	6863      	ldr	r3, [r4, #4]
 800a5a6:	1ac0      	subs	r0, r0, r3
 800a5a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <__sflush_r+0x4a>
 800a5ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5b0:	1ac0      	subs	r0, r0, r3
 800a5b2:	0002      	movs	r2, r0
 800a5b4:	6a21      	ldr	r1, [r4, #32]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	0028      	movs	r0, r5
 800a5ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a5bc:	47b8      	blx	r7
 800a5be:	89a1      	ldrh	r1, [r4, #12]
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d106      	bne.n	800a5d2 <__sflush_r+0x6a>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	2b1d      	cmp	r3, #29
 800a5c8:	d831      	bhi.n	800a62e <__sflush_r+0xc6>
 800a5ca:	4a2c      	ldr	r2, [pc, #176]	; (800a67c <__sflush_r+0x114>)
 800a5cc:	40da      	lsrs	r2, r3
 800a5ce:	07d3      	lsls	r3, r2, #31
 800a5d0:	d52d      	bpl.n	800a62e <__sflush_r+0xc6>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	6063      	str	r3, [r4, #4]
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	04cb      	lsls	r3, r1, #19
 800a5dc:	d505      	bpl.n	800a5ea <__sflush_r+0x82>
 800a5de:	1c43      	adds	r3, r0, #1
 800a5e0:	d102      	bne.n	800a5e8 <__sflush_r+0x80>
 800a5e2:	682b      	ldr	r3, [r5, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d100      	bne.n	800a5ea <__sflush_r+0x82>
 800a5e8:	6560      	str	r0, [r4, #84]	; 0x54
 800a5ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5ec:	602e      	str	r6, [r5, #0]
 800a5ee:	2900      	cmp	r1, #0
 800a5f0:	d0c6      	beq.n	800a580 <__sflush_r+0x18>
 800a5f2:	0023      	movs	r3, r4
 800a5f4:	3344      	adds	r3, #68	; 0x44
 800a5f6:	4299      	cmp	r1, r3
 800a5f8:	d002      	beq.n	800a600 <__sflush_r+0x98>
 800a5fa:	0028      	movs	r0, r5
 800a5fc:	f7ff fc2a 	bl	8009e54 <_free_r>
 800a600:	2000      	movs	r0, #0
 800a602:	6360      	str	r0, [r4, #52]	; 0x34
 800a604:	e7bd      	b.n	800a582 <__sflush_r+0x1a>
 800a606:	2301      	movs	r3, #1
 800a608:	0028      	movs	r0, r5
 800a60a:	6a21      	ldr	r1, [r4, #32]
 800a60c:	47b8      	blx	r7
 800a60e:	1c43      	adds	r3, r0, #1
 800a610:	d1c5      	bne.n	800a59e <__sflush_r+0x36>
 800a612:	682b      	ldr	r3, [r5, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d0c2      	beq.n	800a59e <__sflush_r+0x36>
 800a618:	2b1d      	cmp	r3, #29
 800a61a:	d001      	beq.n	800a620 <__sflush_r+0xb8>
 800a61c:	2b16      	cmp	r3, #22
 800a61e:	d101      	bne.n	800a624 <__sflush_r+0xbc>
 800a620:	602e      	str	r6, [r5, #0]
 800a622:	e7ad      	b.n	800a580 <__sflush_r+0x18>
 800a624:	2340      	movs	r3, #64	; 0x40
 800a626:	89a2      	ldrh	r2, [r4, #12]
 800a628:	4313      	orrs	r3, r2
 800a62a:	81a3      	strh	r3, [r4, #12]
 800a62c:	e7a9      	b.n	800a582 <__sflush_r+0x1a>
 800a62e:	2340      	movs	r3, #64	; 0x40
 800a630:	430b      	orrs	r3, r1
 800a632:	e7fa      	b.n	800a62a <__sflush_r+0xc2>
 800a634:	690f      	ldr	r7, [r1, #16]
 800a636:	2f00      	cmp	r7, #0
 800a638:	d0a2      	beq.n	800a580 <__sflush_r+0x18>
 800a63a:	680a      	ldr	r2, [r1, #0]
 800a63c:	600f      	str	r7, [r1, #0]
 800a63e:	1bd2      	subs	r2, r2, r7
 800a640:	9201      	str	r2, [sp, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	079b      	lsls	r3, r3, #30
 800a646:	d100      	bne.n	800a64a <__sflush_r+0xe2>
 800a648:	694a      	ldr	r2, [r1, #20]
 800a64a:	60a2      	str	r2, [r4, #8]
 800a64c:	9b01      	ldr	r3, [sp, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	dc00      	bgt.n	800a654 <__sflush_r+0xec>
 800a652:	e795      	b.n	800a580 <__sflush_r+0x18>
 800a654:	003a      	movs	r2, r7
 800a656:	0028      	movs	r0, r5
 800a658:	9b01      	ldr	r3, [sp, #4]
 800a65a:	6a21      	ldr	r1, [r4, #32]
 800a65c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a65e:	47b0      	blx	r6
 800a660:	2800      	cmp	r0, #0
 800a662:	dc06      	bgt.n	800a672 <__sflush_r+0x10a>
 800a664:	2340      	movs	r3, #64	; 0x40
 800a666:	2001      	movs	r0, #1
 800a668:	89a2      	ldrh	r2, [r4, #12]
 800a66a:	4240      	negs	r0, r0
 800a66c:	4313      	orrs	r3, r2
 800a66e:	81a3      	strh	r3, [r4, #12]
 800a670:	e787      	b.n	800a582 <__sflush_r+0x1a>
 800a672:	9b01      	ldr	r3, [sp, #4]
 800a674:	183f      	adds	r7, r7, r0
 800a676:	1a1b      	subs	r3, r3, r0
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	e7e7      	b.n	800a64c <__sflush_r+0xe4>
 800a67c:	20400001 	.word	0x20400001

0800a680 <_fflush_r>:
 800a680:	690b      	ldr	r3, [r1, #16]
 800a682:	b570      	push	{r4, r5, r6, lr}
 800a684:	0005      	movs	r5, r0
 800a686:	000c      	movs	r4, r1
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d102      	bne.n	800a692 <_fflush_r+0x12>
 800a68c:	2500      	movs	r5, #0
 800a68e:	0028      	movs	r0, r5
 800a690:	bd70      	pop	{r4, r5, r6, pc}
 800a692:	2800      	cmp	r0, #0
 800a694:	d004      	beq.n	800a6a0 <_fflush_r+0x20>
 800a696:	6983      	ldr	r3, [r0, #24]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <_fflush_r+0x20>
 800a69c:	f000 f892 	bl	800a7c4 <__sinit>
 800a6a0:	4b14      	ldr	r3, [pc, #80]	; (800a6f4 <_fflush_r+0x74>)
 800a6a2:	429c      	cmp	r4, r3
 800a6a4:	d11b      	bne.n	800a6de <_fflush_r+0x5e>
 800a6a6:	686c      	ldr	r4, [r5, #4]
 800a6a8:	220c      	movs	r2, #12
 800a6aa:	5ea3      	ldrsh	r3, [r4, r2]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d0ed      	beq.n	800a68c <_fflush_r+0xc>
 800a6b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6b2:	07d2      	lsls	r2, r2, #31
 800a6b4:	d404      	bmi.n	800a6c0 <_fflush_r+0x40>
 800a6b6:	059b      	lsls	r3, r3, #22
 800a6b8:	d402      	bmi.n	800a6c0 <_fflush_r+0x40>
 800a6ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6bc:	f000 f923 	bl	800a906 <__retarget_lock_acquire_recursive>
 800a6c0:	0028      	movs	r0, r5
 800a6c2:	0021      	movs	r1, r4
 800a6c4:	f7ff ff50 	bl	800a568 <__sflush_r>
 800a6c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6ca:	0005      	movs	r5, r0
 800a6cc:	07db      	lsls	r3, r3, #31
 800a6ce:	d4de      	bmi.n	800a68e <_fflush_r+0xe>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	059b      	lsls	r3, r3, #22
 800a6d4:	d4db      	bmi.n	800a68e <_fflush_r+0xe>
 800a6d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6d8:	f000 f916 	bl	800a908 <__retarget_lock_release_recursive>
 800a6dc:	e7d7      	b.n	800a68e <_fflush_r+0xe>
 800a6de:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <_fflush_r+0x78>)
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	d101      	bne.n	800a6e8 <_fflush_r+0x68>
 800a6e4:	68ac      	ldr	r4, [r5, #8]
 800a6e6:	e7df      	b.n	800a6a8 <_fflush_r+0x28>
 800a6e8:	4b04      	ldr	r3, [pc, #16]	; (800a6fc <_fflush_r+0x7c>)
 800a6ea:	429c      	cmp	r4, r3
 800a6ec:	d1dc      	bne.n	800a6a8 <_fflush_r+0x28>
 800a6ee:	68ec      	ldr	r4, [r5, #12]
 800a6f0:	e7da      	b.n	800a6a8 <_fflush_r+0x28>
 800a6f2:	46c0      	nop			; (mov r8, r8)
 800a6f4:	0800b584 	.word	0x0800b584
 800a6f8:	0800b5a4 	.word	0x0800b5a4
 800a6fc:	0800b564 	.word	0x0800b564

0800a700 <std>:
 800a700:	2300      	movs	r3, #0
 800a702:	b510      	push	{r4, lr}
 800a704:	0004      	movs	r4, r0
 800a706:	6003      	str	r3, [r0, #0]
 800a708:	6043      	str	r3, [r0, #4]
 800a70a:	6083      	str	r3, [r0, #8]
 800a70c:	8181      	strh	r1, [r0, #12]
 800a70e:	6643      	str	r3, [r0, #100]	; 0x64
 800a710:	0019      	movs	r1, r3
 800a712:	81c2      	strh	r2, [r0, #14]
 800a714:	6103      	str	r3, [r0, #16]
 800a716:	6143      	str	r3, [r0, #20]
 800a718:	6183      	str	r3, [r0, #24]
 800a71a:	2208      	movs	r2, #8
 800a71c:	305c      	adds	r0, #92	; 0x5c
 800a71e:	f7fd fc93 	bl	8008048 <memset>
 800a722:	4b05      	ldr	r3, [pc, #20]	; (800a738 <std+0x38>)
 800a724:	6224      	str	r4, [r4, #32]
 800a726:	6263      	str	r3, [r4, #36]	; 0x24
 800a728:	4b04      	ldr	r3, [pc, #16]	; (800a73c <std+0x3c>)
 800a72a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a72c:	4b04      	ldr	r3, [pc, #16]	; (800a740 <std+0x40>)
 800a72e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a730:	4b04      	ldr	r3, [pc, #16]	; (800a744 <std+0x44>)
 800a732:	6323      	str	r3, [r4, #48]	; 0x30
 800a734:	bd10      	pop	{r4, pc}
 800a736:	46c0      	nop			; (mov r8, r8)
 800a738:	0800aa79 	.word	0x0800aa79
 800a73c:	0800aaa1 	.word	0x0800aaa1
 800a740:	0800aad9 	.word	0x0800aad9
 800a744:	0800ab05 	.word	0x0800ab05

0800a748 <_cleanup_r>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	4902      	ldr	r1, [pc, #8]	; (800a754 <_cleanup_r+0xc>)
 800a74c:	f000 f8ba 	bl	800a8c4 <_fwalk_reent>
 800a750:	bd10      	pop	{r4, pc}
 800a752:	46c0      	nop			; (mov r8, r8)
 800a754:	0800a681 	.word	0x0800a681

0800a758 <__sfmoreglue>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	2568      	movs	r5, #104	; 0x68
 800a75c:	1e4a      	subs	r2, r1, #1
 800a75e:	4355      	muls	r5, r2
 800a760:	000e      	movs	r6, r1
 800a762:	0029      	movs	r1, r5
 800a764:	3174      	adds	r1, #116	; 0x74
 800a766:	f7ff fbe1 	bl	8009f2c <_malloc_r>
 800a76a:	1e04      	subs	r4, r0, #0
 800a76c:	d008      	beq.n	800a780 <__sfmoreglue+0x28>
 800a76e:	2100      	movs	r1, #0
 800a770:	002a      	movs	r2, r5
 800a772:	6001      	str	r1, [r0, #0]
 800a774:	6046      	str	r6, [r0, #4]
 800a776:	300c      	adds	r0, #12
 800a778:	60a0      	str	r0, [r4, #8]
 800a77a:	3268      	adds	r2, #104	; 0x68
 800a77c:	f7fd fc64 	bl	8008048 <memset>
 800a780:	0020      	movs	r0, r4
 800a782:	bd70      	pop	{r4, r5, r6, pc}

0800a784 <__sfp_lock_acquire>:
 800a784:	b510      	push	{r4, lr}
 800a786:	4802      	ldr	r0, [pc, #8]	; (800a790 <__sfp_lock_acquire+0xc>)
 800a788:	f000 f8bd 	bl	800a906 <__retarget_lock_acquire_recursive>
 800a78c:	bd10      	pop	{r4, pc}
 800a78e:	46c0      	nop			; (mov r8, r8)
 800a790:	200003bd 	.word	0x200003bd

0800a794 <__sfp_lock_release>:
 800a794:	b510      	push	{r4, lr}
 800a796:	4802      	ldr	r0, [pc, #8]	; (800a7a0 <__sfp_lock_release+0xc>)
 800a798:	f000 f8b6 	bl	800a908 <__retarget_lock_release_recursive>
 800a79c:	bd10      	pop	{r4, pc}
 800a79e:	46c0      	nop			; (mov r8, r8)
 800a7a0:	200003bd 	.word	0x200003bd

0800a7a4 <__sinit_lock_acquire>:
 800a7a4:	b510      	push	{r4, lr}
 800a7a6:	4802      	ldr	r0, [pc, #8]	; (800a7b0 <__sinit_lock_acquire+0xc>)
 800a7a8:	f000 f8ad 	bl	800a906 <__retarget_lock_acquire_recursive>
 800a7ac:	bd10      	pop	{r4, pc}
 800a7ae:	46c0      	nop			; (mov r8, r8)
 800a7b0:	200003be 	.word	0x200003be

0800a7b4 <__sinit_lock_release>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	4802      	ldr	r0, [pc, #8]	; (800a7c0 <__sinit_lock_release+0xc>)
 800a7b8:	f000 f8a6 	bl	800a908 <__retarget_lock_release_recursive>
 800a7bc:	bd10      	pop	{r4, pc}
 800a7be:	46c0      	nop			; (mov r8, r8)
 800a7c0:	200003be 	.word	0x200003be

0800a7c4 <__sinit>:
 800a7c4:	b513      	push	{r0, r1, r4, lr}
 800a7c6:	0004      	movs	r4, r0
 800a7c8:	f7ff ffec 	bl	800a7a4 <__sinit_lock_acquire>
 800a7cc:	69a3      	ldr	r3, [r4, #24]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d002      	beq.n	800a7d8 <__sinit+0x14>
 800a7d2:	f7ff ffef 	bl	800a7b4 <__sinit_lock_release>
 800a7d6:	bd13      	pop	{r0, r1, r4, pc}
 800a7d8:	64a3      	str	r3, [r4, #72]	; 0x48
 800a7da:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a7dc:	6523      	str	r3, [r4, #80]	; 0x50
 800a7de:	4b13      	ldr	r3, [pc, #76]	; (800a82c <__sinit+0x68>)
 800a7e0:	4a13      	ldr	r2, [pc, #76]	; (800a830 <__sinit+0x6c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	42a3      	cmp	r3, r4
 800a7ea:	d101      	bne.n	800a7f0 <__sinit+0x2c>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	61a3      	str	r3, [r4, #24]
 800a7f0:	0020      	movs	r0, r4
 800a7f2:	f000 f81f 	bl	800a834 <__sfp>
 800a7f6:	6060      	str	r0, [r4, #4]
 800a7f8:	0020      	movs	r0, r4
 800a7fa:	f000 f81b 	bl	800a834 <__sfp>
 800a7fe:	60a0      	str	r0, [r4, #8]
 800a800:	0020      	movs	r0, r4
 800a802:	f000 f817 	bl	800a834 <__sfp>
 800a806:	2200      	movs	r2, #0
 800a808:	2104      	movs	r1, #4
 800a80a:	60e0      	str	r0, [r4, #12]
 800a80c:	6860      	ldr	r0, [r4, #4]
 800a80e:	f7ff ff77 	bl	800a700 <std>
 800a812:	2201      	movs	r2, #1
 800a814:	2109      	movs	r1, #9
 800a816:	68a0      	ldr	r0, [r4, #8]
 800a818:	f7ff ff72 	bl	800a700 <std>
 800a81c:	2202      	movs	r2, #2
 800a81e:	2112      	movs	r1, #18
 800a820:	68e0      	ldr	r0, [r4, #12]
 800a822:	f7ff ff6d 	bl	800a700 <std>
 800a826:	2301      	movs	r3, #1
 800a828:	61a3      	str	r3, [r4, #24]
 800a82a:	e7d2      	b.n	800a7d2 <__sinit+0xe>
 800a82c:	0800b1e8 	.word	0x0800b1e8
 800a830:	0800a749 	.word	0x0800a749

0800a834 <__sfp>:
 800a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a836:	0007      	movs	r7, r0
 800a838:	f7ff ffa4 	bl	800a784 <__sfp_lock_acquire>
 800a83c:	4b1f      	ldr	r3, [pc, #124]	; (800a8bc <__sfp+0x88>)
 800a83e:	681e      	ldr	r6, [r3, #0]
 800a840:	69b3      	ldr	r3, [r6, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d102      	bne.n	800a84c <__sfp+0x18>
 800a846:	0030      	movs	r0, r6
 800a848:	f7ff ffbc 	bl	800a7c4 <__sinit>
 800a84c:	3648      	adds	r6, #72	; 0x48
 800a84e:	68b4      	ldr	r4, [r6, #8]
 800a850:	6873      	ldr	r3, [r6, #4]
 800a852:	3b01      	subs	r3, #1
 800a854:	d504      	bpl.n	800a860 <__sfp+0x2c>
 800a856:	6833      	ldr	r3, [r6, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d022      	beq.n	800a8a2 <__sfp+0x6e>
 800a85c:	6836      	ldr	r6, [r6, #0]
 800a85e:	e7f6      	b.n	800a84e <__sfp+0x1a>
 800a860:	220c      	movs	r2, #12
 800a862:	5ea5      	ldrsh	r5, [r4, r2]
 800a864:	2d00      	cmp	r5, #0
 800a866:	d11a      	bne.n	800a89e <__sfp+0x6a>
 800a868:	0020      	movs	r0, r4
 800a86a:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <__sfp+0x8c>)
 800a86c:	3058      	adds	r0, #88	; 0x58
 800a86e:	60e3      	str	r3, [r4, #12]
 800a870:	6665      	str	r5, [r4, #100]	; 0x64
 800a872:	f000 f847 	bl	800a904 <__retarget_lock_init_recursive>
 800a876:	f7ff ff8d 	bl	800a794 <__sfp_lock_release>
 800a87a:	0020      	movs	r0, r4
 800a87c:	2208      	movs	r2, #8
 800a87e:	0029      	movs	r1, r5
 800a880:	6025      	str	r5, [r4, #0]
 800a882:	60a5      	str	r5, [r4, #8]
 800a884:	6065      	str	r5, [r4, #4]
 800a886:	6125      	str	r5, [r4, #16]
 800a888:	6165      	str	r5, [r4, #20]
 800a88a:	61a5      	str	r5, [r4, #24]
 800a88c:	305c      	adds	r0, #92	; 0x5c
 800a88e:	f7fd fbdb 	bl	8008048 <memset>
 800a892:	6365      	str	r5, [r4, #52]	; 0x34
 800a894:	63a5      	str	r5, [r4, #56]	; 0x38
 800a896:	64a5      	str	r5, [r4, #72]	; 0x48
 800a898:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a89a:	0020      	movs	r0, r4
 800a89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a89e:	3468      	adds	r4, #104	; 0x68
 800a8a0:	e7d7      	b.n	800a852 <__sfp+0x1e>
 800a8a2:	2104      	movs	r1, #4
 800a8a4:	0038      	movs	r0, r7
 800a8a6:	f7ff ff57 	bl	800a758 <__sfmoreglue>
 800a8aa:	1e04      	subs	r4, r0, #0
 800a8ac:	6030      	str	r0, [r6, #0]
 800a8ae:	d1d5      	bne.n	800a85c <__sfp+0x28>
 800a8b0:	f7ff ff70 	bl	800a794 <__sfp_lock_release>
 800a8b4:	230c      	movs	r3, #12
 800a8b6:	603b      	str	r3, [r7, #0]
 800a8b8:	e7ef      	b.n	800a89a <__sfp+0x66>
 800a8ba:	46c0      	nop			; (mov r8, r8)
 800a8bc:	0800b1e8 	.word	0x0800b1e8
 800a8c0:	ffff0001 	.word	0xffff0001

0800a8c4 <_fwalk_reent>:
 800a8c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8c6:	0004      	movs	r4, r0
 800a8c8:	0006      	movs	r6, r0
 800a8ca:	2700      	movs	r7, #0
 800a8cc:	9101      	str	r1, [sp, #4]
 800a8ce:	3448      	adds	r4, #72	; 0x48
 800a8d0:	6863      	ldr	r3, [r4, #4]
 800a8d2:	68a5      	ldr	r5, [r4, #8]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	9b00      	ldr	r3, [sp, #0]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	d504      	bpl.n	800a8e8 <_fwalk_reent+0x24>
 800a8de:	6824      	ldr	r4, [r4, #0]
 800a8e0:	2c00      	cmp	r4, #0
 800a8e2:	d1f5      	bne.n	800a8d0 <_fwalk_reent+0xc>
 800a8e4:	0038      	movs	r0, r7
 800a8e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8e8:	89ab      	ldrh	r3, [r5, #12]
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d908      	bls.n	800a900 <_fwalk_reent+0x3c>
 800a8ee:	220e      	movs	r2, #14
 800a8f0:	5eab      	ldrsh	r3, [r5, r2]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	d004      	beq.n	800a900 <_fwalk_reent+0x3c>
 800a8f6:	0029      	movs	r1, r5
 800a8f8:	0030      	movs	r0, r6
 800a8fa:	9b01      	ldr	r3, [sp, #4]
 800a8fc:	4798      	blx	r3
 800a8fe:	4307      	orrs	r7, r0
 800a900:	3568      	adds	r5, #104	; 0x68
 800a902:	e7e8      	b.n	800a8d6 <_fwalk_reent+0x12>

0800a904 <__retarget_lock_init_recursive>:
 800a904:	4770      	bx	lr

0800a906 <__retarget_lock_acquire_recursive>:
 800a906:	4770      	bx	lr

0800a908 <__retarget_lock_release_recursive>:
 800a908:	4770      	bx	lr
	...

0800a90c <__swhatbuf_r>:
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	000e      	movs	r6, r1
 800a910:	001d      	movs	r5, r3
 800a912:	230e      	movs	r3, #14
 800a914:	5ec9      	ldrsh	r1, [r1, r3]
 800a916:	0014      	movs	r4, r2
 800a918:	b096      	sub	sp, #88	; 0x58
 800a91a:	2900      	cmp	r1, #0
 800a91c:	da08      	bge.n	800a930 <__swhatbuf_r+0x24>
 800a91e:	220c      	movs	r2, #12
 800a920:	5eb3      	ldrsh	r3, [r6, r2]
 800a922:	2200      	movs	r2, #0
 800a924:	602a      	str	r2, [r5, #0]
 800a926:	061b      	lsls	r3, r3, #24
 800a928:	d411      	bmi.n	800a94e <__swhatbuf_r+0x42>
 800a92a:	2380      	movs	r3, #128	; 0x80
 800a92c:	00db      	lsls	r3, r3, #3
 800a92e:	e00f      	b.n	800a950 <__swhatbuf_r+0x44>
 800a930:	466a      	mov	r2, sp
 800a932:	f000 f913 	bl	800ab5c <_fstat_r>
 800a936:	2800      	cmp	r0, #0
 800a938:	dbf1      	blt.n	800a91e <__swhatbuf_r+0x12>
 800a93a:	23f0      	movs	r3, #240	; 0xf0
 800a93c:	9901      	ldr	r1, [sp, #4]
 800a93e:	021b      	lsls	r3, r3, #8
 800a940:	4019      	ands	r1, r3
 800a942:	4b05      	ldr	r3, [pc, #20]	; (800a958 <__swhatbuf_r+0x4c>)
 800a944:	18c9      	adds	r1, r1, r3
 800a946:	424b      	negs	r3, r1
 800a948:	4159      	adcs	r1, r3
 800a94a:	6029      	str	r1, [r5, #0]
 800a94c:	e7ed      	b.n	800a92a <__swhatbuf_r+0x1e>
 800a94e:	2340      	movs	r3, #64	; 0x40
 800a950:	2000      	movs	r0, #0
 800a952:	6023      	str	r3, [r4, #0]
 800a954:	b016      	add	sp, #88	; 0x58
 800a956:	bd70      	pop	{r4, r5, r6, pc}
 800a958:	ffffe000 	.word	0xffffe000

0800a95c <__smakebuf_r>:
 800a95c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a95e:	2602      	movs	r6, #2
 800a960:	898b      	ldrh	r3, [r1, #12]
 800a962:	0005      	movs	r5, r0
 800a964:	000c      	movs	r4, r1
 800a966:	4233      	tst	r3, r6
 800a968:	d006      	beq.n	800a978 <__smakebuf_r+0x1c>
 800a96a:	0023      	movs	r3, r4
 800a96c:	3347      	adds	r3, #71	; 0x47
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	6123      	str	r3, [r4, #16]
 800a972:	2301      	movs	r3, #1
 800a974:	6163      	str	r3, [r4, #20]
 800a976:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a978:	466a      	mov	r2, sp
 800a97a:	ab01      	add	r3, sp, #4
 800a97c:	f7ff ffc6 	bl	800a90c <__swhatbuf_r>
 800a980:	9900      	ldr	r1, [sp, #0]
 800a982:	0007      	movs	r7, r0
 800a984:	0028      	movs	r0, r5
 800a986:	f7ff fad1 	bl	8009f2c <_malloc_r>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d108      	bne.n	800a9a0 <__smakebuf_r+0x44>
 800a98e:	220c      	movs	r2, #12
 800a990:	5ea3      	ldrsh	r3, [r4, r2]
 800a992:	059a      	lsls	r2, r3, #22
 800a994:	d4ef      	bmi.n	800a976 <__smakebuf_r+0x1a>
 800a996:	2203      	movs	r2, #3
 800a998:	4393      	bics	r3, r2
 800a99a:	431e      	orrs	r6, r3
 800a99c:	81a6      	strh	r6, [r4, #12]
 800a99e:	e7e4      	b.n	800a96a <__smakebuf_r+0xe>
 800a9a0:	4b0f      	ldr	r3, [pc, #60]	; (800a9e0 <__smakebuf_r+0x84>)
 800a9a2:	62ab      	str	r3, [r5, #40]	; 0x28
 800a9a4:	2380      	movs	r3, #128	; 0x80
 800a9a6:	89a2      	ldrh	r2, [r4, #12]
 800a9a8:	6020      	str	r0, [r4, #0]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	81a3      	strh	r3, [r4, #12]
 800a9ae:	9b00      	ldr	r3, [sp, #0]
 800a9b0:	6120      	str	r0, [r4, #16]
 800a9b2:	6163      	str	r3, [r4, #20]
 800a9b4:	9b01      	ldr	r3, [sp, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00d      	beq.n	800a9d6 <__smakebuf_r+0x7a>
 800a9ba:	0028      	movs	r0, r5
 800a9bc:	230e      	movs	r3, #14
 800a9be:	5ee1      	ldrsh	r1, [r4, r3]
 800a9c0:	f000 f8de 	bl	800ab80 <_isatty_r>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d006      	beq.n	800a9d6 <__smakebuf_r+0x7a>
 800a9c8:	2203      	movs	r2, #3
 800a9ca:	89a3      	ldrh	r3, [r4, #12]
 800a9cc:	4393      	bics	r3, r2
 800a9ce:	001a      	movs	r2, r3
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	89a0      	ldrh	r0, [r4, #12]
 800a9d8:	4307      	orrs	r7, r0
 800a9da:	81a7      	strh	r7, [r4, #12]
 800a9dc:	e7cb      	b.n	800a976 <__smakebuf_r+0x1a>
 800a9de:	46c0      	nop			; (mov r8, r8)
 800a9e0:	0800a749 	.word	0x0800a749

0800a9e4 <_raise_r>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	0004      	movs	r4, r0
 800a9e8:	000d      	movs	r5, r1
 800a9ea:	291f      	cmp	r1, #31
 800a9ec:	d904      	bls.n	800a9f8 <_raise_r+0x14>
 800a9ee:	2316      	movs	r3, #22
 800a9f0:	6003      	str	r3, [r0, #0]
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	4240      	negs	r0, r0
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}
 800a9f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d004      	beq.n	800aa08 <_raise_r+0x24>
 800a9fe:	008a      	lsls	r2, r1, #2
 800aa00:	189b      	adds	r3, r3, r2
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	2a00      	cmp	r2, #0
 800aa06:	d108      	bne.n	800aa1a <_raise_r+0x36>
 800aa08:	0020      	movs	r0, r4
 800aa0a:	f000 f831 	bl	800aa70 <_getpid_r>
 800aa0e:	002a      	movs	r2, r5
 800aa10:	0001      	movs	r1, r0
 800aa12:	0020      	movs	r0, r4
 800aa14:	f000 f81a 	bl	800aa4c <_kill_r>
 800aa18:	e7ed      	b.n	800a9f6 <_raise_r+0x12>
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	2a01      	cmp	r2, #1
 800aa1e:	d0ea      	beq.n	800a9f6 <_raise_r+0x12>
 800aa20:	1c51      	adds	r1, r2, #1
 800aa22:	d103      	bne.n	800aa2c <_raise_r+0x48>
 800aa24:	2316      	movs	r3, #22
 800aa26:	3001      	adds	r0, #1
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	e7e4      	b.n	800a9f6 <_raise_r+0x12>
 800aa2c:	2400      	movs	r4, #0
 800aa2e:	0028      	movs	r0, r5
 800aa30:	601c      	str	r4, [r3, #0]
 800aa32:	4790      	blx	r2
 800aa34:	0020      	movs	r0, r4
 800aa36:	e7de      	b.n	800a9f6 <_raise_r+0x12>

0800aa38 <raise>:
 800aa38:	b510      	push	{r4, lr}
 800aa3a:	4b03      	ldr	r3, [pc, #12]	; (800aa48 <raise+0x10>)
 800aa3c:	0001      	movs	r1, r0
 800aa3e:	6818      	ldr	r0, [r3, #0]
 800aa40:	f7ff ffd0 	bl	800a9e4 <_raise_r>
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	46c0      	nop			; (mov r8, r8)
 800aa48:	20000014 	.word	0x20000014

0800aa4c <_kill_r>:
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	b570      	push	{r4, r5, r6, lr}
 800aa50:	4d06      	ldr	r5, [pc, #24]	; (800aa6c <_kill_r+0x20>)
 800aa52:	0004      	movs	r4, r0
 800aa54:	0008      	movs	r0, r1
 800aa56:	0011      	movs	r1, r2
 800aa58:	602b      	str	r3, [r5, #0]
 800aa5a:	f7f9 fbcd 	bl	80041f8 <_kill>
 800aa5e:	1c43      	adds	r3, r0, #1
 800aa60:	d103      	bne.n	800aa6a <_kill_r+0x1e>
 800aa62:	682b      	ldr	r3, [r5, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d000      	beq.n	800aa6a <_kill_r+0x1e>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}
 800aa6c:	200003b8 	.word	0x200003b8

0800aa70 <_getpid_r>:
 800aa70:	b510      	push	{r4, lr}
 800aa72:	f7f9 fbbb 	bl	80041ec <_getpid>
 800aa76:	bd10      	pop	{r4, pc}

0800aa78 <__sread>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	000c      	movs	r4, r1
 800aa7c:	250e      	movs	r5, #14
 800aa7e:	5f49      	ldrsh	r1, [r1, r5]
 800aa80:	f000 f8a4 	bl	800abcc <_read_r>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	db03      	blt.n	800aa90 <__sread+0x18>
 800aa88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aa8a:	181b      	adds	r3, r3, r0
 800aa8c:	6563      	str	r3, [r4, #84]	; 0x54
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	89a3      	ldrh	r3, [r4, #12]
 800aa92:	4a02      	ldr	r2, [pc, #8]	; (800aa9c <__sread+0x24>)
 800aa94:	4013      	ands	r3, r2
 800aa96:	81a3      	strh	r3, [r4, #12]
 800aa98:	e7f9      	b.n	800aa8e <__sread+0x16>
 800aa9a:	46c0      	nop			; (mov r8, r8)
 800aa9c:	ffffefff 	.word	0xffffefff

0800aaa0 <__swrite>:
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	001f      	movs	r7, r3
 800aaa4:	898b      	ldrh	r3, [r1, #12]
 800aaa6:	0005      	movs	r5, r0
 800aaa8:	000c      	movs	r4, r1
 800aaaa:	0016      	movs	r6, r2
 800aaac:	05db      	lsls	r3, r3, #23
 800aaae:	d505      	bpl.n	800aabc <__swrite+0x1c>
 800aab0:	230e      	movs	r3, #14
 800aab2:	5ec9      	ldrsh	r1, [r1, r3]
 800aab4:	2200      	movs	r2, #0
 800aab6:	2302      	movs	r3, #2
 800aab8:	f000 f874 	bl	800aba4 <_lseek_r>
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	4a05      	ldr	r2, [pc, #20]	; (800aad4 <__swrite+0x34>)
 800aac0:	0028      	movs	r0, r5
 800aac2:	4013      	ands	r3, r2
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	0032      	movs	r2, r6
 800aac8:	230e      	movs	r3, #14
 800aaca:	5ee1      	ldrsh	r1, [r4, r3]
 800aacc:	003b      	movs	r3, r7
 800aace:	f000 f81f 	bl	800ab10 <_write_r>
 800aad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aad4:	ffffefff 	.word	0xffffefff

0800aad8 <__sseek>:
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	000c      	movs	r4, r1
 800aadc:	250e      	movs	r5, #14
 800aade:	5f49      	ldrsh	r1, [r1, r5]
 800aae0:	f000 f860 	bl	800aba4 <_lseek_r>
 800aae4:	89a3      	ldrh	r3, [r4, #12]
 800aae6:	1c42      	adds	r2, r0, #1
 800aae8:	d103      	bne.n	800aaf2 <__sseek+0x1a>
 800aaea:	4a05      	ldr	r2, [pc, #20]	; (800ab00 <__sseek+0x28>)
 800aaec:	4013      	ands	r3, r2
 800aaee:	81a3      	strh	r3, [r4, #12]
 800aaf0:	bd70      	pop	{r4, r5, r6, pc}
 800aaf2:	2280      	movs	r2, #128	; 0x80
 800aaf4:	0152      	lsls	r2, r2, #5
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	6560      	str	r0, [r4, #84]	; 0x54
 800aafc:	e7f8      	b.n	800aaf0 <__sseek+0x18>
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	ffffefff 	.word	0xffffefff

0800ab04 <__sclose>:
 800ab04:	b510      	push	{r4, lr}
 800ab06:	230e      	movs	r3, #14
 800ab08:	5ec9      	ldrsh	r1, [r1, r3]
 800ab0a:	f000 f815 	bl	800ab38 <_close_r>
 800ab0e:	bd10      	pop	{r4, pc}

0800ab10 <_write_r>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	0004      	movs	r4, r0
 800ab14:	0008      	movs	r0, r1
 800ab16:	0011      	movs	r1, r2
 800ab18:	001a      	movs	r2, r3
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4d05      	ldr	r5, [pc, #20]	; (800ab34 <_write_r+0x24>)
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	f7f9 fba3 	bl	800426a <_write>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d103      	bne.n	800ab30 <_write_r+0x20>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d000      	beq.n	800ab30 <_write_r+0x20>
 800ab2e:	6023      	str	r3, [r4, #0]
 800ab30:	bd70      	pop	{r4, r5, r6, pc}
 800ab32:	46c0      	nop			; (mov r8, r8)
 800ab34:	200003b8 	.word	0x200003b8

0800ab38 <_close_r>:
 800ab38:	2300      	movs	r3, #0
 800ab3a:	b570      	push	{r4, r5, r6, lr}
 800ab3c:	4d06      	ldr	r5, [pc, #24]	; (800ab58 <_close_r+0x20>)
 800ab3e:	0004      	movs	r4, r0
 800ab40:	0008      	movs	r0, r1
 800ab42:	602b      	str	r3, [r5, #0]
 800ab44:	f7f9 fbad 	bl	80042a2 <_close>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d103      	bne.n	800ab54 <_close_r+0x1c>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d000      	beq.n	800ab54 <_close_r+0x1c>
 800ab52:	6023      	str	r3, [r4, #0]
 800ab54:	bd70      	pop	{r4, r5, r6, pc}
 800ab56:	46c0      	nop			; (mov r8, r8)
 800ab58:	200003b8 	.word	0x200003b8

0800ab5c <_fstat_r>:
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	b570      	push	{r4, r5, r6, lr}
 800ab60:	4d06      	ldr	r5, [pc, #24]	; (800ab7c <_fstat_r+0x20>)
 800ab62:	0004      	movs	r4, r0
 800ab64:	0008      	movs	r0, r1
 800ab66:	0011      	movs	r1, r2
 800ab68:	602b      	str	r3, [r5, #0]
 800ab6a:	f7f9 fba4 	bl	80042b6 <_fstat>
 800ab6e:	1c43      	adds	r3, r0, #1
 800ab70:	d103      	bne.n	800ab7a <_fstat_r+0x1e>
 800ab72:	682b      	ldr	r3, [r5, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d000      	beq.n	800ab7a <_fstat_r+0x1e>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	200003b8 	.word	0x200003b8

0800ab80 <_isatty_r>:
 800ab80:	2300      	movs	r3, #0
 800ab82:	b570      	push	{r4, r5, r6, lr}
 800ab84:	4d06      	ldr	r5, [pc, #24]	; (800aba0 <_isatty_r+0x20>)
 800ab86:	0004      	movs	r4, r0
 800ab88:	0008      	movs	r0, r1
 800ab8a:	602b      	str	r3, [r5, #0]
 800ab8c:	f7f9 fba1 	bl	80042d2 <_isatty>
 800ab90:	1c43      	adds	r3, r0, #1
 800ab92:	d103      	bne.n	800ab9c <_isatty_r+0x1c>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d000      	beq.n	800ab9c <_isatty_r+0x1c>
 800ab9a:	6023      	str	r3, [r4, #0]
 800ab9c:	bd70      	pop	{r4, r5, r6, pc}
 800ab9e:	46c0      	nop			; (mov r8, r8)
 800aba0:	200003b8 	.word	0x200003b8

0800aba4 <_lseek_r>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	0004      	movs	r4, r0
 800aba8:	0008      	movs	r0, r1
 800abaa:	0011      	movs	r1, r2
 800abac:	001a      	movs	r2, r3
 800abae:	2300      	movs	r3, #0
 800abb0:	4d05      	ldr	r5, [pc, #20]	; (800abc8 <_lseek_r+0x24>)
 800abb2:	602b      	str	r3, [r5, #0]
 800abb4:	f7f9 fb96 	bl	80042e4 <_lseek>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d103      	bne.n	800abc4 <_lseek_r+0x20>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d000      	beq.n	800abc4 <_lseek_r+0x20>
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	bd70      	pop	{r4, r5, r6, pc}
 800abc6:	46c0      	nop			; (mov r8, r8)
 800abc8:	200003b8 	.word	0x200003b8

0800abcc <_read_r>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	0004      	movs	r4, r0
 800abd0:	0008      	movs	r0, r1
 800abd2:	0011      	movs	r1, r2
 800abd4:	001a      	movs	r2, r3
 800abd6:	2300      	movs	r3, #0
 800abd8:	4d05      	ldr	r5, [pc, #20]	; (800abf0 <_read_r+0x24>)
 800abda:	602b      	str	r3, [r5, #0]
 800abdc:	f7f9 fb28 	bl	8004230 <_read>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d103      	bne.n	800abec <_read_r+0x20>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d000      	beq.n	800abec <_read_r+0x20>
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	bd70      	pop	{r4, r5, r6, pc}
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	200003b8 	.word	0x200003b8

0800abf4 <atan2>:
 800abf4:	b510      	push	{r4, lr}
 800abf6:	f000 f801 	bl	800abfc <__ieee754_atan2>
 800abfa:	bd10      	pop	{r4, pc}

0800abfc <__ieee754_atan2>:
 800abfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abfe:	0016      	movs	r6, r2
 800ac00:	001d      	movs	r5, r3
 800ac02:	005a      	lsls	r2, r3, #1
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	4273      	negs	r3, r6
 800ac08:	4333      	orrs	r3, r6
 800ac0a:	4f46      	ldr	r7, [pc, #280]	; (800ad24 <__ieee754_atan2+0x128>)
 800ac0c:	0852      	lsrs	r2, r2, #1
 800ac0e:	0fdb      	lsrs	r3, r3, #31
 800ac10:	4313      	orrs	r3, r2
 800ac12:	42bb      	cmp	r3, r7
 800ac14:	d809      	bhi.n	800ac2a <__ieee754_atan2+0x2e>
 800ac16:	4244      	negs	r4, r0
 800ac18:	004b      	lsls	r3, r1, #1
 800ac1a:	4304      	orrs	r4, r0
 800ac1c:	085b      	lsrs	r3, r3, #1
 800ac1e:	0fe4      	lsrs	r4, r4, #31
 800ac20:	9100      	str	r1, [sp, #0]
 800ac22:	9001      	str	r0, [sp, #4]
 800ac24:	431c      	orrs	r4, r3
 800ac26:	42bc      	cmp	r4, r7
 800ac28:	d905      	bls.n	800ac36 <__ieee754_atan2+0x3a>
 800ac2a:	0032      	movs	r2, r6
 800ac2c:	002b      	movs	r3, r5
 800ac2e:	f7f6 fb3f 	bl	80012b0 <__aeabi_dadd>
 800ac32:	b003      	add	sp, #12
 800ac34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac36:	4c3c      	ldr	r4, [pc, #240]	; (800ad28 <__ieee754_atan2+0x12c>)
 800ac38:	192c      	adds	r4, r5, r4
 800ac3a:	4334      	orrs	r4, r6
 800ac3c:	d102      	bne.n	800ac44 <__ieee754_atan2+0x48>
 800ac3e:	f000 f889 	bl	800ad54 <atan>
 800ac42:	e7f6      	b.n	800ac32 <__ieee754_atan2+0x36>
 800ac44:	17ac      	asrs	r4, r5, #30
 800ac46:	46a4      	mov	ip, r4
 800ac48:	2402      	movs	r4, #2
 800ac4a:	4667      	mov	r7, ip
 800ac4c:	403c      	ands	r4, r7
 800ac4e:	9f00      	ldr	r7, [sp, #0]
 800ac50:	0fff      	lsrs	r7, r7, #31
 800ac52:	433c      	orrs	r4, r7
 800ac54:	9f01      	ldr	r7, [sp, #4]
 800ac56:	431f      	orrs	r7, r3
 800ac58:	d106      	bne.n	800ac68 <__ieee754_atan2+0x6c>
 800ac5a:	2c02      	cmp	r4, #2
 800ac5c:	d056      	beq.n	800ad0c <__ieee754_atan2+0x110>
 800ac5e:	2c03      	cmp	r4, #3
 800ac60:	d1e7      	bne.n	800ac32 <__ieee754_atan2+0x36>
 800ac62:	4832      	ldr	r0, [pc, #200]	; (800ad2c <__ieee754_atan2+0x130>)
 800ac64:	4932      	ldr	r1, [pc, #200]	; (800ad30 <__ieee754_atan2+0x134>)
 800ac66:	e7e4      	b.n	800ac32 <__ieee754_atan2+0x36>
 800ac68:	0017      	movs	r7, r2
 800ac6a:	4337      	orrs	r7, r6
 800ac6c:	d105      	bne.n	800ac7a <__ieee754_atan2+0x7e>
 800ac6e:	9b00      	ldr	r3, [sp, #0]
 800ac70:	482e      	ldr	r0, [pc, #184]	; (800ad2c <__ieee754_atan2+0x130>)
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	da53      	bge.n	800ad1e <__ieee754_atan2+0x122>
 800ac76:	492f      	ldr	r1, [pc, #188]	; (800ad34 <__ieee754_atan2+0x138>)
 800ac78:	e7db      	b.n	800ac32 <__ieee754_atan2+0x36>
 800ac7a:	4f2a      	ldr	r7, [pc, #168]	; (800ad24 <__ieee754_atan2+0x128>)
 800ac7c:	42ba      	cmp	r2, r7
 800ac7e:	d10f      	bne.n	800aca0 <__ieee754_atan2+0xa4>
 800ac80:	3c01      	subs	r4, #1
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d107      	bne.n	800ac96 <__ieee754_atan2+0x9a>
 800ac86:	2c02      	cmp	r4, #2
 800ac88:	d843      	bhi.n	800ad12 <__ieee754_atan2+0x116>
 800ac8a:	4b2b      	ldr	r3, [pc, #172]	; (800ad38 <__ieee754_atan2+0x13c>)
 800ac8c:	00e4      	lsls	r4, r4, #3
 800ac8e:	191c      	adds	r4, r3, r4
 800ac90:	6820      	ldr	r0, [r4, #0]
 800ac92:	6861      	ldr	r1, [r4, #4]
 800ac94:	e7cd      	b.n	800ac32 <__ieee754_atan2+0x36>
 800ac96:	2c02      	cmp	r4, #2
 800ac98:	d83e      	bhi.n	800ad18 <__ieee754_atan2+0x11c>
 800ac9a:	4b28      	ldr	r3, [pc, #160]	; (800ad3c <__ieee754_atan2+0x140>)
 800ac9c:	00e4      	lsls	r4, r4, #3
 800ac9e:	e7f6      	b.n	800ac8e <__ieee754_atan2+0x92>
 800aca0:	4f20      	ldr	r7, [pc, #128]	; (800ad24 <__ieee754_atan2+0x128>)
 800aca2:	42bb      	cmp	r3, r7
 800aca4:	d0e3      	beq.n	800ac6e <__ieee754_atan2+0x72>
 800aca6:	1a9b      	subs	r3, r3, r2
 800aca8:	151b      	asrs	r3, r3, #20
 800acaa:	2b3c      	cmp	r3, #60	; 0x3c
 800acac:	dc18      	bgt.n	800ace0 <__ieee754_atan2+0xe4>
 800acae:	2d00      	cmp	r5, #0
 800acb0:	da01      	bge.n	800acb6 <__ieee754_atan2+0xba>
 800acb2:	333c      	adds	r3, #60	; 0x3c
 800acb4:	db17      	blt.n	800ace6 <__ieee754_atan2+0xea>
 800acb6:	0032      	movs	r2, r6
 800acb8:	002b      	movs	r3, r5
 800acba:	f7f6 fe35 	bl	8001928 <__aeabi_ddiv>
 800acbe:	f000 f9c9 	bl	800b054 <fabs>
 800acc2:	f000 f847 	bl	800ad54 <atan>
 800acc6:	2c01      	cmp	r4, #1
 800acc8:	d010      	beq.n	800acec <__ieee754_atan2+0xf0>
 800acca:	2c02      	cmp	r4, #2
 800accc:	d013      	beq.n	800acf6 <__ieee754_atan2+0xfa>
 800acce:	2c00      	cmp	r4, #0
 800acd0:	d0af      	beq.n	800ac32 <__ieee754_atan2+0x36>
 800acd2:	4a1b      	ldr	r2, [pc, #108]	; (800ad40 <__ieee754_atan2+0x144>)
 800acd4:	4b1b      	ldr	r3, [pc, #108]	; (800ad44 <__ieee754_atan2+0x148>)
 800acd6:	f7f7 fc95 	bl	8002604 <__aeabi_dsub>
 800acda:	4a14      	ldr	r2, [pc, #80]	; (800ad2c <__ieee754_atan2+0x130>)
 800acdc:	4b1a      	ldr	r3, [pc, #104]	; (800ad48 <__ieee754_atan2+0x14c>)
 800acde:	e012      	b.n	800ad06 <__ieee754_atan2+0x10a>
 800ace0:	4812      	ldr	r0, [pc, #72]	; (800ad2c <__ieee754_atan2+0x130>)
 800ace2:	491a      	ldr	r1, [pc, #104]	; (800ad4c <__ieee754_atan2+0x150>)
 800ace4:	e7ef      	b.n	800acc6 <__ieee754_atan2+0xca>
 800ace6:	2000      	movs	r0, #0
 800ace8:	2100      	movs	r1, #0
 800acea:	e7ec      	b.n	800acc6 <__ieee754_atan2+0xca>
 800acec:	2480      	movs	r4, #128	; 0x80
 800acee:	0624      	lsls	r4, r4, #24
 800acf0:	190b      	adds	r3, r1, r4
 800acf2:	0019      	movs	r1, r3
 800acf4:	e79d      	b.n	800ac32 <__ieee754_atan2+0x36>
 800acf6:	4a12      	ldr	r2, [pc, #72]	; (800ad40 <__ieee754_atan2+0x144>)
 800acf8:	4b12      	ldr	r3, [pc, #72]	; (800ad44 <__ieee754_atan2+0x148>)
 800acfa:	f7f7 fc83 	bl	8002604 <__aeabi_dsub>
 800acfe:	0002      	movs	r2, r0
 800ad00:	000b      	movs	r3, r1
 800ad02:	480a      	ldr	r0, [pc, #40]	; (800ad2c <__ieee754_atan2+0x130>)
 800ad04:	4910      	ldr	r1, [pc, #64]	; (800ad48 <__ieee754_atan2+0x14c>)
 800ad06:	f7f7 fc7d 	bl	8002604 <__aeabi_dsub>
 800ad0a:	e792      	b.n	800ac32 <__ieee754_atan2+0x36>
 800ad0c:	4807      	ldr	r0, [pc, #28]	; (800ad2c <__ieee754_atan2+0x130>)
 800ad0e:	490e      	ldr	r1, [pc, #56]	; (800ad48 <__ieee754_atan2+0x14c>)
 800ad10:	e78f      	b.n	800ac32 <__ieee754_atan2+0x36>
 800ad12:	4806      	ldr	r0, [pc, #24]	; (800ad2c <__ieee754_atan2+0x130>)
 800ad14:	490e      	ldr	r1, [pc, #56]	; (800ad50 <__ieee754_atan2+0x154>)
 800ad16:	e78c      	b.n	800ac32 <__ieee754_atan2+0x36>
 800ad18:	2000      	movs	r0, #0
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	e789      	b.n	800ac32 <__ieee754_atan2+0x36>
 800ad1e:	490b      	ldr	r1, [pc, #44]	; (800ad4c <__ieee754_atan2+0x150>)
 800ad20:	e787      	b.n	800ac32 <__ieee754_atan2+0x36>
 800ad22:	46c0      	nop			; (mov r8, r8)
 800ad24:	7ff00000 	.word	0x7ff00000
 800ad28:	c0100000 	.word	0xc0100000
 800ad2c:	54442d18 	.word	0x54442d18
 800ad30:	c00921fb 	.word	0xc00921fb
 800ad34:	bff921fb 	.word	0xbff921fb
 800ad38:	0800b5c8 	.word	0x0800b5c8
 800ad3c:	0800b5e0 	.word	0x0800b5e0
 800ad40:	33145c07 	.word	0x33145c07
 800ad44:	3ca1a626 	.word	0x3ca1a626
 800ad48:	400921fb 	.word	0x400921fb
 800ad4c:	3ff921fb 	.word	0x3ff921fb
 800ad50:	3fe921fb 	.word	0x3fe921fb

0800ad54 <atan>:
 800ad54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad56:	4b98      	ldr	r3, [pc, #608]	; (800afb8 <atan+0x264>)
 800ad58:	b085      	sub	sp, #20
 800ad5a:	004e      	lsls	r6, r1, #1
 800ad5c:	0004      	movs	r4, r0
 800ad5e:	000d      	movs	r5, r1
 800ad60:	9103      	str	r1, [sp, #12]
 800ad62:	0876      	lsrs	r6, r6, #1
 800ad64:	429e      	cmp	r6, r3
 800ad66:	dd18      	ble.n	800ad9a <atan+0x46>
 800ad68:	4b94      	ldr	r3, [pc, #592]	; (800afbc <atan+0x268>)
 800ad6a:	429e      	cmp	r6, r3
 800ad6c:	dc02      	bgt.n	800ad74 <atan+0x20>
 800ad6e:	d10a      	bne.n	800ad86 <atan+0x32>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d008      	beq.n	800ad86 <atan+0x32>
 800ad74:	0022      	movs	r2, r4
 800ad76:	002b      	movs	r3, r5
 800ad78:	0020      	movs	r0, r4
 800ad7a:	0029      	movs	r1, r5
 800ad7c:	f7f6 fa98 	bl	80012b0 <__aeabi_dadd>
 800ad80:	0004      	movs	r4, r0
 800ad82:	000d      	movs	r5, r1
 800ad84:	e005      	b.n	800ad92 <atan+0x3e>
 800ad86:	9b03      	ldr	r3, [sp, #12]
 800ad88:	4c8d      	ldr	r4, [pc, #564]	; (800afc0 <atan+0x26c>)
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	dd00      	ble.n	800ad90 <atan+0x3c>
 800ad8e:	e110      	b.n	800afb2 <atan+0x25e>
 800ad90:	4d8c      	ldr	r5, [pc, #560]	; (800afc4 <atan+0x270>)
 800ad92:	0020      	movs	r0, r4
 800ad94:	0029      	movs	r1, r5
 800ad96:	b005      	add	sp, #20
 800ad98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad9a:	4b8b      	ldr	r3, [pc, #556]	; (800afc8 <atan+0x274>)
 800ad9c:	429e      	cmp	r6, r3
 800ad9e:	dc0f      	bgt.n	800adc0 <atan+0x6c>
 800ada0:	4b8a      	ldr	r3, [pc, #552]	; (800afcc <atan+0x278>)
 800ada2:	429e      	cmp	r6, r3
 800ada4:	dc09      	bgt.n	800adba <atan+0x66>
 800ada6:	4a8a      	ldr	r2, [pc, #552]	; (800afd0 <atan+0x27c>)
 800ada8:	4b8a      	ldr	r3, [pc, #552]	; (800afd4 <atan+0x280>)
 800adaa:	f7f6 fa81 	bl	80012b0 <__aeabi_dadd>
 800adae:	2200      	movs	r2, #0
 800adb0:	4b89      	ldr	r3, [pc, #548]	; (800afd8 <atan+0x284>)
 800adb2:	f7f5 fb65 	bl	8000480 <__aeabi_dcmpgt>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d1eb      	bne.n	800ad92 <atan+0x3e>
 800adba:	2301      	movs	r3, #1
 800adbc:	425b      	negs	r3, r3
 800adbe:	e025      	b.n	800ae0c <atan+0xb8>
 800adc0:	f000 f948 	bl	800b054 <fabs>
 800adc4:	4b85      	ldr	r3, [pc, #532]	; (800afdc <atan+0x288>)
 800adc6:	0004      	movs	r4, r0
 800adc8:	000d      	movs	r5, r1
 800adca:	429e      	cmp	r6, r3
 800adcc:	dd00      	ble.n	800add0 <atan+0x7c>
 800adce:	e0aa      	b.n	800af26 <atan+0x1d2>
 800add0:	4b83      	ldr	r3, [pc, #524]	; (800afe0 <atan+0x28c>)
 800add2:	429e      	cmp	r6, r3
 800add4:	dd00      	ble.n	800add8 <atan+0x84>
 800add6:	e090      	b.n	800aefa <atan+0x1a6>
 800add8:	0002      	movs	r2, r0
 800adda:	000b      	movs	r3, r1
 800addc:	f7f6 fa68 	bl	80012b0 <__aeabi_dadd>
 800ade0:	2200      	movs	r2, #0
 800ade2:	4b7d      	ldr	r3, [pc, #500]	; (800afd8 <atan+0x284>)
 800ade4:	f7f7 fc0e 	bl	8002604 <__aeabi_dsub>
 800ade8:	2380      	movs	r3, #128	; 0x80
 800adea:	0006      	movs	r6, r0
 800adec:	000f      	movs	r7, r1
 800adee:	2200      	movs	r2, #0
 800adf0:	0020      	movs	r0, r4
 800adf2:	0029      	movs	r1, r5
 800adf4:	05db      	lsls	r3, r3, #23
 800adf6:	f7f6 fa5b 	bl	80012b0 <__aeabi_dadd>
 800adfa:	000b      	movs	r3, r1
 800adfc:	0002      	movs	r2, r0
 800adfe:	0039      	movs	r1, r7
 800ae00:	0030      	movs	r0, r6
 800ae02:	f7f6 fd91 	bl	8001928 <__aeabi_ddiv>
 800ae06:	2300      	movs	r3, #0
 800ae08:	0004      	movs	r4, r0
 800ae0a:	000d      	movs	r5, r1
 800ae0c:	0022      	movs	r2, r4
 800ae0e:	9302      	str	r3, [sp, #8]
 800ae10:	0020      	movs	r0, r4
 800ae12:	002b      	movs	r3, r5
 800ae14:	0029      	movs	r1, r5
 800ae16:	f7f7 f989 	bl	800212c <__aeabi_dmul>
 800ae1a:	0002      	movs	r2, r0
 800ae1c:	000b      	movs	r3, r1
 800ae1e:	9000      	str	r0, [sp, #0]
 800ae20:	9101      	str	r1, [sp, #4]
 800ae22:	f7f7 f983 	bl	800212c <__aeabi_dmul>
 800ae26:	0006      	movs	r6, r0
 800ae28:	000f      	movs	r7, r1
 800ae2a:	4a6e      	ldr	r2, [pc, #440]	; (800afe4 <atan+0x290>)
 800ae2c:	4b6e      	ldr	r3, [pc, #440]	; (800afe8 <atan+0x294>)
 800ae2e:	f7f7 f97d 	bl	800212c <__aeabi_dmul>
 800ae32:	4a6e      	ldr	r2, [pc, #440]	; (800afec <atan+0x298>)
 800ae34:	4b6e      	ldr	r3, [pc, #440]	; (800aff0 <atan+0x29c>)
 800ae36:	f7f6 fa3b 	bl	80012b0 <__aeabi_dadd>
 800ae3a:	0032      	movs	r2, r6
 800ae3c:	003b      	movs	r3, r7
 800ae3e:	f7f7 f975 	bl	800212c <__aeabi_dmul>
 800ae42:	4a6c      	ldr	r2, [pc, #432]	; (800aff4 <atan+0x2a0>)
 800ae44:	4b6c      	ldr	r3, [pc, #432]	; (800aff8 <atan+0x2a4>)
 800ae46:	f7f6 fa33 	bl	80012b0 <__aeabi_dadd>
 800ae4a:	0032      	movs	r2, r6
 800ae4c:	003b      	movs	r3, r7
 800ae4e:	f7f7 f96d 	bl	800212c <__aeabi_dmul>
 800ae52:	4a6a      	ldr	r2, [pc, #424]	; (800affc <atan+0x2a8>)
 800ae54:	4b6a      	ldr	r3, [pc, #424]	; (800b000 <atan+0x2ac>)
 800ae56:	f7f6 fa2b 	bl	80012b0 <__aeabi_dadd>
 800ae5a:	0032      	movs	r2, r6
 800ae5c:	003b      	movs	r3, r7
 800ae5e:	f7f7 f965 	bl	800212c <__aeabi_dmul>
 800ae62:	4a68      	ldr	r2, [pc, #416]	; (800b004 <atan+0x2b0>)
 800ae64:	4b68      	ldr	r3, [pc, #416]	; (800b008 <atan+0x2b4>)
 800ae66:	f7f6 fa23 	bl	80012b0 <__aeabi_dadd>
 800ae6a:	0032      	movs	r2, r6
 800ae6c:	003b      	movs	r3, r7
 800ae6e:	f7f7 f95d 	bl	800212c <__aeabi_dmul>
 800ae72:	4a66      	ldr	r2, [pc, #408]	; (800b00c <atan+0x2b8>)
 800ae74:	4b66      	ldr	r3, [pc, #408]	; (800b010 <atan+0x2bc>)
 800ae76:	f7f6 fa1b 	bl	80012b0 <__aeabi_dadd>
 800ae7a:	9a00      	ldr	r2, [sp, #0]
 800ae7c:	9b01      	ldr	r3, [sp, #4]
 800ae7e:	f7f7 f955 	bl	800212c <__aeabi_dmul>
 800ae82:	4a64      	ldr	r2, [pc, #400]	; (800b014 <atan+0x2c0>)
 800ae84:	9000      	str	r0, [sp, #0]
 800ae86:	9101      	str	r1, [sp, #4]
 800ae88:	4b63      	ldr	r3, [pc, #396]	; (800b018 <atan+0x2c4>)
 800ae8a:	0030      	movs	r0, r6
 800ae8c:	0039      	movs	r1, r7
 800ae8e:	f7f7 f94d 	bl	800212c <__aeabi_dmul>
 800ae92:	4a62      	ldr	r2, [pc, #392]	; (800b01c <atan+0x2c8>)
 800ae94:	4b62      	ldr	r3, [pc, #392]	; (800b020 <atan+0x2cc>)
 800ae96:	f7f7 fbb5 	bl	8002604 <__aeabi_dsub>
 800ae9a:	0032      	movs	r2, r6
 800ae9c:	003b      	movs	r3, r7
 800ae9e:	f7f7 f945 	bl	800212c <__aeabi_dmul>
 800aea2:	4a60      	ldr	r2, [pc, #384]	; (800b024 <atan+0x2d0>)
 800aea4:	4b60      	ldr	r3, [pc, #384]	; (800b028 <atan+0x2d4>)
 800aea6:	f7f7 fbad 	bl	8002604 <__aeabi_dsub>
 800aeaa:	0032      	movs	r2, r6
 800aeac:	003b      	movs	r3, r7
 800aeae:	f7f7 f93d 	bl	800212c <__aeabi_dmul>
 800aeb2:	4a5e      	ldr	r2, [pc, #376]	; (800b02c <atan+0x2d8>)
 800aeb4:	4b5e      	ldr	r3, [pc, #376]	; (800b030 <atan+0x2dc>)
 800aeb6:	f7f7 fba5 	bl	8002604 <__aeabi_dsub>
 800aeba:	0032      	movs	r2, r6
 800aebc:	003b      	movs	r3, r7
 800aebe:	f7f7 f935 	bl	800212c <__aeabi_dmul>
 800aec2:	4a5c      	ldr	r2, [pc, #368]	; (800b034 <atan+0x2e0>)
 800aec4:	4b5c      	ldr	r3, [pc, #368]	; (800b038 <atan+0x2e4>)
 800aec6:	f7f7 fb9d 	bl	8002604 <__aeabi_dsub>
 800aeca:	0032      	movs	r2, r6
 800aecc:	003b      	movs	r3, r7
 800aece:	f7f7 f92d 	bl	800212c <__aeabi_dmul>
 800aed2:	0002      	movs	r2, r0
 800aed4:	000b      	movs	r3, r1
 800aed6:	9800      	ldr	r0, [sp, #0]
 800aed8:	9901      	ldr	r1, [sp, #4]
 800aeda:	f7f6 f9e9 	bl	80012b0 <__aeabi_dadd>
 800aede:	002b      	movs	r3, r5
 800aee0:	0022      	movs	r2, r4
 800aee2:	f7f7 f923 	bl	800212c <__aeabi_dmul>
 800aee6:	9b02      	ldr	r3, [sp, #8]
 800aee8:	3301      	adds	r3, #1
 800aeea:	d143      	bne.n	800af74 <atan+0x220>
 800aeec:	0002      	movs	r2, r0
 800aeee:	000b      	movs	r3, r1
 800aef0:	0020      	movs	r0, r4
 800aef2:	0029      	movs	r1, r5
 800aef4:	f7f7 fb86 	bl	8002604 <__aeabi_dsub>
 800aef8:	e742      	b.n	800ad80 <atan+0x2c>
 800aefa:	2200      	movs	r2, #0
 800aefc:	4b36      	ldr	r3, [pc, #216]	; (800afd8 <atan+0x284>)
 800aefe:	f7f7 fb81 	bl	8002604 <__aeabi_dsub>
 800af02:	2200      	movs	r2, #0
 800af04:	0006      	movs	r6, r0
 800af06:	000f      	movs	r7, r1
 800af08:	0020      	movs	r0, r4
 800af0a:	0029      	movs	r1, r5
 800af0c:	4b32      	ldr	r3, [pc, #200]	; (800afd8 <atan+0x284>)
 800af0e:	f7f6 f9cf 	bl	80012b0 <__aeabi_dadd>
 800af12:	000b      	movs	r3, r1
 800af14:	0002      	movs	r2, r0
 800af16:	0039      	movs	r1, r7
 800af18:	0030      	movs	r0, r6
 800af1a:	f7f6 fd05 	bl	8001928 <__aeabi_ddiv>
 800af1e:	2301      	movs	r3, #1
 800af20:	0004      	movs	r4, r0
 800af22:	000d      	movs	r5, r1
 800af24:	e772      	b.n	800ae0c <atan+0xb8>
 800af26:	4b45      	ldr	r3, [pc, #276]	; (800b03c <atan+0x2e8>)
 800af28:	429e      	cmp	r6, r3
 800af2a:	dc19      	bgt.n	800af60 <atan+0x20c>
 800af2c:	2200      	movs	r2, #0
 800af2e:	4b44      	ldr	r3, [pc, #272]	; (800b040 <atan+0x2ec>)
 800af30:	f7f7 fb68 	bl	8002604 <__aeabi_dsub>
 800af34:	2200      	movs	r2, #0
 800af36:	0006      	movs	r6, r0
 800af38:	000f      	movs	r7, r1
 800af3a:	0020      	movs	r0, r4
 800af3c:	0029      	movs	r1, r5
 800af3e:	4b40      	ldr	r3, [pc, #256]	; (800b040 <atan+0x2ec>)
 800af40:	f7f7 f8f4 	bl	800212c <__aeabi_dmul>
 800af44:	2200      	movs	r2, #0
 800af46:	4b24      	ldr	r3, [pc, #144]	; (800afd8 <atan+0x284>)
 800af48:	f7f6 f9b2 	bl	80012b0 <__aeabi_dadd>
 800af4c:	000b      	movs	r3, r1
 800af4e:	0002      	movs	r2, r0
 800af50:	0039      	movs	r1, r7
 800af52:	0030      	movs	r0, r6
 800af54:	f7f6 fce8 	bl	8001928 <__aeabi_ddiv>
 800af58:	2302      	movs	r3, #2
 800af5a:	0004      	movs	r4, r0
 800af5c:	000d      	movs	r5, r1
 800af5e:	e755      	b.n	800ae0c <atan+0xb8>
 800af60:	000b      	movs	r3, r1
 800af62:	0002      	movs	r2, r0
 800af64:	4937      	ldr	r1, [pc, #220]	; (800b044 <atan+0x2f0>)
 800af66:	2000      	movs	r0, #0
 800af68:	f7f6 fcde 	bl	8001928 <__aeabi_ddiv>
 800af6c:	2303      	movs	r3, #3
 800af6e:	0004      	movs	r4, r0
 800af70:	000d      	movs	r5, r1
 800af72:	e74b      	b.n	800ae0c <atan+0xb8>
 800af74:	9b02      	ldr	r3, [sp, #8]
 800af76:	4f34      	ldr	r7, [pc, #208]	; (800b048 <atan+0x2f4>)
 800af78:	00de      	lsls	r6, r3, #3
 800af7a:	4b34      	ldr	r3, [pc, #208]	; (800b04c <atan+0x2f8>)
 800af7c:	19bf      	adds	r7, r7, r6
 800af7e:	199e      	adds	r6, r3, r6
 800af80:	6832      	ldr	r2, [r6, #0]
 800af82:	6873      	ldr	r3, [r6, #4]
 800af84:	f7f7 fb3e 	bl	8002604 <__aeabi_dsub>
 800af88:	0022      	movs	r2, r4
 800af8a:	002b      	movs	r3, r5
 800af8c:	f7f7 fb3a 	bl	8002604 <__aeabi_dsub>
 800af90:	000b      	movs	r3, r1
 800af92:	0002      	movs	r2, r0
 800af94:	6838      	ldr	r0, [r7, #0]
 800af96:	6879      	ldr	r1, [r7, #4]
 800af98:	f7f7 fb34 	bl	8002604 <__aeabi_dsub>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	0004      	movs	r4, r0
 800afa0:	000d      	movs	r5, r1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	db00      	blt.n	800afa8 <atan+0x254>
 800afa6:	e6f4      	b.n	800ad92 <atan+0x3e>
 800afa8:	2180      	movs	r1, #128	; 0x80
 800afaa:	0609      	lsls	r1, r1, #24
 800afac:	186b      	adds	r3, r5, r1
 800afae:	001d      	movs	r5, r3
 800afb0:	e6ef      	b.n	800ad92 <atan+0x3e>
 800afb2:	4d27      	ldr	r5, [pc, #156]	; (800b050 <atan+0x2fc>)
 800afb4:	e6ed      	b.n	800ad92 <atan+0x3e>
 800afb6:	46c0      	nop			; (mov r8, r8)
 800afb8:	440fffff 	.word	0x440fffff
 800afbc:	7ff00000 	.word	0x7ff00000
 800afc0:	54442d18 	.word	0x54442d18
 800afc4:	bff921fb 	.word	0xbff921fb
 800afc8:	3fdbffff 	.word	0x3fdbffff
 800afcc:	3e1fffff 	.word	0x3e1fffff
 800afd0:	8800759c 	.word	0x8800759c
 800afd4:	7e37e43c 	.word	0x7e37e43c
 800afd8:	3ff00000 	.word	0x3ff00000
 800afdc:	3ff2ffff 	.word	0x3ff2ffff
 800afe0:	3fe5ffff 	.word	0x3fe5ffff
 800afe4:	e322da11 	.word	0xe322da11
 800afe8:	3f90ad3a 	.word	0x3f90ad3a
 800afec:	24760deb 	.word	0x24760deb
 800aff0:	3fa97b4b 	.word	0x3fa97b4b
 800aff4:	a0d03d51 	.word	0xa0d03d51
 800aff8:	3fb10d66 	.word	0x3fb10d66
 800affc:	c54c206e 	.word	0xc54c206e
 800b000:	3fb745cd 	.word	0x3fb745cd
 800b004:	920083ff 	.word	0x920083ff
 800b008:	3fc24924 	.word	0x3fc24924
 800b00c:	5555550d 	.word	0x5555550d
 800b010:	3fd55555 	.word	0x3fd55555
 800b014:	2c6a6c2f 	.word	0x2c6a6c2f
 800b018:	bfa2b444 	.word	0xbfa2b444
 800b01c:	52defd9a 	.word	0x52defd9a
 800b020:	3fadde2d 	.word	0x3fadde2d
 800b024:	af749a6d 	.word	0xaf749a6d
 800b028:	3fb3b0f2 	.word	0x3fb3b0f2
 800b02c:	fe231671 	.word	0xfe231671
 800b030:	3fbc71c6 	.word	0x3fbc71c6
 800b034:	9998ebc4 	.word	0x9998ebc4
 800b038:	3fc99999 	.word	0x3fc99999
 800b03c:	40037fff 	.word	0x40037fff
 800b040:	3ff80000 	.word	0x3ff80000
 800b044:	bff00000 	.word	0xbff00000
 800b048:	0800b5f8 	.word	0x0800b5f8
 800b04c:	0800b618 	.word	0x0800b618
 800b050:	3ff921fb 	.word	0x3ff921fb

0800b054 <fabs>:
 800b054:	004b      	lsls	r3, r1, #1
 800b056:	0859      	lsrs	r1, r3, #1
 800b058:	4770      	bx	lr
	...

0800b05c <_init>:
 800b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05e:	46c0      	nop			; (mov r8, r8)
 800b060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b062:	bc08      	pop	{r3}
 800b064:	469e      	mov	lr, r3
 800b066:	4770      	bx	lr

0800b068 <_fini>:
 800b068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06a:	46c0      	nop			; (mov r8, r8)
 800b06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06e:	bc08      	pop	{r3}
 800b070:	469e      	mov	lr, r3
 800b072:	4770      	bx	lr
