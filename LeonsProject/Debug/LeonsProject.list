
LeonsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c50  08002c50  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002c50  08002c50  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c50  08002c50  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000010  08002c68  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002c68  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b75a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac9  00000000  00000000  0002b792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002d260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000112ea  00000000  00000000  0002e948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbdd  00000000  00000000  0003fc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069a8f  00000000  00000000  0004d80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b729e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002afc  00000000  00000000  000b72f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c08 	.word	0x08002c08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002c08 	.word	0x08002c08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <read_Gyro_data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef read_Gyro_data(DATA_TypeDef *Data)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af02      	add	r7, sp, #8
 8000226:	6078      	str	r0, [r7, #4]
	//if (ret!= HAL_OK){
	//	return ret;}

	//HAL_Delay(10);
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
	ret=HAL_I2C_Master_Transmit(&hi2c1, FXAS21002_SLAVE_ADDR_W, &Gyro_addr_X, 1, 5000);
 8000228:	2340      	movs	r3, #64	; 0x40
 800022a:	b299      	uxth	r1, r3
 800022c:	250f      	movs	r5, #15
 800022e:	197c      	adds	r4, r7, r5
 8000230:	4a1c      	ldr	r2, [pc, #112]	; (80002a4 <read_Gyro_data+0x84>)
 8000232:	481d      	ldr	r0, [pc, #116]	; (80002a8 <read_Gyro_data+0x88>)
 8000234:	4b1d      	ldr	r3, [pc, #116]	; (80002ac <read_Gyro_data+0x8c>)
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	2301      	movs	r3, #1
 800023a:	f000 fe85 	bl	8000f48 <HAL_I2C_Master_Transmit>
 800023e:	0003      	movs	r3, r0
 8000240:	7023      	strb	r3, [r4, #0]
	ret=HAL_I2C_Master_Receive(&hi2c1, FXAS21002_SLAVE_ADDR_R, rawData, 2, 5000);
 8000242:	2341      	movs	r3, #65	; 0x41
 8000244:	b299      	uxth	r1, r3
 8000246:	197c      	adds	r4, r7, r5
 8000248:	230c      	movs	r3, #12
 800024a:	18fa      	adds	r2, r7, r3
 800024c:	4816      	ldr	r0, [pc, #88]	; (80002a8 <read_Gyro_data+0x88>)
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <read_Gyro_data+0x8c>)
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	2302      	movs	r3, #2
 8000254:	f000 ff80 	bl	8001158 <HAL_I2C_Master_Receive>
 8000258:	0003      	movs	r3, r0
 800025a:	7023      	strb	r3, [r4, #0]
	//ret=HAL_I2C_Mem_Read(&hi2c1, Sensor_adress, Gyro_addr_X, 1, rawData, 2, 500);
		if (ret == HAL_ERROR){
 800025c:	197b      	adds	r3, r7, r5
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d102      	bne.n	800026a <read_Gyro_data+0x4a>
			return ret;}
 8000264:	197b      	adds	r3, r7, r5
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	e017      	b.n	800029a <read_Gyro_data+0x7a>
	Data->x = ((uint16_t) rawData[0])<<8 | ((uint16_t) rawData[1]);
 800026a:	210c      	movs	r1, #12
 800026c:	187b      	adds	r3, r7, r1
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	021b      	lsls	r3, r3, #8
 8000272:	b21a      	sxth	r2, r3
 8000274:	187b      	adds	r3, r7, r1
 8000276:	785b      	ldrb	r3, [r3, #1]
 8000278:	b21b      	sxth	r3, r3
 800027a:	4313      	orrs	r3, r2
 800027c:	b21a      	sxth	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	801a      	strh	r2, [r3, #0]
/*
	ret=HAL_I2C_Mem_Read(&hi2c1, Sensor_adress, Gyro_addr_Y, 1, rawData, 2, 500);
		if (ret == HAL_ERROR){
			return ret;}
	*/
	Data->y = ((uint16_t) rawData[0])<<8 | ((uint16_t) rawData[1]);
 8000282:	187b      	adds	r3, r7, r1
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	021b      	lsls	r3, r3, #8
 8000288:	b21a      	sxth	r2, r3
 800028a:	187b      	adds	r3, r7, r1
 800028c:	785b      	ldrb	r3, [r3, #1]
 800028e:	b21b      	sxth	r3, r3
 8000290:	4313      	orrs	r3, r2
 8000292:	b21a      	sxth	r2, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	805a      	strh	r2, [r3, #2]
	if (ret!= HAL_OK){
		return ret;}
	GYRO_DATA->z = rawData;
	*/

	return HAL_OK;
 8000298:	2300      	movs	r3, #0
}
 800029a:	0018      	movs	r0, r3
 800029c:	46bd      	mov	sp, r7
 800029e:	b004      	add	sp, #16
 80002a0:	bdb0      	pop	{r4, r5, r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	20000000 	.word	0x20000000
 80002a8:	2000002c 	.word	0x2000002c
 80002ac:	00001388 	.word	0x00001388

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b6:	f000 fa97 	bl	80007e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ba:	f000 f810 	bl	80002de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002be:	f000 f909 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002c2:	f000 f86d 	bl	80003a0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80002c6:	f000 f8ab 	bl	8000420 <MX_TIM1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 80002ca:	23fa      	movs	r3, #250	; 0xfa
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 faee 	bl	80008b0 <HAL_Delay>
	  //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  read_Gyro_data(&Gyro_Data);
 80002d4:	003b      	movs	r3, r7
 80002d6:	0018      	movs	r0, r3
 80002d8:	f7ff ffa2 	bl	8000220 <read_Gyro_data>
	  HAL_Delay(500);
 80002dc:	e7f5      	b.n	80002ca <main+0x1a>

080002de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002de:	b590      	push	{r4, r7, lr}
 80002e0:	b097      	sub	sp, #92	; 0x5c
 80002e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e4:	2428      	movs	r4, #40	; 0x28
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	0018      	movs	r0, r3
 80002ea:	2330      	movs	r3, #48	; 0x30
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f002 fc82 	bl	8002bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	2318      	movs	r3, #24
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	0018      	movs	r0, r3
 80002fa:	2310      	movs	r3, #16
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 fc7a 	bl	8002bf8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	0018      	movs	r0, r3
 8000308:	2314      	movs	r3, #20
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f002 fc73 	bl	8002bf8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000312:	0021      	movs	r1, r4
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2202      	movs	r2, #2
 8000318:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2201      	movs	r2, #1
 800031e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2210      	movs	r2, #16
 8000324:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2202      	movs	r2, #2
 800032a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	22a0      	movs	r2, #160	; 0xa0
 8000336:	0392      	lsls	r2, r2, #14
 8000338:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2200      	movs	r2, #0
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	187b      	adds	r3, r7, r1
 8000342:	0018      	movs	r0, r3
 8000344:	f001 faa0 	bl	8001888 <HAL_RCC_OscConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800034c:	f000 f934 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	2118      	movs	r1, #24
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2207      	movs	r2, #7
 8000356:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2202      	movs	r2, #2
 800035c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2101      	movs	r1, #1
 800036e:	0018      	movs	r0, r3
 8000370:	f001 fda4 	bl	8001ebc <HAL_RCC_ClockConfig>
 8000374:	1e03      	subs	r3, r0, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000378:	f000 f91e 	bl	80005b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2220      	movs	r2, #32
 8000380:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	0018      	movs	r0, r3
 800038c:	f001 fec8 	bl	8002120 <HAL_RCCEx_PeriphCLKConfig>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000394:	f000 f910 	bl	80005b8 <Error_Handler>
  }
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b017      	add	sp, #92	; 0x5c
 800039e:	bd90      	pop	{r4, r7, pc}

080003a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_I2C1_Init+0x74>)
 80003a6:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <MX_I2C1_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ac:	4a1b      	ldr	r2, [pc, #108]	; (800041c <MX_I2C1_Init+0x7c>)
 80003ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_I2C1_Init+0x74>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_I2C1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_I2C1_Init+0x74>)
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 fd1d 	bl	8000e1c <HAL_I2C_Init>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e6:	f000 f8e7 	bl	80005b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ec:	2100      	movs	r1, #0
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 f9b2 	bl	8001758 <HAL_I2CEx_ConfigAnalogFilter>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f8:	f000 f8de 	bl	80005b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <MX_I2C1_Init+0x74>)
 80003fe:	2100      	movs	r1, #0
 8000400:	0018      	movs	r0, r3
 8000402:	f001 f9f5 	bl	80017f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800040a:	f000 f8d5 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000002c 	.word	0x2000002c
 8000418:	40005400 	.word	0x40005400
 800041c:	2000090e 	.word	0x2000090e

08000420 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	2308      	movs	r3, #8
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	0018      	movs	r0, r3
 800042c:	2310      	movs	r3, #16
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f002 fbe1 	bl	8002bf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000436:	003b      	movs	r3, r7
 8000438:	0018      	movs	r0, r3
 800043a:	2308      	movs	r3, #8
 800043c:	001a      	movs	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	f002 fbda 	bl	8002bf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <MX_TIM1_Init+0xa4>)
 8000446:	4a20      	ldr	r2, [pc, #128]	; (80004c8 <MX_TIM1_Init+0xa8>)
 8000448:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 800044a:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <MX_TIM1_Init+0xa4>)
 800044c:	4a1f      	ldr	r2, [pc, #124]	; (80004cc <MX_TIM1_Init+0xac>)
 800044e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <MX_TIM1_Init+0xa4>)
 8000452:	2210      	movs	r2, #16
 8000454:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000456:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_TIM1_Init+0xa4>)
 8000458:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <MX_TIM1_Init+0xb0>)
 800045a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <MX_TIM1_Init+0xa4>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <MX_TIM1_Init+0xa4>)
 8000464:	2200      	movs	r2, #0
 8000466:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000468:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_TIM1_Init+0xa4>)
 800046a:	2200      	movs	r2, #0
 800046c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_TIM1_Init+0xa4>)
 8000470:	0018      	movs	r0, r3
 8000472:	f001 ff33 	bl	80022dc <HAL_TIM_Base_Init>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800047a:	f000 f89d 	bl	80005b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800047e:	2108      	movs	r1, #8
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	0152      	lsls	r2, r2, #5
 8000486:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000488:	187a      	adds	r2, r7, r1
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_TIM1_Init+0xa4>)
 800048c:	0011      	movs	r1, r2
 800048e:	0018      	movs	r0, r3
 8000490:	f002 f90a 	bl	80026a8 <HAL_TIM_ConfigClockSource>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d001      	beq.n	800049c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000498:	f000 f88e 	bl	80005b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800049c:	003b      	movs	r3, r7
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a2:	003b      	movs	r3, r7
 80004a4:	2200      	movs	r2, #0
 80004a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004a8:	003a      	movs	r2, r7
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_TIM1_Init+0xa4>)
 80004ac:	0011      	movs	r1, r2
 80004ae:	0018      	movs	r0, r3
 80004b0:	f002 fb10 	bl	8002ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80004b8:	f000 f87e 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b006      	add	sp, #24
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000078 	.word	0x20000078
 80004c8:	40012c00 	.word	0x40012c00
 80004cc:	0000bb80 	.word	0x0000bb80
 80004d0:	00001388 	.word	0x00001388

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b089      	sub	sp, #36	; 0x24
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	240c      	movs	r4, #12
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	2314      	movs	r3, #20
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f002 fb87 	bl	8002bf8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <MX_GPIO_Init+0xdc>)
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4b30      	ldr	r3, [pc, #192]	; (80005b0 <MX_GPIO_Init+0xdc>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0289      	lsls	r1, r1, #10
 80004f4:	430a      	orrs	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <MX_GPIO_Init+0xdc>)
 80004fa:	695a      	ldr	r2, [r3, #20]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	029b      	lsls	r3, r3, #10
 8000500:	4013      	ands	r3, r2
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <MX_GPIO_Init+0xdc>)
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <MX_GPIO_Init+0xdc>)
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	0309      	lsls	r1, r1, #12
 8000510:	430a      	orrs	r2, r1
 8000512:	615a      	str	r2, [r3, #20]
 8000514:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <MX_GPIO_Init+0xdc>)
 8000516:	695a      	ldr	r2, [r3, #20]
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	031b      	lsls	r3, r3, #12
 800051c:	4013      	ands	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <MX_GPIO_Init+0xdc>)
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <MX_GPIO_Init+0xdc>)
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	02c9      	lsls	r1, r1, #11
 800052c:	430a      	orrs	r2, r1
 800052e:	615a      	str	r2, [r3, #20]
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <MX_GPIO_Init+0xdc>)
 8000532:	695a      	ldr	r2, [r3, #20]
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	02db      	lsls	r3, r3, #11
 8000538:	4013      	ands	r3, r2
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800053e:	23c0      	movs	r3, #192	; 0xc0
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	481c      	ldr	r0, [pc, #112]	; (80005b4 <MX_GPIO_Init+0xe0>)
 8000544:	2200      	movs	r2, #0
 8000546:	0019      	movs	r1, r3
 8000548:	f000 fc24 	bl	8000d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2288      	movs	r2, #136	; 0x88
 8000556:	0352      	lsls	r2, r2, #13
 8000558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000560:	193a      	adds	r2, r7, r4
 8000562:	2390      	movs	r3, #144	; 0x90
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f000 faa3 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800056e:	0021      	movs	r1, r4
 8000570:	187b      	adds	r3, r7, r1
 8000572:	22c0      	movs	r2, #192	; 0xc0
 8000574:	0092      	lsls	r2, r2, #2
 8000576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2201      	movs	r2, #1
 800057c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058a:	187b      	adds	r3, r7, r1
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <MX_GPIO_Init+0xe0>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f000 fa8f 	bl	8000ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	2005      	movs	r0, #5
 800059c:	f000 fa58 	bl	8000a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80005a0:	2005      	movs	r0, #5
 80005a2:	f000 fa6a 	bl	8000a7a <HAL_NVIC_EnableIRQ>

}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b009      	add	sp, #36	; 0x24
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000800 	.word	0x48000800

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <Error_Handler+0x8>
	...

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <HAL_MspInit+0x44>)
 80005cc:	699a      	ldr	r2, [r3, #24]
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <HAL_MspInit+0x44>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	619a      	str	r2, [r3, #24]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <HAL_MspInit+0x44>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <HAL_MspInit+0x44>)
 80005e4:	69da      	ldr	r2, [r3, #28]
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_MspInit+0x44>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0549      	lsls	r1, r1, #21
 80005ec:	430a      	orrs	r2, r1
 80005ee:	61da      	str	r2, [r3, #28]
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_MspInit+0x44>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	055b      	lsls	r3, r3, #21
 80005f8:	4013      	ands	r3, r2
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	40021000 	.word	0x40021000

0800060c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b08b      	sub	sp, #44	; 0x2c
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	2414      	movs	r4, #20
 8000616:	193b      	adds	r3, r7, r4
 8000618:	0018      	movs	r0, r3
 800061a:	2314      	movs	r3, #20
 800061c:	001a      	movs	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f002 faea 	bl	8002bf8 <memset>
  if(hi2c->Instance==I2C1)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a1c      	ldr	r2, [pc, #112]	; (800069c <HAL_I2C_MspInit+0x90>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d131      	bne.n	8000692 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <HAL_I2C_MspInit+0x94>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <HAL_I2C_MspInit+0x94>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	02c9      	lsls	r1, r1, #11
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <HAL_I2C_MspInit+0x94>)
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	02db      	lsls	r3, r3, #11
 8000644:	4013      	ands	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800064a:	0021      	movs	r1, r4
 800064c:	187b      	adds	r3, r7, r1
 800064e:	22c0      	movs	r2, #192	; 0xc0
 8000650:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2212      	movs	r2, #18
 8000656:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2203      	movs	r2, #3
 8000662:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2201      	movs	r2, #1
 8000668:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	187b      	adds	r3, r7, r1
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <HAL_I2C_MspInit+0x98>)
 800066e:	0019      	movs	r1, r3
 8000670:	0010      	movs	r0, r2
 8000672:	f000 fa1f 	bl	8000ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_I2C_MspInit+0x94>)
 8000678:	69da      	ldr	r2, [r3, #28]
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_I2C_MspInit+0x94>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0389      	lsls	r1, r1, #14
 8000680:	430a      	orrs	r2, r1
 8000682:	61da      	str	r2, [r3, #28]
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_I2C_MspInit+0x94>)
 8000686:	69da      	ldr	r2, [r3, #28]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	039b      	lsls	r3, r3, #14
 800068c:	4013      	ands	r3, r2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b00b      	add	sp, #44	; 0x2c
 8000698:	bd90      	pop	{r4, r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	40005400 	.word	0x40005400
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000400 	.word	0x48000400

080006a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <HAL_TIM_Base_MspInit+0x48>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d115      	bne.n	80006e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <HAL_TIM_Base_MspInit+0x4c>)
 80006bc:	699a      	ldr	r2, [r3, #24]
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <HAL_TIM_Base_MspInit+0x4c>)
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	0109      	lsls	r1, r1, #4
 80006c4:	430a      	orrs	r2, r1
 80006c6:	619a      	str	r2, [r3, #24]
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_TIM_Base_MspInit+0x4c>)
 80006ca:	699a      	ldr	r2, [r3, #24]
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	200d      	movs	r0, #13
 80006dc:	f000 f9b8 	bl	8000a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80006e0:	200d      	movs	r0, #13
 80006e2:	f000 f9ca 	bl	8000a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b004      	add	sp, #16
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40012c00 	.word	0x40012c00
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071c:	f000 f8ac 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <EXTI0_1_IRQHandler+0x28>)
 8000732:	2201      	movs	r2, #1
 8000734:	0019      	movs	r1, r3
 8000736:	f000 fb2d 	bl	8000d94 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <EXTI0_1_IRQHandler+0x2c>)
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fe1d 	bl	800237c <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fb44 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	48000800 	.word	0x48000800
 8000754:	20000078 	.word	0x20000078

08000758 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x28>)
 8000762:	2200      	movs	r2, #0
 8000764:	0019      	movs	r1, r3
 8000766:	f000 fb15 	bl	8000d94 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2c>)
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fe85 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim1);
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2c>)
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fe53 	bl	8002420 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	48000800 	.word	0x48000800
 8000784:	20000078 	.word	0x20000078

08000788 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000796:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800079a:	490e      	ldr	r1, [pc, #56]	; (80007d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800079c:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <LoopForever+0xe>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b0:	4c0b      	ldr	r4, [pc, #44]	; (80007e0 <LoopForever+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007be:	f7ff ffe3 	bl	8000788 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007c2:	f002 f9f5 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c6:	f7ff fd73 	bl	80002b0 <main>

080007ca <LoopForever>:

LoopForever:
    b LoopForever
 80007ca:	e7fe      	b.n	80007ca <LoopForever>
  ldr   r0, =_estack
 80007cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007d8:	08002c58 	.word	0x08002c58
  ldr r2, =_sbss
 80007dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007e0:	200000c4 	.word	0x200000c4

080007e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC1_COMP_IRQHandler>
	...

080007e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_Init+0x24>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_Init+0x24>)
 80007f2:	2110      	movs	r1, #16
 80007f4:	430a      	orrs	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f809 	bl	8000810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fe:	f7ff fee1 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40022000 	.word	0x40022000

08000810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <HAL_InitTick+0x5c>)
 800081a:	681c      	ldr	r4, [r3, #0]
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_InitTick+0x60>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	0019      	movs	r1, r3
 8000822:	23fa      	movs	r3, #250	; 0xfa
 8000824:	0098      	lsls	r0, r3, #2
 8000826:	f7ff fc6f 	bl	8000108 <__udivsi3>
 800082a:	0003      	movs	r3, r0
 800082c:	0019      	movs	r1, r3
 800082e:	0020      	movs	r0, r4
 8000830:	f7ff fc6a 	bl	8000108 <__udivsi3>
 8000834:	0003      	movs	r3, r0
 8000836:	0018      	movs	r0, r3
 8000838:	f000 f92f 	bl	8000a9a <HAL_SYSTICK_Config>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	e00f      	b.n	8000864 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b03      	cmp	r3, #3
 8000848:	d80b      	bhi.n	8000862 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	2301      	movs	r3, #1
 800084e:	425b      	negs	r3, r3
 8000850:	2200      	movs	r2, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f000 f8fc 	bl	8000a50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_InitTick+0x64>)
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	b003      	add	sp, #12
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	20000004 	.word	0x20000004
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20000008 	.word	0x20000008

08000878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x1c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	001a      	movs	r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x20>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	18d2      	adds	r2, r2, r3
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <HAL_IncTick+0x20>)
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	2000000c 	.word	0x2000000c
 8000898:	200000c0 	.word	0x200000c0

0800089c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  return uwTick;
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <HAL_GetTick+0x10>)
 80008a2:	681b      	ldr	r3, [r3, #0]
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	200000c0 	.word	0x200000c0

080008b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff fff0 	bl	800089c <HAL_GetTick>
 80008bc:	0003      	movs	r3, r0
 80008be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3301      	adds	r3, #1
 80008c8:	d005      	beq.n	80008d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_Delay+0x44>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	001a      	movs	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	189b      	adds	r3, r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	f7ff ffe0 	bl	800089c <HAL_GetTick>
 80008dc:	0002      	movs	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f7      	bhi.n	80008d8 <HAL_Delay+0x28>
  {
  }
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b004      	add	sp, #16
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	2000000c 	.word	0x2000000c

080008f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	0002      	movs	r2, r0
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b7f      	cmp	r3, #127	; 0x7f
 800090a:	d809      	bhi.n	8000920 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	001a      	movs	r2, r3
 8000912:	231f      	movs	r3, #31
 8000914:	401a      	ands	r2, r3
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_EnableIRQ+0x30>)
 8000918:	2101      	movs	r1, #1
 800091a:	4091      	lsls	r1, r2
 800091c:	000a      	movs	r2, r1
 800091e:	601a      	str	r2, [r3, #0]
  }
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	0002      	movs	r2, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b7f      	cmp	r3, #127	; 0x7f
 8000940:	d828      	bhi.n	8000994 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000942:	4a2f      	ldr	r2, [pc, #188]	; (8000a00 <__NVIC_SetPriority+0xd4>)
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b25b      	sxtb	r3, r3
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	33c0      	adds	r3, #192	; 0xc0
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	589b      	ldr	r3, [r3, r2]
 8000952:	1dfa      	adds	r2, r7, #7
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	0011      	movs	r1, r2
 8000958:	2203      	movs	r2, #3
 800095a:	400a      	ands	r2, r1
 800095c:	00d2      	lsls	r2, r2, #3
 800095e:	21ff      	movs	r1, #255	; 0xff
 8000960:	4091      	lsls	r1, r2
 8000962:	000a      	movs	r2, r1
 8000964:	43d2      	mvns	r2, r2
 8000966:	401a      	ands	r2, r3
 8000968:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	019b      	lsls	r3, r3, #6
 800096e:	22ff      	movs	r2, #255	; 0xff
 8000970:	401a      	ands	r2, r3
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	0018      	movs	r0, r3
 8000978:	2303      	movs	r3, #3
 800097a:	4003      	ands	r3, r0
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000980:	481f      	ldr	r0, [pc, #124]	; (8000a00 <__NVIC_SetPriority+0xd4>)
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b25b      	sxtb	r3, r3
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	430a      	orrs	r2, r1
 800098c:	33c0      	adds	r3, #192	; 0xc0
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000992:	e031      	b.n	80009f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000994:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <__NVIC_SetPriority+0xd8>)
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	0019      	movs	r1, r3
 800099c:	230f      	movs	r3, #15
 800099e:	400b      	ands	r3, r1
 80009a0:	3b08      	subs	r3, #8
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	3306      	adds	r3, #6
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	18d3      	adds	r3, r2, r3
 80009aa:	3304      	adds	r3, #4
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	1dfa      	adds	r2, r7, #7
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	0011      	movs	r1, r2
 80009b4:	2203      	movs	r2, #3
 80009b6:	400a      	ands	r2, r1
 80009b8:	00d2      	lsls	r2, r2, #3
 80009ba:	21ff      	movs	r1, #255	; 0xff
 80009bc:	4091      	lsls	r1, r2
 80009be:	000a      	movs	r2, r1
 80009c0:	43d2      	mvns	r2, r2
 80009c2:	401a      	ands	r2, r3
 80009c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	401a      	ands	r2, r3
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	0018      	movs	r0, r3
 80009d4:	2303      	movs	r3, #3
 80009d6:	4003      	ands	r3, r0
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <__NVIC_SetPriority+0xd8>)
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	001c      	movs	r4, r3
 80009e4:	230f      	movs	r3, #15
 80009e6:	4023      	ands	r3, r4
 80009e8:	3b08      	subs	r3, #8
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	430a      	orrs	r2, r1
 80009ee:	3306      	adds	r3, #6
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	18c3      	adds	r3, r0, r3
 80009f4:	3304      	adds	r3, #4
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b003      	add	sp, #12
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	045b      	lsls	r3, r3, #17
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d301      	bcc.n	8000a20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e010      	b.n	8000a42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <SysTick_Config+0x44>)
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	3a01      	subs	r2, #1
 8000a26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a28:	2301      	movs	r3, #1
 8000a2a:	425b      	negs	r3, r3
 8000a2c:	2103      	movs	r1, #3
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff ff7c 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x44>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x44>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	0018      	movs	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	1c02      	adds	r2, r0, #0
 8000a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff ff5d 	bl	800092c <__NVIC_SetPriority>
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	0002      	movs	r2, r0
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff ff33 	bl	80008f8 <__NVIC_EnableIRQ>
}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff ffaf 	bl	8000a08 <SysTick_Config>
 8000aaa:	0003      	movs	r3, r0
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac2:	e14f      	b.n	8000d64 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	4091      	lsls	r1, r2
 8000ace:	000a      	movs	r2, r1
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d100      	bne.n	8000adc <HAL_GPIO_Init+0x28>
 8000ada:	e140      	b.n	8000d5e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d005      	beq.n	8000af4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2203      	movs	r2, #3
 8000aee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d130      	bne.n	8000b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2203      	movs	r2, #3
 8000b00:	409a      	lsls	r2, r3
 8000b02:	0013      	movs	r3, r2
 8000b04:	43da      	mvns	r2, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	409a      	lsls	r2, r3
 8000b16:	0013      	movs	r3, r2
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	0013      	movs	r3, r2
 8000b32:	43da      	mvns	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	091b      	lsrs	r3, r3, #4
 8000b40:	2201      	movs	r2, #1
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d017      	beq.n	8000b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	43da      	mvns	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2203      	movs	r2, #3
 8000b98:	4013      	ands	r3, r2
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d123      	bne.n	8000be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	08da      	lsrs	r2, r3, #3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3208      	adds	r2, #8
 8000ba6:	0092      	lsls	r2, r2, #2
 8000ba8:	58d3      	ldr	r3, [r2, r3]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	2207      	movs	r2, #7
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	220f      	movs	r2, #15
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	0013      	movs	r3, r2
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	691a      	ldr	r2, [r3, #16]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	2107      	movs	r1, #7
 8000bca:	400b      	ands	r3, r1
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3208      	adds	r2, #8
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	6939      	ldr	r1, [r7, #16]
 8000be4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2203      	movs	r2, #3
 8000c04:	401a      	ands	r2, r3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	23c0      	movs	r3, #192	; 0xc0
 8000c20:	029b      	lsls	r3, r3, #10
 8000c22:	4013      	ands	r3, r2
 8000c24:	d100      	bne.n	8000c28 <HAL_GPIO_Init+0x174>
 8000c26:	e09a      	b.n	8000d5e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000c2a:	699a      	ldr	r2, [r3, #24]
 8000c2c:	4b53      	ldr	r3, [pc, #332]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000c2e:	2101      	movs	r1, #1
 8000c30:	430a      	orrs	r2, r1
 8000c32:	619a      	str	r2, [r3, #24]
 8000c34:	4b51      	ldr	r3, [pc, #324]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c40:	4a4f      	ldr	r2, [pc, #316]	; (8000d80 <HAL_GPIO_Init+0x2cc>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	3302      	adds	r3, #2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	589b      	ldr	r3, [r3, r2]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	2203      	movs	r2, #3
 8000c52:	4013      	ands	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	43da      	mvns	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	2390      	movs	r3, #144	; 0x90
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d013      	beq.n	8000c96 <HAL_GPIO_Init+0x1e2>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a44      	ldr	r2, [pc, #272]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d00d      	beq.n	8000c92 <HAL_GPIO_Init+0x1de>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a43      	ldr	r2, [pc, #268]	; (8000d88 <HAL_GPIO_Init+0x2d4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d007      	beq.n	8000c8e <HAL_GPIO_Init+0x1da>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a42      	ldr	r2, [pc, #264]	; (8000d8c <HAL_GPIO_Init+0x2d8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_GPIO_Init+0x1d6>
 8000c86:	2303      	movs	r3, #3
 8000c88:	e006      	b.n	8000c98 <HAL_GPIO_Init+0x1e4>
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	e004      	b.n	8000c98 <HAL_GPIO_Init+0x1e4>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e002      	b.n	8000c98 <HAL_GPIO_Init+0x1e4>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <HAL_GPIO_Init+0x1e4>
 8000c96:	2300      	movs	r3, #0
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	2103      	movs	r1, #3
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	4093      	lsls	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca8:	4935      	ldr	r1, [pc, #212]	; (8000d80 <HAL_GPIO_Init+0x2cc>)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	3302      	adds	r3, #2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <HAL_GPIO_Init+0x2dc>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	025b      	lsls	r3, r3, #9
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <HAL_GPIO_Init+0x2dc>)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <HAL_GPIO_Init+0x2dc>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43da      	mvns	r2, r3
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <HAL_GPIO_Init+0x2dc>)
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <HAL_GPIO_Init+0x2dc>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	43da      	mvns	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	035b      	lsls	r3, r3, #13
 8000d22:	4013      	ands	r3, r2
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_GPIO_Init+0x2dc>)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_GPIO_Init+0x2dc>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43da      	mvns	r2, r3
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	039b      	lsls	r3, r3, #14
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_GPIO_Init+0x2dc>)
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	40da      	lsrs	r2, r3
 8000d6c:	1e13      	subs	r3, r2, #0
 8000d6e:	d000      	beq.n	8000d72 <HAL_GPIO_Init+0x2be>
 8000d70:	e6a8      	b.n	8000ac4 <HAL_GPIO_Init+0x10>
  } 
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b006      	add	sp, #24
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010000 	.word	0x40010000
 8000d84:	48000400 	.word	0x48000400
 8000d88:	48000800 	.word	0x48000800
 8000d8c:	48000c00 	.word	0x48000c00
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	0008      	movs	r0, r1
 8000d9e:	0011      	movs	r1, r2
 8000da0:	1cbb      	adds	r3, r7, #2
 8000da2:	1c02      	adds	r2, r0, #0
 8000da4:	801a      	strh	r2, [r3, #0]
 8000da6:	1c7b      	adds	r3, r7, #1
 8000da8:	1c0a      	adds	r2, r1, #0
 8000daa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dac:	1c7b      	adds	r3, r7, #1
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d004      	beq.n	8000dbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db4:	1cbb      	adds	r3, r7, #2
 8000db6:	881a      	ldrh	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dbc:	e003      	b.n	8000dc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dbe:	1cbb      	adds	r3, r7, #2
 8000dc0:	881a      	ldrh	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	1dbb      	adds	r3, r7, #6
 8000dda:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	1dba      	adds	r2, r7, #6
 8000de2:	8812      	ldrh	r2, [r2, #0]
 8000de4:	4013      	ands	r3, r2
 8000de6:	d008      	beq.n	8000dfa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000dea:	1dba      	adds	r2, r7, #6
 8000dec:	8812      	ldrh	r2, [r2, #0]
 8000dee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000df0:	1dbb      	adds	r3, r7, #6
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	0018      	movs	r0, r3
 8000df6:	f000 f807 	bl	8000e08 <HAL_GPIO_EXTI_Callback>
  }
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b002      	add	sp, #8
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	40010400 	.word	0x40010400

08000e08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	0002      	movs	r2, r0
 8000e10:	1dbb      	adds	r3, r7, #6
 8000e12:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e082      	b.n	8000f34 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2241      	movs	r2, #65	; 0x41
 8000e32:	5c9b      	ldrb	r3, [r3, r2]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d107      	bne.n	8000e4a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	2100      	movs	r1, #0
 8000e40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	0018      	movs	r0, r3
 8000e46:	f7ff fbe1 	bl	800060c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2241      	movs	r2, #65	; 0x41
 8000e4e:	2124      	movs	r1, #36	; 0x24
 8000e50:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	438a      	bics	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4934      	ldr	r1, [pc, #208]	; (8000f3c <HAL_I2C_Init+0x120>)
 8000e6c:	400a      	ands	r2, r1
 8000e6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4931      	ldr	r1, [pc, #196]	; (8000f40 <HAL_I2C_Init+0x124>)
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d108      	bne.n	8000e9a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	0209      	lsls	r1, r1, #8
 8000e94:	430a      	orrs	r2, r1
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	e007      	b.n	8000eaa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2184      	movs	r1, #132	; 0x84
 8000ea4:	0209      	lsls	r1, r1, #8
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d104      	bne.n	8000ebc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	491f      	ldr	r1, [pc, #124]	; (8000f44 <HAL_I2C_Init+0x128>)
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	491a      	ldr	r1, [pc, #104]	; (8000f40 <HAL_I2C_Init+0x124>)
 8000ed8:	400a      	ands	r2, r1
 8000eda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69d9      	ldr	r1, [r3, #28]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a1a      	ldr	r2, [r3, #32]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2241      	movs	r2, #65	; 0x41
 8000f20:	2120      	movs	r1, #32
 8000f22:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2242      	movs	r2, #66	; 0x42
 8000f2e:	2100      	movs	r1, #0
 8000f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	f0ffffff 	.word	0xf0ffffff
 8000f40:	ffff7fff 	.word	0xffff7fff
 8000f44:	02008000 	.word	0x02008000

08000f48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	0008      	movs	r0, r1
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	0019      	movs	r1, r3
 8000f56:	230a      	movs	r3, #10
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	1c02      	adds	r2, r0, #0
 8000f5c:	801a      	strh	r2, [r3, #0]
 8000f5e:	2308      	movs	r3, #8
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	1c0a      	adds	r2, r1, #0
 8000f64:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2241      	movs	r2, #65	; 0x41
 8000f6a:	5c9b      	ldrb	r3, [r3, r2]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	d000      	beq.n	8000f74 <HAL_I2C_Master_Transmit+0x2c>
 8000f72:	e0e7      	b.n	8001144 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2240      	movs	r2, #64	; 0x40
 8000f78:	5c9b      	ldrb	r3, [r3, r2]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d101      	bne.n	8000f82 <HAL_I2C_Master_Transmit+0x3a>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e0e1      	b.n	8001146 <HAL_I2C_Master_Transmit+0x1fe>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2240      	movs	r2, #64	; 0x40
 8000f86:	2101      	movs	r1, #1
 8000f88:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f8a:	f7ff fc87 	bl	800089c <HAL_GetTick>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	0219      	lsls	r1, r3, #8
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2319      	movs	r3, #25
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f000 fa04 	bl	80013ac <I2C_WaitOnFlagUntilTimeout>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e0cc      	b.n	8001146 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2241      	movs	r2, #65	; 0x41
 8000fb0:	2121      	movs	r1, #33	; 0x21
 8000fb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2242      	movs	r2, #66	; 0x42
 8000fb8:	2110      	movs	r1, #16
 8000fba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2208      	movs	r2, #8
 8000fcc:	18ba      	adds	r2, r7, r2
 8000fce:	8812      	ldrh	r2, [r2, #0]
 8000fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2bff      	cmp	r3, #255	; 0xff
 8000fe0:	d911      	bls.n	8001006 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	22ff      	movs	r2, #255	; 0xff
 8000fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	045c      	lsls	r4, r3, #17
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	8819      	ldrh	r1, [r3, #0]
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	4b55      	ldr	r3, [pc, #340]	; (8001150 <HAL_I2C_Master_Transmit+0x208>)
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	0023      	movs	r3, r4
 8001000:	f000 fb74 	bl	80016ec <I2C_TransferConfig>
 8001004:	e075      	b.n	80010f2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800100a:	b29a      	uxth	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001014:	b2da      	uxtb	r2, r3
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	049c      	lsls	r4, r3, #18
 800101a:	230a      	movs	r3, #10
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	8819      	ldrh	r1, [r3, #0]
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <HAL_I2C_Master_Transmit+0x208>)
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	0023      	movs	r3, r4
 8001028:	f000 fb60 	bl	80016ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800102c:	e061      	b.n	80010f2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	0018      	movs	r0, r3
 8001036:	f000 f9f8 	bl	800142a <I2C_WaitOnTXISFlagUntilTimeout>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d001      	beq.n	8001042 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e081      	b.n	8001146 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800105c:	b29b      	uxth	r3, r3
 800105e:	3b01      	subs	r3, #1
 8001060:	b29a      	uxth	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800106a:	3b01      	subs	r3, #1
 800106c:	b29a      	uxth	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001076:	b29b      	uxth	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d03a      	beq.n	80010f2 <HAL_I2C_Master_Transmit+0x1aa>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001080:	2b00      	cmp	r3, #0
 8001082:	d136      	bne.n	80010f2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	0013      	movs	r3, r2
 800108e:	2200      	movs	r2, #0
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	f000 f98b 	bl	80013ac <I2C_WaitOnFlagUntilTimeout>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d001      	beq.n	800109e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e053      	b.n	8001146 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2bff      	cmp	r3, #255	; 0xff
 80010a6:	d911      	bls.n	80010cc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	045c      	lsls	r4, r3, #17
 80010b8:	230a      	movs	r3, #10
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	8819      	ldrh	r1, [r3, #0]
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	2300      	movs	r3, #0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	0023      	movs	r3, r4
 80010c6:	f000 fb11 	bl	80016ec <I2C_TransferConfig>
 80010ca:	e012      	b.n	80010f2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	049c      	lsls	r4, r3, #18
 80010e0:	230a      	movs	r3, #10
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	8819      	ldrh	r1, [r3, #0]
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	2300      	movs	r3, #0
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	0023      	movs	r3, r4
 80010ee:	f000 fafd 	bl	80016ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d198      	bne.n	800102e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	0018      	movs	r0, r3
 8001104:	f000 f9d0 	bl	80014a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d001      	beq.n	8001110 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e01a      	b.n	8001146 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2220      	movs	r2, #32
 8001116:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	490c      	ldr	r1, [pc, #48]	; (8001154 <HAL_I2C_Master_Transmit+0x20c>)
 8001124:	400a      	ands	r2, r1
 8001126:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2241      	movs	r2, #65	; 0x41
 800112c:	2120      	movs	r1, #32
 800112e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2242      	movs	r2, #66	; 0x42
 8001134:	2100      	movs	r1, #0
 8001136:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2240      	movs	r2, #64	; 0x40
 800113c:	2100      	movs	r1, #0
 800113e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001144:	2302      	movs	r3, #2
  }
}
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b007      	add	sp, #28
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	80002000 	.word	0x80002000
 8001154:	fe00e800 	.word	0xfe00e800

08001158 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	0008      	movs	r0, r1
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	0019      	movs	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	1c02      	adds	r2, r0, #0
 800116c:	801a      	strh	r2, [r3, #0]
 800116e:	2308      	movs	r3, #8
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	1c0a      	adds	r2, r1, #0
 8001174:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2241      	movs	r2, #65	; 0x41
 800117a:	5c9b      	ldrb	r3, [r3, r2]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b20      	cmp	r3, #32
 8001180:	d000      	beq.n	8001184 <HAL_I2C_Master_Receive+0x2c>
 8001182:	e0e8      	b.n	8001356 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2240      	movs	r2, #64	; 0x40
 8001188:	5c9b      	ldrb	r3, [r3, r2]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_I2C_Master_Receive+0x3a>
 800118e:	2302      	movs	r3, #2
 8001190:	e0e2      	b.n	8001358 <HAL_I2C_Master_Receive+0x200>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2240      	movs	r2, #64	; 0x40
 8001196:	2101      	movs	r1, #1
 8001198:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800119a:	f7ff fb7f 	bl	800089c <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	0219      	lsls	r1, r3, #8
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2319      	movs	r3, #25
 80011ae:	2201      	movs	r2, #1
 80011b0:	f000 f8fc 	bl	80013ac <I2C_WaitOnFlagUntilTimeout>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d001      	beq.n	80011bc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0cd      	b.n	8001358 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2241      	movs	r2, #65	; 0x41
 80011c0:	2122      	movs	r1, #34	; 0x22
 80011c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2242      	movs	r2, #66	; 0x42
 80011c8:	2110      	movs	r1, #16
 80011ca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2208      	movs	r2, #8
 80011dc:	18ba      	adds	r2, r7, r2
 80011de:	8812      	ldrh	r2, [r2, #0]
 80011e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	2bff      	cmp	r3, #255	; 0xff
 80011f0:	d911      	bls.n	8001216 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	22ff      	movs	r2, #255	; 0xff
 80011f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	045c      	lsls	r4, r3, #17
 8001202:	230a      	movs	r3, #10
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	8819      	ldrh	r1, [r3, #0]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	4b55      	ldr	r3, [pc, #340]	; (8001360 <HAL_I2C_Master_Receive+0x208>)
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	0023      	movs	r3, r4
 8001210:	f000 fa6c 	bl	80016ec <I2C_TransferConfig>
 8001214:	e076      	b.n	8001304 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121a:	b29a      	uxth	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001224:	b2da      	uxtb	r2, r3
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	049c      	lsls	r4, r3, #18
 800122a:	230a      	movs	r3, #10
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	8819      	ldrh	r1, [r3, #0]
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <HAL_I2C_Master_Receive+0x208>)
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	0023      	movs	r3, r4
 8001238:	f000 fa58 	bl	80016ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800123c:	e062      	b.n	8001304 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	0018      	movs	r0, r3
 8001246:	f000 f96b 	bl	8001520 <I2C_WaitOnRXNEFlagUntilTimeout>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e082      	b.n	8001358 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126e:	3b01      	subs	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001288:	b29b      	uxth	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d03a      	beq.n	8001304 <HAL_I2C_Master_Receive+0x1ac>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001292:	2b00      	cmp	r3, #0
 8001294:	d136      	bne.n	8001304 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	0013      	movs	r3, r2
 80012a0:	2200      	movs	r2, #0
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	f000 f882 	bl	80013ac <I2C_WaitOnFlagUntilTimeout>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e053      	b.n	8001358 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	2bff      	cmp	r3, #255	; 0xff
 80012b8:	d911      	bls.n	80012de <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	22ff      	movs	r2, #255	; 0xff
 80012be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	045c      	lsls	r4, r3, #17
 80012ca:	230a      	movs	r3, #10
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	8819      	ldrh	r1, [r3, #0]
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	2300      	movs	r3, #0
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	0023      	movs	r3, r4
 80012d8:	f000 fa08 	bl	80016ec <I2C_TransferConfig>
 80012dc:	e012      	b.n	8001304 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	049c      	lsls	r4, r3, #18
 80012f2:	230a      	movs	r3, #10
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	8819      	ldrh	r1, [r3, #0]
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	0023      	movs	r3, r4
 8001300:	f000 f9f4 	bl	80016ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d197      	bne.n	800123e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	0018      	movs	r0, r3
 8001316:	f000 f8c7 	bl	80014a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e01a      	b.n	8001358 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2220      	movs	r2, #32
 8001328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	490b      	ldr	r1, [pc, #44]	; (8001364 <HAL_I2C_Master_Receive+0x20c>)
 8001336:	400a      	ands	r2, r1
 8001338:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2241      	movs	r2, #65	; 0x41
 800133e:	2120      	movs	r1, #32
 8001340:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2242      	movs	r2, #66	; 0x42
 8001346:	2100      	movs	r1, #0
 8001348:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2240      	movs	r2, #64	; 0x40
 800134e:	2100      	movs	r1, #0
 8001350:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001356:	2302      	movs	r3, #2
  }
}
 8001358:	0018      	movs	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	b007      	add	sp, #28
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	80002400 	.word	0x80002400
 8001364:	fe00e800 	.word	0xfe00e800

08001368 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	2b02      	cmp	r3, #2
 800137c:	d103      	bne.n	8001386 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2201      	movs	r2, #1
 800138e:	4013      	ands	r3, r2
 8001390:	2b01      	cmp	r3, #1
 8001392:	d007      	beq.n	80013a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2101      	movs	r1, #1
 80013a0:	430a      	orrs	r2, r1
 80013a2:	619a      	str	r2, [r3, #24]
  }
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}

080013ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013bc:	e021      	b.n	8001402 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	d01e      	beq.n	8001402 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c4:	f7ff fa6a 	bl	800089c <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d302      	bcc.n	80013da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d113      	bne.n	8001402 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	2220      	movs	r2, #32
 80013e0:	431a      	orrs	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2241      	movs	r2, #65	; 0x41
 80013ea:	2120      	movs	r1, #32
 80013ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2242      	movs	r2, #66	; 0x42
 80013f2:	2100      	movs	r1, #0
 80013f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2240      	movs	r2, #64	; 0x40
 80013fa:	2100      	movs	r1, #0
 80013fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	4013      	ands	r3, r2
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	425a      	negs	r2, r3
 8001412:	4153      	adcs	r3, r2
 8001414:	b2db      	uxtb	r3, r3
 8001416:	001a      	movs	r2, r3
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d0ce      	beq.n	80013be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}

0800142a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001436:	e02b      	b.n	8001490 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	0018      	movs	r0, r3
 8001440:	f000 f8da 	bl	80015f8 <I2C_IsAcknowledgeFailed>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d001      	beq.n	800144c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e029      	b.n	80014a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	d01e      	beq.n	8001490 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001452:	f7ff fa23 	bl	800089c <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	429a      	cmp	r2, r3
 8001460:	d302      	bcc.n	8001468 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d113      	bne.n	8001490 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	2220      	movs	r2, #32
 800146e:	431a      	orrs	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2241      	movs	r2, #65	; 0x41
 8001478:	2120      	movs	r1, #32
 800147a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2242      	movs	r2, #66	; 0x42
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2240      	movs	r2, #64	; 0x40
 8001488:	2100      	movs	r1, #0
 800148a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e007      	b.n	80014a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	2b02      	cmp	r3, #2
 800149c:	d1cc      	bne.n	8001438 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	0018      	movs	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b004      	add	sp, #16
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014b4:	e028      	b.n	8001508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	0018      	movs	r0, r3
 80014be:	f000 f89b 	bl	80015f8 <I2C_IsAcknowledgeFailed>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d001      	beq.n	80014ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e026      	b.n	8001518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ca:	f7ff f9e7 	bl	800089c <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d302      	bcc.n	80014e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d113      	bne.n	8001508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	2220      	movs	r2, #32
 80014e6:	431a      	orrs	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2241      	movs	r2, #65	; 0x41
 80014f0:	2120      	movs	r1, #32
 80014f2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2242      	movs	r2, #66	; 0x42
 80014f8:	2100      	movs	r1, #0
 80014fa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2240      	movs	r2, #64	; 0x40
 8001500:	2100      	movs	r1, #0
 8001502:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e007      	b.n	8001518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2220      	movs	r2, #32
 8001510:	4013      	ands	r3, r2
 8001512:	2b20      	cmp	r3, #32
 8001514:	d1cf      	bne.n	80014b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}

08001520 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800152c:	e055      	b.n	80015da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	0018      	movs	r0, r3
 8001536:	f000 f85f 	bl	80015f8 <I2C_IsAcknowledgeFailed>
 800153a:	1e03      	subs	r3, r0, #0
 800153c:	d001      	beq.n	8001542 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e053      	b.n	80015ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2220      	movs	r2, #32
 800154a:	4013      	ands	r3, r2
 800154c:	2b20      	cmp	r3, #32
 800154e:	d129      	bne.n	80015a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2204      	movs	r2, #4
 8001558:	4013      	ands	r3, r2
 800155a:	2b04      	cmp	r3, #4
 800155c:	d105      	bne.n	800156a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e03f      	b.n	80015ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2220      	movs	r2, #32
 8001570:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	491d      	ldr	r1, [pc, #116]	; (80015f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800157e:	400a      	ands	r2, r1
 8001580:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2241      	movs	r2, #65	; 0x41
 800158c:	2120      	movs	r1, #32
 800158e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2242      	movs	r2, #66	; 0x42
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2240      	movs	r2, #64	; 0x40
 800159c:	2100      	movs	r1, #0
 800159e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e022      	b.n	80015ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a4:	f7ff f97a 	bl	800089c <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d302      	bcc.n	80015ba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10f      	bne.n	80015da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	2220      	movs	r2, #32
 80015c0:	431a      	orrs	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2241      	movs	r2, #65	; 0x41
 80015ca:	2120      	movs	r1, #32
 80015cc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2240      	movs	r2, #64	; 0x40
 80015d2:	2100      	movs	r1, #0
 80015d4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e007      	b.n	80015ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	2204      	movs	r2, #4
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d1a2      	bne.n	800152e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	0018      	movs	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	fe00e800 	.word	0xfe00e800

080015f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2210      	movs	r2, #16
 800160c:	4013      	ands	r3, r2
 800160e:	2b10      	cmp	r3, #16
 8001610:	d164      	bne.n	80016dc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	049b      	lsls	r3, r3, #18
 800161c:	401a      	ands	r2, r3
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	049b      	lsls	r3, r3, #18
 8001622:	429a      	cmp	r2, r3
 8001624:	d02b      	beq.n	800167e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	01c9      	lsls	r1, r1, #7
 8001634:	430a      	orrs	r2, r1
 8001636:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001638:	e021      	b.n	800167e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	3301      	adds	r3, #1
 800163e:	d01e      	beq.n	800167e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001640:	f7ff f92c 	bl	800089c <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	429a      	cmp	r2, r3
 800164e:	d302      	bcc.n	8001656 <I2C_IsAcknowledgeFailed+0x5e>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d113      	bne.n	800167e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	2220      	movs	r2, #32
 800165c:	431a      	orrs	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2241      	movs	r2, #65	; 0x41
 8001666:	2120      	movs	r1, #32
 8001668:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2242      	movs	r2, #66	; 0x42
 800166e:	2100      	movs	r1, #0
 8001670:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2240      	movs	r2, #64	; 0x40
 8001676:	2100      	movs	r1, #0
 8001678:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e02f      	b.n	80016de <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2220      	movs	r2, #32
 8001686:	4013      	ands	r3, r2
 8001688:	2b20      	cmp	r3, #32
 800168a:	d1d6      	bne.n	800163a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2210      	movs	r2, #16
 8001692:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2220      	movs	r2, #32
 800169a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	0018      	movs	r0, r3
 80016a0:	f7ff fe62 	bl	8001368 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	490e      	ldr	r1, [pc, #56]	; (80016e8 <I2C_IsAcknowledgeFailed+0xf0>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	2204      	movs	r2, #4
 80016ba:	431a      	orrs	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2241      	movs	r2, #65	; 0x41
 80016c4:	2120      	movs	r1, #32
 80016c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2242      	movs	r2, #66	; 0x42
 80016cc:	2100      	movs	r1, #0
 80016ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2240      	movs	r2, #64	; 0x40
 80016d4:	2100      	movs	r1, #0
 80016d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b004      	add	sp, #16
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	fe00e800 	.word	0xfe00e800

080016ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	0008      	movs	r0, r1
 80016f6:	0011      	movs	r1, r2
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	240a      	movs	r4, #10
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	1c02      	adds	r2, r0, #0
 8001700:	801a      	strh	r2, [r3, #0]
 8001702:	2009      	movs	r0, #9
 8001704:	183b      	adds	r3, r7, r0
 8001706:	1c0a      	adds	r2, r1, #0
 8001708:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	6a3a      	ldr	r2, [r7, #32]
 8001712:	0d51      	lsrs	r1, r2, #21
 8001714:	2280      	movs	r2, #128	; 0x80
 8001716:	00d2      	lsls	r2, r2, #3
 8001718:	400a      	ands	r2, r1
 800171a:	490e      	ldr	r1, [pc, #56]	; (8001754 <I2C_TransferConfig+0x68>)
 800171c:	430a      	orrs	r2, r1
 800171e:	43d2      	mvns	r2, r2
 8001720:	401a      	ands	r2, r3
 8001722:	0011      	movs	r1, r2
 8001724:	193b      	adds	r3, r7, r4
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	059b      	lsls	r3, r3, #22
 800172a:	0d9a      	lsrs	r2, r3, #22
 800172c:	183b      	adds	r3, r7, r0
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	0418      	lsls	r0, r3, #16
 8001732:	23ff      	movs	r3, #255	; 0xff
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	4003      	ands	r3, r0
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	431a      	orrs	r2, r3
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	431a      	orrs	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b005      	add	sp, #20
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	03ff63ff 	.word	0x03ff63ff

08001758 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2241      	movs	r2, #65	; 0x41
 8001766:	5c9b      	ldrb	r3, [r3, r2]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b20      	cmp	r3, #32
 800176c:	d138      	bne.n	80017e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2240      	movs	r2, #64	; 0x40
 8001772:	5c9b      	ldrb	r3, [r3, r2]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001778:	2302      	movs	r3, #2
 800177a:	e032      	b.n	80017e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	2101      	movs	r1, #1
 8001782:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2241      	movs	r2, #65	; 0x41
 8001788:	2124      	movs	r1, #36	; 0x24
 800178a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2101      	movs	r1, #1
 8001798:	438a      	bics	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4911      	ldr	r1, [pc, #68]	; (80017ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2101      	movs	r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2241      	movs	r2, #65	; 0x41
 80017d0:	2120      	movs	r1, #32
 80017d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2240      	movs	r2, #64	; 0x40
 80017d8:	2100      	movs	r1, #0
 80017da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e000      	b.n	80017e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017e0:	2302      	movs	r3, #2
  }
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b002      	add	sp, #8
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	ffffefff 	.word	0xffffefff

080017f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2241      	movs	r2, #65	; 0x41
 80017fe:	5c9b      	ldrb	r3, [r3, r2]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b20      	cmp	r3, #32
 8001804:	d139      	bne.n	800187a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2240      	movs	r2, #64	; 0x40
 800180a:	5c9b      	ldrb	r3, [r3, r2]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001810:	2302      	movs	r3, #2
 8001812:	e033      	b.n	800187c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	2101      	movs	r1, #1
 800181a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2241      	movs	r2, #65	; 0x41
 8001820:	2124      	movs	r1, #36	; 0x24
 8001822:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2101      	movs	r1, #1
 8001830:	438a      	bics	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a11      	ldr	r2, [pc, #68]	; (8001884 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001840:	4013      	ands	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2241      	movs	r2, #65	; 0x41
 800186a:	2120      	movs	r1, #32
 800186c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2240      	movs	r2, #64	; 0x40
 8001872:	2100      	movs	r1, #0
 8001874:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800187a:	2302      	movs	r3, #2
  }
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}
 8001884:	fffff0ff 	.word	0xfffff0ff

08001888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e301      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	d100      	bne.n	80018a6 <HAL_RCC_OscConfig+0x1e>
 80018a4:	e08d      	b.n	80019c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018a6:	4bc3      	ldr	r3, [pc, #780]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	220c      	movs	r2, #12
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d00e      	beq.n	80018d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b2:	4bc0      	ldr	r3, [pc, #768]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	220c      	movs	r2, #12
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d116      	bne.n	80018ec <HAL_RCC_OscConfig+0x64>
 80018be:	4bbd      	ldr	r3, [pc, #756]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	025b      	lsls	r3, r3, #9
 80018c6:	401a      	ands	r2, r3
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	025b      	lsls	r3, r3, #9
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d10d      	bne.n	80018ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	4bb8      	ldr	r3, [pc, #736]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	029b      	lsls	r3, r3, #10
 80018d8:	4013      	ands	r3, r2
 80018da:	d100      	bne.n	80018de <HAL_RCC_OscConfig+0x56>
 80018dc:	e070      	b.n	80019c0 <HAL_RCC_OscConfig+0x138>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d000      	beq.n	80018e8 <HAL_RCC_OscConfig+0x60>
 80018e6:	e06b      	b.n	80019c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e2d8      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x7c>
 80018f4:	4baf      	ldr	r3, [pc, #700]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4bae      	ldr	r3, [pc, #696]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0249      	lsls	r1, r1, #9
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e02f      	b.n	8001964 <HAL_RCC_OscConfig+0xdc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10c      	bne.n	8001926 <HAL_RCC_OscConfig+0x9e>
 800190c:	4ba9      	ldr	r3, [pc, #676]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4ba8      	ldr	r3, [pc, #672]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001912:	49a9      	ldr	r1, [pc, #676]	; (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001914:	400a      	ands	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	4ba6      	ldr	r3, [pc, #664]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4ba5      	ldr	r3, [pc, #660]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 800191e:	49a7      	ldr	r1, [pc, #668]	; (8001bbc <HAL_RCC_OscConfig+0x334>)
 8001920:	400a      	ands	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e01e      	b.n	8001964 <HAL_RCC_OscConfig+0xdc>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d10e      	bne.n	800194c <HAL_RCC_OscConfig+0xc4>
 800192e:	4ba1      	ldr	r3, [pc, #644]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4ba0      	ldr	r3, [pc, #640]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	02c9      	lsls	r1, r1, #11
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	4b9d      	ldr	r3, [pc, #628]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b9c      	ldr	r3, [pc, #624]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	0249      	lsls	r1, r1, #9
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0xdc>
 800194c:	4b99      	ldr	r3, [pc, #612]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b98      	ldr	r3, [pc, #608]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001952:	4999      	ldr	r1, [pc, #612]	; (8001bb8 <HAL_RCC_OscConfig+0x330>)
 8001954:	400a      	ands	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	4b96      	ldr	r3, [pc, #600]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b95      	ldr	r3, [pc, #596]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 800195e:	4997      	ldr	r1, [pc, #604]	; (8001bbc <HAL_RCC_OscConfig+0x334>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d014      	beq.n	8001996 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7fe ff96 	bl	800089c <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001976:	f7fe ff91 	bl	800089c <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b64      	cmp	r3, #100	; 0x64
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e28a      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001988:	4b8a      	ldr	r3, [pc, #552]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	029b      	lsls	r3, r3, #10
 8001990:	4013      	ands	r3, r2
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0xee>
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7fe ff81 	bl	800089c <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7fe ff7c 	bl	800089c <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e275      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b80      	ldr	r3, [pc, #512]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x118>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2202      	movs	r2, #2
 80019c8:	4013      	ands	r3, r2
 80019ca:	d100      	bne.n	80019ce <HAL_RCC_OscConfig+0x146>
 80019cc:	e069      	b.n	8001aa2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019ce:	4b79      	ldr	r3, [pc, #484]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	220c      	movs	r2, #12
 80019d4:	4013      	ands	r3, r2
 80019d6:	d00b      	beq.n	80019f0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019d8:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	220c      	movs	r2, #12
 80019de:	4013      	ands	r3, r2
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d11c      	bne.n	8001a1e <HAL_RCC_OscConfig+0x196>
 80019e4:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	025b      	lsls	r3, r3, #9
 80019ec:	4013      	ands	r3, r2
 80019ee:	d116      	bne.n	8001a1e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f0:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2202      	movs	r2, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d005      	beq.n	8001a06 <HAL_RCC_OscConfig+0x17e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e24b      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	22f8      	movs	r2, #248	; 0xf8
 8001a0c:	4393      	bics	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	00da      	lsls	r2, r3, #3
 8001a16:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1c:	e041      	b.n	8001aa2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d024      	beq.n	8001a70 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b62      	ldr	r3, [pc, #392]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7fe ff33 	bl	800089c <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7fe ff2e 	bl	800089c <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e227      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2202      	movs	r2, #2
 8001a54:	4013      	ands	r3, r2
 8001a56:	d0f1      	beq.n	8001a3c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	22f8      	movs	r2, #248	; 0xf8
 8001a5e:	4393      	bics	r3, r2
 8001a60:	0019      	movs	r1, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00da      	lsls	r2, r3, #3
 8001a68:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e018      	b.n	8001aa2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b4f      	ldr	r3, [pc, #316]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	438a      	bics	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7fe ff0e 	bl	800089c <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a86:	f7fe ff09 	bl	800089c <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e202      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a98:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d1f1      	bne.n	8001a86 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d036      	beq.n	8001b1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d019      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab8:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	2101      	movs	r1, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7fe feec 	bl	800089c <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aca:	f7fe fee7 	bl	800089c <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1e0      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d0f1      	beq.n	8001aca <HAL_RCC_OscConfig+0x242>
 8001ae6:	e018      	b.n	8001b1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae8:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aec:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	438a      	bics	r2, r1
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7fe fed2 	bl	800089c <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afe:	f7fe fecd 	bl	800089c <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1c6      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d1f1      	bne.n	8001afe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	4013      	ands	r3, r2
 8001b22:	d100      	bne.n	8001b26 <HAL_RCC_OscConfig+0x29e>
 8001b24:	e0b4      	b.n	8001c90 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b26:	201f      	movs	r0, #31
 8001b28:	183b      	adds	r3, r7, r0
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	055b      	lsls	r3, r3, #21
 8001b36:	4013      	ands	r3, r2
 8001b38:	d110      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	69da      	ldr	r2, [r3, #28]
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	0549      	lsls	r1, r1, #21
 8001b44:	430a      	orrs	r2, r1
 8001b46:	61da      	str	r2, [r3, #28]
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	055b      	lsls	r3, r3, #21
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b56:	183b      	adds	r3, r7, r0
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_RCC_OscConfig+0x338>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	d11a      	bne.n	8001b9e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_RCC_OscConfig+0x338>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_RCC_OscConfig+0x338>)
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	0049      	lsls	r1, r1, #1
 8001b72:	430a      	orrs	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b76:	f7fe fe91 	bl	800089c <HAL_GetTick>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b80:	f7fe fe8c 	bl	800089c <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e185      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x338>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x33c>
 8001ba6:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	621a      	str	r2, [r3, #32]
 8001bb2:	e035      	b.n	8001c20 <HAL_RCC_OscConfig+0x398>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	fffeffff 	.word	0xfffeffff
 8001bbc:	fffbffff 	.word	0xfffbffff
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10c      	bne.n	8001be6 <HAL_RCC_OscConfig+0x35e>
 8001bcc:	4bb6      	ldr	r3, [pc, #728]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001bce:	6a1a      	ldr	r2, [r3, #32]
 8001bd0:	4bb5      	ldr	r3, [pc, #724]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	438a      	bics	r2, r1
 8001bd6:	621a      	str	r2, [r3, #32]
 8001bd8:	4bb3      	ldr	r3, [pc, #716]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001bda:	6a1a      	ldr	r2, [r3, #32]
 8001bdc:	4bb2      	ldr	r3, [pc, #712]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001bde:	2104      	movs	r1, #4
 8001be0:	438a      	bics	r2, r1
 8001be2:	621a      	str	r2, [r3, #32]
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0x398>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x380>
 8001bee:	4bae      	ldr	r3, [pc, #696]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001bf0:	6a1a      	ldr	r2, [r3, #32]
 8001bf2:	4bad      	ldr	r3, [pc, #692]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	621a      	str	r2, [r3, #32]
 8001bfa:	4bab      	ldr	r3, [pc, #684]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001bfc:	6a1a      	ldr	r2, [r3, #32]
 8001bfe:	4baa      	ldr	r3, [pc, #680]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	621a      	str	r2, [r3, #32]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0x398>
 8001c08:	4ba7      	ldr	r3, [pc, #668]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001c0a:	6a1a      	ldr	r2, [r3, #32]
 8001c0c:	4ba6      	ldr	r3, [pc, #664]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001c0e:	2101      	movs	r1, #1
 8001c10:	438a      	bics	r2, r1
 8001c12:	621a      	str	r2, [r3, #32]
 8001c14:	4ba4      	ldr	r3, [pc, #656]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001c16:	6a1a      	ldr	r2, [r3, #32]
 8001c18:	4ba3      	ldr	r3, [pc, #652]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d014      	beq.n	8001c52 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7fe fe38 	bl	800089c <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7fe fe33 	bl	800089c <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	4a9b      	ldr	r2, [pc, #620]	; (8001eac <HAL_RCC_OscConfig+0x624>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e12b      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c46:	4b98      	ldr	r3, [pc, #608]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x3aa>
 8001c50:	e013      	b.n	8001c7a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7fe fe23 	bl	800089c <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5a:	e009      	b.n	8001c70 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7fe fe1e 	bl	800089c <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	4a91      	ldr	r2, [pc, #580]	; (8001eac <HAL_RCC_OscConfig+0x624>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e116      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c70:	4b8d      	ldr	r3, [pc, #564]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	2202      	movs	r2, #2
 8001c76:	4013      	ands	r3, r2
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c7a:	231f      	movs	r3, #31
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001c86:	69da      	ldr	r2, [r3, #28]
 8001c88:	4b87      	ldr	r3, [pc, #540]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001c8a:	4989      	ldr	r1, [pc, #548]	; (8001eb0 <HAL_RCC_OscConfig+0x628>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2210      	movs	r2, #16
 8001c96:	4013      	ands	r3, r2
 8001c98:	d063      	beq.n	8001d62 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d12a      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ca2:	4b81      	ldr	r3, [pc, #516]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca6:	4b80      	ldr	r3, [pc, #512]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001ca8:	2104      	movs	r1, #4
 8001caa:	430a      	orrs	r2, r1
 8001cac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001cae:	4b7e      	ldr	r3, [pc, #504]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb2:	4b7d      	ldr	r3, [pc, #500]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7fe fdef 	bl	800089c <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cc4:	f7fe fdea 	bl	800089c <HAL_GetTick>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0e3      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cd6:	4b74      	ldr	r3, [pc, #464]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	2202      	movs	r2, #2
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d0f1      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ce0:	4b71      	ldr	r3, [pc, #452]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	22f8      	movs	r2, #248	; 0xf8
 8001ce6:	4393      	bics	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	00da      	lsls	r2, r3, #3
 8001cf0:	4b6d      	ldr	r3, [pc, #436]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf6:	e034      	b.n	8001d62 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	3305      	adds	r3, #5
 8001cfe:	d111      	bne.n	8001d24 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d00:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d04:	4b68      	ldr	r3, [pc, #416]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d06:	2104      	movs	r1, #4
 8001d08:	438a      	bics	r2, r1
 8001d0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d0c:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d10:	22f8      	movs	r2, #248	; 0xf8
 8001d12:	4393      	bics	r3, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	00da      	lsls	r2, r3, #3
 8001d1c:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34
 8001d22:	e01e      	b.n	8001d62 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d24:	4b60      	ldr	r3, [pc, #384]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d28:	4b5f      	ldr	r3, [pc, #380]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d30:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d34:	4b5c      	ldr	r3, [pc, #368]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	438a      	bics	r2, r1
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7fe fdae 	bl	800089c <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d46:	f7fe fda9 	bl	800089c <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0a2      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d58:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d1f1      	bne.n	8001d46 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d100      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4e4>
 8001d6a:	e097      	b.n	8001e9c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	220c      	movs	r2, #12
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d100      	bne.n	8001d7a <HAL_RCC_OscConfig+0x4f2>
 8001d78:	e06b      	b.n	8001e52 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d14c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001d88:	494a      	ldr	r1, [pc, #296]	; (8001eb4 <HAL_RCC_OscConfig+0x62c>)
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7fe fd85 	bl	800089c <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d98:	f7fe fd80 	bl	800089c <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e079      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	049b      	lsls	r3, r3, #18
 8001db2:	4013      	ands	r3, r2
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	220f      	movs	r2, #15
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a3a      	ldr	r2, [pc, #232]	; (8001eb8 <HAL_RCC_OscConfig+0x630>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	0449      	lsls	r1, r1, #17
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fd53 	bl	800089c <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe fd4e 	bl	800089c <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e047      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	049b      	lsls	r3, r3, #18
 8001e16:	4013      	ands	r3, r2
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x574>
 8001e1a:	e03f      	b.n	8001e9c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001e22:	4924      	ldr	r1, [pc, #144]	; (8001eb4 <HAL_RCC_OscConfig+0x62c>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7fe fd38 	bl	800089c <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e32:	f7fe fd33 	bl	800089c <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e02c      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	049b      	lsls	r3, r3, #18
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5aa>
 8001e50:	e024      	b.n	8001e9c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e01f      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_RCC_OscConfig+0x620>)
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	025b      	lsls	r3, r3, #9
 8001e70:	401a      	ands	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d10e      	bne.n	8001e98 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	401a      	ands	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	23f0      	movs	r3, #240	; 0xf0
 8001e8c:	039b      	lsls	r3, r3, #14
 8001e8e:	401a      	ands	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b008      	add	sp, #32
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	00001388 	.word	0x00001388
 8001eb0:	efffffff 	.word	0xefffffff
 8001eb4:	feffffff 	.word	0xfeffffff
 8001eb8:	ffc2ffff 	.word	0xffc2ffff

08001ebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b3      	b.n	8002038 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <HAL_RCC_ClockConfig+0x184>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d911      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b58      	ldr	r3, [pc, #352]	; (8002040 <HAL_RCC_ClockConfig+0x184>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4393      	bics	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	4b55      	ldr	r3, [pc, #340]	; (8002040 <HAL_RCC_ClockConfig+0x184>)
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_ClockConfig+0x184>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e09a      	b.n	8002038 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2202      	movs	r2, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d015      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2204      	movs	r2, #4
 8001f12:	4013      	ands	r3, r2
 8001f14:	d006      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f16:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8001f1c:	21e0      	movs	r1, #224	; 0xe0
 8001f1e:	00c9      	lsls	r1, r1, #3
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	22f0      	movs	r2, #240	; 0xf0
 8001f2a:	4393      	bics	r3, r2
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8001f34:	430a      	orrs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d040      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	029b      	lsls	r3, r3, #10
 8001f52:	4013      	ands	r3, r2
 8001f54:	d114      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e06e      	b.n	8002038 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	049b      	lsls	r3, r3, #18
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d108      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e062      	b.n	8002038 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e05b      	b.n	8002038 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f80:	4b30      	ldr	r3, [pc, #192]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2203      	movs	r2, #3
 8001f86:	4393      	bics	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fc82 	bl	800089c <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9e:	f7fe fc7d 	bl	800089c <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <HAL_RCC_ClockConfig+0x18c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e042      	b.n	8002038 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	401a      	ands	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1ec      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_RCC_ClockConfig+0x184>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d211      	bcs.n	8001ff6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_ClockConfig+0x184>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4393      	bics	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	4b18      	ldr	r3, [pc, #96]	; (8002040 <HAL_RCC_ClockConfig+0x184>)
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe4:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x184>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e020      	b.n	8002038 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d009      	beq.n	8002014 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_RCC_ClockConfig+0x190>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002014:	f000 f820 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002018:	0001      	movs	r1, r0
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x188>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	220f      	movs	r2, #15
 8002022:	4013      	ands	r3, r2
 8002024:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x194>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	000a      	movs	r2, r1
 800202a:	40da      	lsrs	r2, r3
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x198>)
 800202e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002030:	2000      	movs	r0, #0
 8002032:	f7fe fbed 	bl	8000810 <HAL_InitTick>
  
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	b004      	add	sp, #16
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40022000 	.word	0x40022000
 8002044:	40021000 	.word	0x40021000
 8002048:	00001388 	.word	0x00001388
 800204c:	fffff8ff 	.word	0xfffff8ff
 8002050:	08002c40 	.word	0x08002c40
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b08f      	sub	sp, #60	; 0x3c
 800205c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800205e:	2314      	movs	r3, #20
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	4a2b      	ldr	r2, [pc, #172]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002064:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002066:	c313      	stmia	r3!, {r0, r1, r4}
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4a29      	ldr	r2, [pc, #164]	; (8002114 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002070:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002072:	c313      	stmia	r3!, {r0, r1, r4}
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002080:	2300      	movs	r3, #0
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_RCC_GetSysClockFreq+0xc0>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002094:	220c      	movs	r2, #12
 8002096:	4013      	ands	r3, r2
 8002098:	2b04      	cmp	r3, #4
 800209a:	d002      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x4a>
 800209c:	2b08      	cmp	r3, #8
 800209e:	d003      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x50>
 80020a0:	e02d      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020a6:	e02d      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020aa:	0c9b      	lsrs	r3, r3, #18
 80020ac:	220f      	movs	r2, #15
 80020ae:	4013      	ands	r3, r2
 80020b0:	2214      	movs	r2, #20
 80020b2:	18ba      	adds	r2, r7, r2
 80020b4:	5cd3      	ldrb	r3, [r2, r3]
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	220f      	movs	r2, #15
 80020be:	4013      	ands	r3, r2
 80020c0:	1d3a      	adds	r2, r7, #4
 80020c2:	5cd3      	ldrb	r3, [r2, r3]
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	025b      	lsls	r3, r3, #9
 80020cc:	4013      	ands	r3, r2
 80020ce:	d009      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020d2:	4812      	ldr	r0, [pc, #72]	; (800211c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020d4:	f7fe f818 	bl	8000108 <__udivsi3>
 80020d8:	0003      	movs	r3, r0
 80020da:	001a      	movs	r2, r3
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	4353      	muls	r3, r2
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
 80020e2:	e009      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e6:	000a      	movs	r2, r1
 80020e8:	0152      	lsls	r2, r2, #5
 80020ea:	1a52      	subs	r2, r2, r1
 80020ec:	0193      	lsls	r3, r2, #6
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	185b      	adds	r3, r3, r1
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80020f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020fc:	e002      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002102:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b00f      	add	sp, #60	; 0x3c
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	08002c20 	.word	0x08002c20
 8002114:	08002c30 	.word	0x08002c30
 8002118:	40021000 	.word	0x40021000
 800211c:	007a1200 	.word	0x007a1200

08002120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	4013      	ands	r3, r2
 800213a:	d100      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800213c:	e08e      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800213e:	2017      	movs	r0, #23
 8002140:	183b      	adds	r3, r7, r0
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	055b      	lsls	r3, r3, #21
 800214e:	4013      	ands	r3, r2
 8002150:	d110      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002158:	2180      	movs	r1, #128	; 0x80
 800215a:	0549      	lsls	r1, r1, #21
 800215c:	430a      	orrs	r2, r1
 800215e:	61da      	str	r2, [r3, #28]
 8002160:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002162:	69da      	ldr	r2, [r3, #28]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	055b      	lsls	r3, r3, #21
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216e:	183b      	adds	r3, r7, r0
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	4b54      	ldr	r3, [pc, #336]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4013      	ands	r3, r2
 800217e:	d11a      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002180:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	0049      	lsls	r1, r1, #1
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7fe fb85 	bl	800089c <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	e008      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7fe fb80 	bl	800089c <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e087      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021b6:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	23c0      	movs	r3, #192	; 0xc0
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d034      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	23c0      	movs	r3, #192	; 0xc0
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4013      	ands	r3, r2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d02c      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021d8:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	0249      	lsls	r1, r1, #9
 80021ec:	430a      	orrs	r2, r1
 80021ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021f2:	6a1a      	ldr	r2, [r3, #32]
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021f6:	4936      	ldr	r1, [pc, #216]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	4013      	ands	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fb47 	bl	800089c <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002212:	e009      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7fe fb42 	bl	800089c <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	4a2d      	ldr	r2, [pc, #180]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e048      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002228:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d0f0      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a25      	ldr	r2, [pc, #148]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002238:	4013      	ands	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002242:	430a      	orrs	r2, r1
 8002244:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002246:	2317      	movs	r3, #23
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002252:	69da      	ldr	r2, [r3, #28]
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002256:	4920      	ldr	r1, [pc, #128]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002258:	400a      	ands	r2, r1
 800225a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	4013      	ands	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	2203      	movs	r2, #3
 800226c:	4393      	bics	r3, r2
 800226e:	0019      	movs	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002276:	430a      	orrs	r2, r1
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2220      	movs	r2, #32
 8002280:	4013      	ands	r3, r2
 8002282:	d009      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	2210      	movs	r2, #16
 800228a:	4393      	bics	r3, r2
 800228c:	0019      	movs	r1, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002294:	430a      	orrs	r2, r1
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4013      	ands	r3, r2
 80022a2:	d009      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	2240      	movs	r2, #64	; 0x40
 80022aa:	4393      	bics	r3, r2
 80022ac:	0019      	movs	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022b4:	430a      	orrs	r2, r1
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40007000 	.word	0x40007000
 80022cc:	fffffcff 	.word	0xfffffcff
 80022d0:	fffeffff 	.word	0xfffeffff
 80022d4:	00001388 	.word	0x00001388
 80022d8:	efffffff 	.word	0xefffffff

080022dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e042      	b.n	8002374 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	223d      	movs	r2, #61	; 0x3d
 80022f2:	5c9b      	ldrb	r3, [r3, r2]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	223c      	movs	r2, #60	; 0x3c
 80022fe:	2100      	movs	r1, #0
 8002300:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f7fe f9cf 	bl	80006a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	223d      	movs	r2, #61	; 0x3d
 800230e:	2102      	movs	r1, #2
 8002310:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	0019      	movs	r1, r3
 800231c:	0010      	movs	r0, r2
 800231e:	f000 fabf 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2246      	movs	r2, #70	; 0x46
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	223e      	movs	r2, #62	; 0x3e
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223f      	movs	r2, #63	; 0x3f
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2241      	movs	r2, #65	; 0x41
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2242      	movs	r2, #66	; 0x42
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2243      	movs	r2, #67	; 0x43
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2244      	movs	r2, #68	; 0x44
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2245      	movs	r2, #69	; 0x45
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223d      	movs	r2, #61	; 0x3d
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	223d      	movs	r2, #61	; 0x3d
 8002388:	5c9b      	ldrb	r3, [r3, r2]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d001      	beq.n	8002394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e03b      	b.n	800240c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	223d      	movs	r2, #61	; 0x3d
 8002398:	2102      	movs	r1, #2
 800239a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a18      	ldr	r2, [pc, #96]	; (8002414 <HAL_TIM_Base_Start_IT+0x98>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00f      	beq.n	80023d6 <HAL_TIM_Base_Start_IT+0x5a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	429a      	cmp	r2, r3
 80023c0:	d009      	beq.n	80023d6 <HAL_TIM_Base_Start_IT+0x5a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a14      	ldr	r2, [pc, #80]	; (8002418 <HAL_TIM_Base_Start_IT+0x9c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d004      	beq.n	80023d6 <HAL_TIM_Base_Start_IT+0x5a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a12      	ldr	r2, [pc, #72]	; (800241c <HAL_TIM_Base_Start_IT+0xa0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d111      	bne.n	80023fa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2207      	movs	r2, #7
 80023de:	4013      	ands	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b06      	cmp	r3, #6
 80023e6:	d010      	beq.n	800240a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2101      	movs	r1, #1
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f8:	e007      	b.n	800240a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40000400 	.word	0x40000400
 800241c:	40014000 	.word	0x40014000

08002420 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <HAL_TIM_Base_Stop_IT+0x54>)
 8002440:	4013      	ands	r3, r2
 8002442:	d10d      	bne.n	8002460 <HAL_TIM_Base_Stop_IT+0x40>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <HAL_TIM_Base_Stop_IT+0x58>)
 800244c:	4013      	ands	r3, r2
 800244e:	d107      	bne.n	8002460 <HAL_TIM_Base_Stop_IT+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2101      	movs	r1, #1
 800245c:	438a      	bics	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	223d      	movs	r2, #61	; 0x3d
 8002464:	2101      	movs	r1, #1
 8002466:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	00001111 	.word	0x00001111
 8002478:	00000444 	.word	0x00000444

0800247c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2202      	movs	r2, #2
 800248c:	4013      	ands	r3, r2
 800248e:	2b02      	cmp	r3, #2
 8002490:	d124      	bne.n	80024dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	2b02      	cmp	r3, #2
 800249e:	d11d      	bne.n	80024dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2203      	movs	r2, #3
 80024a6:	4252      	negs	r2, r2
 80024a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2203      	movs	r2, #3
 80024b8:	4013      	ands	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 f9d6 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e007      	b.n	80024d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 f9c9 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 f9d5 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2204      	movs	r2, #4
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d125      	bne.n	8002536 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2204      	movs	r2, #4
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d11e      	bne.n	8002536 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2205      	movs	r2, #5
 80024fe:	4252      	negs	r2, r2
 8002500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	23c0      	movs	r3, #192	; 0xc0
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4013      	ands	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 f9a9 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 800251e:	e007      	b.n	8002530 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	0018      	movs	r0, r3
 8002524:	f000 f99c 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	0018      	movs	r0, r3
 800252c:	f000 f9a8 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2208      	movs	r2, #8
 800253e:	4013      	ands	r3, r2
 8002540:	2b08      	cmp	r3, #8
 8002542:	d124      	bne.n	800258e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2208      	movs	r2, #8
 800254c:	4013      	ands	r3, r2
 800254e:	2b08      	cmp	r3, #8
 8002550:	d11d      	bne.n	800258e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2209      	movs	r2, #9
 8002558:	4252      	negs	r2, r2
 800255a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2204      	movs	r2, #4
 8002560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2203      	movs	r2, #3
 800256a:	4013      	ands	r3, r2
 800256c:	d004      	beq.n	8002578 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	0018      	movs	r0, r3
 8002572:	f000 f97d 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 8002576:	e007      	b.n	8002588 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	0018      	movs	r0, r3
 800257c:	f000 f970 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	0018      	movs	r0, r3
 8002584:	f000 f97c 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2210      	movs	r2, #16
 8002596:	4013      	ands	r3, r2
 8002598:	2b10      	cmp	r3, #16
 800259a:	d125      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2210      	movs	r2, #16
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d11e      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2211      	movs	r2, #17
 80025b0:	4252      	negs	r2, r2
 80025b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2208      	movs	r2, #8
 80025b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	23c0      	movs	r3, #192	; 0xc0
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4013      	ands	r3, r2
 80025c6:	d004      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 f950 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 80025d0:	e007      	b.n	80025e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 f943 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 f94f 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2201      	movs	r2, #1
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d10f      	bne.n	8002616 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	4013      	ands	r3, r2
 8002600:	2b01      	cmp	r3, #1
 8002602:	d108      	bne.n	8002616 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2202      	movs	r2, #2
 800260a:	4252      	negs	r2, r2
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	0018      	movs	r0, r3
 8002612:	f000 f91d 	bl	8002850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	4013      	ands	r3, r2
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d10f      	bne.n	8002644 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	4013      	ands	r3, r2
 800262e:	2b80      	cmp	r3, #128	; 0x80
 8002630:	d108      	bne.n	8002644 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2281      	movs	r2, #129	; 0x81
 8002638:	4252      	negs	r2, r2
 800263a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	0018      	movs	r0, r3
 8002640:	f000 faae 	bl	8002ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2240      	movs	r2, #64	; 0x40
 800264c:	4013      	ands	r3, r2
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d10f      	bne.n	8002672 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	4013      	ands	r3, r2
 800265c:	2b40      	cmp	r3, #64	; 0x40
 800265e:	d108      	bne.n	8002672 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2241      	movs	r2, #65	; 0x41
 8002666:	4252      	negs	r2, r2
 8002668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	0018      	movs	r0, r3
 800266e:	f000 f90f 	bl	8002890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2220      	movs	r2, #32
 800267a:	4013      	ands	r3, r2
 800267c:	2b20      	cmp	r3, #32
 800267e:	d10f      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	4013      	ands	r3, r2
 800268a:	2b20      	cmp	r3, #32
 800268c:	d108      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2221      	movs	r2, #33	; 0x21
 8002694:	4252      	negs	r2, r2
 8002696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	0018      	movs	r0, r3
 800269c:	f000 fa78 	bl	8002b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	230f      	movs	r3, #15
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	223c      	movs	r2, #60	; 0x3c
 80026be:	5c9b      	ldrb	r3, [r3, r2]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_TIM_ConfigClockSource+0x20>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0bc      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x19a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	223c      	movs	r2, #60	; 0x3c
 80026cc:	2101      	movs	r1, #1
 80026ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	223d      	movs	r2, #61	; 0x3d
 80026d4:	2102      	movs	r1, #2
 80026d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2277      	movs	r2, #119	; 0x77
 80026e4:	4393      	bics	r3, r2
 80026e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_TIM_ConfigClockSource+0x1a4>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	0192      	lsls	r2, r2, #6
 8002700:	4293      	cmp	r3, r2
 8002702:	d040      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0xde>
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	0192      	lsls	r2, r2, #6
 8002708:	4293      	cmp	r3, r2
 800270a:	d900      	bls.n	800270e <HAL_TIM_ConfigClockSource+0x66>
 800270c:	e088      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x178>
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	0152      	lsls	r2, r2, #5
 8002712:	4293      	cmp	r3, r2
 8002714:	d100      	bne.n	8002718 <HAL_TIM_ConfigClockSource+0x70>
 8002716:	e088      	b.n	800282a <HAL_TIM_ConfigClockSource+0x182>
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	0152      	lsls	r2, r2, #5
 800271c:	4293      	cmp	r3, r2
 800271e:	d900      	bls.n	8002722 <HAL_TIM_ConfigClockSource+0x7a>
 8002720:	e07e      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x178>
 8002722:	2b70      	cmp	r3, #112	; 0x70
 8002724:	d018      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0xb0>
 8002726:	d900      	bls.n	800272a <HAL_TIM_ConfigClockSource+0x82>
 8002728:	e07a      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x178>
 800272a:	2b60      	cmp	r3, #96	; 0x60
 800272c:	d04f      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x126>
 800272e:	d900      	bls.n	8002732 <HAL_TIM_ConfigClockSource+0x8a>
 8002730:	e076      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x178>
 8002732:	2b50      	cmp	r3, #80	; 0x50
 8002734:	d03b      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x106>
 8002736:	d900      	bls.n	800273a <HAL_TIM_ConfigClockSource+0x92>
 8002738:	e072      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x178>
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	d057      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x146>
 800273e:	d900      	bls.n	8002742 <HAL_TIM_ConfigClockSource+0x9a>
 8002740:	e06e      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x178>
 8002742:	2b30      	cmp	r3, #48	; 0x30
 8002744:	d063      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x166>
 8002746:	d86b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x178>
 8002748:	2b20      	cmp	r3, #32
 800274a:	d060      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x166>
 800274c:	d868      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x178>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d05d      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x166>
 8002752:	2b10      	cmp	r3, #16
 8002754:	d05b      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x166>
 8002756:	e063      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6899      	ldr	r1, [r3, #8]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f000 f994 	bl	8002a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2277      	movs	r2, #119	; 0x77
 8002778:	4313      	orrs	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]
      break;
 8002784:	e052      	b.n	800282c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6899      	ldr	r1, [r3, #8]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f000 f97d 	bl	8002a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	01c9      	lsls	r1, r1, #7
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
      break;
 80027ac:	e03e      	b.n	800282c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	001a      	movs	r2, r3
 80027bc:	f000 f8f0 	bl	80029a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2150      	movs	r1, #80	; 0x50
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 f94a 	bl	8002a60 <TIM_ITRx_SetConfig>
      break;
 80027cc:	e02e      	b.n	800282c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	001a      	movs	r2, r3
 80027dc:	f000 f90e 	bl	80029fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2160      	movs	r1, #96	; 0x60
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 f93a 	bl	8002a60 <TIM_ITRx_SetConfig>
      break;
 80027ec:	e01e      	b.n	800282c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	001a      	movs	r2, r3
 80027fc:	f000 f8d0 	bl	80029a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2140      	movs	r1, #64	; 0x40
 8002806:	0018      	movs	r0, r3
 8002808:	f000 f92a 	bl	8002a60 <TIM_ITRx_SetConfig>
      break;
 800280c:	e00e      	b.n	800282c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0019      	movs	r1, r3
 8002818:	0010      	movs	r0, r2
 800281a:	f000 f921 	bl	8002a60 <TIM_ITRx_SetConfig>
      break;
 800281e:	e005      	b.n	800282c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002820:	230f      	movs	r3, #15
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
      break;
 8002828:	e000      	b.n	800282c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800282a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	223d      	movs	r2, #61	; 0x3d
 8002830:	2101      	movs	r1, #1
 8002832:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	223c      	movs	r2, #60	; 0x3c
 8002838:	2100      	movs	r1, #0
 800283a:	5499      	strb	r1, [r3, r2]

  return status;
 800283c:	230f      	movs	r3, #15
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	781b      	ldrb	r3, [r3, #0]
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b004      	add	sp, #16
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	ffff00ff 	.word	0xffff00ff

08002850 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b002      	add	sp, #8
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}

080028a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a34      	ldr	r2, [pc, #208]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d008      	beq.n	80028ca <TIM_Base_SetConfig+0x2a>
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	05db      	lsls	r3, r3, #23
 80028be:	429a      	cmp	r2, r3
 80028c0:	d003      	beq.n	80028ca <TIM_Base_SetConfig+0x2a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a30      	ldr	r2, [pc, #192]	; (8002988 <TIM_Base_SetConfig+0xe8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d108      	bne.n	80028dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2270      	movs	r2, #112	; 0x70
 80028ce:	4393      	bics	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a29      	ldr	r2, [pc, #164]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	05db      	lsls	r3, r3, #23
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d013      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a25      	ldr	r2, [pc, #148]	; (8002988 <TIM_Base_SetConfig+0xe8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00f      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <TIM_Base_SetConfig+0xec>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00b      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a23      	ldr	r2, [pc, #140]	; (8002990 <TIM_Base_SetConfig+0xf0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <TIM_Base_SetConfig+0xf4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0x76>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a21      	ldr	r2, [pc, #132]	; (8002998 <TIM_Base_SetConfig+0xf8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <TIM_Base_SetConfig+0xfc>)
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	4393      	bics	r3, r2
 800292e:	001a      	movs	r2, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0xce>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <TIM_Base_SetConfig+0xf0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0xce>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <TIM_Base_SetConfig+0xf4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0xce>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <TIM_Base_SetConfig+0xf8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d103      	bne.n	8002976 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	615a      	str	r2, [r3, #20]
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b004      	add	sp, #16
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40000400 	.word	0x40000400
 800298c:	40002000 	.word	0x40002000
 8002990:	40014000 	.word	0x40014000
 8002994:	40014400 	.word	0x40014400
 8002998:	40014800 	.word	0x40014800
 800299c:	fffffcff 	.word	0xfffffcff

080029a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	2201      	movs	r2, #1
 80029b8:	4393      	bics	r3, r2
 80029ba:	001a      	movs	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	22f0      	movs	r2, #240	; 0xf0
 80029ca:	4393      	bics	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	220a      	movs	r2, #10
 80029dc:	4393      	bics	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	621a      	str	r2, [r3, #32]
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b006      	add	sp, #24
 80029fa:	bd80      	pop	{r7, pc}

080029fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	4393      	bics	r3, r2
 8002a10:	001a      	movs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <TIM_TI2_ConfigInputStage+0x60>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	031b      	lsls	r3, r3, #12
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	22a0      	movs	r2, #160	; 0xa0
 8002a38:	4393      	bics	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b006      	add	sp, #24
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	ffff0fff 	.word	0xffff0fff

08002a60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2270      	movs	r2, #112	; 0x70
 8002a74:	4393      	bics	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	2207      	movs	r2, #7
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	609a      	str	r2, [r3, #8]
}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <TIM_ETR_SetConfig+0x3c>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	021a      	lsls	r2, r3, #8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b006      	add	sp, #24
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	ffff00ff 	.word	0xffff00ff

08002ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	223c      	movs	r2, #60	; 0x3c
 8002ae2:	5c9b      	ldrb	r3, [r3, r2]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e047      	b.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	223c      	movs	r2, #60	; 0x3c
 8002af0:	2101      	movs	r1, #1
 8002af2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	223d      	movs	r2, #61	; 0x3d
 8002af8:	2102      	movs	r1, #2
 8002afa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2270      	movs	r2, #112	; 0x70
 8002b10:	4393      	bics	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a16      	ldr	r2, [pc, #88]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00f      	beq.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	05db      	lsls	r3, r3, #23
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d009      	beq.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d004      	beq.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d10c      	bne.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	4393      	bics	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	223d      	movs	r2, #61	; 0x3d
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	223c      	movs	r2, #60	; 0x3c
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b004      	add	sp, #16
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40014000 	.word	0x40014000

08002b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	2600      	movs	r6, #0
 8002bb4:	4d0c      	ldr	r5, [pc, #48]	; (8002be8 <__libc_init_array+0x38>)
 8002bb6:	4c0d      	ldr	r4, [pc, #52]	; (8002bec <__libc_init_array+0x3c>)
 8002bb8:	1b64      	subs	r4, r4, r5
 8002bba:	10a4      	asrs	r4, r4, #2
 8002bbc:	42a6      	cmp	r6, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	2600      	movs	r6, #0
 8002bc2:	f000 f821 	bl	8002c08 <_init>
 8002bc6:	4d0a      	ldr	r5, [pc, #40]	; (8002bf0 <__libc_init_array+0x40>)
 8002bc8:	4c0a      	ldr	r4, [pc, #40]	; (8002bf4 <__libc_init_array+0x44>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	42a6      	cmp	r6, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	00b3      	lsls	r3, r6, #2
 8002bd6:	58eb      	ldr	r3, [r5, r3]
 8002bd8:	4798      	blx	r3
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	00b3      	lsls	r3, r6, #2
 8002be0:	58eb      	ldr	r3, [r5, r3]
 8002be2:	4798      	blx	r3
 8002be4:	3601      	adds	r6, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	08002c50 	.word	0x08002c50
 8002bec:	08002c50 	.word	0x08002c50
 8002bf0:	08002c50 	.word	0x08002c50
 8002bf4:	08002c54 	.word	0x08002c54

08002bf8 <memset>:
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	1882      	adds	r2, r0, r2
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <memset+0xa>
 8002c00:	4770      	bx	lr
 8002c02:	7019      	strb	r1, [r3, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	e7f9      	b.n	8002bfc <memset+0x4>

08002c08 <_init>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr

08002c14 <_fini>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr
