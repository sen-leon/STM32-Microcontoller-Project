
LeonsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c28  08004c28  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004c28  08004c28  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c28  08004c28  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000014  08004c44  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08004c44  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c334  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd3  00000000  00000000  0002c370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011498  00000000  00000000  0002f850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e886  00000000  00000000  00040ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069d98  00000000  00000000  0004f56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9306  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d0c  00000000  00000000  000b9358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004be0 	.word	0x08004be0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004be0 	.word	0x08004be0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <initialize_Sensor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef initialize_Sensor(uint16_t Sensor_addr, uint16_t WHO_AM_I, uint16_t CTRL_REG, uint8_t CTRL_REG_input, uint8_t *Out)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af04      	add	r7, sp, #16
 8000226:	0005      	movs	r5, r0
 8000228:	000c      	movs	r4, r1
 800022a:	0010      	movs	r0, r2
 800022c:	0019      	movs	r1, r3
 800022e:	1dbb      	adds	r3, r7, #6
 8000230:	1c2a      	adds	r2, r5, #0
 8000232:	801a      	strh	r2, [r3, #0]
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	1c22      	adds	r2, r4, #0
 8000238:	801a      	strh	r2, [r3, #0]
 800023a:	1cbb      	adds	r3, r7, #2
 800023c:	1c02      	adds	r2, r0, #0
 800023e:	801a      	strh	r2, [r3, #0]
 8000240:	1c7b      	adds	r3, r7, #1
 8000242:	1c0a      	adds	r2, r1, #0
 8000244:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[2];

	HAL_StatusTypeDef ret;
	ret=HAL_OK;
 8000246:	250f      	movs	r5, #15
 8000248:	197b      	adds	r3, r7, r5
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
	 //This should return "0xd7" for the Gyroscope and "0xc7" for the Magnetometer/Accelerometer in the buffer[0]
	ret = HAL_I2C_Mem_Read(&hi2c1, Sensor_addr, WHO_AM_I, 1, buffer, 1, 5);
 800024e:	197c      	adds	r4, r7, r5
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	881a      	ldrh	r2, [r3, #0]
 8000254:	1dbb      	adds	r3, r7, #6
 8000256:	8819      	ldrh	r1, [r3, #0]
 8000258:	4814      	ldr	r0, [pc, #80]	; (80002ac <initialize_Sensor+0x8c>)
 800025a:	2305      	movs	r3, #5
 800025c:	9302      	str	r3, [sp, #8]
 800025e:	2301      	movs	r3, #1
 8000260:	9301      	str	r3, [sp, #4]
 8000262:	260c      	movs	r6, #12
 8000264:	19bb      	adds	r3, r7, r6
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	2301      	movs	r3, #1
 800026a:	f001 fadf 	bl	800182c <HAL_I2C_Mem_Read>
 800026e:	0003      	movs	r3, r0
 8000270:	7023      	strb	r3, [r4, #0]
	Out=buffer;
 8000272:	19bb      	adds	r3, r7, r6
 8000274:	62bb      	str	r3, [r7, #40]	; 0x28
	//Write the desired values into the control Register
	ret = HAL_I2C_Mem_Write(&hi2c1, Sensor_addr, CTRL_REG, 1, &CTRL_REG_input, 1, 500);
 8000276:	197c      	adds	r4, r7, r5
 8000278:	1cbb      	adds	r3, r7, #2
 800027a:	881a      	ldrh	r2, [r3, #0]
 800027c:	1dbb      	adds	r3, r7, #6
 800027e:	8819      	ldrh	r1, [r3, #0]
 8000280:	480a      	ldr	r0, [pc, #40]	; (80002ac <initialize_Sensor+0x8c>)
 8000282:	23fa      	movs	r3, #250	; 0xfa
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	9302      	str	r3, [sp, #8]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	1c7b      	adds	r3, r7, #1
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2301      	movs	r3, #1
 8000292:	f001 f99d 	bl	80015d0 <HAL_I2C_Mem_Write>
 8000296:	0003      	movs	r3, r0
 8000298:	7023      	strb	r3, [r4, #0]
	HAL_Delay(50);
 800029a:	2032      	movs	r0, #50	; 0x32
 800029c:	f000 fbda 	bl	8000a54 <HAL_Delay>
	return ret;
 80002a0:	197b      	adds	r3, r7, r5
 80002a2:	781b      	ldrb	r3, [r3, #0]
}
 80002a4:	0018      	movs	r0, r3
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b005      	add	sp, #20
 80002aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ac:	20000030 	.word	0x20000030

080002b0 <read_Gyro_data>:

HAL_StatusTypeDef read_Gyro_data(DATA_TypeDef *Data)
{
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	b089      	sub	sp, #36	; 0x24
 80002b4:	af04      	add	r7, sp, #16
 80002b6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[2];

	HAL_StatusTypeDef ret;
	ret=HAL_OK;
 80002b8:	250f      	movs	r5, #15
 80002ba:	197b      	adds	r3, r7, r5
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
	//if (ret!= HAL_OK){
	//	return ret;}

	//ret=HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) GYRO_DEVADDR_R, 1000, 5000);
	//HAL_Delay(10);
	ret=HAL_I2C_Mem_Write_IT(&hi2c1, GYRO_DEVADDR_R, Gyro_MSB_X, 2, rawData, 2);
 80002c0:	2141      	movs	r1, #65	; 0x41
 80002c2:	4b39      	ldr	r3, [pc, #228]	; (80003a8 <read_Gyro_data+0xf8>)
 80002c4:	881a      	ldrh	r2, [r3, #0]
 80002c6:	197c      	adds	r4, r7, r5
 80002c8:	4838      	ldr	r0, [pc, #224]	; (80003ac <read_Gyro_data+0xfc>)
 80002ca:	2302      	movs	r3, #2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	260c      	movs	r6, #12
 80002d0:	19bb      	adds	r3, r7, r6
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2302      	movs	r3, #2
 80002d6:	f001 fbdd 	bl	8001a94 <HAL_I2C_Mem_Write_IT>
 80002da:	0003      	movs	r3, r0
 80002dc:	7023      	strb	r3, [r4, #0]
	ret=HAL_I2C_Mem_Read_IT(&hi2c1, GYRO_DEVADDR_R, Gyro_MSB_X, 2, rawData, 2);
 80002de:	2141      	movs	r1, #65	; 0x41
 80002e0:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <read_Gyro_data+0xf8>)
 80002e2:	881a      	ldrh	r2, [r3, #0]
 80002e4:	197c      	adds	r4, r7, r5
 80002e6:	4831      	ldr	r0, [pc, #196]	; (80003ac <read_Gyro_data+0xfc>)
 80002e8:	2302      	movs	r3, #2
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	19bb      	adds	r3, r7, r6
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2302      	movs	r3, #2
 80002f2:	f001 fc77 	bl	8001be4 <HAL_I2C_Mem_Read_IT>
 80002f6:	0003      	movs	r3, r0
 80002f8:	7023      	strb	r3, [r4, #0]

	ret=HAL_OK;
 80002fa:	197b      	adds	r3, r7, r5
 80002fc:	2200      	movs	r2, #0
 80002fe:	701a      	strb	r2, [r3, #0]
	ret=HAL_I2C_Mem_Read(&hi2c1, MAGACC_DEVADDR, MAG_MSB_X, 1, rawData, 2, 5000);
 8000300:	4b2b      	ldr	r3, [pc, #172]	; (80003b0 <read_Gyro_data+0x100>)
 8000302:	8819      	ldrh	r1, [r3, #0]
 8000304:	2233      	movs	r2, #51	; 0x33
 8000306:	197c      	adds	r4, r7, r5
 8000308:	4828      	ldr	r0, [pc, #160]	; (80003ac <read_Gyro_data+0xfc>)
 800030a:	4b2a      	ldr	r3, [pc, #168]	; (80003b4 <read_Gyro_data+0x104>)
 800030c:	9302      	str	r3, [sp, #8]
 800030e:	2302      	movs	r3, #2
 8000310:	9301      	str	r3, [sp, #4]
 8000312:	19bb      	adds	r3, r7, r6
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2301      	movs	r3, #1
 8000318:	f001 fa88 	bl	800182c <HAL_I2C_Mem_Read>
 800031c:	0003      	movs	r3, r0
 800031e:	7023      	strb	r3, [r4, #0]

	ret=HAL_OK;
 8000320:	197b      	adds	r3, r7, r5
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
	ret=HAL_I2C_Master_Transmit(&hi2c1, GYRO_DEVADDR_W, (uint8_t) &Gyro_MSB_X, 1, 5000);
 8000326:	2140      	movs	r1, #64	; 0x40
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <read_Gyro_data+0xf8>)
 800032a:	b2db      	uxtb	r3, r3
 800032c:	001a      	movs	r2, r3
 800032e:	197c      	adds	r4, r7, r5
 8000330:	481e      	ldr	r0, [pc, #120]	; (80003ac <read_Gyro_data+0xfc>)
 8000332:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <read_Gyro_data+0x104>)
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	2301      	movs	r3, #1
 8000338:	f000 ff3a 	bl	80011b0 <HAL_I2C_Master_Transmit>
 800033c:	0003      	movs	r3, r0
 800033e:	7023      	strb	r3, [r4, #0]

	ret=HAL_OK;
 8000340:	197b      	adds	r3, r7, r5
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
	ret=HAL_I2C_Master_Receive(&hi2c1, GYRO_DEVADDR_R, rawData, 2, 5000);
 8000346:	2141      	movs	r1, #65	; 0x41
 8000348:	197c      	adds	r4, r7, r5
 800034a:	19ba      	adds	r2, r7, r6
 800034c:	4817      	ldr	r0, [pc, #92]	; (80003ac <read_Gyro_data+0xfc>)
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <read_Gyro_data+0x104>)
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	2302      	movs	r3, #2
 8000354:	f001 f834 	bl	80013c0 <HAL_I2C_Master_Receive>
 8000358:	0003      	movs	r3, r0
 800035a:	7023      	strb	r3, [r4, #0]
	//ret=HAL_I2C_Mem_Read(&hi2c1, Sensor_adress, Gyro_MSB_X, 1, rawData, 2, 500);
	HAL_Delay(10);
 800035c:	200a      	movs	r0, #10
 800035e:	f000 fb79 	bl	8000a54 <HAL_Delay>
		if (ret == HAL_ERROR){
 8000362:	197b      	adds	r3, r7, r5
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d102      	bne.n	8000370 <read_Gyro_data+0xc0>
			return ret;}
 800036a:	197b      	adds	r3, r7, r5
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	e017      	b.n	80003a0 <read_Gyro_data+0xf0>
	Data->x = ((uint16_t) rawData[0])<<8 | ((uint16_t) rawData[1]);
 8000370:	210c      	movs	r1, #12
 8000372:	187b      	adds	r3, r7, r1
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	021b      	lsls	r3, r3, #8
 8000378:	b21a      	sxth	r2, r3
 800037a:	187b      	adds	r3, r7, r1
 800037c:	785b      	ldrb	r3, [r3, #1]
 800037e:	b21b      	sxth	r3, r3
 8000380:	4313      	orrs	r3, r2
 8000382:	b21a      	sxth	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	801a      	strh	r2, [r3, #0]
/*
	ret=HAL_I2C_Mem_Read(&hi2c1, Sensor_adress, Gyro_MSB_Y, 1, rawData, 2, 500);
		if (ret == HAL_ERROR){
			return ret;}
	*/
	Data->y = ((uint16_t) rawData[0])<<8 | ((uint16_t) rawData[1]);
 8000388:	187b      	adds	r3, r7, r1
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	021b      	lsls	r3, r3, #8
 800038e:	b21a      	sxth	r2, r3
 8000390:	187b      	adds	r3, r7, r1
 8000392:	785b      	ldrb	r3, [r3, #1]
 8000394:	b21b      	sxth	r3, r3
 8000396:	4313      	orrs	r3, r2
 8000398:	b21a      	sxth	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	805a      	strh	r2, [r3, #2]
	if (ret!= HAL_OK){
		return ret;}
	GYRO_DATA->z = rawData;
	*/

	return HAL_OK;
 800039e:	2300      	movs	r3, #0
}
 80003a0:	0018      	movs	r0, r3
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b005      	add	sp, #20
 80003a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a8:	20000000 	.word	0x20000000
 80003ac:	20000030 	.word	0x20000030
 80003b0:	20000004 	.word	0x20000004
 80003b4:	00001388 	.word	0x00001388

080003b8 <HAL_GPIO_EXTI_Callback>:



HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ // This interrupt handles the push of the blue button
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	0002      	movs	r2, r0
 80003c0:	1dbb      	adds	r3, r7, #6
 80003c2:	801a      	strh	r2, [r3, #0]

	//uint8_t rawData[2];
	//HAL_StatusTypeDef ret;
	//ret=HAL_I2C_Mem_Read(&hi2c1, GYRO_DEVADDR_R, Gyro_MSB_X, 1, rawData, 2, 5000);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80003c4:	2380      	movs	r3, #128	; 0x80
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <HAL_GPIO_EXTI_Callback+0x24>)
 80003ca:	0019      	movs	r1, r3
 80003cc:	0010      	movs	r0, r2
 80003ce:	f000 fe22 	bl	8001016 <HAL_GPIO_TogglePin>
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b002      	add	sp, #8
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	48000800 	.word	0x48000800

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003e2:	b089      	sub	sp, #36	; 0x24
 80003e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e6:	f000 fad1 	bl	800098c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ea:	f000 f845 	bl	8000478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ee:	f000 f93f 	bl	8000670 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003f2:	f000 f8a3 	bl	800053c <MX_I2C1_Init>
  MX_TIM1_Init();
 80003f6:	f000 f8e1 	bl	80005bc <MX_TIM1_Init>
  DATA_TypeDef Gyro_Data;
  HAL_StatusTypeDef ret;
  uint8_t output[2];

  //initialize Gyro Sensor
  uint16_t CTRL_REG0 = 0x0D;
 80003fa:	2616      	movs	r6, #22
 80003fc:	19bb      	adds	r3, r7, r6
 80003fe:	220d      	movs	r2, #13
 8000400:	801a      	strh	r2, [r3, #0]

  //Bandwith BW=4; Full Scale Range FSR= +-250mdps/LSB
  //This leads to a nominal sensitivity of 7.8125 mdps/LSB
  uint8_t CTRL_REG0_input = 0b01000011;
 8000402:	2015      	movs	r0, #21
 8000404:	183b      	adds	r3, r7, r0
 8000406:	2243      	movs	r2, #67	; 0x43
 8000408:	701a      	strb	r2, [r3, #0]
  ret = initialize_Sensor(GYRO_DEVADDR, Gyro_WHO_AM_I, CTRL_REG0, CTRL_REG0_input, output);
 800040a:	2542      	movs	r5, #66	; 0x42
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <main+0x90>)
 800040e:	8819      	ldrh	r1, [r3, #0]
 8000410:	2314      	movs	r3, #20
 8000412:	18fc      	adds	r4, r7, r3
 8000414:	183b      	adds	r3, r7, r0
 8000416:	7818      	ldrb	r0, [r3, #0]
 8000418:	19bb      	adds	r3, r7, r6
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	0003      	movs	r3, r0
 8000422:	0028      	movs	r0, r5
 8000424:	f7ff fefc 	bl	8000220 <initialize_Sensor>
 8000428:	0003      	movs	r3, r0
 800042a:	7023      	strb	r3, [r4, #0]

  //initialize Magnetometer/Accelerometer
  uint16_t CTRL_REG1 = 0x2A;
 800042c:	2612      	movs	r6, #18
 800042e:	19bb      	adds	r3, r7, r6
 8000430:	222a      	movs	r2, #42	; 0x2a
 8000432:	801a      	strh	r2, [r3, #0]
  //Bandwith BW=4; Full Scale Range FSR= +-250mdps/LSB
  //This leads to a nominal sensitivity of 7.8125 mdps/LSB
  uint8_t CTRL_REG1_input = 0b00011101;
 8000434:	2111      	movs	r1, #17
 8000436:	187b      	adds	r3, r7, r1
 8000438:	221d      	movs	r2, #29
 800043a:	701a      	strb	r2, [r3, #0]

  ret = initialize_Sensor(MAGACC_DEVADDR, MAGACC_WHO_AM_I, CTRL_REG1, CTRL_REG1_input, output);
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <main+0x94>)
 800043e:	8818      	ldrh	r0, [r3, #0]
 8000440:	250d      	movs	r5, #13
 8000442:	2314      	movs	r3, #20
 8000444:	18fc      	adds	r4, r7, r3
 8000446:	187b      	adds	r3, r7, r1
 8000448:	7819      	ldrb	r1, [r3, #0]
 800044a:	19bb      	adds	r3, r7, r6
 800044c:	881a      	ldrh	r2, [r3, #0]
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	000b      	movs	r3, r1
 8000454:	0029      	movs	r1, r5
 8000456:	f7ff fee3 	bl	8000220 <initialize_Sensor>
 800045a:	0003      	movs	r3, r0
 800045c:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800045e:	200a      	movs	r0, #10
 8000460:	f000 faf8 	bl	8000a54 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  read_Gyro_data(&Gyro_Data);
 8000464:	2308      	movs	r3, #8
 8000466:	18fb      	adds	r3, r7, r3
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff ff21 	bl	80002b0 <read_Gyro_data>
 800046e:	e7f9      	b.n	8000464 <main+0x84>
 8000470:	20000002 	.word	0x20000002
 8000474:	20000004 	.word	0x20000004

08000478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b097      	sub	sp, #92	; 0x5c
 800047c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047e:	2428      	movs	r4, #40	; 0x28
 8000480:	193b      	adds	r3, r7, r4
 8000482:	0018      	movs	r0, r3
 8000484:	2330      	movs	r3, #48	; 0x30
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f004 fba1 	bl	8004bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048e:	2318      	movs	r3, #24
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	0018      	movs	r0, r3
 8000494:	2310      	movs	r3, #16
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f004 fb99 	bl	8004bd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	0018      	movs	r0, r3
 80004a2:	2314      	movs	r3, #20
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f004 fb92 	bl	8004bd0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ac:	0021      	movs	r1, r4
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2202      	movs	r2, #2
 80004b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2201      	movs	r2, #1
 80004b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2210      	movs	r2, #16
 80004be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2202      	movs	r2, #2
 80004c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	22a0      	movs	r2, #160	; 0xa0
 80004d0:	0392      	lsls	r2, r2, #14
 80004d2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	0018      	movs	r0, r3
 80004de:	f003 fa3f 	bl	8003960 <HAL_RCC_OscConfig>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004e6:	f000 f935 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	2118      	movs	r1, #24
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2207      	movs	r2, #7
 80004f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2202      	movs	r2, #2
 80004f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2101      	movs	r1, #1
 8000508:	0018      	movs	r0, r3
 800050a:	f003 fd43 	bl	8003f94 <HAL_RCC_ClockConfig>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000512:	f000 f91f 	bl	8000754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2220      	movs	r2, #32
 800051a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	0018      	movs	r0, r3
 8000526:	f003 fe67 	bl	80041f8 <HAL_RCCEx_PeriphCLKConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800052e:	f000 f911 	bl	8000754 <Error_Handler>
  }
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b017      	add	sp, #92	; 0x5c
 8000538:	bd90      	pop	{r4, r7, pc}
	...

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fd83 	bl	8001084 <HAL_I2C_Init>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 f8e7 	bl	8000754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f003 f950 	bl	8003830 <HAL_I2CEx_ConfigAnalogFilter>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 f8de 	bl	8000754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MX_I2C1_Init+0x74>)
 800059a:	2100      	movs	r1, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f003 f993 	bl	80038c8 <HAL_I2CEx_ConfigDigitalFilter>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 f8d5 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000030 	.word	0x20000030
 80005b4:	40005400 	.word	0x40005400
 80005b8:	2000090e 	.word	0x2000090e

080005bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c2:	2308      	movs	r3, #8
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	2310      	movs	r3, #16
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f004 faff 	bl	8004bd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d2:	003b      	movs	r3, r7
 80005d4:	0018      	movs	r0, r3
 80005d6:	2308      	movs	r3, #8
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f004 faf8 	bl	8004bd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_TIM1_Init+0xa4>)
 80005e2:	4a20      	ldr	r2, [pc, #128]	; (8000664 <MX_TIM1_Init+0xa8>)
 80005e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_TIM1_Init+0xa4>)
 80005e8:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <MX_TIM1_Init+0xac>)
 80005ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_TIM1_Init+0xa4>)
 80005ee:	2210      	movs	r2, #16
 80005f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_TIM1_Init+0xa4>)
 80005f4:	4a1d      	ldr	r2, [pc, #116]	; (800066c <MX_TIM1_Init+0xb0>)
 80005f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_TIM1_Init+0xa4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_TIM1_Init+0xa4>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_TIM1_Init+0xa4>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_TIM1_Init+0xa4>)
 800060c:	0018      	movs	r0, r3
 800060e:	f003 fed1 	bl	80043b4 <HAL_TIM_Base_Init>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000616:	f000 f89d 	bl	8000754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061a:	2108      	movs	r1, #8
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	0152      	lsls	r2, r2, #5
 8000622:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000624:	187a      	adds	r2, r7, r1
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_TIM1_Init+0xa4>)
 8000628:	0011      	movs	r1, r2
 800062a:	0018      	movs	r0, r3
 800062c:	f004 f828 	bl	8004680 <HAL_TIM_ConfigClockSource>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000634:	f000 f88e 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000638:	003b      	movs	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063e:	003b      	movs	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000644:	003a      	movs	r2, r7
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_TIM1_Init+0xa4>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f004 fa2e 	bl	8004aac <HAL_TIMEx_MasterConfigSynchronization>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000654:	f000 f87e 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b006      	add	sp, #24
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000007c 	.word	0x2000007c
 8000664:	40012c00 	.word	0x40012c00
 8000668:	0000bb80 	.word	0x0000bb80
 800066c:	00001388 	.word	0x00001388

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b089      	sub	sp, #36	; 0x24
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	240c      	movs	r4, #12
 8000678:	193b      	adds	r3, r7, r4
 800067a:	0018      	movs	r0, r3
 800067c:	2314      	movs	r3, #20
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f004 faa5 	bl	8004bd0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b31      	ldr	r3, [pc, #196]	; (800074c <MX_GPIO_Init+0xdc>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b30      	ldr	r3, [pc, #192]	; (800074c <MX_GPIO_Init+0xdc>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	0289      	lsls	r1, r1, #10
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	4b2d      	ldr	r3, [pc, #180]	; (800074c <MX_GPIO_Init+0xdc>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	029b      	lsls	r3, r3, #10
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_GPIO_Init+0xdc>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <MX_GPIO_Init+0xdc>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0309      	lsls	r1, r1, #12
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_GPIO_Init+0xdc>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	031b      	lsls	r3, r3, #12
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_GPIO_Init+0xdc>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_GPIO_Init+0xdc>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	02c9      	lsls	r1, r1, #11
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_GPIO_Init+0xdc>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	02db      	lsls	r3, r3, #11
 80006d4:	4013      	ands	r3, r2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006da:	23c0      	movs	r3, #192	; 0xc0
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	481c      	ldr	r0, [pc, #112]	; (8000750 <MX_GPIO_Init+0xe0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	0019      	movs	r1, r3
 80006e4:	f000 fc7a 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2288      	movs	r2, #136	; 0x88
 80006f2:	0352      	lsls	r2, r2, #13
 80006f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006fc:	193a      	adds	r2, r7, r4
 80006fe:	2390      	movs	r3, #144	; 0x90
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f000 faf9 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800070a:	0021      	movs	r1, r4
 800070c:	187b      	adds	r3, r7, r1
 800070e:	22c0      	movs	r2, #192	; 0xc0
 8000710:	0092      	lsls	r2, r2, #2
 8000712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	187b      	adds	r3, r7, r1
 8000728:	4a09      	ldr	r2, [pc, #36]	; (8000750 <MX_GPIO_Init+0xe0>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f000 fae5 	bl	8000cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2005      	movs	r0, #5
 8000738:	f000 fa5c 	bl	8000bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800073c:	2005      	movs	r0, #5
 800073e:	f000 fa6e 	bl	8000c1e <HAL_NVIC_EnableIRQ>

}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b009      	add	sp, #36	; 0x24
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x44>)
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <HAL_MspInit+0x44>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	619a      	str	r2, [r3, #24]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x44>)
 8000780:	69da      	ldr	r2, [r3, #28]
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_MspInit+0x44>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0549      	lsls	r1, r1, #21
 8000788:	430a      	orrs	r2, r1
 800078a:	61da      	str	r2, [r3, #28]
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_MspInit+0x44>)
 800078e:	69da      	ldr	r2, [r3, #28]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	055b      	lsls	r3, r3, #21
 8000794:	4013      	ands	r3, r2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b08b      	sub	sp, #44	; 0x2c
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	2414      	movs	r4, #20
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	0018      	movs	r0, r3
 80007b6:	2314      	movs	r3, #20
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f004 fa08 	bl	8004bd0 <memset>
  if(hi2c->Instance==I2C1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a20      	ldr	r2, [pc, #128]	; (8000848 <HAL_I2C_MspInit+0xa0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d139      	bne.n	800083e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <HAL_I2C_MspInit+0xa4>)
 80007cc:	695a      	ldr	r2, [r3, #20]
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <HAL_I2C_MspInit+0xa4>)
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	02c9      	lsls	r1, r1, #11
 80007d4:	430a      	orrs	r2, r1
 80007d6:	615a      	str	r2, [r3, #20]
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_I2C_MspInit+0xa4>)
 80007da:	695a      	ldr	r2, [r3, #20]
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	02db      	lsls	r3, r3, #11
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007e6:	0021      	movs	r1, r4
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	22c0      	movs	r2, #192	; 0xc0
 80007ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2212      	movs	r2, #18
 80007f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2203      	movs	r2, #3
 80007fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2201      	movs	r2, #1
 8000804:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	187b      	adds	r3, r7, r1
 8000808:	4a11      	ldr	r2, [pc, #68]	; (8000850 <HAL_I2C_MspInit+0xa8>)
 800080a:	0019      	movs	r1, r3
 800080c:	0010      	movs	r0, r2
 800080e:	f000 fa75 	bl	8000cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_I2C_MspInit+0xa4>)
 8000814:	69da      	ldr	r2, [r3, #28]
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_I2C_MspInit+0xa4>)
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0389      	lsls	r1, r1, #14
 800081c:	430a      	orrs	r2, r1
 800081e:	61da      	str	r2, [r3, #28]
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_I2C_MspInit+0xa4>)
 8000822:	69da      	ldr	r2, [r3, #28]
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	039b      	lsls	r3, r3, #14
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2017      	movs	r0, #23
 8000834:	f000 f9de 	bl	8000bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000838:	2017      	movs	r0, #23
 800083a:	f000 f9f0 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b00b      	add	sp, #44	; 0x2c
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40005400 	.word	0x40005400
 800084c:	40021000 	.word	0x40021000
 8000850:	48000400 	.word	0x48000400

08000854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_TIM_Base_MspInit+0x48>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d115      	bne.n	8000892 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_TIM_Base_MspInit+0x4c>)
 8000868:	699a      	ldr	r2, [r3, #24]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_TIM_Base_MspInit+0x4c>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0109      	lsls	r1, r1, #4
 8000870:	430a      	orrs	r2, r1
 8000872:	619a      	str	r2, [r3, #24]
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_TIM_Base_MspInit+0x4c>)
 8000876:	699a      	ldr	r2, [r3, #24]
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	4013      	ands	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	200d      	movs	r0, #13
 8000888:	f000 f9b4 	bl	8000bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800088c:	200d      	movs	r0, #13
 800088e:	f000 f9c6 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b004      	add	sp, #16
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40012c00 	.word	0x40012c00
 80008a0:	40021000 	.word	0x40021000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f8a8 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
	//uint8_t rawData[2];
	//HAL_StatusTypeDef ret;
	//ret=HAL_I2C_Mem_Read(&hi2c1, GYRO_DEVADDR_R, Gyro_MSB_X, 1, rawData, 2, 5000);
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f000 fbb8 	bl	800104c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80008ea:	0018      	movs	r0, r3
 80008ec:	f003 fdb2 	bl	8004454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	2000007c 	.word	0x2000007c

080008fc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <I2C1_IRQHandler+0x2c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	699a      	ldr	r2, [r3, #24]
 8000906:	23e0      	movs	r3, #224	; 0xe0
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	4013      	ands	r3, r2
 800090c:	d004      	beq.n	8000918 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <I2C1_IRQHandler+0x2c>)
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fa2b 	bl	8001d6c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000916:	e003      	b.n	8000920 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <I2C1_IRQHandler+0x2c>)
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fa0c 	bl	8001d38 <HAL_I2C_EV_IRQHandler>
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	20000030 	.word	0x20000030

0800092c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490e      	ldr	r1, [pc, #56]	; (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0e      	ldr	r2, [pc, #56]	; (800097c <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0b      	ldr	r4, [pc, #44]	; (8000984 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000962:	f7ff ffe3 	bl	800092c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000966:	f004 f90f 	bl	8004b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fd39 	bl	80003e0 <main>

0800096e <LoopForever>:

LoopForever:
    b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   r0, =_estack
 8000970:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800097c:	08004c30 	.word	0x08004c30
  ldr r2, =_sbss
 8000980:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000984:	200000c8 	.word	0x200000c8

08000988 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_COMP_IRQHandler>
	...

0800098c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_Init+0x24>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_Init+0x24>)
 8000996:	2110      	movs	r1, #16
 8000998:	430a      	orrs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800099c:	2000      	movs	r0, #0
 800099e:	f000 f809 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a2:	f7ff fedd 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_InitTick+0x5c>)
 80009be:	681c      	ldr	r4, [r3, #0]
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_InitTick+0x60>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	0019      	movs	r1, r3
 80009c6:	23fa      	movs	r3, #250	; 0xfa
 80009c8:	0098      	lsls	r0, r3, #2
 80009ca:	f7ff fb9d 	bl	8000108 <__udivsi3>
 80009ce:	0003      	movs	r3, r0
 80009d0:	0019      	movs	r1, r3
 80009d2:	0020      	movs	r0, r4
 80009d4:	f7ff fb98 	bl	8000108 <__udivsi3>
 80009d8:	0003      	movs	r3, r0
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 f92f 	bl	8000c3e <HAL_SYSTICK_Config>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e00f      	b.n	8000a08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d80b      	bhi.n	8000a06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2301      	movs	r3, #1
 80009f2:	425b      	negs	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f8fc 	bl	8000bf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_InitTick+0x64>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000010 	.word	0x20000010
 8000a18:	2000000c 	.word	0x2000000c

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001a      	movs	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	18d2      	adds	r2, r2, r3
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20000010 	.word	0x20000010
 8000a3c:	200000c4 	.word	0x200000c4

08000a40 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	200000c4 	.word	0x200000c4

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff fff0 	bl	8000a40 <HAL_GetTick>
 8000a60:	0003      	movs	r3, r0
 8000a62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	001a      	movs	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	189b      	adds	r3, r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	f7ff ffe0 	bl	8000a40 <HAL_GetTick>
 8000a80:	0002      	movs	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b004      	add	sp, #16
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000010 	.word	0x20000010

08000a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b7f      	cmp	r3, #127	; 0x7f
 8000aae:	d809      	bhi.n	8000ac4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	231f      	movs	r3, #31
 8000ab8:	401a      	ands	r2, r3
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_EnableIRQ+0x30>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	4091      	lsls	r1, r2
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
  }
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae4:	d828      	bhi.n	8000b38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae6:	4a2f      	ldr	r2, [pc, #188]	; (8000ba4 <__NVIC_SetPriority+0xd4>)
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	33c0      	adds	r3, #192	; 0xc0
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	589b      	ldr	r3, [r3, r2]
 8000af6:	1dfa      	adds	r2, r7, #7
 8000af8:	7812      	ldrb	r2, [r2, #0]
 8000afa:	0011      	movs	r1, r2
 8000afc:	2203      	movs	r2, #3
 8000afe:	400a      	ands	r2, r1
 8000b00:	00d2      	lsls	r2, r2, #3
 8000b02:	21ff      	movs	r1, #255	; 0xff
 8000b04:	4091      	lsls	r1, r2
 8000b06:	000a      	movs	r2, r1
 8000b08:	43d2      	mvns	r2, r2
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	22ff      	movs	r2, #255	; 0xff
 8000b14:	401a      	ands	r2, r3
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	4003      	ands	r3, r0
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b24:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <__NVIC_SetPriority+0xd4>)
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	33c0      	adds	r3, #192	; 0xc0
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b36:	e031      	b.n	8000b9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0019      	movs	r1, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	400b      	ands	r3, r1
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3306      	adds	r3, #6
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	18d3      	adds	r3, r2, r3
 8000b4e:	3304      	adds	r3, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	1dfa      	adds	r2, r7, #7
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	0011      	movs	r1, r2
 8000b58:	2203      	movs	r2, #3
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	00d2      	lsls	r2, r2, #3
 8000b5e:	21ff      	movs	r1, #255	; 0xff
 8000b60:	4091      	lsls	r1, r2
 8000b62:	000a      	movs	r2, r1
 8000b64:	43d2      	mvns	r2, r2
 8000b66:	401a      	ands	r2, r3
 8000b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	019b      	lsls	r3, r3, #6
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	401a      	ands	r2, r3
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	2303      	movs	r3, #3
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <__NVIC_SetPriority+0xd8>)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	001c      	movs	r4, r3
 8000b88:	230f      	movs	r3, #15
 8000b8a:	4023      	ands	r3, r4
 8000b8c:	3b08      	subs	r3, #8
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	430a      	orrs	r2, r1
 8000b92:	3306      	adds	r3, #6
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	18c3      	adds	r3, r0, r3
 8000b98:	3304      	adds	r3, #4
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b003      	add	sp, #12
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	045b      	lsls	r3, r3, #17
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d301      	bcc.n	8000bc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e010      	b.n	8000be6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <SysTick_Config+0x44>)
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	3a01      	subs	r2, #1
 8000bca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bcc:	2301      	movs	r3, #1
 8000bce:	425b      	negs	r3, r3
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff ff7c 	bl	8000ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x44>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x44>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	210f      	movs	r1, #15
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	1c02      	adds	r2, r0, #0
 8000c04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	0011      	movs	r1, r2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff ff5d 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	0002      	movs	r2, r0
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ff33 	bl	8000a9c <__NVIC_EnableIRQ>
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b002      	add	sp, #8
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff ffaf 	bl	8000bac <SysTick_Config>
 8000c4e:	0003      	movs	r3, r0
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c60:	210f      	movs	r1, #15
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2221      	movs	r2, #33	; 0x21
 8000c6c:	5c9b      	ldrb	r3, [r3, r2]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d006      	beq.n	8000c82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2204      	movs	r2, #4
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	e028      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	210e      	movs	r1, #14
 8000c8e:	438a      	bics	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	438a      	bics	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000caa:	2101      	movs	r1, #1
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2221      	movs	r2, #33	; 0x21
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d004      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	0010      	movs	r0, r2
 8000cd2:	4798      	blx	r3
    } 
  }
  return status;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2221      	movs	r2, #33	; 0x21
 8000cee:	5c9b      	ldrb	r3, [r3, r2]
 8000cf0:	b2db      	uxtb	r3, r3
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0a:	e14f      	b.n	8000fac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <HAL_GPIO_Init+0x28>
 8000d22:	e140      	b.n	8000fa6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d005      	beq.n	8000d3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2203      	movs	r2, #3
 8000d36:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d130      	bne.n	8000d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d72:	2201      	movs	r2, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	2201      	movs	r2, #1
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d017      	beq.n	8000dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2203      	movs	r2, #3
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d123      	bne.n	8000e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	58d3      	ldr	r3, [r2, r3]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2207      	movs	r2, #7
 8000df8:	4013      	ands	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2107      	movs	r1, #7
 8000e12:	400b      	ands	r3, r1
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	6939      	ldr	r1, [r7, #16]
 8000e2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	23c0      	movs	r3, #192	; 0xc0
 8000e68:	029b      	lsls	r3, r3, #10
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d100      	bne.n	8000e70 <HAL_GPIO_Init+0x174>
 8000e6e:	e09a      	b.n	8000fa6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e70:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	619a      	str	r2, [r3, #24]
 8000e7c:	4b51      	ldr	r3, [pc, #324]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4013      	ands	r3, r2
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e88:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	589b      	ldr	r3, [r3, r2]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	43da      	mvns	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	2390      	movs	r3, #144	; 0x90
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x1e2>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a44      	ldr	r2, [pc, #272]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x1de>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a43      	ldr	r2, [pc, #268]	; (8000fd0 <HAL_GPIO_Init+0x2d4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x1da>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a42      	ldr	r2, [pc, #264]	; (8000fd4 <HAL_GPIO_Init+0x2d8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x1d6>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x1e4>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x1e4>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x1e4>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x1e4>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ef0:	4935      	ldr	r1, [pc, #212]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efe:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_GPIO_Init+0x2dc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	025b      	lsls	r3, r3, #9
 8000f16:	4013      	ands	r3, r2
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_GPIO_Init+0x2dc>)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <HAL_GPIO_Init+0x2dc>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43da      	mvns	r2, r3
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	029b      	lsls	r3, r3, #10
 8000f40:	4013      	ands	r3, r2
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <HAL_GPIO_Init+0x2dc>)
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_GPIO_Init+0x2dc>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	035b      	lsls	r3, r3, #13
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_GPIO_Init+0x2dc>)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_GPIO_Init+0x2dc>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43da      	mvns	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	039b      	lsls	r3, r3, #14
 8000f94:	4013      	ands	r3, r2
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_GPIO_Init+0x2dc>)
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	40da      	lsrs	r2, r3
 8000fb4:	1e13      	subs	r3, r2, #0
 8000fb6:	d000      	beq.n	8000fba <HAL_GPIO_Init+0x2be>
 8000fb8:	e6a8      	b.n	8000d0c <HAL_GPIO_Init+0x10>
  } 
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b006      	add	sp, #24
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000800 	.word	0x48000800
 8000fd4:	48000c00 	.word	0x48000c00
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	0008      	movs	r0, r1
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	1cbb      	adds	r3, r7, #2
 8000fea:	1c02      	adds	r2, r0, #0
 8000fec:	801a      	strh	r2, [r3, #0]
 8000fee:	1c7b      	adds	r3, r7, #1
 8000ff0:	1c0a      	adds	r2, r1, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff4:	1c7b      	adds	r3, r7, #1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ffc:	1cbb      	adds	r3, r7, #2
 8000ffe:	881a      	ldrh	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001006:	1cbb      	adds	r3, r7, #2
 8001008:	881a      	ldrh	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	000a      	movs	r2, r1
 8001020:	1cbb      	adds	r3, r7, #2
 8001022:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800102a:	1cbb      	adds	r3, r7, #2
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4013      	ands	r3, r2
 8001032:	041a      	lsls	r2, r3, #16
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	1cb9      	adds	r1, r7, #2
 800103a:	8809      	ldrh	r1, [r1, #0]
 800103c:	400b      	ands	r3, r1
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	0002      	movs	r2, r0
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	1dba      	adds	r2, r7, #6
 800105e:	8812      	ldrh	r2, [r2, #0]
 8001060:	4013      	ands	r3, r2
 8001062:	d008      	beq.n	8001076 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001066:	1dba      	adds	r2, r7, #6
 8001068:	8812      	ldrh	r2, [r2, #0]
 800106a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800106c:	1dbb      	adds	r3, r7, #6
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff f9a1 	bl	80003b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e082      	b.n	800119c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2241      	movs	r2, #65	; 0x41
 800109a:	5c9b      	ldrb	r3, [r3, r2]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d107      	bne.n	80010b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2240      	movs	r2, #64	; 0x40
 80010a6:	2100      	movs	r1, #0
 80010a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff fb7b 	bl	80007a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2241      	movs	r2, #65	; 0x41
 80010b6:	2124      	movs	r1, #36	; 0x24
 80010b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2101      	movs	r1, #1
 80010c6:	438a      	bics	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4934      	ldr	r1, [pc, #208]	; (80011a4 <HAL_I2C_Init+0x120>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4931      	ldr	r1, [pc, #196]	; (80011a8 <HAL_I2C_Init+0x124>)
 80010e4:	400a      	ands	r2, r1
 80010e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d108      	bne.n	8001102 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	0209      	lsls	r1, r1, #8
 80010fc:	430a      	orrs	r2, r1
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	e007      	b.n	8001112 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2184      	movs	r1, #132	; 0x84
 800110c:	0209      	lsls	r1, r1, #8
 800110e:	430a      	orrs	r2, r1
 8001110:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d104      	bne.n	8001124 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	491f      	ldr	r1, [pc, #124]	; (80011ac <HAL_I2C_Init+0x128>)
 8001130:	430a      	orrs	r2, r1
 8001132:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	491a      	ldr	r1, [pc, #104]	; (80011a8 <HAL_I2C_Init+0x124>)
 8001140:	400a      	ands	r2, r1
 8001142:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	431a      	orrs	r2, r3
 800114e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69d9      	ldr	r1, [r3, #28]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a1a      	ldr	r2, [r3, #32]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2241      	movs	r2, #65	; 0x41
 8001188:	2120      	movs	r1, #32
 800118a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2242      	movs	r2, #66	; 0x42
 8001196:	2100      	movs	r1, #0
 8001198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	f0ffffff 	.word	0xf0ffffff
 80011a8:	ffff7fff 	.word	0xffff7fff
 80011ac:	02008000 	.word	0x02008000

080011b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	0008      	movs	r0, r1
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	0019      	movs	r1, r3
 80011be:	230a      	movs	r3, #10
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	1c02      	adds	r2, r0, #0
 80011c4:	801a      	strh	r2, [r3, #0]
 80011c6:	2308      	movs	r3, #8
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	1c0a      	adds	r2, r1, #0
 80011cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2241      	movs	r2, #65	; 0x41
 80011d2:	5c9b      	ldrb	r3, [r3, r2]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b20      	cmp	r3, #32
 80011d8:	d000      	beq.n	80011dc <HAL_I2C_Master_Transmit+0x2c>
 80011da:	e0e7      	b.n	80013ac <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2240      	movs	r2, #64	; 0x40
 80011e0:	5c9b      	ldrb	r3, [r3, r2]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_I2C_Master_Transmit+0x3a>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e0e1      	b.n	80013ae <HAL_I2C_Master_Transmit+0x1fe>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	2101      	movs	r1, #1
 80011f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011f2:	f7ff fc25 	bl	8000a40 <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	0219      	lsls	r1, r3, #8
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2319      	movs	r3, #25
 8001206:	2201      	movs	r2, #1
 8001208:	f002 f870 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800120c:	1e03      	subs	r3, r0, #0
 800120e:	d001      	beq.n	8001214 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e0cc      	b.n	80013ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2241      	movs	r2, #65	; 0x41
 8001218:	2121      	movs	r1, #33	; 0x21
 800121a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2242      	movs	r2, #66	; 0x42
 8001220:	2110      	movs	r1, #16
 8001222:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2208      	movs	r2, #8
 8001234:	18ba      	adds	r2, r7, r2
 8001236:	8812      	ldrh	r2, [r2, #0]
 8001238:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001244:	b29b      	uxth	r3, r3
 8001246:	2bff      	cmp	r3, #255	; 0xff
 8001248:	d911      	bls.n	800126e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	22ff      	movs	r2, #255	; 0xff
 800124e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001254:	b2da      	uxtb	r2, r3
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	045c      	lsls	r4, r3, #17
 800125a:	230a      	movs	r3, #10
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	8819      	ldrh	r1, [r3, #0]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <HAL_I2C_Master_Transmit+0x208>)
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	0023      	movs	r3, r4
 8001268:	f002 f9e0 	bl	800362c <I2C_TransferConfig>
 800126c:	e075      	b.n	800135a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001272:	b29a      	uxth	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800127c:	b2da      	uxtb	r2, r3
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	049c      	lsls	r4, r3, #18
 8001282:	230a      	movs	r3, #10
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	8819      	ldrh	r1, [r3, #0]
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <HAL_I2C_Master_Transmit+0x208>)
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	0023      	movs	r3, r4
 8001290:	f002 f9cc 	bl	800362c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001294:	e061      	b.n	800135a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	0018      	movs	r0, r3
 800129e:	f002 f864 	bl	800336a <I2C_WaitOnTXISFlagUntilTimeout>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e081      	b.n	80013ae <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	781a      	ldrb	r2, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d2:	3b01      	subs	r3, #1
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012de:	b29b      	uxth	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d03a      	beq.n	800135a <HAL_I2C_Master_Transmit+0x1aa>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d136      	bne.n	800135a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	0013      	movs	r3, r2
 80012f6:	2200      	movs	r2, #0
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	f001 fff7 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e053      	b.n	80013ae <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130a:	b29b      	uxth	r3, r3
 800130c:	2bff      	cmp	r3, #255	; 0xff
 800130e:	d911      	bls.n	8001334 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	22ff      	movs	r2, #255	; 0xff
 8001314:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	b2da      	uxtb	r2, r3
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	045c      	lsls	r4, r3, #17
 8001320:	230a      	movs	r3, #10
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	8819      	ldrh	r1, [r3, #0]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	2300      	movs	r3, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	0023      	movs	r3, r4
 800132e:	f002 f97d 	bl	800362c <I2C_TransferConfig>
 8001332:	e012      	b.n	800135a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001338:	b29a      	uxth	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001342:	b2da      	uxtb	r2, r3
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	049c      	lsls	r4, r3, #18
 8001348:	230a      	movs	r3, #10
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	8819      	ldrh	r1, [r3, #0]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	0023      	movs	r3, r4
 8001356:	f002 f969 	bl	800362c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135e:	b29b      	uxth	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d198      	bne.n	8001296 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	0018      	movs	r0, r3
 800136c:	f002 f83c 	bl	80033e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001370:	1e03      	subs	r3, r0, #0
 8001372:	d001      	beq.n	8001378 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e01a      	b.n	80013ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2220      	movs	r2, #32
 800137e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	490c      	ldr	r1, [pc, #48]	; (80013bc <HAL_I2C_Master_Transmit+0x20c>)
 800138c:	400a      	ands	r2, r1
 800138e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2241      	movs	r2, #65	; 0x41
 8001394:	2120      	movs	r1, #32
 8001396:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2242      	movs	r2, #66	; 0x42
 800139c:	2100      	movs	r1, #0
 800139e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	2100      	movs	r1, #0
 80013a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e000      	b.n	80013ae <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80013ac:	2302      	movs	r3, #2
  }
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b007      	add	sp, #28
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	80002000 	.word	0x80002000
 80013bc:	fe00e800 	.word	0xfe00e800

080013c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	0008      	movs	r0, r1
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	0019      	movs	r1, r3
 80013ce:	230a      	movs	r3, #10
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	1c02      	adds	r2, r0, #0
 80013d4:	801a      	strh	r2, [r3, #0]
 80013d6:	2308      	movs	r3, #8
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	1c0a      	adds	r2, r1, #0
 80013dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2241      	movs	r2, #65	; 0x41
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d000      	beq.n	80013ec <HAL_I2C_Master_Receive+0x2c>
 80013ea:	e0e8      	b.n	80015be <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2240      	movs	r2, #64	; 0x40
 80013f0:	5c9b      	ldrb	r3, [r3, r2]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_I2C_Master_Receive+0x3a>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e0e2      	b.n	80015c0 <HAL_I2C_Master_Receive+0x200>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2240      	movs	r2, #64	; 0x40
 80013fe:	2101      	movs	r1, #1
 8001400:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001402:	f7ff fb1d 	bl	8000a40 <HAL_GetTick>
 8001406:	0003      	movs	r3, r0
 8001408:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	0219      	lsls	r1, r3, #8
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2319      	movs	r3, #25
 8001416:	2201      	movs	r2, #1
 8001418:	f001 ff68 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d001      	beq.n	8001424 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0cd      	b.n	80015c0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2241      	movs	r2, #65	; 0x41
 8001428:	2122      	movs	r1, #34	; 0x22
 800142a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2242      	movs	r2, #66	; 0x42
 8001430:	2110      	movs	r1, #16
 8001432:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2208      	movs	r2, #8
 8001444:	18ba      	adds	r2, r7, r2
 8001446:	8812      	ldrh	r2, [r2, #0]
 8001448:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001454:	b29b      	uxth	r3, r3
 8001456:	2bff      	cmp	r3, #255	; 0xff
 8001458:	d911      	bls.n	800147e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001464:	b2da      	uxtb	r2, r3
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	045c      	lsls	r4, r3, #17
 800146a:	230a      	movs	r3, #10
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	8819      	ldrh	r1, [r3, #0]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	4b55      	ldr	r3, [pc, #340]	; (80015c8 <HAL_I2C_Master_Receive+0x208>)
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	0023      	movs	r3, r4
 8001478:	f002 f8d8 	bl	800362c <I2C_TransferConfig>
 800147c:	e076      	b.n	800156c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001482:	b29a      	uxth	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148c:	b2da      	uxtb	r2, r3
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	049c      	lsls	r4, r3, #18
 8001492:	230a      	movs	r3, #10
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	8819      	ldrh	r1, [r3, #0]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <HAL_I2C_Master_Receive+0x208>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	0023      	movs	r3, r4
 80014a0:	f002 f8c4 	bl	800362c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80014a4:	e062      	b.n	800156c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	0018      	movs	r0, r3
 80014ae:	f001 ffd7 	bl	8003460 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014b2:	1e03      	subs	r3, r0, #0
 80014b4:	d001      	beq.n	80014ba <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e082      	b.n	80015c0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d6:	3b01      	subs	r3, #1
 80014d8:	b29a      	uxth	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d03a      	beq.n	800156c <HAL_I2C_Master_Receive+0x1ac>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d136      	bne.n	800156c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	0013      	movs	r3, r2
 8001508:	2200      	movs	r2, #0
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	f001 feee 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d001      	beq.n	8001518 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e053      	b.n	80015c0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151c:	b29b      	uxth	r3, r3
 800151e:	2bff      	cmp	r3, #255	; 0xff
 8001520:	d911      	bls.n	8001546 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	22ff      	movs	r2, #255	; 0xff
 8001526:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152c:	b2da      	uxtb	r2, r3
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	045c      	lsls	r4, r3, #17
 8001532:	230a      	movs	r3, #10
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	8819      	ldrh	r1, [r3, #0]
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	2300      	movs	r3, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	0023      	movs	r3, r4
 8001540:	f002 f874 	bl	800362c <I2C_TransferConfig>
 8001544:	e012      	b.n	800156c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001554:	b2da      	uxtb	r2, r3
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	049c      	lsls	r4, r3, #18
 800155a:	230a      	movs	r3, #10
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	8819      	ldrh	r1, [r3, #0]
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	2300      	movs	r3, #0
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	0023      	movs	r3, r4
 8001568:	f002 f860 	bl	800362c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001570:	b29b      	uxth	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d197      	bne.n	80014a6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	0018      	movs	r0, r3
 800157e:	f001 ff33 	bl	80033e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e01a      	b.n	80015c0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2220      	movs	r2, #32
 8001590:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	490b      	ldr	r1, [pc, #44]	; (80015cc <HAL_I2C_Master_Receive+0x20c>)
 800159e:	400a      	ands	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2241      	movs	r2, #65	; 0x41
 80015a6:	2120      	movs	r1, #32
 80015a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2242      	movs	r2, #66	; 0x42
 80015ae:	2100      	movs	r1, #0
 80015b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2240      	movs	r2, #64	; 0x40
 80015b6:	2100      	movs	r1, #0
 80015b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80015be:	2302      	movs	r3, #2
  }
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b007      	add	sp, #28
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	80002400 	.word	0x80002400
 80015cc:	fe00e800 	.word	0xfe00e800

080015d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	000c      	movs	r4, r1
 80015da:	0010      	movs	r0, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	230a      	movs	r3, #10
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	1c22      	adds	r2, r4, #0
 80015e4:	801a      	strh	r2, [r3, #0]
 80015e6:	2308      	movs	r3, #8
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	1c02      	adds	r2, r0, #0
 80015ec:	801a      	strh	r2, [r3, #0]
 80015ee:	1dbb      	adds	r3, r7, #6
 80015f0:	1c0a      	adds	r2, r1, #0
 80015f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2241      	movs	r2, #65	; 0x41
 80015f8:	5c9b      	ldrb	r3, [r3, r2]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	d000      	beq.n	8001602 <HAL_I2C_Mem_Write+0x32>
 8001600:	e10c      	b.n	800181c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <HAL_I2C_Mem_Write+0x42>
 8001608:	232c      	movs	r3, #44	; 0x2c
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d105      	bne.n	800161e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0ff      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	5c9b      	ldrb	r3, [r3, r2]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_I2C_Mem_Write+0x5c>
 8001628:	2302      	movs	r3, #2
 800162a:	e0f8      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	2101      	movs	r1, #1
 8001632:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001634:	f7ff fa04 	bl	8000a40 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	0219      	lsls	r1, r3, #8
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2319      	movs	r3, #25
 8001648:	2201      	movs	r2, #1
 800164a:	f001 fe4f 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0e3      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2241      	movs	r2, #65	; 0x41
 800165a:	2121      	movs	r1, #33	; 0x21
 800165c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2242      	movs	r2, #66	; 0x42
 8001662:	2140      	movs	r1, #64	; 0x40
 8001664:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	222c      	movs	r2, #44	; 0x2c
 8001676:	18ba      	adds	r2, r7, r2
 8001678:	8812      	ldrh	r2, [r2, #0]
 800167a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001682:	1dbb      	adds	r3, r7, #6
 8001684:	881c      	ldrh	r4, [r3, #0]
 8001686:	2308      	movs	r3, #8
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	230a      	movs	r3, #10
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	8819      	ldrh	r1, [r3, #0]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	0023      	movs	r3, r4
 800169e:	f001 f877 	bl	8002790 <I2C_RequestMemoryWrite>
 80016a2:	1e03      	subs	r3, r0, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2240      	movs	r2, #64	; 0x40
 80016aa:	2100      	movs	r1, #0
 80016ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0b5      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	2bff      	cmp	r3, #255	; 0xff
 80016ba:	d911      	bls.n	80016e0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	22ff      	movs	r2, #255	; 0xff
 80016c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	045c      	lsls	r4, r3, #17
 80016cc:	230a      	movs	r3, #10
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	8819      	ldrh	r1, [r3, #0]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	2300      	movs	r3, #0
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	0023      	movs	r3, r4
 80016da:	f001 ffa7 	bl	800362c <I2C_TransferConfig>
 80016de:	e012      	b.n	8001706 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	049c      	lsls	r4, r3, #18
 80016f4:	230a      	movs	r3, #10
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	8819      	ldrh	r1, [r3, #0]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	2300      	movs	r3, #0
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	0023      	movs	r3, r4
 8001702:	f001 ff93 	bl	800362c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	0018      	movs	r0, r3
 800170e:	f001 fe2c 	bl	800336a <I2C_WaitOnTXISFlagUntilTimeout>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e081      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001742:	3b01      	subs	r3, #1
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174e:	b29b      	uxth	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d03a      	beq.n	80017ca <HAL_I2C_Mem_Write+0x1fa>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	d136      	bne.n	80017ca <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800175c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	0013      	movs	r3, r2
 8001766:	2200      	movs	r2, #0
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	f001 fdbf 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800176e:	1e03      	subs	r3, r0, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e053      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	2bff      	cmp	r3, #255	; 0xff
 800177e:	d911      	bls.n	80017a4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	22ff      	movs	r2, #255	; 0xff
 8001784:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178a:	b2da      	uxtb	r2, r3
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	045c      	lsls	r4, r3, #17
 8001790:	230a      	movs	r3, #10
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	8819      	ldrh	r1, [r3, #0]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	2300      	movs	r3, #0
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	0023      	movs	r3, r4
 800179e:	f001 ff45 	bl	800362c <I2C_TransferConfig>
 80017a2:	e012      	b.n	80017ca <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	049c      	lsls	r4, r3, #18
 80017b8:	230a      	movs	r3, #10
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	8819      	ldrh	r1, [r3, #0]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	0023      	movs	r3, r4
 80017c6:	f001 ff31 	bl	800362c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d198      	bne.n	8001706 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	0018      	movs	r0, r3
 80017dc:	f001 fe04 	bl	80033e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e0:	1e03      	subs	r3, r0, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e01a      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2220      	movs	r2, #32
 80017ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	490b      	ldr	r1, [pc, #44]	; (8001828 <HAL_I2C_Mem_Write+0x258>)
 80017fc:	400a      	ands	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2241      	movs	r2, #65	; 0x41
 8001804:	2120      	movs	r1, #32
 8001806:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2242      	movs	r2, #66	; 0x42
 800180c:	2100      	movs	r1, #0
 800180e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e000      	b.n	800181e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800181c:	2302      	movs	r3, #2
  }
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b007      	add	sp, #28
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	000c      	movs	r4, r1
 8001836:	0010      	movs	r0, r2
 8001838:	0019      	movs	r1, r3
 800183a:	230a      	movs	r3, #10
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	1c22      	adds	r2, r4, #0
 8001840:	801a      	strh	r2, [r3, #0]
 8001842:	2308      	movs	r3, #8
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	1c02      	adds	r2, r0, #0
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	1dbb      	adds	r3, r7, #6
 800184c:	1c0a      	adds	r2, r1, #0
 800184e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2241      	movs	r2, #65	; 0x41
 8001854:	5c9b      	ldrb	r3, [r3, r2]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b20      	cmp	r3, #32
 800185a:	d000      	beq.n	800185e <HAL_I2C_Mem_Read+0x32>
 800185c:	e110      	b.n	8001a80 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800185e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_I2C_Mem_Read+0x42>
 8001864:	232c      	movs	r3, #44	; 0x2c
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e103      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2240      	movs	r2, #64	; 0x40
 800187e:	5c9b      	ldrb	r3, [r3, r2]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_I2C_Mem_Read+0x5c>
 8001884:	2302      	movs	r3, #2
 8001886:	e0fc      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2240      	movs	r2, #64	; 0x40
 800188c:	2101      	movs	r1, #1
 800188e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001890:	f7ff f8d6 	bl	8000a40 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	0219      	lsls	r1, r3, #8
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2319      	movs	r3, #25
 80018a4:	2201      	movs	r2, #1
 80018a6:	f001 fd21 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 80018aa:	1e03      	subs	r3, r0, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0e7      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2241      	movs	r2, #65	; 0x41
 80018b6:	2122      	movs	r1, #34	; 0x22
 80018b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2242      	movs	r2, #66	; 0x42
 80018be:	2140      	movs	r1, #64	; 0x40
 80018c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	222c      	movs	r2, #44	; 0x2c
 80018d2:	18ba      	adds	r2, r7, r2
 80018d4:	8812      	ldrh	r2, [r2, #0]
 80018d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018de:	1dbb      	adds	r3, r7, #6
 80018e0:	881c      	ldrh	r4, [r3, #0]
 80018e2:	2308      	movs	r3, #8
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	881a      	ldrh	r2, [r3, #0]
 80018e8:	230a      	movs	r3, #10
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	8819      	ldrh	r1, [r3, #0]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	0023      	movs	r3, r4
 80018fa:	f000 ffad 	bl	8002858 <I2C_RequestMemoryRead>
 80018fe:	1e03      	subs	r3, r0, #0
 8001900:	d005      	beq.n	800190e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2240      	movs	r2, #64	; 0x40
 8001906:	2100      	movs	r1, #0
 8001908:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0b9      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	2bff      	cmp	r3, #255	; 0xff
 8001916:	d911      	bls.n	800193c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	22ff      	movs	r2, #255	; 0xff
 800191c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001922:	b2da      	uxtb	r2, r3
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	045c      	lsls	r4, r3, #17
 8001928:	230a      	movs	r3, #10
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	8819      	ldrh	r1, [r3, #0]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <HAL_I2C_Mem_Read+0x260>)
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	0023      	movs	r3, r4
 8001936:	f001 fe79 	bl	800362c <I2C_TransferConfig>
 800193a:	e012      	b.n	8001962 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194a:	b2da      	uxtb	r2, r3
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	049c      	lsls	r4, r3, #18
 8001950:	230a      	movs	r3, #10
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	8819      	ldrh	r1, [r3, #0]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <HAL_I2C_Mem_Read+0x260>)
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	0023      	movs	r3, r4
 800195e:	f001 fe65 	bl	800362c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	0013      	movs	r3, r2
 800196c:	2200      	movs	r2, #0
 800196e:	2104      	movs	r1, #4
 8001970:	f001 fcbc 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e082      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03a      	beq.n	8001a2e <HAL_I2C_Mem_Read+0x202>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d136      	bne.n	8001a2e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	0013      	movs	r3, r2
 80019ca:	2200      	movs	r2, #0
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	f001 fc8d 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e053      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2bff      	cmp	r3, #255	; 0xff
 80019e2:	d911      	bls.n	8001a08 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	22ff      	movs	r2, #255	; 0xff
 80019e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	045c      	lsls	r4, r3, #17
 80019f4:	230a      	movs	r3, #10
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	8819      	ldrh	r1, [r3, #0]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	2300      	movs	r3, #0
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	0023      	movs	r3, r4
 8001a02:	f001 fe13 	bl	800362c <I2C_TransferConfig>
 8001a06:	e012      	b.n	8001a2e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	049c      	lsls	r4, r3, #18
 8001a1c:	230a      	movs	r3, #10
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	8819      	ldrh	r1, [r3, #0]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	0023      	movs	r3, r4
 8001a2a:	f001 fdff 	bl	800362c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d194      	bne.n	8001962 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f001 fcd2 	bl	80033e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e01a      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2220      	movs	r2, #32
 8001a52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	490c      	ldr	r1, [pc, #48]	; (8001a90 <HAL_I2C_Mem_Read+0x264>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2241      	movs	r2, #65	; 0x41
 8001a68:	2120      	movs	r1, #32
 8001a6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2242      	movs	r2, #66	; 0x42
 8001a70:	2100      	movs	r1, #0
 8001a72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2240      	movs	r2, #64	; 0x40
 8001a78:	2100      	movs	r1, #0
 8001a7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e000      	b.n	8001a82 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001a80:	2302      	movs	r3, #2
  }
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b007      	add	sp, #28
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	80002400 	.word	0x80002400
 8001a90:	fe00e800 	.word	0xfe00e800

08001a94 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	000c      	movs	r4, r1
 8001a9e:	0010      	movs	r0, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	230a      	movs	r3, #10
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	1c22      	adds	r2, r4, #0
 8001aa8:	801a      	strh	r2, [r3, #0]
 8001aaa:	2308      	movs	r3, #8
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	1c02      	adds	r2, r0, #0
 8001ab0:	801a      	strh	r2, [r3, #0]
 8001ab2:	1dbb      	adds	r3, r7, #6
 8001ab4:	1c0a      	adds	r2, r1, #0
 8001ab6:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2241      	movs	r2, #65	; 0x41
 8001abc:	5c9b      	ldrb	r3, [r3, r2]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d000      	beq.n	8001ac6 <HAL_I2C_Mem_Write_IT+0x32>
 8001ac4:	e085      	b.n	8001bd2 <HAL_I2C_Mem_Write_IT+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d004      	beq.n	8001ad6 <HAL_I2C_Mem_Write_IT+0x42>
 8001acc:	232c      	movs	r3, #44	; 0x2c
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_I2C_Mem_Write_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e078      	b.n	8001bd4 <HAL_I2C_Mem_Write_IT+0x140>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	401a      	ands	r2, r3
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d101      	bne.n	8001afa <HAL_I2C_Mem_Write_IT+0x66>
    {
      return HAL_BUSY;
 8001af6:	2302      	movs	r3, #2
 8001af8:	e06c      	b.n	8001bd4 <HAL_I2C_Mem_Write_IT+0x140>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_I2C_Mem_Write_IT+0x74>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e065      	b.n	8001bd4 <HAL_I2C_Mem_Write_IT+0x140>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b10:	f7fe ff96 	bl	8000a40 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	613b      	str	r3, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2241      	movs	r2, #65	; 0x41
 8001b1c:	2121      	movs	r1, #33	; 0x21
 8001b1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2242      	movs	r2, #66	; 0x42
 8001b24:	2140      	movs	r1, #64	; 0x40
 8001b26:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	222c      	movs	r2, #44	; 0x2c
 8001b38:	18ba      	adds	r2, r7, r2
 8001b3a:	8812      	ldrh	r2, [r2, #0]
 8001b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <HAL_I2C_Mem_Write_IT+0x148>)
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4a26      	ldr	r2, [pc, #152]	; (8001be0 <HAL_I2C_Mem_Write_IT+0x14c>)
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2bff      	cmp	r3, #255	; 0xff
 8001b52:	d906      	bls.n	8001b62 <HAL_I2C_Mem_Write_IT+0xce>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	22ff      	movs	r2, #255	; 0xff
 8001b58:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	045b      	lsls	r3, r3, #17
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e007      	b.n	8001b72 <HAL_I2C_Mem_Write_IT+0xde>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	049b      	lsls	r3, r3, #18
 8001b70:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 8001b72:	1dbb      	adds	r3, r7, #6
 8001b74:	881c      	ldrh	r4, [r3, #0]
 8001b76:	2308      	movs	r3, #8
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	881a      	ldrh	r2, [r3, #0]
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	8819      	ldrh	r1, [r3, #0]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	2319      	movs	r3, #25
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	0023      	movs	r3, r4
 8001b8e:	f000 fdff 	bl	8002790 <I2C_RequestMemoryWrite>
 8001b92:	1e03      	subs	r3, r0, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_I2C_Mem_Write_IT+0x10e>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e018      	b.n	8001bd4 <HAL_I2C_Mem_Write_IT+0x140>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	697c      	ldr	r4, [r7, #20]
 8001baa:	230a      	movs	r3, #10
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	8819      	ldrh	r1, [r3, #0]
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	0023      	movs	r3, r4
 8001bb8:	f001 fd38 	bl	800362c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2240      	movs	r2, #64	; 0x40
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f001 fd65 	bl	8003698 <I2C_Enable_IRQ>

    return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_I2C_Mem_Write_IT+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001bd2:	2302      	movs	r3, #2
  }
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b007      	add	sp, #28
 8001bda:	bd90      	pop	{r4, r7, pc}
 8001bdc:	ffff0000 	.word	0xffff0000
 8001be0:	08001ee1 	.word	0x08001ee1

08001be4 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	000c      	movs	r4, r1
 8001bee:	0010      	movs	r0, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	1c22      	adds	r2, r4, #0
 8001bf8:	801a      	strh	r2, [r3, #0]
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	1c02      	adds	r2, r0, #0
 8001c00:	801a      	strh	r2, [r3, #0]
 8001c02:	1dbb      	adds	r3, r7, #6
 8001c04:	1c0a      	adds	r2, r1, #0
 8001c06:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2241      	movs	r2, #65	; 0x41
 8001c0c:	5c9b      	ldrb	r3, [r3, r2]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d000      	beq.n	8001c16 <HAL_I2C_Mem_Read_IT+0x32>
 8001c14:	e085      	b.n	8001d22 <HAL_I2C_Mem_Read_IT+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <HAL_I2C_Mem_Read_IT+0x42>
 8001c1c:	232c      	movs	r3, #44	; 0x2c
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <HAL_I2C_Mem_Read_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e078      	b.n	8001d24 <HAL_I2C_Mem_Read_IT+0x140>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d101      	bne.n	8001c4a <HAL_I2C_Mem_Read_IT+0x66>
    {
      return HAL_BUSY;
 8001c46:	2302      	movs	r3, #2
 8001c48:	e06c      	b.n	8001d24 <HAL_I2C_Mem_Read_IT+0x140>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2240      	movs	r2, #64	; 0x40
 8001c4e:	5c9b      	ldrb	r3, [r3, r2]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_I2C_Mem_Read_IT+0x74>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e065      	b.n	8001d24 <HAL_I2C_Mem_Read_IT+0x140>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2240      	movs	r2, #64	; 0x40
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c60:	f7fe feee 	bl	8000a40 <HAL_GetTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	613b      	str	r3, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2241      	movs	r2, #65	; 0x41
 8001c6c:	2122      	movs	r1, #34	; 0x22
 8001c6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2242      	movs	r2, #66	; 0x42
 8001c74:	2140      	movs	r1, #64	; 0x40
 8001c76:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	222c      	movs	r2, #44	; 0x2c
 8001c88:	18ba      	adds	r2, r7, r2
 8001c8a:	8812      	ldrh	r2, [r2, #0]
 8001c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4a26      	ldr	r2, [pc, #152]	; (8001d2c <HAL_I2C_Mem_Read_IT+0x148>)
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <HAL_I2C_Mem_Read_IT+0x14c>)
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2bff      	cmp	r3, #255	; 0xff
 8001ca2:	d906      	bls.n	8001cb2 <HAL_I2C_Mem_Read_IT+0xce>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	22ff      	movs	r2, #255	; 0xff
 8001ca8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	045b      	lsls	r3, r3, #17
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e007      	b.n	8001cc2 <HAL_I2C_Mem_Read_IT+0xde>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	049b      	lsls	r3, r3, #18
 8001cc0:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001cc2:	1dbb      	adds	r3, r7, #6
 8001cc4:	881c      	ldrh	r4, [r3, #0]
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	230a      	movs	r3, #10
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	8819      	ldrh	r1, [r3, #0]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2319      	movs	r3, #25
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	0023      	movs	r3, r4
 8001cde:	f000 fdbb 	bl	8002858 <I2C_RequestMemoryRead>
 8001ce2:	1e03      	subs	r3, r0, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_I2C_Mem_Read_IT+0x10e>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	2100      	movs	r1, #0
 8001cec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e018      	b.n	8001d24 <HAL_I2C_Mem_Read_IT+0x140>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	697c      	ldr	r4, [r7, #20]
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	8819      	ldrh	r1, [r3, #0]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_I2C_Mem_Read_IT+0x150>)
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	0023      	movs	r3, r4
 8001d08:	f001 fc90 	bl	800362c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	2100      	movs	r1, #0
 8001d12:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2102      	movs	r1, #2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f001 fcbd 	bl	8003698 <I2C_Enable_IRQ>

    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_I2C_Mem_Read_IT+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001d22:	2302      	movs	r3, #2
  }
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b007      	add	sp, #28
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	ffff0000 	.word	0xffff0000
 8001d30:	08001ee1 	.word	0x08001ee1
 8001d34:	80002400 	.word	0x80002400

08001d38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	68f9      	ldr	r1, [r7, #12]
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
  }
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b004      	add	sp, #16
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	001a      	movs	r2, r3
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d010      	beq.n	8001db2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	09db      	lsrs	r3, r3, #7
 8001d94:	001a      	movs	r2, r3
 8001d96:	2301      	movs	r3, #1
 8001d98:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d9a:	d00a      	beq.n	8001db2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	2201      	movs	r2, #1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	0052      	lsls	r2, r2, #1
 8001db0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	0a9b      	lsrs	r3, r3, #10
 8001db6:	001a      	movs	r2, r3
 8001db8:	2301      	movs	r3, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d010      	beq.n	8001de0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	09db      	lsrs	r3, r3, #7
 8001dc2:	001a      	movs	r2, r3
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001dc8:	d00a      	beq.n	8001de0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	2208      	movs	r2, #8
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	00d2      	lsls	r2, r2, #3
 8001dde:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	0a5b      	lsrs	r3, r3, #9
 8001de4:	001a      	movs	r2, r3
 8001de6:	2301      	movs	r3, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	d010      	beq.n	8001e0e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	09db      	lsrs	r3, r3, #7
 8001df0:	001a      	movs	r2, r3
 8001df2:	2301      	movs	r3, #1
 8001df4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001df6:	d00a      	beq.n	8001e0e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	220b      	movs	r2, #11
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d005      	beq.n	8001e28 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0011      	movs	r1, r2
 8001e22:	0018      	movs	r0, r3
 8001e24:	f001 f916 	bl	8003054 <I2C_ITError>
  }
}
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b006      	add	sp, #24
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b002      	add	sp, #8
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	0008      	movs	r0, r1
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	1cfb      	adds	r3, r7, #3
 8001e7e:	1c02      	adds	r2, r0, #0
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	003b      	movs	r3, r7
 8001e84:	1c0a      	adds	r2, r1, #0
 8001e86:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b002      	add	sp, #8
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	5c9b      	ldrb	r3, [r3, r2]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <I2C_Master_ISR_IT+0x1e>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e12b      	b.n	8002156 <I2C_Master_ISR_IT+0x276>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d014      	beq.n	8001f3c <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	001a      	movs	r2, r3
 8001f18:	2301      	movs	r3, #1
 8001f1a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f1c:	d00e      	beq.n	8001f3c <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2210      	movs	r2, #16
 8001f24:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f001 f998 	bl	800326a <I2C_Flush_TXDR>
 8001f3a:	e0f5      	b.n	8002128 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	001a      	movs	r2, r3
 8001f42:	2301      	movs	r3, #1
 8001f44:	4013      	ands	r3, r2
 8001f46:	d023      	beq.n	8001f90 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	2301      	movs	r3, #1
 8001f50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f52:	d01d      	beq.n	8001f90 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2204      	movs	r2, #4
 8001f58:	4393      	bics	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f8e:	e0cb      	b.n	8002128 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	001a      	movs	r2, r3
 8001f96:	2301      	movs	r3, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d01e      	beq.n	8001fda <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001fa6:	d018      	beq.n	8001fda <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fd8:	e0a6      	b.n	8002128 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	09db      	lsrs	r3, r3, #7
 8001fde:	001a      	movs	r2, r3
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d100      	bne.n	8001fe8 <I2C_Master_ISR_IT+0x108>
 8001fe6:	e06b      	b.n	80020c0 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	099b      	lsrs	r3, r3, #6
 8001fec:	001a      	movs	r2, r3
 8001fee:	2301      	movs	r3, #1
 8001ff0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ff2:	d065      	beq.n	80020c0 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d04a      	beq.n	8002094 <I2C_Master_ISR_IT+0x1b4>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	2b00      	cmp	r3, #0
 8002004:	d146      	bne.n	8002094 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	b29a      	uxth	r2, r3
 800200e:	2112      	movs	r1, #18
 8002010:	187b      	adds	r3, r7, r1
 8002012:	0592      	lsls	r2, r2, #22
 8002014:	0d92      	lsrs	r2, r2, #22
 8002016:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	2bff      	cmp	r3, #255	; 0xff
 8002020:	d910      	bls.n	8002044 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	22ff      	movs	r2, #255	; 0xff
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202c:	b2da      	uxtb	r2, r3
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	045c      	lsls	r4, r3, #17
 8002032:	187b      	adds	r3, r7, r1
 8002034:	8819      	ldrh	r1, [r3, #0]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	2300      	movs	r3, #0
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	0023      	movs	r3, r4
 800203e:	f001 faf5 	bl	800362c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002042:	e03c      	b.n	80020be <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	4a43      	ldr	r2, [pc, #268]	; (8002160 <I2C_Master_ISR_IT+0x280>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00e      	beq.n	8002076 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205c:	b2da      	uxtb	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002062:	2312      	movs	r3, #18
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	8819      	ldrh	r1, [r3, #0]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	2300      	movs	r3, #0
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	0023      	movs	r3, r4
 8002070:	f001 fadc 	bl	800362c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002074:	e023      	b.n	80020be <I2C_Master_ISR_IT+0x1de>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	b2da      	uxtb	r2, r3
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	049c      	lsls	r4, r3, #18
 8002080:	2312      	movs	r3, #18
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	8819      	ldrh	r1, [r3, #0]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	2300      	movs	r3, #0
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	0023      	movs	r3, r4
 800208e:	f001 facd 	bl	800362c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002092:	e014      	b.n	80020be <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	049b      	lsls	r3, r3, #18
 800209e:	401a      	ands	r2, r3
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	049b      	lsls	r3, r3, #18
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d004      	beq.n	80020b2 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 fcda 	bl	8002a64 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020b0:	e03a      	b.n	8002128 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2140      	movs	r1, #64	; 0x40
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 ffcc 	bl	8003054 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020bc:	e034      	b.n	8002128 <I2C_Master_ISR_IT+0x248>
 80020be:	e033      	b.n	8002128 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	099b      	lsrs	r3, r3, #6
 80020c4:	001a      	movs	r2, r3
 80020c6:	2301      	movs	r3, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	d02d      	beq.n	8002128 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	001a      	movs	r2, r3
 80020d2:	2301      	movs	r3, #1
 80020d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80020d6:	d027      	beq.n	8002128 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d11d      	bne.n	800211e <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	049b      	lsls	r3, r3, #18
 80020ec:	401a      	ands	r2, r3
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	049b      	lsls	r3, r3, #18
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d018      	beq.n	8002128 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	4a19      	ldr	r2, [pc, #100]	; (8002160 <I2C_Master_ISR_IT+0x280>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d109      	bne.n	8002114 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	01c9      	lsls	r1, r1, #7
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	e009      	b.n	8002128 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	0018      	movs	r0, r3
 8002118:	f000 fca4 	bl	8002a64 <I2C_ITMasterSeqCplt>
 800211c:	e004      	b.n	8002128 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2140      	movs	r1, #64	; 0x40
 8002122:	0018      	movs	r0, r3
 8002124:	f000 ff96 	bl	8003054 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	001a      	movs	r2, r3
 800212e:	2301      	movs	r3, #1
 8002130:	4013      	ands	r3, r2
 8002132:	d00b      	beq.n	800214c <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	001a      	movs	r2, r3
 800213a:	2301      	movs	r3, #1
 800213c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800213e:	d005      	beq.n	800214c <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	0011      	movs	r1, r2
 8002146:	0018      	movs	r0, r3
 8002148:	f000 fd34 	bl	8002bb4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	2100      	movs	r1, #0
 8002152:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b007      	add	sp, #28
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	ffff0000 	.word	0xffff0000

08002164 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2240      	movs	r2, #64	; 0x40
 800217e:	5c9b      	ldrb	r3, [r3, r2]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <I2C_Slave_ISR_IT+0x24>
 8002184:	2302      	movs	r3, #2
 8002186:	e0fa      	b.n	800237e <I2C_Slave_ISR_IT+0x21a>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2240      	movs	r2, #64	; 0x40
 800218c:	2101      	movs	r1, #1
 800218e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	001a      	movs	r2, r3
 8002196:	2301      	movs	r3, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d00b      	beq.n	80021b4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	001a      	movs	r2, r3
 80021a2:	2301      	movs	r3, #1
 80021a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021a6:	d005      	beq.n	80021b4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	0011      	movs	r1, r2
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 fdd2 	bl	8002d58 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	001a      	movs	r2, r3
 80021ba:	2301      	movs	r3, #1
 80021bc:	4013      	ands	r3, r2
 80021be:	d054      	beq.n	800226a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	001a      	movs	r2, r3
 80021c6:	2301      	movs	r3, #1
 80021c8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021ca:	d04e      	beq.n	800226a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d12d      	bne.n	8002232 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2241      	movs	r2, #65	; 0x41
 80021da:	5c9b      	ldrb	r3, [r3, r2]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b28      	cmp	r3, #40	; 0x28
 80021e0:	d10b      	bne.n	80021fa <I2C_Slave_ISR_IT+0x96>
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	049b      	lsls	r3, r3, #18
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d106      	bne.n	80021fa <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	0011      	movs	r1, r2
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 fed4 	bl	8002fa0 <I2C_ITListenCplt>
 80021f8:	e036      	b.n	8002268 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2241      	movs	r2, #65	; 0x41
 80021fe:	5c9b      	ldrb	r3, [r3, r2]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b29      	cmp	r3, #41	; 0x29
 8002204:	d110      	bne.n	8002228 <I2C_Slave_ISR_IT+0xc4>
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	4a5f      	ldr	r2, [pc, #380]	; (8002388 <I2C_Slave_ISR_IT+0x224>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00c      	beq.n	8002228 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2210      	movs	r2, #16
 8002214:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	0018      	movs	r0, r3
 800221a:	f001 f826 	bl	800326a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 fc61 	bl	8002ae8 <I2C_ITSlaveSeqCplt>
 8002226:	e01f      	b.n	8002268 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2210      	movs	r2, #16
 800222e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002230:	e09d      	b.n	800236e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	2204      	movs	r2, #4
 8002240:	431a      	orrs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <I2C_Slave_ISR_IT+0xf4>
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	045b      	lsls	r3, r3, #17
 8002252:	429a      	cmp	r2, r3
 8002254:	d000      	beq.n	8002258 <I2C_Slave_ISR_IT+0xf4>
 8002256:	e08a      	b.n	800236e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	0011      	movs	r1, r2
 8002260:	0018      	movs	r0, r3
 8002262:	f000 fef7 	bl	8003054 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002266:	e082      	b.n	800236e <I2C_Slave_ISR_IT+0x20a>
 8002268:	e081      	b.n	800236e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	001a      	movs	r2, r3
 8002270:	2301      	movs	r3, #1
 8002272:	4013      	ands	r3, r2
 8002274:	d031      	beq.n	80022da <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	001a      	movs	r2, r3
 800227c:	2301      	movs	r3, #1
 800227e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002280:	d02b      	beq.n	80022da <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d018      	beq.n	80022be <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d154      	bne.n	8002372 <I2C_Slave_ISR_IT+0x20e>
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	4a2f      	ldr	r2, [pc, #188]	; (8002388 <I2C_Slave_ISR_IT+0x224>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d050      	beq.n	8002372 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 fc08 	bl	8002ae8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80022d8:	e04b      	b.n	8002372 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	001a      	movs	r2, r3
 80022e0:	2301      	movs	r3, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	d00c      	beq.n	8002300 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	001a      	movs	r2, r3
 80022ec:	2301      	movs	r3, #1
 80022ee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80022f0:	d006      	beq.n	8002300 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	0011      	movs	r1, r2
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 fb0f 	bl	800291c <I2C_ITAddrCplt>
 80022fe:	e039      	b.n	8002374 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	001a      	movs	r2, r3
 8002306:	2301      	movs	r3, #1
 8002308:	4013      	ands	r3, r2
 800230a:	d033      	beq.n	8002374 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	001a      	movs	r2, r3
 8002312:	2301      	movs	r3, #1
 8002314:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002316:	d02d      	beq.n	8002374 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d018      	beq.n	8002354 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	; 0x28
 8002352:	e00f      	b.n	8002374 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	045b      	lsls	r3, r3, #17
 800235a:	429a      	cmp	r2, r3
 800235c:	d002      	beq.n	8002364 <I2C_Slave_ISR_IT+0x200>
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d107      	bne.n	8002374 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	0018      	movs	r0, r3
 8002368:	f000 fbbe 	bl	8002ae8 <I2C_ITSlaveSeqCplt>
 800236c:	e002      	b.n	8002374 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	e000      	b.n	8002374 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8002372:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2240      	movs	r2, #64	; 0x40
 8002378:	2100      	movs	r1, #0
 800237a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b006      	add	sp, #24
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	ffff0000 	.word	0xffff0000

0800238c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2240      	movs	r2, #64	; 0x40
 800239c:	5c9b      	ldrb	r3, [r3, r2]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <I2C_Master_ISR_DMA+0x1a>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0f7      	b.n	8002596 <I2C_Master_ISR_DMA+0x20a>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2240      	movs	r2, #64	; 0x40
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	001a      	movs	r2, r3
 80023b4:	2301      	movs	r3, #1
 80023b6:	4013      	ands	r3, r2
 80023b8:	d019      	beq.n	80023ee <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	001a      	movs	r2, r3
 80023c0:	2301      	movs	r3, #1
 80023c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80023c4:	d013      	beq.n	80023ee <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2210      	movs	r2, #16
 80023cc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	2204      	movs	r2, #4
 80023d4:	431a      	orrs	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2120      	movs	r1, #32
 80023de:	0018      	movs	r0, r3
 80023e0:	f001 f95a 	bl	8003698 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 ff3f 	bl	800326a <I2C_Flush_TXDR>
 80023ec:	e0ce      	b.n	800258c <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	09db      	lsrs	r3, r3, #7
 80023f2:	001a      	movs	r2, r3
 80023f4:	2301      	movs	r3, #1
 80023f6:	4013      	ands	r3, r2
 80023f8:	d100      	bne.n	80023fc <I2C_Master_ISR_DMA+0x70>
 80023fa:	e07e      	b.n	80024fa <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	099b      	lsrs	r3, r3, #6
 8002400:	001a      	movs	r2, r3
 8002402:	2301      	movs	r3, #1
 8002404:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002406:	d100      	bne.n	800240a <I2C_Master_ISR_DMA+0x7e>
 8002408:	e077      	b.n	80024fa <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	438a      	bics	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d055      	beq.n	80024d0 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	b29a      	uxth	r2, r3
 800242c:	2312      	movs	r3, #18
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	0592      	lsls	r2, r2, #22
 8002432:	0d92      	lsrs	r2, r2, #22
 8002434:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	2bff      	cmp	r3, #255	; 0xff
 800243e:	d906      	bls.n	800244e <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	22ff      	movs	r2, #255	; 0xff
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	045b      	lsls	r3, r3, #17
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	e010      	b.n	8002470 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	4a50      	ldr	r2, [pc, #320]	; (80025a0 <I2C_Master_ISR_DMA+0x214>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d003      	beq.n	800246a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e002      	b.n	8002470 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	049b      	lsls	r3, r3, #18
 800246e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	b2da      	uxtb	r2, r3
 8002476:	697c      	ldr	r4, [r7, #20]
 8002478:	2312      	movs	r3, #18
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	8819      	ldrh	r1, [r3, #0]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	0023      	movs	r3, r4
 8002486:	f001 f8d1 	bl	800362c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2241      	movs	r2, #65	; 0x41
 80024a0:	5c9b      	ldrb	r3, [r3, r2]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b22      	cmp	r3, #34	; 0x22
 80024a6:	d109      	bne.n	80024bc <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	0209      	lsls	r1, r1, #8
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80024ba:	e067      	b.n	800258c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2180      	movs	r1, #128	; 0x80
 80024c8:	01c9      	lsls	r1, r1, #7
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80024ce:	e05d      	b.n	800258c <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	049b      	lsls	r3, r3, #18
 80024da:	401a      	ands	r2, r3
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	049b      	lsls	r3, r3, #18
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d004      	beq.n	80024ee <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 fabc 	bl	8002a64 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80024ec:	e04e      	b.n	800258c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2140      	movs	r1, #64	; 0x40
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fdae 	bl	8003054 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80024f8:	e048      	b.n	800258c <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	001a      	movs	r2, r3
 8002500:	2301      	movs	r3, #1
 8002502:	4013      	ands	r3, r2
 8002504:	d02e      	beq.n	8002564 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	001a      	movs	r2, r3
 800250c:	2301      	movs	r3, #1
 800250e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002510:	d028      	beq.n	8002564 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d11d      	bne.n	8002558 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	049b      	lsls	r3, r3, #18
 8002526:	401a      	ands	r2, r3
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	049b      	lsls	r3, r3, #18
 800252c:	429a      	cmp	r2, r3
 800252e:	d02c      	beq.n	800258a <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	4a1a      	ldr	r2, [pc, #104]	; (80025a0 <I2C_Master_ISR_DMA+0x214>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d109      	bne.n	800254e <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	01c9      	lsls	r1, r1, #7
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800254c:	e01d      	b.n	800258a <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	0018      	movs	r0, r3
 8002552:	f000 fa87 	bl	8002a64 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002556:	e018      	b.n	800258a <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2140      	movs	r1, #64	; 0x40
 800255c:	0018      	movs	r0, r3
 800255e:	f000 fd79 	bl	8003054 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002562:	e012      	b.n	800258a <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	001a      	movs	r2, r3
 800256a:	2301      	movs	r3, #1
 800256c:	4013      	ands	r3, r2
 800256e:	d00d      	beq.n	800258c <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	001a      	movs	r2, r3
 8002576:	2301      	movs	r3, #1
 8002578:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800257a:	d007      	beq.n	800258c <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	0011      	movs	r1, r2
 8002582:	0018      	movs	r0, r3
 8002584:	f000 fb16 	bl	8002bb4 <I2C_ITMasterCplt>
 8002588:	e000      	b.n	800258c <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 800258a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2240      	movs	r2, #64	; 0x40
 8002590:	2100      	movs	r1, #0
 8002592:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b007      	add	sp, #28
 800259c:	bd90      	pop	{r4, r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	ffff0000 	.word	0xffff0000

080025a4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2240      	movs	r2, #64	; 0x40
 80025be:	5c9b      	ldrb	r3, [r3, r2]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <I2C_Slave_ISR_DMA+0x24>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e0dd      	b.n	8002784 <I2C_Slave_ISR_DMA+0x1e0>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	2101      	movs	r1, #1
 80025ce:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	001a      	movs	r2, r3
 80025d6:	2301      	movs	r3, #1
 80025d8:	4013      	ands	r3, r2
 80025da:	d00b      	beq.n	80025f4 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	001a      	movs	r2, r3
 80025e2:	2301      	movs	r3, #1
 80025e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025e6:	d005      	beq.n	80025f4 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	0011      	movs	r1, r2
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 fbb2 	bl	8002d58 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	001a      	movs	r2, r3
 80025fa:	2301      	movs	r3, #1
 80025fc:	4013      	ands	r3, r2
 80025fe:	d100      	bne.n	8002602 <I2C_Slave_ISR_DMA+0x5e>
 8002600:	e0a9      	b.n	8002756 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	001a      	movs	r2, r3
 8002608:	2301      	movs	r3, #1
 800260a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800260c:	d100      	bne.n	8002610 <I2C_Slave_ISR_DMA+0x6c>
 800260e:	e0a2      	b.n	8002756 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0b9b      	lsrs	r3, r3, #14
 8002614:	001a      	movs	r2, r3
 8002616:	2301      	movs	r3, #1
 8002618:	4013      	ands	r3, r2
 800261a:	d106      	bne.n	800262a <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	0bdb      	lsrs	r3, r3, #15
 8002620:	001a      	movs	r2, r3
 8002622:	2301      	movs	r3, #1
 8002624:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002626:	d100      	bne.n	800262a <I2C_Slave_ISR_DMA+0x86>
 8002628:	e08e      	b.n	8002748 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0bdb      	lsrs	r3, r3, #15
 8002636:	001a      	movs	r2, r3
 8002638:	2301      	movs	r3, #1
 800263a:	4013      	ands	r3, r2
 800263c:	d007      	beq.n	800264e <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 800264a:	2301      	movs	r3, #1
 800264c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00d      	beq.n	8002672 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0b9b      	lsrs	r3, r3, #14
 800265a:	001a      	movs	r2, r3
 800265c:	2301      	movs	r3, #1
 800265e:	4013      	ands	r3, r2
 8002660:	d007      	beq.n	8002672 <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 800266e:	2301      	movs	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d12d      	bne.n	80026d4 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2241      	movs	r2, #65	; 0x41
 800267c:	5c9b      	ldrb	r3, [r3, r2]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b28      	cmp	r3, #40	; 0x28
 8002682:	d10b      	bne.n	800269c <I2C_Slave_ISR_DMA+0xf8>
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	049b      	lsls	r3, r3, #18
 800268a:	429a      	cmp	r2, r3
 800268c:	d106      	bne.n	800269c <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	0011      	movs	r1, r2
 8002694:	0018      	movs	r0, r3
 8002696:	f000 fc83 	bl	8002fa0 <I2C_ITListenCplt>
 800269a:	e054      	b.n	8002746 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2241      	movs	r2, #65	; 0x41
 80026a0:	5c9b      	ldrb	r3, [r3, r2]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b29      	cmp	r3, #41	; 0x29
 80026a6:	d110      	bne.n	80026ca <I2C_Slave_ISR_DMA+0x126>
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4a38      	ldr	r2, [pc, #224]	; (800278c <I2C_Slave_ISR_DMA+0x1e8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00c      	beq.n	80026ca <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2210      	movs	r2, #16
 80026b6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fdd5 	bl	800326a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fa10 	bl	8002ae8 <I2C_ITSlaveSeqCplt>
 80026c8:	e03d      	b.n	8002746 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2210      	movs	r2, #16
 80026d0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80026d2:	e03e      	b.n	8002752 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2210      	movs	r2, #16
 80026da:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	2204      	movs	r2, #4
 80026e2:	431a      	orrs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80026e8:	2317      	movs	r3, #23
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	2141      	movs	r1, #65	; 0x41
 80026f0:	5c52      	ldrb	r2, [r2, r1]
 80026f2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <I2C_Slave_ISR_DMA+0x160>
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	045b      	lsls	r3, r3, #17
 8002700:	429a      	cmp	r2, r3
 8002702:	d126      	bne.n	8002752 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002704:	2217      	movs	r2, #23
 8002706:	18bb      	adds	r3, r7, r2
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b21      	cmp	r3, #33	; 0x21
 800270c:	d003      	beq.n	8002716 <I2C_Slave_ISR_DMA+0x172>
 800270e:	18bb      	adds	r3, r7, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b29      	cmp	r3, #41	; 0x29
 8002714:	d103      	bne.n	800271e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2221      	movs	r2, #33	; 0x21
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
 800271c:	e00b      	b.n	8002736 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800271e:	2217      	movs	r2, #23
 8002720:	18bb      	adds	r3, r7, r2
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b22      	cmp	r3, #34	; 0x22
 8002726:	d003      	beq.n	8002730 <I2C_Slave_ISR_DMA+0x18c>
 8002728:	18bb      	adds	r3, r7, r2
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b2a      	cmp	r3, #42	; 0x2a
 800272e:	d102      	bne.n	8002736 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2222      	movs	r2, #34	; 0x22
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	0011      	movs	r1, r2
 800273e:	0018      	movs	r0, r3
 8002740:	f000 fc88 	bl	8003054 <I2C_ITError>
      if (treatdmanack == 1U)
 8002744:	e005      	b.n	8002752 <I2C_Slave_ISR_DMA+0x1ae>
 8002746:	e004      	b.n	8002752 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002750:	e013      	b.n	800277a <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8002752:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002754:	e011      	b.n	800277a <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	001a      	movs	r2, r3
 800275c:	2301      	movs	r3, #1
 800275e:	4013      	ands	r3, r2
 8002760:	d00b      	beq.n	800277a <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	001a      	movs	r2, r3
 8002768:	2301      	movs	r3, #1
 800276a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800276c:	d005      	beq.n	800277a <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	0011      	movs	r1, r2
 8002774:	0018      	movs	r0, r3
 8002776:	f000 f8d1 	bl	800291c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	2100      	movs	r1, #0
 8002780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b008      	add	sp, #32
 800278a:	bd80      	pop	{r7, pc}
 800278c:	ffff0000 	.word	0xffff0000

08002790 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	000c      	movs	r4, r1
 800279a:	0010      	movs	r0, r2
 800279c:	0019      	movs	r1, r3
 800279e:	250a      	movs	r5, #10
 80027a0:	197b      	adds	r3, r7, r5
 80027a2:	1c22      	adds	r2, r4, #0
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	2308      	movs	r3, #8
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	1c02      	adds	r2, r0, #0
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	1dbb      	adds	r3, r7, #6
 80027b0:	1c0a      	adds	r2, r1, #0
 80027b2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	045c      	lsls	r4, r3, #17
 80027be:	197b      	adds	r3, r7, r5
 80027c0:	8819      	ldrh	r1, [r3, #0]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <I2C_RequestMemoryWrite+0xc4>)
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	0023      	movs	r3, r4
 80027ca:	f000 ff2f 	bl	800362c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	6a39      	ldr	r1, [r7, #32]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 fdc8 	bl	800336a <I2C_WaitOnTXISFlagUntilTimeout>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d001      	beq.n	80027e2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e033      	b.n	800284a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027e2:	1dbb      	adds	r3, r7, #6
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ea:	2308      	movs	r3, #8
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
 80027f8:	e019      	b.n	800282e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027fa:	2308      	movs	r3, #8
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	b29b      	uxth	r3, r3
 8002804:	b2da      	uxtb	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	6a39      	ldr	r1, [r7, #32]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	0018      	movs	r0, r3
 8002814:	f000 fda9 	bl	800336a <I2C_WaitOnTXISFlagUntilTimeout>
 8002818:	1e03      	subs	r3, r0, #0
 800281a:	d001      	beq.n	8002820 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e014      	b.n	800284a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002820:	2308      	movs	r3, #8
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800282e:	6a3a      	ldr	r2, [r7, #32]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	0013      	movs	r3, r2
 8002838:	2200      	movs	r2, #0
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	f000 fd56 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d001      	beq.n	8002848 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bdb0      	pop	{r4, r5, r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	80002000 	.word	0x80002000

08002858 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002858:	b5b0      	push	{r4, r5, r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	000c      	movs	r4, r1
 8002862:	0010      	movs	r0, r2
 8002864:	0019      	movs	r1, r3
 8002866:	250a      	movs	r5, #10
 8002868:	197b      	adds	r3, r7, r5
 800286a:	1c22      	adds	r2, r4, #0
 800286c:	801a      	strh	r2, [r3, #0]
 800286e:	2308      	movs	r3, #8
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	1c02      	adds	r2, r0, #0
 8002874:	801a      	strh	r2, [r3, #0]
 8002876:	1dbb      	adds	r3, r7, #6
 8002878:	1c0a      	adds	r2, r1, #0
 800287a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800287c:	1dbb      	adds	r3, r7, #6
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	197b      	adds	r3, r7, r5
 8002884:	8819      	ldrh	r1, [r3, #0]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	4b23      	ldr	r3, [pc, #140]	; (8002918 <I2C_RequestMemoryRead+0xc0>)
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	2300      	movs	r3, #0
 800288e:	f000 fecd 	bl	800362c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002894:	6a39      	ldr	r1, [r7, #32]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 fd66 	bl	800336a <I2C_WaitOnTXISFlagUntilTimeout>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e033      	b.n	800290e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028a6:	1dbb      	adds	r3, r7, #6
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ae:	2308      	movs	r3, #8
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
 80028bc:	e019      	b.n	80028f2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028be:	2308      	movs	r3, #8
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	6a39      	ldr	r1, [r7, #32]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 fd47 	bl	800336a <I2C_WaitOnTXISFlagUntilTimeout>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d001      	beq.n	80028e4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e014      	b.n	800290e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028e4:	2308      	movs	r3, #8
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028f2:	6a3a      	ldr	r2, [r7, #32]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	0013      	movs	r3, r2
 80028fc:	2200      	movs	r2, #0
 80028fe:	2140      	movs	r1, #64	; 0x40
 8002900:	f000 fcf4 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d001      	beq.n	800290c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b004      	add	sp, #16
 8002914:	bdb0      	pop	{r4, r5, r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	80002000 	.word	0x80002000

0800291c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800291c:	b5b0      	push	{r4, r5, r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2241      	movs	r2, #65	; 0x41
 800292a:	5c9b      	ldrb	r3, [r3, r2]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	001a      	movs	r2, r3
 8002930:	2328      	movs	r3, #40	; 0x28
 8002932:	4013      	ands	r3, r2
 8002934:	2b28      	cmp	r3, #40	; 0x28
 8002936:	d000      	beq.n	800293a <I2C_ITAddrCplt+0x1e>
 8002938:	e088      	b.n	8002a4c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	b2da      	uxtb	r2, r3
 8002944:	250f      	movs	r5, #15
 8002946:	197b      	adds	r3, r7, r5
 8002948:	2101      	movs	r1, #1
 800294a:	400a      	ands	r2, r1
 800294c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	b29a      	uxth	r2, r3
 8002958:	200c      	movs	r0, #12
 800295a:	183b      	adds	r3, r7, r0
 800295c:	21fe      	movs	r1, #254	; 0xfe
 800295e:	400a      	ands	r2, r1
 8002960:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	b29a      	uxth	r2, r3
 800296a:	240a      	movs	r4, #10
 800296c:	193b      	adds	r3, r7, r4
 800296e:	0592      	lsls	r2, r2, #22
 8002970:	0d92      	lsrs	r2, r2, #22
 8002972:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	b29a      	uxth	r2, r3
 800297c:	2308      	movs	r3, #8
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	21fe      	movs	r1, #254	; 0xfe
 8002982:	400a      	ands	r2, r1
 8002984:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d148      	bne.n	8002a20 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800298e:	0021      	movs	r1, r4
 8002990:	187b      	adds	r3, r7, r1
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	09db      	lsrs	r3, r3, #7
 8002996:	b29a      	uxth	r2, r3
 8002998:	183b      	adds	r3, r7, r0
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	4053      	eors	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	001a      	movs	r2, r3
 80029a2:	2306      	movs	r3, #6
 80029a4:	4013      	ands	r3, r2
 80029a6:	d120      	bne.n	80029ea <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80029a8:	183b      	adds	r3, r7, r0
 80029aa:	187a      	adds	r2, r7, r1
 80029ac:	8812      	ldrh	r2, [r2, #0]
 80029ae:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d14c      	bne.n	8002a5c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2208      	movs	r2, #8
 80029ce:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029d8:	183b      	adds	r3, r7, r0
 80029da:	881a      	ldrh	r2, [r3, #0]
 80029dc:	197b      	adds	r3, r7, r5
 80029de:	7819      	ldrb	r1, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7ff fa44 	bl	8001e70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029e8:	e038      	b.n	8002a5c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80029ea:	240c      	movs	r4, #12
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	2208      	movs	r2, #8
 80029f0:	18ba      	adds	r2, r7, r2
 80029f2:	8812      	ldrh	r2, [r2, #0]
 80029f4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	021a      	lsls	r2, r3, #8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0011      	movs	r1, r2
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 feb2 	bl	8003768 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2240      	movs	r2, #64	; 0x40
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	881a      	ldrh	r2, [r3, #0]
 8002a10:	230f      	movs	r3, #15
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	7819      	ldrb	r1, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f7ff fa29 	bl	8001e70 <HAL_I2C_AddrCallback>
}
 8002a1e:	e01d      	b.n	8002a5c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	021a      	lsls	r2, r3, #8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0011      	movs	r1, r2
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 fe9d 	bl	8003768 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	2100      	movs	r1, #0
 8002a34:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a36:	230c      	movs	r3, #12
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	881a      	ldrh	r2, [r3, #0]
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	7819      	ldrb	r1, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7ff fa13 	bl	8001e70 <HAL_I2C_AddrCallback>
}
 8002a4a:	e007      	b.n	8002a5c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2208      	movs	r2, #8
 8002a52:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2240      	movs	r2, #64	; 0x40
 8002a58:	2100      	movs	r1, #0
 8002a5a:	5499      	strb	r1, [r3, r2]
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b004      	add	sp, #16
 8002a62:	bdb0      	pop	{r4, r5, r7, pc}

08002a64 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2242      	movs	r2, #66	; 0x42
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2241      	movs	r2, #65	; 0x41
 8002a78:	5c9b      	ldrb	r3, [r3, r2]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b21      	cmp	r3, #33	; 0x21
 8002a7e:	d117      	bne.n	8002ab0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2241      	movs	r2, #65	; 0x41
 8002a84:	2120      	movs	r1, #32
 8002a86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2211      	movs	r2, #17
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2101      	movs	r1, #1
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 fe65 	bl	8003768 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2240      	movs	r2, #64	; 0x40
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff f9c1 	bl	8001e30 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002aae:	e016      	b.n	8002ade <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2241      	movs	r2, #65	; 0x41
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2212      	movs	r2, #18
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 fe4d 	bl	8003768 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2240      	movs	r2, #64	; 0x40
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f7ff f9b1 	bl	8001e40 <HAL_I2C_MasterRxCpltCallback>
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b002      	add	sp, #8
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2242      	movs	r2, #66	; 0x42
 8002afc:	2100      	movs	r1, #0
 8002afe:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	0b9b      	lsrs	r3, r3, #14
 8002b04:	001a      	movs	r2, r3
 8002b06:	2301      	movs	r3, #1
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d008      	beq.n	8002b1e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4925      	ldr	r1, [pc, #148]	; (8002bac <I2C_ITSlaveSeqCplt+0xc4>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e00d      	b.n	8002b3a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	0bdb      	lsrs	r3, r3, #15
 8002b22:	001a      	movs	r2, r3
 8002b24:	2301      	movs	r3, #1
 8002b26:	4013      	ands	r3, r2
 8002b28:	d007      	beq.n	8002b3a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	491e      	ldr	r1, [pc, #120]	; (8002bb0 <I2C_ITSlaveSeqCplt+0xc8>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2241      	movs	r2, #65	; 0x41
 8002b3e:	5c9b      	ldrb	r3, [r3, r2]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b29      	cmp	r3, #41	; 0x29
 8002b44:	d114      	bne.n	8002b70 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2241      	movs	r2, #65	; 0x41
 8002b4a:	2128      	movs	r1, #40	; 0x28
 8002b4c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2221      	movs	r2, #33	; 0x21
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2101      	movs	r1, #1
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 fe05 	bl	8003768 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2240      	movs	r2, #64	; 0x40
 8002b62:	2100      	movs	r1, #0
 8002b64:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7ff f971 	bl	8001e50 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b6e:	e019      	b.n	8002ba4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2241      	movs	r2, #65	; 0x41
 8002b74:	5c9b      	ldrb	r3, [r3, r2]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7a:	d113      	bne.n	8002ba4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2241      	movs	r2, #65	; 0x41
 8002b80:	2128      	movs	r1, #40	; 0x28
 8002b82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2222      	movs	r2, #34	; 0x22
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f000 fdea 	bl	8003768 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff f95e 	bl	8001e60 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	ffffbfff 	.word	0xffffbfff
 8002bb0:	ffff7fff 	.word	0xffff7fff

08002bb4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2241      	movs	r2, #65	; 0x41
 8002bce:	5c9b      	ldrb	r3, [r3, r2]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b21      	cmp	r3, #33	; 0x21
 8002bd4:	d108      	bne.n	8002be8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 fdc4 	bl	8003768 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2211      	movs	r2, #17
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
 8002be6:	e00d      	b.n	8002c04 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2241      	movs	r2, #65	; 0x41
 8002bec:	5c9b      	ldrb	r3, [r3, r2]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b22      	cmp	r3, #34	; 0x22
 8002bf2:	d107      	bne.n	8002c04 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 fdb5 	bl	8003768 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2212      	movs	r2, #18
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4950      	ldr	r1, [pc, #320]	; (8002d50 <I2C_ITMasterCplt+0x19c>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4d      	ldr	r2, [pc, #308]	; (8002d54 <I2C_ITMasterCplt+0x1a0>)
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	001a      	movs	r2, r3
 8002c26:	2301      	movs	r3, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d009      	beq.n	8002c40 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2210      	movs	r2, #16
 8002c32:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	2204      	movs	r2, #4
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2241      	movs	r2, #65	; 0x41
 8002c44:	5c9b      	ldrb	r3, [r3, r2]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b60      	cmp	r3, #96	; 0x60
 8002c4a:	d10b      	bne.n	8002c64 <I2C_ITMasterCplt+0xb0>
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	001a      	movs	r2, r3
 8002c52:	2301      	movs	r3, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	d005      	beq.n	8002c64 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002c62:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 faff 	bl	800326a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2241      	movs	r2, #65	; 0x41
 8002c76:	5c9b      	ldrb	r3, [r3, r2]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b60      	cmp	r3, #96	; 0x60
 8002c7c:	d002      	beq.n	8002c84 <I2C_ITMasterCplt+0xd0>
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0011      	movs	r1, r2
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 f9e1 	bl	8003054 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c92:	e058      	b.n	8002d46 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2241      	movs	r2, #65	; 0x41
 8002c98:	5c9b      	ldrb	r3, [r3, r2]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b21      	cmp	r3, #33	; 0x21
 8002c9e:	d126      	bne.n	8002cee <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2241      	movs	r2, #65	; 0x41
 8002ca4:	2120      	movs	r1, #32
 8002ca6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2242      	movs	r2, #66	; 0x42
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b40      	cmp	r3, #64	; 0x40
 8002cb8:	d10c      	bne.n	8002cd4 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2242      	movs	r2, #66	; 0x42
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7ff f8e7 	bl	8001ea0 <HAL_I2C_MemTxCpltCallback>
}
 8002cd2:	e038      	b.n	8002d46 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2242      	movs	r2, #66	; 0x42
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2240      	movs	r2, #64	; 0x40
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f7ff f8a2 	bl	8001e30 <HAL_I2C_MasterTxCpltCallback>
}
 8002cec:	e02b      	b.n	8002d46 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2241      	movs	r2, #65	; 0x41
 8002cf2:	5c9b      	ldrb	r3, [r3, r2]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b22      	cmp	r3, #34	; 0x22
 8002cf8:	d125      	bne.n	8002d46 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2241      	movs	r2, #65	; 0x41
 8002cfe:	2120      	movs	r1, #32
 8002d00:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2242      	movs	r2, #66	; 0x42
 8002d0c:	5c9b      	ldrb	r3, [r3, r2]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d10c      	bne.n	8002d2e <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2242      	movs	r2, #66	; 0x42
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff f8c2 	bl	8001eb0 <HAL_I2C_MemRxCpltCallback>
}
 8002d2c:	e00b      	b.n	8002d46 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2242      	movs	r2, #66	; 0x42
 8002d32:	2100      	movs	r1, #0
 8002d34:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2240      	movs	r2, #64	; 0x40
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7ff f87d 	bl	8001e40 <HAL_I2C_MasterRxCpltCallback>
}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b006      	add	sp, #24
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	fe00e800 	.word	0xfe00e800
 8002d54:	ffff0000 	.word	0xffff0000

08002d58 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d6e:	200f      	movs	r0, #15
 8002d70:	183b      	adds	r3, r7, r0
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	2141      	movs	r1, #65	; 0x41
 8002d76:	5c52      	ldrb	r2, [r2, r1]
 8002d78:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d82:	183b      	adds	r3, r7, r0
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b21      	cmp	r3, #33	; 0x21
 8002d88:	d003      	beq.n	8002d92 <I2C_ITSlaveCplt+0x3a>
 8002d8a:	183b      	adds	r3, r7, r0
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b29      	cmp	r3, #41	; 0x29
 8002d90:	d109      	bne.n	8002da6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002d92:	4a7d      	ldr	r2, [pc, #500]	; (8002f88 <I2C_ITSlaveCplt+0x230>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	0011      	movs	r1, r2
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 fce5 	bl	8003768 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2221      	movs	r2, #33	; 0x21
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
 8002da4:	e011      	b.n	8002dca <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002da6:	220f      	movs	r2, #15
 8002da8:	18bb      	adds	r3, r7, r2
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b22      	cmp	r3, #34	; 0x22
 8002dae:	d003      	beq.n	8002db8 <I2C_ITSlaveCplt+0x60>
 8002db0:	18bb      	adds	r3, r7, r2
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b2a      	cmp	r3, #42	; 0x2a
 8002db6:	d108      	bne.n	8002dca <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002db8:	4a74      	ldr	r2, [pc, #464]	; (8002f8c <I2C_ITSlaveCplt+0x234>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0011      	movs	r1, r2
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 fcd2 	bl	8003768 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2222      	movs	r2, #34	; 0x22
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0209      	lsls	r1, r1, #8
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	496a      	ldr	r1, [pc, #424]	; (8002f90 <I2C_ITSlaveCplt+0x238>)
 8002de8:	400a      	ands	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 fa3b 	bl	800326a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	0b9b      	lsrs	r3, r3, #14
 8002df8:	001a      	movs	r2, r3
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4962      	ldr	r1, [pc, #392]	; (8002f94 <I2C_ITSlaveCplt+0x23c>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e26:	e018      	b.n	8002e5a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	0bdb      	lsrs	r3, r3, #15
 8002e2c:	001a      	movs	r2, r3
 8002e2e:	2301      	movs	r3, #1
 8002e30:	4013      	ands	r3, r2
 8002e32:	d012      	beq.n	8002e5a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4956      	ldr	r1, [pc, #344]	; (8002f98 <I2C_ITSlaveCplt+0x240>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d006      	beq.n	8002e5a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	001a      	movs	r2, r3
 8002e60:	2301      	movs	r3, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	d020      	beq.n	8002ea8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4393      	bics	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2242      	movs	r2, #66	; 0x42
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0011      	movs	r1, r2
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 f8b9 	bl	8003054 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2241      	movs	r2, #65	; 0x41
 8002ee6:	5c9b      	ldrb	r3, [r3, r2]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b28      	cmp	r3, #40	; 0x28
 8002eec:	d147      	bne.n	8002f7e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	0011      	movs	r1, r2
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 f853 	bl	8002fa0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002efa:	e040      	b.n	8002f7e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <I2C_ITSlaveCplt+0x244>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d016      	beq.n	8002f34 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff fded 	bl	8002ae8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <I2C_ITSlaveCplt+0x244>)
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2241      	movs	r2, #65	; 0x41
 8002f18:	2120      	movs	r1, #32
 8002f1a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2240      	movs	r2, #64	; 0x40
 8002f26:	2100      	movs	r1, #0
 8002f28:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7fe ffaf 	bl	8001e90 <HAL_I2C_ListenCpltCallback>
}
 8002f32:	e024      	b.n	8002f7e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2241      	movs	r2, #65	; 0x41
 8002f38:	5c9b      	ldrb	r3, [r3, r2]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b22      	cmp	r3, #34	; 0x22
 8002f3e:	d10f      	bne.n	8002f60 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2241      	movs	r2, #65	; 0x41
 8002f44:	2120      	movs	r1, #32
 8002f46:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2240      	movs	r2, #64	; 0x40
 8002f52:	2100      	movs	r1, #0
 8002f54:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7fe ff81 	bl	8001e60 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f5e:	e00e      	b.n	8002f7e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2241      	movs	r2, #65	; 0x41
 8002f64:	2120      	movs	r1, #32
 8002f66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2240      	movs	r2, #64	; 0x40
 8002f72:	2100      	movs	r1, #0
 8002f74:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7fe ff69 	bl	8001e50 <HAL_I2C_SlaveTxCpltCallback>
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b006      	add	sp, #24
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	00008001 	.word	0x00008001
 8002f8c:	00008002 	.word	0x00008002
 8002f90:	fe00e800 	.word	0xfe00e800
 8002f94:	ffffbfff 	.word	0xffffbfff
 8002f98:	ffff7fff 	.word	0xffff7fff
 8002f9c:	ffff0000 	.word	0xffff0000

08002fa0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a27      	ldr	r2, [pc, #156]	; (800304c <I2C_ITListenCplt+0xac>)
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2241      	movs	r2, #65	; 0x41
 8002fba:	2120      	movs	r1, #32
 8002fbc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2242      	movs	r2, #66	; 0x42
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d022      	beq.n	800301e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d012      	beq.n	800301e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	2204      	movs	r2, #4
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <I2C_ITListenCplt+0xb0>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0011      	movs	r1, r2
 8003024:	0018      	movs	r0, r3
 8003026:	f000 fb9f 	bl	8003768 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2210      	movs	r2, #16
 8003030:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2240      	movs	r2, #64	; 0x40
 8003036:	2100      	movs	r1, #0
 8003038:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0018      	movs	r0, r3
 800303e:	f7fe ff27 	bl	8001e90 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b002      	add	sp, #8
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	ffff0000 	.word	0xffff0000
 8003050:	00008003 	.word	0x00008003

08003054 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800305e:	200f      	movs	r0, #15
 8003060:	183b      	adds	r3, r7, r0
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	2141      	movs	r1, #65	; 0x41
 8003066:	5c52      	ldrb	r2, [r2, r1]
 8003068:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2242      	movs	r2, #66	; 0x42
 800306e:	2100      	movs	r1, #0
 8003070:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a62      	ldr	r2, [pc, #392]	; (8003200 <I2C_ITError+0x1ac>)
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800308a:	183b      	adds	r3, r7, r0
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b28      	cmp	r3, #40	; 0x28
 8003090:	d007      	beq.n	80030a2 <I2C_ITError+0x4e>
 8003092:	183b      	adds	r3, r7, r0
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b29      	cmp	r3, #41	; 0x29
 8003098:	d003      	beq.n	80030a2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800309a:	183b      	adds	r3, r7, r0
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b2a      	cmp	r3, #42	; 0x2a
 80030a0:	d10c      	bne.n	80030bc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2103      	movs	r1, #3
 80030a6:	0018      	movs	r0, r3
 80030a8:	f000 fb5e 	bl	8003768 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2241      	movs	r2, #65	; 0x41
 80030b0:	2128      	movs	r1, #40	; 0x28
 80030b2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a53      	ldr	r2, [pc, #332]	; (8003204 <I2C_ITError+0x1b0>)
 80030b8:	635a      	str	r2, [r3, #52]	; 0x34
 80030ba:	e012      	b.n	80030e2 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <I2C_ITError+0x1b4>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0011      	movs	r1, r2
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 fb50 	bl	8003768 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2241      	movs	r2, #65	; 0x41
 80030cc:	5c9b      	ldrb	r3, [r3, r2]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d003      	beq.n	80030dc <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2241      	movs	r2, #65	; 0x41
 80030d8:	2120      	movs	r1, #32
 80030da:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d03b      	beq.n	8003168 <I2C_ITError+0x114>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b11      	cmp	r3, #17
 80030f4:	d002      	beq.n	80030fc <I2C_ITError+0xa8>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b21      	cmp	r3, #33	; 0x21
 80030fa:	d135      	bne.n	8003168 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	01db      	lsls	r3, r3, #7
 8003106:	401a      	ands	r2, r3
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	01db      	lsls	r3, r3, #7
 800310c:	429a      	cmp	r2, r3
 800310e:	d107      	bne.n	8003120 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	493c      	ldr	r1, [pc, #240]	; (800320c <I2C_ITError+0x1b8>)
 800311c:	400a      	ands	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	0018      	movs	r0, r3
 8003126:	f7fd fddc 	bl	8000ce2 <HAL_DMA_GetState>
 800312a:	0003      	movs	r3, r0
 800312c:	2b01      	cmp	r3, #1
 800312e:	d016      	beq.n	800315e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	4a36      	ldr	r2, [pc, #216]	; (8003210 <I2C_ITError+0x1bc>)
 8003136:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2240      	movs	r2, #64	; 0x40
 800313c:	2100      	movs	r1, #0
 800313e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	0018      	movs	r0, r3
 8003146:	f7fd fd87 	bl	8000c58 <HAL_DMA_Abort_IT>
 800314a:	1e03      	subs	r3, r0, #0
 800314c:	d051      	beq.n	80031f2 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	0018      	movs	r0, r3
 800315a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800315c:	e049      	b.n	80031f2 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f000 f859 	bl	8003218 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003166:	e044      	b.n	80031f2 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d03b      	beq.n	80031e8 <I2C_ITError+0x194>
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b12      	cmp	r3, #18
 8003174:	d002      	beq.n	800317c <I2C_ITError+0x128>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b22      	cmp	r3, #34	; 0x22
 800317a:	d135      	bne.n	80031e8 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	401a      	ands	r2, r3
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	491e      	ldr	r1, [pc, #120]	; (8003214 <I2C_ITError+0x1c0>)
 800319c:	400a      	ands	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7fd fd9c 	bl	8000ce2 <HAL_DMA_GetState>
 80031aa:	0003      	movs	r3, r0
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d016      	beq.n	80031de <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	4a16      	ldr	r2, [pc, #88]	; (8003210 <I2C_ITError+0x1bc>)
 80031b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2240      	movs	r2, #64	; 0x40
 80031bc:	2100      	movs	r1, #0
 80031be:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fd fd47 	bl	8000c58 <HAL_DMA_Abort_IT>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d013      	beq.n	80031f6 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	0018      	movs	r0, r3
 80031da:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031dc:	e00b      	b.n	80031f6 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f000 f819 	bl	8003218 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031e6:	e006      	b.n	80031f6 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 f814 	bl	8003218 <I2C_TreatErrorCallback>
  }
}
 80031f0:	e002      	b.n	80031f8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	e000      	b.n	80031f8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031f6:	46c0      	nop			; (mov r8, r8)
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b004      	add	sp, #16
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	ffff0000 	.word	0xffff0000
 8003204:	08002165 	.word	0x08002165
 8003208:	00008003 	.word	0x00008003
 800320c:	ffffbfff 	.word	0xffffbfff
 8003210:	080032af 	.word	0x080032af
 8003214:	ffff7fff 	.word	0xffff7fff

08003218 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2241      	movs	r2, #65	; 0x41
 8003224:	5c9b      	ldrb	r3, [r3, r2]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b60      	cmp	r3, #96	; 0x60
 800322a:	d10f      	bne.n	800324c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2241      	movs	r2, #65	; 0x41
 8003230:	2120      	movs	r1, #32
 8003232:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2240      	movs	r2, #64	; 0x40
 800323e:	2100      	movs	r1, #0
 8003240:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0018      	movs	r0, r3
 8003246:	f7fe fe43 	bl	8001ed0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800324a:	e00a      	b.n	8003262 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2240      	movs	r2, #64	; 0x40
 8003256:	2100      	movs	r1, #0
 8003258:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	f7fe fe2f 	bl	8001ec0 <HAL_I2C_ErrorCallback>
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b002      	add	sp, #8
 8003268:	bd80      	pop	{r7, pc}

0800326a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2202      	movs	r2, #2
 800327a:	4013      	ands	r3, r2
 800327c:	2b02      	cmp	r3, #2
 800327e:	d103      	bne.n	8003288 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2200      	movs	r2, #0
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2201      	movs	r2, #1
 8003290:	4013      	ands	r3, r2
 8003292:	2b01      	cmp	r3, #1
 8003294:	d007      	beq.n	80032a6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	430a      	orrs	r2, r1
 80032a4:	619a      	str	r2, [r3, #24]
  }
}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b002      	add	sp, #8
 80032ac:	bd80      	pop	{r7, pc}

080032ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	2200      	movs	r2, #0
 80032ca:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	2200      	movs	r2, #0
 80032da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff ff9a 	bl	8003218 <I2C_TreatErrorCallback>
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b004      	add	sp, #16
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	1dfb      	adds	r3, r7, #7
 80032fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fc:	e021      	b.n	8003342 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	3301      	adds	r3, #1
 8003302:	d01e      	beq.n	8003342 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003304:	f7fd fb9c 	bl	8000a40 <HAL_GetTick>
 8003308:	0002      	movs	r2, r0
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d302      	bcc.n	800331a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d113      	bne.n	8003342 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	2220      	movs	r2, #32
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2241      	movs	r2, #65	; 0x41
 800332a:	2120      	movs	r1, #32
 800332c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2242      	movs	r2, #66	; 0x42
 8003332:	2100      	movs	r1, #0
 8003334:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2240      	movs	r2, #64	; 0x40
 800333a:	2100      	movs	r1, #0
 800333c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e00f      	b.n	8003362 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4013      	ands	r3, r2
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	425a      	negs	r2, r3
 8003352:	4153      	adcs	r3, r2
 8003354:	b2db      	uxtb	r3, r3
 8003356:	001a      	movs	r2, r3
 8003358:	1dfb      	adds	r3, r7, #7
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d0ce      	beq.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b004      	add	sp, #16
 8003368:	bd80      	pop	{r7, pc}

0800336a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003376:	e02b      	b.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f8da 	bl	8003538 <I2C_IsAcknowledgeFailed>
 8003384:	1e03      	subs	r3, r0, #0
 8003386:	d001      	beq.n	800338c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e029      	b.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	3301      	adds	r3, #1
 8003390:	d01e      	beq.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fd fb55 	bl	8000a40 <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d113      	bne.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	2220      	movs	r2, #32
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2241      	movs	r2, #65	; 0x41
 80033b8:	2120      	movs	r1, #32
 80033ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2242      	movs	r2, #66	; 0x42
 80033c0:	2100      	movs	r1, #0
 80033c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2240      	movs	r2, #64	; 0x40
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e007      	b.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2202      	movs	r2, #2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d1cc      	bne.n	8003378 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b004      	add	sp, #16
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f4:	e028      	b.n	8003448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 f89b 	bl	8003538 <I2C_IsAcknowledgeFailed>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d001      	beq.n	800340a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e026      	b.n	8003458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fd fb19 	bl	8000a40 <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d113      	bne.n	8003448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	2220      	movs	r2, #32
 8003426:	431a      	orrs	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2241      	movs	r2, #65	; 0x41
 8003430:	2120      	movs	r1, #32
 8003432:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2242      	movs	r2, #66	; 0x42
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2240      	movs	r2, #64	; 0x40
 8003440:	2100      	movs	r1, #0
 8003442:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e007      	b.n	8003458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2220      	movs	r2, #32
 8003450:	4013      	ands	r3, r2
 8003452:	2b20      	cmp	r3, #32
 8003454:	d1cf      	bne.n	80033f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b004      	add	sp, #16
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800346c:	e055      	b.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 f85f 	bl	8003538 <I2C_IsAcknowledgeFailed>
 800347a:	1e03      	subs	r3, r0, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e053      	b.n	800352a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2220      	movs	r2, #32
 800348a:	4013      	ands	r3, r2
 800348c:	2b20      	cmp	r3, #32
 800348e:	d129      	bne.n	80034e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2204      	movs	r2, #4
 8003498:	4013      	ands	r3, r2
 800349a:	2b04      	cmp	r3, #4
 800349c:	d105      	bne.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e03f      	b.n	800352a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2220      	movs	r2, #32
 80034b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	491d      	ldr	r1, [pc, #116]	; (8003534 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80034be:	400a      	ands	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2241      	movs	r2, #65	; 0x41
 80034cc:	2120      	movs	r1, #32
 80034ce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2242      	movs	r2, #66	; 0x42
 80034d4:	2100      	movs	r1, #0
 80034d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2240      	movs	r2, #64	; 0x40
 80034dc:	2100      	movs	r1, #0
 80034de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e022      	b.n	800352a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e4:	f7fd faac 	bl	8000a40 <HAL_GetTick>
 80034e8:	0002      	movs	r2, r0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d302      	bcc.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10f      	bne.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	2220      	movs	r2, #32
 8003500:	431a      	orrs	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2241      	movs	r2, #65	; 0x41
 800350a:	2120      	movs	r1, #32
 800350c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2240      	movs	r2, #64	; 0x40
 8003512:	2100      	movs	r1, #0
 8003514:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e007      	b.n	800352a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2204      	movs	r2, #4
 8003522:	4013      	ands	r3, r2
 8003524:	2b04      	cmp	r3, #4
 8003526:	d1a2      	bne.n	800346e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	0018      	movs	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	b004      	add	sp, #16
 8003530:	bd80      	pop	{r7, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	fe00e800 	.word	0xfe00e800

08003538 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2210      	movs	r2, #16
 800354c:	4013      	ands	r3, r2
 800354e:	2b10      	cmp	r3, #16
 8003550:	d164      	bne.n	800361c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	049b      	lsls	r3, r3, #18
 800355c:	401a      	ands	r2, r3
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	049b      	lsls	r3, r3, #18
 8003562:	429a      	cmp	r2, r3
 8003564:	d02b      	beq.n	80035be <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	01c9      	lsls	r1, r1, #7
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003578:	e021      	b.n	80035be <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3301      	adds	r3, #1
 800357e:	d01e      	beq.n	80035be <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003580:	f7fd fa5e 	bl	8000a40 <HAL_GetTick>
 8003584:	0002      	movs	r2, r0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	d302      	bcc.n	8003596 <I2C_IsAcknowledgeFailed+0x5e>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d113      	bne.n	80035be <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	2220      	movs	r2, #32
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2241      	movs	r2, #65	; 0x41
 80035a6:	2120      	movs	r1, #32
 80035a8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2242      	movs	r2, #66	; 0x42
 80035ae:	2100      	movs	r1, #0
 80035b0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2240      	movs	r2, #64	; 0x40
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e02f      	b.n	800361e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2220      	movs	r2, #32
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d1d6      	bne.n	800357a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2210      	movs	r2, #16
 80035d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2220      	movs	r2, #32
 80035da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	0018      	movs	r0, r3
 80035e0:	f7ff fe43 	bl	800326a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	490e      	ldr	r1, [pc, #56]	; (8003628 <I2C_IsAcknowledgeFailed+0xf0>)
 80035f0:	400a      	ands	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	2204      	movs	r2, #4
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2241      	movs	r2, #65	; 0x41
 8003604:	2120      	movs	r1, #32
 8003606:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2242      	movs	r2, #66	; 0x42
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2240      	movs	r2, #64	; 0x40
 8003614:	2100      	movs	r1, #0
 8003616:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	fe00e800 	.word	0xfe00e800

0800362c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	0008      	movs	r0, r1
 8003636:	0011      	movs	r1, r2
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	240a      	movs	r4, #10
 800363c:	193b      	adds	r3, r7, r4
 800363e:	1c02      	adds	r2, r0, #0
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	2009      	movs	r0, #9
 8003644:	183b      	adds	r3, r7, r0
 8003646:	1c0a      	adds	r2, r1, #0
 8003648:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	0d51      	lsrs	r1, r2, #21
 8003654:	2280      	movs	r2, #128	; 0x80
 8003656:	00d2      	lsls	r2, r2, #3
 8003658:	400a      	ands	r2, r1
 800365a:	490e      	ldr	r1, [pc, #56]	; (8003694 <I2C_TransferConfig+0x68>)
 800365c:	430a      	orrs	r2, r1
 800365e:	43d2      	mvns	r2, r2
 8003660:	401a      	ands	r2, r3
 8003662:	0011      	movs	r1, r2
 8003664:	193b      	adds	r3, r7, r4
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	059b      	lsls	r3, r3, #22
 800366a:	0d9a      	lsrs	r2, r3, #22
 800366c:	183b      	adds	r3, r7, r0
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	0418      	lsls	r0, r3, #16
 8003672:	23ff      	movs	r3, #255	; 0xff
 8003674:	041b      	lsls	r3, r3, #16
 8003676:	4003      	ands	r3, r0
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	431a      	orrs	r2, r3
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b005      	add	sp, #20
 8003690:	bd90      	pop	{r4, r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	03ff63ff 	.word	0x03ff63ff

08003698 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	000a      	movs	r2, r1
 80036a2:	1cbb      	adds	r3, r7, #2
 80036a4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ae:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <I2C_Enable_IRQ+0xc8>)
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d004      	beq.n	80036be <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <I2C_Enable_IRQ+0xcc>)
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d121      	bne.n	8003702 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036be:	1cbb      	adds	r3, r7, #2
 80036c0:	2200      	movs	r2, #0
 80036c2:	5e9b      	ldrsh	r3, [r3, r2]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da03      	bge.n	80036d0 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	22b8      	movs	r2, #184	; 0xb8
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036d0:	1cbb      	adds	r3, r7, #2
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d103      	bne.n	80036e0 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2290      	movs	r2, #144	; 0x90
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036e0:	1cbb      	adds	r3, r7, #2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d103      	bne.n	80036f0 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2260      	movs	r2, #96	; 0x60
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036f0:	1cbb      	adds	r3, r7, #2
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d127      	bne.n	8003748 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2240      	movs	r2, #64	; 0x40
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003700:	e022      	b.n	8003748 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003702:	1cbb      	adds	r3, r7, #2
 8003704:	2200      	movs	r2, #0
 8003706:	5e9b      	ldrsh	r3, [r3, r2]
 8003708:	2b00      	cmp	r3, #0
 800370a:	da03      	bge.n	8003714 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	22b8      	movs	r2, #184	; 0xb8
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003714:	1cbb      	adds	r3, r7, #2
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	4013      	ands	r3, r2
 800371c:	d003      	beq.n	8003726 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	22f2      	movs	r2, #242	; 0xf2
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003726:	1cbb      	adds	r3, r7, #2
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	2202      	movs	r2, #2
 800372c:	4013      	ands	r3, r2
 800372e:	d003      	beq.n	8003738 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	22f4      	movs	r2, #244	; 0xf4
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003738:	1cbb      	adds	r3, r7, #2
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	2b20      	cmp	r3, #32
 800373e:	d103      	bne.n	8003748 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b004      	add	sp, #16
 800375e:	bd80      	pop	{r7, pc}
 8003760:	0800238d 	.word	0x0800238d
 8003764:	080025a5 	.word	0x080025a5

08003768 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	000a      	movs	r2, r1
 8003772:	1cbb      	adds	r3, r7, #2
 8003774:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800377a:	1cbb      	adds	r3, r7, #2
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	2201      	movs	r2, #1
 8003780:	4013      	ands	r3, r2
 8003782:	d010      	beq.n	80037a6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2242      	movs	r2, #66	; 0x42
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2241      	movs	r2, #65	; 0x41
 8003790:	5c9b      	ldrb	r3, [r3, r2]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	001a      	movs	r2, r3
 8003796:	2328      	movs	r3, #40	; 0x28
 8003798:	4013      	ands	r3, r2
 800379a:	2b28      	cmp	r3, #40	; 0x28
 800379c:	d003      	beq.n	80037a6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	22b0      	movs	r2, #176	; 0xb0
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80037a6:	1cbb      	adds	r3, r7, #2
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	2202      	movs	r2, #2
 80037ac:	4013      	ands	r3, r2
 80037ae:	d010      	beq.n	80037d2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2244      	movs	r2, #68	; 0x44
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2241      	movs	r2, #65	; 0x41
 80037bc:	5c9b      	ldrb	r3, [r3, r2]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	001a      	movs	r2, r3
 80037c2:	2328      	movs	r3, #40	; 0x28
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b28      	cmp	r3, #40	; 0x28
 80037c8:	d003      	beq.n	80037d2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	22b0      	movs	r2, #176	; 0xb0
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80037d2:	1cbb      	adds	r3, r7, #2
 80037d4:	2200      	movs	r2, #0
 80037d6:	5e9b      	ldrsh	r3, [r3, r2]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	da03      	bge.n	80037e4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	22b8      	movs	r2, #184	; 0xb8
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037e4:	1cbb      	adds	r3, r7, #2
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d103      	bne.n	80037f4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2290      	movs	r2, #144	; 0x90
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037f4:	1cbb      	adds	r3, r7, #2
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d103      	bne.n	8003804 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003804:	1cbb      	adds	r3, r7, #2
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d103      	bne.n	8003814 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2240      	movs	r2, #64	; 0x40
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	43d9      	mvns	r1, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	400a      	ands	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b004      	add	sp, #16
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2241      	movs	r2, #65	; 0x41
 800383e:	5c9b      	ldrb	r3, [r3, r2]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	d138      	bne.n	80038b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2240      	movs	r2, #64	; 0x40
 800384a:	5c9b      	ldrb	r3, [r3, r2]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003850:	2302      	movs	r3, #2
 8003852:	e032      	b.n	80038ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2240      	movs	r2, #64	; 0x40
 8003858:	2101      	movs	r1, #1
 800385a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2241      	movs	r2, #65	; 0x41
 8003860:	2124      	movs	r1, #36	; 0x24
 8003862:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2101      	movs	r1, #1
 8003870:	438a      	bics	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4911      	ldr	r1, [pc, #68]	; (80038c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003880:	400a      	ands	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2101      	movs	r1, #1
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2241      	movs	r2, #65	; 0x41
 80038a8:	2120      	movs	r1, #32
 80038aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2240      	movs	r2, #64	; 0x40
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	ffffefff 	.word	0xffffefff

080038c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2241      	movs	r2, #65	; 0x41
 80038d6:	5c9b      	ldrb	r3, [r3, r2]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d139      	bne.n	8003952 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2240      	movs	r2, #64	; 0x40
 80038e2:	5c9b      	ldrb	r3, [r3, r2]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e033      	b.n	8003954 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2240      	movs	r2, #64	; 0x40
 80038f0:	2101      	movs	r1, #1
 80038f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2241      	movs	r2, #65	; 0x41
 80038f8:	2124      	movs	r1, #36	; 0x24
 80038fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2101      	movs	r1, #1
 8003908:	438a      	bics	r2, r1
 800390a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a11      	ldr	r2, [pc, #68]	; (800395c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003918:	4013      	ands	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	430a      	orrs	r2, r1
 800393c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2241      	movs	r2, #65	; 0x41
 8003942:	2120      	movs	r1, #32
 8003944:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2240      	movs	r2, #64	; 0x40
 800394a:	2100      	movs	r1, #0
 800394c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	0018      	movs	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	b004      	add	sp, #16
 800395a:	bd80      	pop	{r7, pc}
 800395c:	fffff0ff 	.word	0xfffff0ff

08003960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e301      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	4013      	ands	r3, r2
 800397a:	d100      	bne.n	800397e <HAL_RCC_OscConfig+0x1e>
 800397c:	e08d      	b.n	8003a9a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800397e:	4bc3      	ldr	r3, [pc, #780]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	220c      	movs	r2, #12
 8003984:	4013      	ands	r3, r2
 8003986:	2b04      	cmp	r3, #4
 8003988:	d00e      	beq.n	80039a8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800398a:	4bc0      	ldr	r3, [pc, #768]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	220c      	movs	r2, #12
 8003990:	4013      	ands	r3, r2
 8003992:	2b08      	cmp	r3, #8
 8003994:	d116      	bne.n	80039c4 <HAL_RCC_OscConfig+0x64>
 8003996:	4bbd      	ldr	r3, [pc, #756]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	025b      	lsls	r3, r3, #9
 800399e:	401a      	ands	r2, r3
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	025b      	lsls	r3, r3, #9
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	4bb8      	ldr	r3, [pc, #736]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	029b      	lsls	r3, r3, #10
 80039b0:	4013      	ands	r3, r2
 80039b2:	d100      	bne.n	80039b6 <HAL_RCC_OscConfig+0x56>
 80039b4:	e070      	b.n	8003a98 <HAL_RCC_OscConfig+0x138>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d000      	beq.n	80039c0 <HAL_RCC_OscConfig+0x60>
 80039be:	e06b      	b.n	8003a98 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e2d8      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_OscConfig+0x7c>
 80039cc:	4baf      	ldr	r3, [pc, #700]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4bae      	ldr	r3, [pc, #696]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0249      	lsls	r1, r1, #9
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e02f      	b.n	8003a3c <HAL_RCC_OscConfig+0xdc>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_OscConfig+0x9e>
 80039e4:	4ba9      	ldr	r3, [pc, #676]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4ba8      	ldr	r3, [pc, #672]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039ea:	49a9      	ldr	r1, [pc, #676]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	4ba6      	ldr	r3, [pc, #664]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4ba5      	ldr	r3, [pc, #660]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039f6:	49a7      	ldr	r1, [pc, #668]	; (8003c94 <HAL_RCC_OscConfig+0x334>)
 80039f8:	400a      	ands	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e01e      	b.n	8003a3c <HAL_RCC_OscConfig+0xdc>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d10e      	bne.n	8003a24 <HAL_RCC_OscConfig+0xc4>
 8003a06:	4ba1      	ldr	r3, [pc, #644]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4ba0      	ldr	r3, [pc, #640]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	02c9      	lsls	r1, r1, #11
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	4b9d      	ldr	r3, [pc, #628]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b9c      	ldr	r3, [pc, #624]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a1a:	2180      	movs	r1, #128	; 0x80
 8003a1c:	0249      	lsls	r1, r1, #9
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0xdc>
 8003a24:	4b99      	ldr	r3, [pc, #612]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b98      	ldr	r3, [pc, #608]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a2a:	4999      	ldr	r1, [pc, #612]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	4b96      	ldr	r3, [pc, #600]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b95      	ldr	r3, [pc, #596]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a36:	4997      	ldr	r1, [pc, #604]	; (8003c94 <HAL_RCC_OscConfig+0x334>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d014      	beq.n	8003a6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fc fffc 	bl	8000a40 <HAL_GetTick>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4e:	f7fc fff7 	bl	8000a40 <HAL_GetTick>
 8003a52:	0002      	movs	r2, r0
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	; 0x64
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e28a      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a60:	4b8a      	ldr	r3, [pc, #552]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	029b      	lsls	r3, r3, #10
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0xee>
 8003a6c:	e015      	b.n	8003a9a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7fc ffe7 	bl	8000a40 <HAL_GetTick>
 8003a72:	0003      	movs	r3, r0
 8003a74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fc ffe2 	bl	8000a40 <HAL_GetTick>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e275      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	4b80      	ldr	r3, [pc, #512]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	029b      	lsls	r3, r3, #10
 8003a92:	4013      	ands	r3, r2
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x118>
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x146>
 8003aa4:	e069      	b.n	8003b7a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003aa6:	4b79      	ldr	r3, [pc, #484]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	220c      	movs	r2, #12
 8003aac:	4013      	ands	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ab0:	4b76      	ldr	r3, [pc, #472]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	220c      	movs	r2, #12
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d11c      	bne.n	8003af6 <HAL_RCC_OscConfig+0x196>
 8003abc:	4b73      	ldr	r3, [pc, #460]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	025b      	lsls	r3, r3, #9
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d116      	bne.n	8003af6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac8:	4b70      	ldr	r3, [pc, #448]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2202      	movs	r2, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d005      	beq.n	8003ade <HAL_RCC_OscConfig+0x17e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e24b      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ade:	4b6b      	ldr	r3, [pc, #428]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	22f8      	movs	r2, #248	; 0xf8
 8003ae4:	4393      	bics	r3, r2
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	00da      	lsls	r2, r3, #3
 8003aee:	4b67      	ldr	r3, [pc, #412]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003af0:	430a      	orrs	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af4:	e041      	b.n	8003b7a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d024      	beq.n	8003b48 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afe:	4b63      	ldr	r3, [pc, #396]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b62      	ldr	r3, [pc, #392]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fc ff99 	bl	8000a40 <HAL_GetTick>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fc ff94 	bl	8000a40 <HAL_GetTick>
 8003b18:	0002      	movs	r2, r0
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e227      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b26:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d0f1      	beq.n	8003b14 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b56      	ldr	r3, [pc, #344]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	22f8      	movs	r2, #248	; 0xf8
 8003b36:	4393      	bics	r3, r2
 8003b38:	0019      	movs	r1, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00da      	lsls	r2, r3, #3
 8003b40:	4b52      	ldr	r3, [pc, #328]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e018      	b.n	8003b7a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b48:	4b50      	ldr	r3, [pc, #320]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b4e:	2101      	movs	r1, #1
 8003b50:	438a      	bics	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fc ff74 	bl	8000a40 <HAL_GetTick>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fc ff6f 	bl	8000a40 <HAL_GetTick>
 8003b62:	0002      	movs	r2, r0
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e202      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b70:	4b46      	ldr	r3, [pc, #280]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2202      	movs	r2, #2
 8003b76:	4013      	ands	r3, r2
 8003b78:	d1f1      	bne.n	8003b5e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2208      	movs	r2, #8
 8003b80:	4013      	ands	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d019      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8c:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b90:	4b3e      	ldr	r3, [pc, #248]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b92:	2101      	movs	r1, #1
 8003b94:	430a      	orrs	r2, r1
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fc ff52 	bl	8000a40 <HAL_GetTick>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fc ff4d 	bl	8000a40 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1e0      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb4:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2202      	movs	r2, #2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d0f1      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x242>
 8003bbe:	e018      	b.n	8003bf2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc4:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	438a      	bics	r2, r1
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bcc:	f7fc ff38 	bl	8000a40 <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fc ff33 	bl	8000a40 <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e1c6      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2202      	movs	r2, #2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d1f1      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d100      	bne.n	8003bfe <HAL_RCC_OscConfig+0x29e>
 8003bfc:	e0b4      	b.n	8003d68 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfe:	201f      	movs	r0, #31
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	055b      	lsls	r3, r3, #21
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d110      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c18:	2180      	movs	r1, #128	; 0x80
 8003c1a:	0549      	lsls	r1, r1, #21
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	61da      	str	r2, [r3, #28]
 8003c20:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	055b      	lsls	r3, r3, #21
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c2e:	183b      	adds	r3, r7, r0
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <HAL_RCC_OscConfig+0x338>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d11a      	bne.n	8003c76 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_RCC_OscConfig+0x338>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <HAL_RCC_OscConfig+0x338>)
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	0049      	lsls	r1, r1, #1
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4e:	f7fc fef7 	bl	8000a40 <HAL_GetTick>
 8003c52:	0003      	movs	r3, r0
 8003c54:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c58:	f7fc fef2 	bl	8000a40 <HAL_GetTick>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e185      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_OscConfig+0x338>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4013      	ands	r3, r2
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10e      	bne.n	8003c9c <HAL_RCC_OscConfig+0x33c>
 8003c7e:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	4b02      	ldr	r3, [pc, #8]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c84:	2101      	movs	r1, #1
 8003c86:	430a      	orrs	r2, r1
 8003c88:	621a      	str	r2, [r3, #32]
 8003c8a:	e035      	b.n	8003cf8 <HAL_RCC_OscConfig+0x398>
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	fffeffff 	.word	0xfffeffff
 8003c94:	fffbffff 	.word	0xfffbffff
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10c      	bne.n	8003cbe <HAL_RCC_OscConfig+0x35e>
 8003ca4:	4bb6      	ldr	r3, [pc, #728]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ca6:	6a1a      	ldr	r2, [r3, #32]
 8003ca8:	4bb5      	ldr	r3, [pc, #724]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	621a      	str	r2, [r3, #32]
 8003cb0:	4bb3      	ldr	r3, [pc, #716]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cb2:	6a1a      	ldr	r2, [r3, #32]
 8003cb4:	4bb2      	ldr	r3, [pc, #712]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	438a      	bics	r2, r1
 8003cba:	621a      	str	r2, [r3, #32]
 8003cbc:	e01c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x398>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x380>
 8003cc6:	4bae      	ldr	r3, [pc, #696]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cc8:	6a1a      	ldr	r2, [r3, #32]
 8003cca:	4bad      	ldr	r3, [pc, #692]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ccc:	2104      	movs	r1, #4
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	621a      	str	r2, [r3, #32]
 8003cd2:	4bab      	ldr	r3, [pc, #684]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cd4:	6a1a      	ldr	r2, [r3, #32]
 8003cd6:	4baa      	ldr	r3, [pc, #680]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cd8:	2101      	movs	r1, #1
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	621a      	str	r2, [r3, #32]
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x398>
 8003ce0:	4ba7      	ldr	r3, [pc, #668]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	4ba6      	ldr	r3, [pc, #664]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	438a      	bics	r2, r1
 8003cea:	621a      	str	r2, [r3, #32]
 8003cec:	4ba4      	ldr	r3, [pc, #656]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	4ba3      	ldr	r3, [pc, #652]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cf2:	2104      	movs	r1, #4
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d014      	beq.n	8003d2a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d00:	f7fc fe9e 	bl	8000a40 <HAL_GetTick>
 8003d04:	0003      	movs	r3, r0
 8003d06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	e009      	b.n	8003d1e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0a:	f7fc fe99 	bl	8000a40 <HAL_GetTick>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	4a9b      	ldr	r2, [pc, #620]	; (8003f84 <HAL_RCC_OscConfig+0x624>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e12b      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	4b98      	ldr	r3, [pc, #608]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	2202      	movs	r2, #2
 8003d24:	4013      	ands	r3, r2
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x3aa>
 8003d28:	e013      	b.n	8003d52 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fc fe89 	bl	8000a40 <HAL_GetTick>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d32:	e009      	b.n	8003d48 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fc fe84 	bl	8000a40 <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	4a91      	ldr	r2, [pc, #580]	; (8003f84 <HAL_RCC_OscConfig+0x624>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e116      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d48:	4b8d      	ldr	r3, [pc, #564]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d52:	231f      	movs	r3, #31
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5c:	4b88      	ldr	r3, [pc, #544]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	4b87      	ldr	r3, [pc, #540]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d62:	4989      	ldr	r1, [pc, #548]	; (8003f88 <HAL_RCC_OscConfig+0x628>)
 8003d64:	400a      	ands	r2, r1
 8003d66:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d063      	beq.n	8003e3a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d12a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d7a:	4b81      	ldr	r3, [pc, #516]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7e:	4b80      	ldr	r3, [pc, #512]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d80:	2104      	movs	r1, #4
 8003d82:	430a      	orrs	r2, r1
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d86:	4b7e      	ldr	r3, [pc, #504]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8a:	4b7d      	ldr	r3, [pc, #500]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fc fe55 	bl	8000a40 <HAL_GetTick>
 8003d96:	0003      	movs	r3, r0
 8003d98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d9c:	f7fc fe50 	bl	8000a40 <HAL_GetTick>
 8003da0:	0002      	movs	r2, r0
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0e3      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003dae:	4b74      	ldr	r3, [pc, #464]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	2202      	movs	r2, #2
 8003db4:	4013      	ands	r3, r2
 8003db6:	d0f1      	beq.n	8003d9c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003db8:	4b71      	ldr	r3, [pc, #452]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	22f8      	movs	r2, #248	; 0xf8
 8003dbe:	4393      	bics	r3, r2
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	00da      	lsls	r2, r3, #3
 8003dc8:	4b6d      	ldr	r3, [pc, #436]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8003dce:	e034      	b.n	8003e3a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	3305      	adds	r3, #5
 8003dd6:	d111      	bne.n	8003dfc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003dd8:	4b69      	ldr	r3, [pc, #420]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ddc:	4b68      	ldr	r3, [pc, #416]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003dde:	2104      	movs	r1, #4
 8003de0:	438a      	bics	r2, r1
 8003de2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003de4:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de8:	22f8      	movs	r2, #248	; 0xf8
 8003dea:	4393      	bics	r3, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	00da      	lsls	r2, r3, #3
 8003df4:	4b62      	ldr	r3, [pc, #392]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003df6:	430a      	orrs	r2, r1
 8003df8:	635a      	str	r2, [r3, #52]	; 0x34
 8003dfa:	e01e      	b.n	8003e3a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003dfc:	4b60      	ldr	r3, [pc, #384]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e00:	4b5f      	ldr	r3, [pc, #380]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e02:	2104      	movs	r1, #4
 8003e04:	430a      	orrs	r2, r1
 8003e06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e08:	4b5d      	ldr	r3, [pc, #372]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0c:	4b5c      	ldr	r3, [pc, #368]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e0e:	2101      	movs	r1, #1
 8003e10:	438a      	bics	r2, r1
 8003e12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e14:	f7fc fe14 	bl	8000a40 <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e1e:	f7fc fe0f 	bl	8000a40 <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0a2      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	2202      	movs	r2, #2
 8003e36:	4013      	ands	r3, r2
 8003e38:	d1f1      	bne.n	8003e1e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d100      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4e4>
 8003e42:	e097      	b.n	8003f74 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e44:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	220c      	movs	r2, #12
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d100      	bne.n	8003e52 <HAL_RCC_OscConfig+0x4f2>
 8003e50:	e06b      	b.n	8003f2a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d14c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b48      	ldr	r3, [pc, #288]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e60:	494a      	ldr	r1, [pc, #296]	; (8003f8c <HAL_RCC_OscConfig+0x62c>)
 8003e62:	400a      	ands	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7fc fdeb 	bl	8000a40 <HAL_GetTick>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fc fde6 	bl	8000a40 <HAL_GetTick>
 8003e74:	0002      	movs	r2, r0
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e079      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e82:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	049b      	lsls	r3, r3, #18
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8e:	4b3c      	ldr	r3, [pc, #240]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	220f      	movs	r2, #15
 8003e94:	4393      	bics	r3, r2
 8003e96:	0019      	movs	r1, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ea2:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4a3a      	ldr	r2, [pc, #232]	; (8003f90 <HAL_RCC_OscConfig+0x630>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	0019      	movs	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	4b32      	ldr	r3, [pc, #200]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	0449      	lsls	r1, r1, #17
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fc fdb9 	bl	8000a40 <HAL_GetTick>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fc fdb4 	bl	8000a40 <HAL_GetTick>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e047      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee6:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	049b      	lsls	r3, r3, #18
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x574>
 8003ef2:	e03f      	b.n	8003f74 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003efa:	4924      	ldr	r1, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x62c>)
 8003efc:	400a      	ands	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f00:	f7fc fd9e 	bl	8000a40 <HAL_GetTick>
 8003f04:	0003      	movs	r3, r0
 8003f06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0a:	f7fc fd99 	bl	8000a40 <HAL_GetTick>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e02c      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f1c:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	049b      	lsls	r3, r3, #18
 8003f24:	4013      	ands	r3, r2
 8003f26:	d1f0      	bne.n	8003f0a <HAL_RCC_OscConfig+0x5aa>
 8003f28:	e024      	b.n	8003f74 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e01f      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	025b      	lsls	r3, r3, #9
 8003f48:	401a      	ands	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d10e      	bne.n	8003f70 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	220f      	movs	r2, #15
 8003f56:	401a      	ands	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	23f0      	movs	r3, #240	; 0xf0
 8003f64:	039b      	lsls	r3, r3, #14
 8003f66:	401a      	ands	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b008      	add	sp, #32
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	40021000 	.word	0x40021000
 8003f84:	00001388 	.word	0x00001388
 8003f88:	efffffff 	.word	0xefffffff
 8003f8c:	feffffff 	.word	0xfeffffff
 8003f90:	ffc2ffff 	.word	0xffc2ffff

08003f94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0b3      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b5b      	ldr	r3, [pc, #364]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2201      	movs	r2, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d911      	bls.n	8003fda <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b58      	ldr	r3, [pc, #352]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4393      	bics	r3, r2
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	4b55      	ldr	r3, [pc, #340]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc8:	4b53      	ldr	r3, [pc, #332]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4013      	ands	r3, r2
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e09a      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d015      	beq.n	8004010 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	4013      	ands	r3, r2
 8003fec:	d006      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fee:	4b4b      	ldr	r3, [pc, #300]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 8003ff4:	21e0      	movs	r1, #224	; 0xe0
 8003ff6:	00c9      	lsls	r1, r1, #3
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	22f0      	movs	r2, #240	; 0xf0
 8004002:	4393      	bics	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4b44      	ldr	r3, [pc, #272]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2201      	movs	r2, #1
 8004016:	4013      	ands	r3, r2
 8004018:	d040      	beq.n	800409c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b3e      	ldr	r3, [pc, #248]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	029b      	lsls	r3, r3, #10
 800402a:	4013      	ands	r3, r2
 800402c:	d114      	bne.n	8004058 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e06e      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	049b      	lsls	r3, r3, #18
 8004042:	4013      	ands	r3, r2
 8004044:	d108      	bne.n	8004058 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e062      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2202      	movs	r2, #2
 8004050:	4013      	ands	r3, r2
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e05b      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004058:	4b30      	ldr	r3, [pc, #192]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2203      	movs	r2, #3
 800405e:	4393      	bics	r3, r2
 8004060:	0019      	movs	r1, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800406c:	f7fc fce8 	bl	8000a40 <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004074:	e009      	b.n	800408a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004076:	f7fc fce3 	bl	8000a40 <HAL_GetTick>
 800407a:	0002      	movs	r2, r0
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <HAL_RCC_ClockConfig+0x18c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e042      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	220c      	movs	r2, #12
 8004090:	401a      	ands	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	429a      	cmp	r2, r3
 800409a:	d1ec      	bne.n	8004076 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800409c:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d211      	bcs.n	80040ce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2201      	movs	r2, #1
 80040b0:	4393      	bics	r3, r2
 80040b2:	0019      	movs	r1, r3
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040bc:	4b16      	ldr	r3, [pc, #88]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	4013      	ands	r3, r2
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e020      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2204      	movs	r2, #4
 80040d4:	4013      	ands	r3, r2
 80040d6:	d009      	beq.n	80040ec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a11      	ldr	r2, [pc, #68]	; (8004124 <HAL_RCC_ClockConfig+0x190>)
 80040de:	4013      	ands	r3, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	4b0d      	ldr	r3, [pc, #52]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040ec:	f000 f820 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80040f0:	0001      	movs	r1, r0
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	220f      	movs	r2, #15
 80040fa:	4013      	ands	r3, r2
 80040fc:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <HAL_RCC_ClockConfig+0x194>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	000a      	movs	r2, r1
 8004102:	40da      	lsrs	r2, r3
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_ClockConfig+0x198>)
 8004106:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004108:	2000      	movs	r0, #0
 800410a:	f7fc fc53 	bl	80009b4 <HAL_InitTick>
  
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b004      	add	sp, #16
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40022000 	.word	0x40022000
 800411c:	40021000 	.word	0x40021000
 8004120:	00001388 	.word	0x00001388
 8004124:	fffff8ff 	.word	0xfffff8ff
 8004128:	08004c18 	.word	0x08004c18
 800412c:	20000008 	.word	0x20000008

08004130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b08f      	sub	sp, #60	; 0x3c
 8004134:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004136:	2314      	movs	r3, #20
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800413c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800413e:	c313      	stmia	r3!, {r0, r1, r4}
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	4a29      	ldr	r2, [pc, #164]	; (80041ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004148:	ca13      	ldmia	r2!, {r0, r1, r4}
 800414a:	c313      	stmia	r3!, {r0, r1, r4}
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004154:	2300      	movs	r3, #0
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28
 8004158:	2300      	movs	r3, #0
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
 800415c:	2300      	movs	r3, #0
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	220c      	movs	r2, #12
 800416e:	4013      	ands	r3, r2
 8004170:	2b04      	cmp	r3, #4
 8004172:	d002      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x4a>
 8004174:	2b08      	cmp	r3, #8
 8004176:	d003      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x50>
 8004178:	e02d      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800417a:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800417c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800417e:	e02d      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	0c9b      	lsrs	r3, r3, #18
 8004184:	220f      	movs	r2, #15
 8004186:	4013      	ands	r3, r2
 8004188:	2214      	movs	r2, #20
 800418a:	18ba      	adds	r2, r7, r2
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004190:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	220f      	movs	r2, #15
 8004196:	4013      	ands	r3, r2
 8004198:	1d3a      	adds	r2, r7, #4
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800419e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	025b      	lsls	r3, r3, #9
 80041a4:	4013      	ands	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041aa:	4812      	ldr	r0, [pc, #72]	; (80041f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041ac:	f7fb ffac 	bl	8000108 <__udivsi3>
 80041b0:	0003      	movs	r3, r0
 80041b2:	001a      	movs	r2, r3
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	4353      	muls	r3, r2
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ba:	e009      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041be:	000a      	movs	r2, r1
 80041c0:	0152      	lsls	r2, r2, #5
 80041c2:	1a52      	subs	r2, r2, r1
 80041c4:	0193      	lsls	r3, r2, #6
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	185b      	adds	r3, r3, r1
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80041d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041d4:	e002      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b00f      	add	sp, #60	; 0x3c
 80041e4:	bd90      	pop	{r4, r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	08004bf8 	.word	0x08004bf8
 80041ec:	08004c08 	.word	0x08004c08
 80041f0:	40021000 	.word	0x40021000
 80041f4:	007a1200 	.word	0x007a1200

080041f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	025b      	lsls	r3, r3, #9
 8004210:	4013      	ands	r3, r2
 8004212:	d100      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004214:	e08e      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004216:	2017      	movs	r0, #23
 8004218:	183b      	adds	r3, r7, r0
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421e:	4b5f      	ldr	r3, [pc, #380]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	055b      	lsls	r3, r3, #21
 8004226:	4013      	ands	r3, r2
 8004228:	d110      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800422a:	4b5c      	ldr	r3, [pc, #368]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	4b5b      	ldr	r3, [pc, #364]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	0549      	lsls	r1, r1, #21
 8004234:	430a      	orrs	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
 8004238:	4b58      	ldr	r3, [pc, #352]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	055b      	lsls	r3, r3, #21
 8004240:	4013      	ands	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004246:	183b      	adds	r3, r7, r0
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	4b54      	ldr	r3, [pc, #336]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4013      	ands	r3, r2
 8004256:	d11a      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004258:	4b51      	ldr	r3, [pc, #324]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800425e:	2180      	movs	r1, #128	; 0x80
 8004260:	0049      	lsls	r1, r1, #1
 8004262:	430a      	orrs	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7fc fbeb 	bl	8000a40 <HAL_GetTick>
 800426a:	0003      	movs	r3, r0
 800426c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426e:	e008      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004270:	f7fc fbe6 	bl	8000a40 <HAL_GetTick>
 8004274:	0002      	movs	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e087      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4013      	ands	r3, r2
 800428c:	d0f0      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800428e:	4b43      	ldr	r3, [pc, #268]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	23c0      	movs	r3, #192	; 0xc0
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4013      	ands	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d034      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	23c0      	movs	r3, #192	; 0xc0
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4013      	ands	r3, r2
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d02c      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b0:	4b3a      	ldr	r3, [pc, #232]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	4a3b      	ldr	r2, [pc, #236]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ba:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042bc:	6a1a      	ldr	r2, [r3, #32]
 80042be:	4b37      	ldr	r3, [pc, #220]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	0249      	lsls	r1, r1, #9
 80042c4:	430a      	orrs	r2, r1
 80042c6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c8:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	4b33      	ldr	r3, [pc, #204]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ce:	4936      	ldr	r1, [pc, #216]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042d4:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	4013      	ands	r3, r2
 80042e0:	d013      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fc fbad 	bl	8000a40 <HAL_GetTick>
 80042e6:	0003      	movs	r3, r0
 80042e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ea:	e009      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fc fba8 	bl	8000a40 <HAL_GetTick>
 80042f0:	0002      	movs	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	4a2d      	ldr	r2, [pc, #180]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e048      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004300:	4b26      	ldr	r3, [pc, #152]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	2202      	movs	r2, #2
 8004306:	4013      	ands	r3, r2
 8004308:	d0f0      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	4a25      	ldr	r2, [pc, #148]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004310:	4013      	ands	r3, r2
 8004312:	0019      	movs	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800431a:	430a      	orrs	r2, r1
 800431c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800431e:	2317      	movs	r3, #23
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d105      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004328:	4b1c      	ldr	r3, [pc, #112]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800432e:	4920      	ldr	r1, [pc, #128]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004330:	400a      	ands	r2, r1
 8004332:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2201      	movs	r2, #1
 800433a:	4013      	ands	r3, r2
 800433c:	d009      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800433e:	4b17      	ldr	r3, [pc, #92]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	2203      	movs	r2, #3
 8004344:	4393      	bics	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	4b13      	ldr	r3, [pc, #76]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800434e:	430a      	orrs	r2, r1
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2220      	movs	r2, #32
 8004358:	4013      	ands	r3, r2
 800435a:	d009      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	2210      	movs	r2, #16
 8004362:	4393      	bics	r3, r2
 8004364:	0019      	movs	r1, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800436c:	430a      	orrs	r2, r1
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4013      	ands	r3, r2
 800437a:	d009      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	2240      	movs	r2, #64	; 0x40
 8004382:	4393      	bics	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	4b04      	ldr	r3, [pc, #16]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800438c:	430a      	orrs	r2, r1
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b006      	add	sp, #24
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	40021000 	.word	0x40021000
 80043a0:	40007000 	.word	0x40007000
 80043a4:	fffffcff 	.word	0xfffffcff
 80043a8:	fffeffff 	.word	0xfffeffff
 80043ac:	00001388 	.word	0x00001388
 80043b0:	efffffff 	.word	0xefffffff

080043b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e042      	b.n	800444c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	223d      	movs	r2, #61	; 0x3d
 80043ca:	5c9b      	ldrb	r3, [r3, r2]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d107      	bne.n	80043e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	223c      	movs	r2, #60	; 0x3c
 80043d6:	2100      	movs	r1, #0
 80043d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	0018      	movs	r0, r3
 80043de:	f7fc fa39 	bl	8000854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	223d      	movs	r2, #61	; 0x3d
 80043e6:	2102      	movs	r1, #2
 80043e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	0019      	movs	r1, r3
 80043f4:	0010      	movs	r0, r2
 80043f6:	f000 fa3f 	bl	8004878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2246      	movs	r2, #70	; 0x46
 80043fe:	2101      	movs	r1, #1
 8004400:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	223e      	movs	r2, #62	; 0x3e
 8004406:	2101      	movs	r1, #1
 8004408:	5499      	strb	r1, [r3, r2]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	223f      	movs	r2, #63	; 0x3f
 800440e:	2101      	movs	r1, #1
 8004410:	5499      	strb	r1, [r3, r2]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2240      	movs	r2, #64	; 0x40
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2241      	movs	r2, #65	; 0x41
 800441e:	2101      	movs	r1, #1
 8004420:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2242      	movs	r2, #66	; 0x42
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2243      	movs	r2, #67	; 0x43
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2244      	movs	r2, #68	; 0x44
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2245      	movs	r2, #69	; 0x45
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	223d      	movs	r2, #61	; 0x3d
 8004446:	2101      	movs	r1, #1
 8004448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	0018      	movs	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2202      	movs	r2, #2
 8004464:	4013      	ands	r3, r2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d124      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2202      	movs	r2, #2
 8004472:	4013      	ands	r3, r2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d11d      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2203      	movs	r2, #3
 800447e:	4252      	negs	r2, r2
 8004480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2203      	movs	r2, #3
 8004490:	4013      	ands	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	0018      	movs	r0, r3
 8004498:	f000 f9d6 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 800449c:	e007      	b.n	80044ae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 f9c9 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 f9d5 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2204      	movs	r2, #4
 80044bc:	4013      	ands	r3, r2
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d125      	bne.n	800450e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2204      	movs	r2, #4
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d11e      	bne.n	800450e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2205      	movs	r2, #5
 80044d6:	4252      	negs	r2, r2
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	23c0      	movs	r3, #192	; 0xc0
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4013      	ands	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f000 f9a9 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 80044f6:	e007      	b.n	8004508 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f000 f99c 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0018      	movs	r0, r3
 8004504:	f000 f9a8 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2208      	movs	r2, #8
 8004516:	4013      	ands	r3, r2
 8004518:	2b08      	cmp	r3, #8
 800451a:	d124      	bne.n	8004566 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	2208      	movs	r2, #8
 8004524:	4013      	ands	r3, r2
 8004526:	2b08      	cmp	r3, #8
 8004528:	d11d      	bne.n	8004566 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2209      	movs	r2, #9
 8004530:	4252      	negs	r2, r2
 8004532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2204      	movs	r2, #4
 8004538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	2203      	movs	r2, #3
 8004542:	4013      	ands	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f000 f97d 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 800454e:	e007      	b.n	8004560 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0018      	movs	r0, r3
 8004554:	f000 f970 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	0018      	movs	r0, r3
 800455c:	f000 f97c 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2210      	movs	r2, #16
 800456e:	4013      	ands	r3, r2
 8004570:	2b10      	cmp	r3, #16
 8004572:	d125      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2210      	movs	r2, #16
 800457c:	4013      	ands	r3, r2
 800457e:	2b10      	cmp	r3, #16
 8004580:	d11e      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2211      	movs	r2, #17
 8004588:	4252      	negs	r2, r2
 800458a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2208      	movs	r2, #8
 8004590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	23c0      	movs	r3, #192	; 0xc0
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4013      	ands	r3, r2
 800459e:	d004      	beq.n	80045aa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 f950 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 80045a8:	e007      	b.n	80045ba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 f943 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	0018      	movs	r0, r3
 80045b6:	f000 f94f 	bl	8004858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2201      	movs	r2, #1
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10f      	bne.n	80045ee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d108      	bne.n	80045ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2202      	movs	r2, #2
 80045e2:	4252      	negs	r2, r2
 80045e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 f91d 	bl	8004828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b80      	cmp	r3, #128	; 0x80
 80045fa:	d10f      	bne.n	800461c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2280      	movs	r2, #128	; 0x80
 8004604:	4013      	ands	r3, r2
 8004606:	2b80      	cmp	r3, #128	; 0x80
 8004608:	d108      	bne.n	800461c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2281      	movs	r2, #129	; 0x81
 8004610:	4252      	negs	r2, r2
 8004612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	0018      	movs	r0, r3
 8004618:	f000 faae 	bl	8004b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2240      	movs	r2, #64	; 0x40
 8004624:	4013      	ands	r3, r2
 8004626:	2b40      	cmp	r3, #64	; 0x40
 8004628:	d10f      	bne.n	800464a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2240      	movs	r2, #64	; 0x40
 8004632:	4013      	ands	r3, r2
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d108      	bne.n	800464a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2241      	movs	r2, #65	; 0x41
 800463e:	4252      	negs	r2, r2
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 f90f 	bl	8004868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2220      	movs	r2, #32
 8004652:	4013      	ands	r3, r2
 8004654:	2b20      	cmp	r3, #32
 8004656:	d10f      	bne.n	8004678 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	4013      	ands	r3, r2
 8004662:	2b20      	cmp	r3, #32
 8004664:	d108      	bne.n	8004678 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2221      	movs	r2, #33	; 0x21
 800466c:	4252      	negs	r2, r2
 800466e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	0018      	movs	r0, r3
 8004674:	f000 fa78 	bl	8004b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	230f      	movs	r3, #15
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	223c      	movs	r2, #60	; 0x3c
 8004696:	5c9b      	ldrb	r3, [r3, r2]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIM_ConfigClockSource+0x20>
 800469c:	2302      	movs	r3, #2
 800469e:	e0bc      	b.n	800481a <HAL_TIM_ConfigClockSource+0x19a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	223c      	movs	r2, #60	; 0x3c
 80046a4:	2101      	movs	r1, #1
 80046a6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	223d      	movs	r2, #61	; 0x3d
 80046ac:	2102      	movs	r1, #2
 80046ae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2277      	movs	r2, #119	; 0x77
 80046bc:	4393      	bics	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4a58      	ldr	r2, [pc, #352]	; (8004824 <HAL_TIM_ConfigClockSource+0x1a4>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2280      	movs	r2, #128	; 0x80
 80046d6:	0192      	lsls	r2, r2, #6
 80046d8:	4293      	cmp	r3, r2
 80046da:	d040      	beq.n	800475e <HAL_TIM_ConfigClockSource+0xde>
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	0192      	lsls	r2, r2, #6
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d900      	bls.n	80046e6 <HAL_TIM_ConfigClockSource+0x66>
 80046e4:	e088      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x178>
 80046e6:	2280      	movs	r2, #128	; 0x80
 80046e8:	0152      	lsls	r2, r2, #5
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d100      	bne.n	80046f0 <HAL_TIM_ConfigClockSource+0x70>
 80046ee:	e088      	b.n	8004802 <HAL_TIM_ConfigClockSource+0x182>
 80046f0:	2280      	movs	r2, #128	; 0x80
 80046f2:	0152      	lsls	r2, r2, #5
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d900      	bls.n	80046fa <HAL_TIM_ConfigClockSource+0x7a>
 80046f8:	e07e      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x178>
 80046fa:	2b70      	cmp	r3, #112	; 0x70
 80046fc:	d018      	beq.n	8004730 <HAL_TIM_ConfigClockSource+0xb0>
 80046fe:	d900      	bls.n	8004702 <HAL_TIM_ConfigClockSource+0x82>
 8004700:	e07a      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x178>
 8004702:	2b60      	cmp	r3, #96	; 0x60
 8004704:	d04f      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0x126>
 8004706:	d900      	bls.n	800470a <HAL_TIM_ConfigClockSource+0x8a>
 8004708:	e076      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x178>
 800470a:	2b50      	cmp	r3, #80	; 0x50
 800470c:	d03b      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x106>
 800470e:	d900      	bls.n	8004712 <HAL_TIM_ConfigClockSource+0x92>
 8004710:	e072      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x178>
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d057      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x146>
 8004716:	d900      	bls.n	800471a <HAL_TIM_ConfigClockSource+0x9a>
 8004718:	e06e      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x178>
 800471a:	2b30      	cmp	r3, #48	; 0x30
 800471c:	d063      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x166>
 800471e:	d86b      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x178>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d060      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x166>
 8004724:	d868      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x178>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d05d      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x166>
 800472a:	2b10      	cmp	r3, #16
 800472c:	d05b      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x166>
 800472e:	e063      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6899      	ldr	r1, [r3, #8]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f000 f994 	bl	8004a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2277      	movs	r2, #119	; 0x77
 8004750:	4313      	orrs	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	609a      	str	r2, [r3, #8]
      break;
 800475c:	e052      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6899      	ldr	r1, [r3, #8]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f000 f97d 	bl	8004a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2180      	movs	r1, #128	; 0x80
 800477e:	01c9      	lsls	r1, r1, #7
 8004780:	430a      	orrs	r2, r1
 8004782:	609a      	str	r2, [r3, #8]
      break;
 8004784:	e03e      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	001a      	movs	r2, r3
 8004794:	f000 f8f0 	bl	8004978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2150      	movs	r1, #80	; 0x50
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 f94a 	bl	8004a38 <TIM_ITRx_SetConfig>
      break;
 80047a4:	e02e      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6859      	ldr	r1, [r3, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	001a      	movs	r2, r3
 80047b4:	f000 f90e 	bl	80049d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2160      	movs	r1, #96	; 0x60
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 f93a 	bl	8004a38 <TIM_ITRx_SetConfig>
      break;
 80047c4:	e01e      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6859      	ldr	r1, [r3, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	001a      	movs	r2, r3
 80047d4:	f000 f8d0 	bl	8004978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2140      	movs	r1, #64	; 0x40
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 f92a 	bl	8004a38 <TIM_ITRx_SetConfig>
      break;
 80047e4:	e00e      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	0019      	movs	r1, r3
 80047f0:	0010      	movs	r0, r2
 80047f2:	f000 f921 	bl	8004a38 <TIM_ITRx_SetConfig>
      break;
 80047f6:	e005      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80047f8:	230f      	movs	r3, #15
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
      break;
 8004800:	e000      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004802:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	223d      	movs	r2, #61	; 0x3d
 8004808:	2101      	movs	r1, #1
 800480a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	223c      	movs	r2, #60	; 0x3c
 8004810:	2100      	movs	r1, #0
 8004812:	5499      	strb	r1, [r3, r2]

  return status;
 8004814:	230f      	movs	r3, #15
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	781b      	ldrb	r3, [r3, #0]
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b004      	add	sp, #16
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	ffff00ff 	.word	0xffff00ff

08004828 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004830:	46c0      	nop			; (mov r8, r8)
 8004832:	46bd      	mov	sp, r7
 8004834:	b002      	add	sp, #8
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004840:	46c0      	nop			; (mov r8, r8)
 8004842:	46bd      	mov	sp, r7
 8004844:	b002      	add	sp, #8
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b002      	add	sp, #8
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004860:	46c0      	nop			; (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	b002      	add	sp, #8
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}

08004878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a34      	ldr	r2, [pc, #208]	; (800495c <TIM_Base_SetConfig+0xe4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d008      	beq.n	80048a2 <TIM_Base_SetConfig+0x2a>
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	05db      	lsls	r3, r3, #23
 8004896:	429a      	cmp	r2, r3
 8004898:	d003      	beq.n	80048a2 <TIM_Base_SetConfig+0x2a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a30      	ldr	r2, [pc, #192]	; (8004960 <TIM_Base_SetConfig+0xe8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d108      	bne.n	80048b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2270      	movs	r2, #112	; 0x70
 80048a6:	4393      	bics	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a29      	ldr	r2, [pc, #164]	; (800495c <TIM_Base_SetConfig+0xe4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d018      	beq.n	80048ee <TIM_Base_SetConfig+0x76>
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	05db      	lsls	r3, r3, #23
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d013      	beq.n	80048ee <TIM_Base_SetConfig+0x76>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a25      	ldr	r2, [pc, #148]	; (8004960 <TIM_Base_SetConfig+0xe8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00f      	beq.n	80048ee <TIM_Base_SetConfig+0x76>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a24      	ldr	r2, [pc, #144]	; (8004964 <TIM_Base_SetConfig+0xec>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00b      	beq.n	80048ee <TIM_Base_SetConfig+0x76>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a23      	ldr	r2, [pc, #140]	; (8004968 <TIM_Base_SetConfig+0xf0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <TIM_Base_SetConfig+0x76>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a22      	ldr	r2, [pc, #136]	; (800496c <TIM_Base_SetConfig+0xf4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d003      	beq.n	80048ee <TIM_Base_SetConfig+0x76>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a21      	ldr	r2, [pc, #132]	; (8004970 <TIM_Base_SetConfig+0xf8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d108      	bne.n	8004900 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4a20      	ldr	r2, [pc, #128]	; (8004974 <TIM_Base_SetConfig+0xfc>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2280      	movs	r2, #128	; 0x80
 8004904:	4393      	bics	r3, r2
 8004906:	001a      	movs	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a0c      	ldr	r2, [pc, #48]	; (800495c <TIM_Base_SetConfig+0xe4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_Base_SetConfig+0xce>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a0d      	ldr	r2, [pc, #52]	; (8004968 <TIM_Base_SetConfig+0xf0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0xce>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a0c      	ldr	r2, [pc, #48]	; (800496c <TIM_Base_SetConfig+0xf4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0xce>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <TIM_Base_SetConfig+0xf8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d103      	bne.n	800494e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	615a      	str	r2, [r3, #20]
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	b004      	add	sp, #16
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40000400 	.word	0x40000400
 8004964:	40002000 	.word	0x40002000
 8004968:	40014000 	.word	0x40014000
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800
 8004974:	fffffcff 	.word	0xfffffcff

08004978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	2201      	movs	r2, #1
 8004990:	4393      	bics	r3, r2
 8004992:	001a      	movs	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	22f0      	movs	r2, #240	; 0xf0
 80049a2:	4393      	bics	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	220a      	movs	r2, #10
 80049b4:	4393      	bics	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	621a      	str	r2, [r3, #32]
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b006      	add	sp, #24
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	2210      	movs	r2, #16
 80049e6:	4393      	bics	r3, r2
 80049e8:	001a      	movs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	4a0d      	ldr	r2, [pc, #52]	; (8004a34 <TIM_TI2_ConfigInputStage+0x60>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	031b      	lsls	r3, r3, #12
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	22a0      	movs	r2, #160	; 0xa0
 8004a10:	4393      	bics	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b006      	add	sp, #24
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	ffff0fff 	.word	0xffff0fff

08004a38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2270      	movs	r2, #112	; 0x70
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	2207      	movs	r2, #7
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	609a      	str	r2, [r3, #8]
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b004      	add	sp, #16
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <TIM_ETR_SetConfig+0x3c>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	46c0      	nop			; (mov r8, r8)
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b006      	add	sp, #24
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	ffff00ff 	.word	0xffff00ff

08004aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	223c      	movs	r2, #60	; 0x3c
 8004aba:	5c9b      	ldrb	r3, [r3, r2]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e047      	b.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	223c      	movs	r2, #60	; 0x3c
 8004ac8:	2101      	movs	r1, #1
 8004aca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	223d      	movs	r2, #61	; 0x3d
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2270      	movs	r2, #112	; 0x70
 8004ae8:	4393      	bics	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00f      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	05db      	lsls	r3, r3, #23
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d009      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a11      	ldr	r2, [pc, #68]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10c      	bne.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2280      	movs	r2, #128	; 0x80
 8004b2c:	4393      	bics	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	223d      	movs	r2, #61	; 0x3d
 8004b46:	2101      	movs	r1, #1
 8004b48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	223c      	movs	r2, #60	; 0x3c
 8004b4e:	2100      	movs	r1, #0
 8004b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b004      	add	sp, #16
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40014000 	.word	0x40014000

08004b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b002      	add	sp, #8
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <__libc_init_array>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	4d0c      	ldr	r5, [pc, #48]	; (8004bc0 <__libc_init_array+0x38>)
 8004b8e:	4c0d      	ldr	r4, [pc, #52]	; (8004bc4 <__libc_init_array+0x3c>)
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	42a6      	cmp	r6, r4
 8004b96:	d109      	bne.n	8004bac <__libc_init_array+0x24>
 8004b98:	2600      	movs	r6, #0
 8004b9a:	f000 f821 	bl	8004be0 <_init>
 8004b9e:	4d0a      	ldr	r5, [pc, #40]	; (8004bc8 <__libc_init_array+0x40>)
 8004ba0:	4c0a      	ldr	r4, [pc, #40]	; (8004bcc <__libc_init_array+0x44>)
 8004ba2:	1b64      	subs	r4, r4, r5
 8004ba4:	10a4      	asrs	r4, r4, #2
 8004ba6:	42a6      	cmp	r6, r4
 8004ba8:	d105      	bne.n	8004bb6 <__libc_init_array+0x2e>
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	00b3      	lsls	r3, r6, #2
 8004bae:	58eb      	ldr	r3, [r5, r3]
 8004bb0:	4798      	blx	r3
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7ee      	b.n	8004b94 <__libc_init_array+0xc>
 8004bb6:	00b3      	lsls	r3, r6, #2
 8004bb8:	58eb      	ldr	r3, [r5, r3]
 8004bba:	4798      	blx	r3
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	e7f2      	b.n	8004ba6 <__libc_init_array+0x1e>
 8004bc0:	08004c28 	.word	0x08004c28
 8004bc4:	08004c28 	.word	0x08004c28
 8004bc8:	08004c28 	.word	0x08004c28
 8004bcc:	08004c2c 	.word	0x08004c2c

08004bd0 <memset>:
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	1882      	adds	r2, r0, r2
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d100      	bne.n	8004bda <memset+0xa>
 8004bd8:	4770      	bx	lr
 8004bda:	7019      	strb	r1, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	e7f9      	b.n	8004bd4 <memset+0x4>

08004be0 <_init>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr

08004bec <_fini>:
 8004bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf2:	bc08      	pop	{r3}
 8004bf4:	469e      	mov	lr, r3
 8004bf6:	4770      	bx	lr
