
LeonsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002054  08002054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002084  08002084  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002084  08002084  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002084  08002084  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002084  08002084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002088  08002088  00012088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800208c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  0800209c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800209c  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006481  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000144b  00000000  00000000  000264b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00027908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  00027f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000105a5  00000000  00000000  00028550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089f3  00000000  00000000  00038af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061690  00000000  00000000  000414e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a2b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001604  00000000  00000000  000a2bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800203c 	.word	0x0800203c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800203c 	.word	0x0800203c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <read_Gyro_data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef read_Gyro_data(uint8_t Sensor_adress, uint8_t config, float Data)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af04      	add	r7, sp, #16
 8000226:	603a      	str	r2, [r7, #0]
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	1c02      	adds	r2, r0, #0
 800022c:	701a      	strb	r2, [r3, #0]
 800022e:	1dbb      	adds	r3, r7, #6
 8000230:	1c0a      	adds	r2, r1, #0
 8000232:	701a      	strb	r2, [r3, #0]
	//if (ret!= HAL_OK){
	//	return ret;}

	//HAL_Delay(10);

	ret=HAL_I2C_Mem_Read(&hi2c1, Sensor_adress, Gyro_addr_Z, 1, rawData, 2, 50);
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	b299      	uxth	r1, r3
 800023a:	2205      	movs	r2, #5
 800023c:	250f      	movs	r5, #15
 800023e:	197c      	adds	r4, r7, r5
 8000240:	480c      	ldr	r0, [pc, #48]	; (8000274 <read_Gyro_data+0x54>)
 8000242:	2332      	movs	r3, #50	; 0x32
 8000244:	9302      	str	r3, [sp, #8]
 8000246:	2302      	movs	r3, #2
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	230c      	movs	r3, #12
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	2301      	movs	r3, #1
 8000252:	f000 fde3 	bl	8000e1c <HAL_I2C_Mem_Read>
 8000256:	0003      	movs	r3, r0
 8000258:	7023      	strb	r3, [r4, #0]
	if (ret!= HAL_OK){
 800025a:	197b      	adds	r3, r7, r5
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d002      	beq.n	8000268 <read_Gyro_data+0x48>
		return ret;}
 8000262:	197b      	adds	r3, r7, r5
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	e000      	b.n	800026a <read_Gyro_data+0x4a>

	return HAL_OK;
 8000268:	2300      	movs	r3, #0
}
 800026a:	0018      	movs	r0, r3
 800026c:	46bd      	mov	sp, r7
 800026e:	b004      	add	sp, #16
 8000270:	bdb0      	pop	{r4, r5, r7, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	2000002c 	.word	0x2000002c

08000278 <read_Magn_Accel_data>:

HAL_StatusTypeDef read_Magn_Accel_data(uint8_t Sensor_adress, uint8_t config, float Data)
{
 8000278:	b5b0      	push	{r4, r5, r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af04      	add	r7, sp, #16
 800027e:	603a      	str	r2, [r7, #0]
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	1c02      	adds	r2, r0, #0
 8000284:	701a      	strb	r2, [r3, #0]
 8000286:	1dbb      	adds	r3, r7, #6
 8000288:	1c0a      	adds	r2, r1, #0
 800028a:	701a      	strb	r2, [r3, #0]
	uint8_t rawData[2];
	HAL_StatusTypeDef ret;
	ret=HAL_I2C_Mem_Read(&hi2c1, Sensor_adress, OUT_Y_MSB, 1, rawData, 2, 50);
 800028c:	1dfb      	adds	r3, r7, #7
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	b299      	uxth	r1, r3
 8000292:	2304      	movs	r3, #4
 8000294:	b29a      	uxth	r2, r3
 8000296:	250f      	movs	r5, #15
 8000298:	197c      	adds	r4, r7, r5
 800029a:	480c      	ldr	r0, [pc, #48]	; (80002cc <read_Magn_Accel_data+0x54>)
 800029c:	2332      	movs	r3, #50	; 0x32
 800029e:	9302      	str	r3, [sp, #8]
 80002a0:	2302      	movs	r3, #2
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	230c      	movs	r3, #12
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2301      	movs	r3, #1
 80002ac:	f000 fdb6 	bl	8000e1c <HAL_I2C_Mem_Read>
 80002b0:	0003      	movs	r3, r0
 80002b2:	7023      	strb	r3, [r4, #0]
	if (ret!= HAL_OK){
 80002b4:	197b      	adds	r3, r7, r5
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <read_Magn_Accel_data+0x4a>
		return ret;}
 80002bc:	197b      	adds	r3, r7, r5
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	e000      	b.n	80002c4 <read_Magn_Accel_data+0x4c>

	return HAL_OK;
 80002c2:	2300      	movs	r3, #0
}
 80002c4:	0018      	movs	r0, r3
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b004      	add	sp, #16
 80002ca:	bdb0      	pop	{r4, r5, r7, pc}
 80002cc:	2000002c 	.word	0x2000002c

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d6:	f000 fa25 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002da:	f000 f859 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002de:	f000 f8f9 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002e2:	f000 f8b7 	bl	8000454 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int perm_B1=1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	60fb      	str	r3, [r7, #12]
  float Gyro_Data=0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
  float MA_Data=0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80002f2:	2064      	movs	r0, #100	; 0x64
 80002f4:	f000 fa7a 	bl	80007ec <HAL_Delay>

	  //read_Gyro_data();
	  uint8_t config= 0b00100000;
 80002f8:	1cfb      	adds	r3, r7, #3
 80002fa:	2220      	movs	r2, #32
 80002fc:	701a      	strb	r2, [r3, #0]
	  read_Gyro_data(FXAS21002_SLAVE_ADDR_R, config, Gyro_Data);
 80002fe:	4b22      	ldr	r3, [pc, #136]	; (8000388 <main+0xb8>)
 8000300:	7818      	ldrb	r0, [r3, #0]
 8000302:	68ba      	ldr	r2, [r7, #8]
 8000304:	1cfb      	adds	r3, r7, #3
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	0019      	movs	r1, r3
 800030a:	f7ff ff89 	bl	8000220 <read_Gyro_data>
	  read_Magn_Accel_data(FXOS8700CQ_SLAVE_ADDR, config, MA_Data);
 800030e:	231e      	movs	r3, #30
 8000310:	b2d8      	uxtb	r0, r3
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	1cfb      	adds	r3, r7, #3
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	0019      	movs	r1, r3
 800031a:	f7ff ffad 	bl	8000278 <read_Magn_Accel_data>
	  //HAL_GPIO_ReadPin(SWDIO_GPIO_Port, SWCLK_Pin);
	  GPIO_PinState state_B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800031e:	1cbc      	adds	r4, r7, #2
 8000320:	2390      	movs	r3, #144	; 0x90
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	2101      	movs	r1, #1
 8000326:	0018      	movs	r0, r3
 8000328:	f000 fca8 	bl	8000c7c <HAL_GPIO_ReadPin>
 800032c:	0003      	movs	r3, r0
 800032e:	7023      	strb	r3, [r4, #0]
	  //GPIO_PinState state_B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
	  if (state_B1==GPIO_PIN_SET){
 8000330:	1cbb      	adds	r3, r7, #2
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d103      	bne.n	8000340 <main+0x70>
		  perm_B1=perm_B1 ^ 1;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	2201      	movs	r2, #1
 800033c:	4053      	eors	r3, r2
 800033e:	60fb      	str	r3, [r7, #12]
	  }

	  if (perm_B1==1){
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d10e      	bne.n	8000364 <main+0x94>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8000346:	2380      	movs	r3, #128	; 0x80
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	4810      	ldr	r0, [pc, #64]	; (800038c <main+0xbc>)
 800034c:	2201      	movs	r2, #1
 800034e:	0019      	movs	r1, r3
 8000350:	f000 fcb1 	bl	8000cb6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000354:	2380      	movs	r3, #128	; 0x80
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <main+0xbc>)
 800035a:	2200      	movs	r2, #0
 800035c:	0019      	movs	r1, r3
 800035e:	f000 fcaa 	bl	8000cb6 <HAL_GPIO_WritePin>
 8000362:	e7c6      	b.n	80002f2 <main+0x22>
	  }
	  else if(perm_B1==0){
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1c3      	bne.n	80002f2 <main+0x22>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 800036a:	2380      	movs	r3, #128	; 0x80
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	4807      	ldr	r0, [pc, #28]	; (800038c <main+0xbc>)
 8000370:	2200      	movs	r2, #0
 8000372:	0019      	movs	r1, r3
 8000374:	f000 fc9f 	bl	8000cb6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000378:	2380      	movs	r3, #128	; 0x80
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	4803      	ldr	r0, [pc, #12]	; (800038c <main+0xbc>)
 800037e:	2201      	movs	r2, #1
 8000380:	0019      	movs	r1, r3
 8000382:	f000 fc98 	bl	8000cb6 <HAL_GPIO_WritePin>
  {
 8000386:	e7b4      	b.n	80002f2 <main+0x22>
 8000388:	20000000 	.word	0x20000000
 800038c:	48000800 	.word	0x48000800

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b590      	push	{r4, r7, lr}
 8000392:	b097      	sub	sp, #92	; 0x5c
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	2428      	movs	r4, #40	; 0x28
 8000398:	193b      	adds	r3, r7, r4
 800039a:	0018      	movs	r0, r3
 800039c:	2330      	movs	r3, #48	; 0x30
 800039e:	001a      	movs	r2, r3
 80003a0:	2100      	movs	r1, #0
 80003a2:	f001 fe43 	bl	800202c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a6:	2318      	movs	r3, #24
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	0018      	movs	r0, r3
 80003ac:	2310      	movs	r3, #16
 80003ae:	001a      	movs	r2, r3
 80003b0:	2100      	movs	r1, #0
 80003b2:	f001 fe3b 	bl	800202c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	0018      	movs	r0, r3
 80003ba:	2314      	movs	r3, #20
 80003bc:	001a      	movs	r2, r3
 80003be:	2100      	movs	r1, #0
 80003c0:	f001 fe34 	bl	800202c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c4:	0021      	movs	r1, r4
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2202      	movs	r2, #2
 80003ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2201      	movs	r2, #1
 80003d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2210      	movs	r2, #16
 80003d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2202      	movs	r2, #2
 80003dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	22a0      	movs	r2, #160	; 0xa0
 80003e8:	0392      	lsls	r2, r2, #14
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2200      	movs	r2, #0
 80003f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 f8cb 	bl	8001590 <HAL_RCC_OscConfig>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003fe:	f000 f8d3 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	2118      	movs	r1, #24
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2207      	movs	r2, #7
 8000408:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2202      	movs	r2, #2
 800040e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2101      	movs	r1, #1
 8000420:	0018      	movs	r0, r3
 8000422:	f001 fbcf 	bl	8001bc4 <HAL_RCC_ClockConfig>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800042a:	f000 f8bd 	bl	80005a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2220      	movs	r2, #32
 8000432:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fcf3 	bl	8001e28 <HAL_RCCEx_PeriphCLKConfig>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000446:	f000 f8af 	bl	80005a8 <Error_Handler>
  }
}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b017      	add	sp, #92	; 0x5c
 8000450:	bd90      	pop	{r4, r7, pc}
	...

08000454 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_I2C1_Init+0x74>)
 800045a:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <MX_I2C1_Init+0x78>)
 800045c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000460:	4a1b      	ldr	r2, [pc, #108]	; (80004d0 <MX_I2C1_Init+0x7c>)
 8000462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000464:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <MX_I2C1_Init+0x74>)
 800046c:	2201      	movs	r2, #1
 800046e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <MX_I2C1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000490:	0018      	movs	r0, r3
 8000492:	f000 fc2d 	bl	8000cf0 <HAL_I2C_Init>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800049a:	f000 f885 	bl	80005a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <MX_I2C1_Init+0x74>)
 80004a0:	2100      	movs	r1, #0
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 ffdc 	bl	8001460 <HAL_I2CEx_ConfigAnalogFilter>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004ac:	f000 f87c 	bl	80005a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <MX_I2C1_Init+0x74>)
 80004b2:	2100      	movs	r1, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 f81f 	bl	80014f8 <HAL_I2CEx_ConfigDigitalFilter>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004be:	f000 f873 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2000002c 	.word	0x2000002c
 80004cc:	40005400 	.word	0x40005400
 80004d0:	2000090e 	.word	0x2000090e

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b089      	sub	sp, #36	; 0x24
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	240c      	movs	r4, #12
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	2314      	movs	r3, #20
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f001 fda1 	bl	800202c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <MX_GPIO_Init+0xcc>)
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <MX_GPIO_Init+0xcc>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0289      	lsls	r1, r1, #10
 80004f4:	430a      	orrs	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <MX_GPIO_Init+0xcc>)
 80004fa:	695a      	ldr	r2, [r3, #20]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	029b      	lsls	r3, r3, #10
 8000500:	4013      	ands	r3, r2
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <MX_GPIO_Init+0xcc>)
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <MX_GPIO_Init+0xcc>)
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	0309      	lsls	r1, r1, #12
 8000510:	430a      	orrs	r2, r1
 8000512:	615a      	str	r2, [r3, #20]
 8000514:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <MX_GPIO_Init+0xcc>)
 8000516:	695a      	ldr	r2, [r3, #20]
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	031b      	lsls	r3, r3, #12
 800051c:	4013      	ands	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_GPIO_Init+0xcc>)
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <MX_GPIO_Init+0xcc>)
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	02c9      	lsls	r1, r1, #11
 800052c:	430a      	orrs	r2, r1
 800052e:	615a      	str	r2, [r3, #20]
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_GPIO_Init+0xcc>)
 8000532:	695a      	ldr	r2, [r3, #20]
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	02db      	lsls	r3, r3, #11
 8000538:	4013      	ands	r3, r2
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800053e:	23c0      	movs	r3, #192	; 0xc0
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4818      	ldr	r0, [pc, #96]	; (80005a4 <MX_GPIO_Init+0xd0>)
 8000544:	2200      	movs	r2, #0
 8000546:	0019      	movs	r1, r3
 8000548:	f000 fbb5 	bl	8000cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2290      	movs	r2, #144	; 0x90
 8000556:	0352      	lsls	r2, r2, #13
 8000558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000560:	193a      	adds	r2, r7, r4
 8000562:	2390      	movs	r3, #144	; 0x90
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fa17 	bl	800099c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800056e:	0021      	movs	r1, r4
 8000570:	187b      	adds	r3, r7, r1
 8000572:	22c0      	movs	r2, #192	; 0xc0
 8000574:	0092      	lsls	r2, r2, #2
 8000576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2201      	movs	r2, #1
 800057c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058a:	187b      	adds	r3, r7, r1
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <MX_GPIO_Init+0xd0>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f000 fa03 	bl	800099c <HAL_GPIO_Init>

}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b009      	add	sp, #36	; 0x24
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48000800 	.word	0x48000800

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>
	...

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_MspInit+0x44>)
 80005bc:	699a      	ldr	r2, [r3, #24]
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_MspInit+0x44>)
 80005c0:	2101      	movs	r1, #1
 80005c2:	430a      	orrs	r2, r1
 80005c4:	619a      	str	r2, [r3, #24]
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_MspInit+0x44>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	2201      	movs	r2, #1
 80005cc:	4013      	ands	r3, r2
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_MspInit+0x44>)
 80005d4:	69da      	ldr	r2, [r3, #28]
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_MspInit+0x44>)
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	0549      	lsls	r1, r1, #21
 80005dc:	430a      	orrs	r2, r1
 80005de:	61da      	str	r2, [r3, #28]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_MspInit+0x44>)
 80005e2:	69da      	ldr	r2, [r3, #28]
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	055b      	lsls	r3, r3, #21
 80005e8:	4013      	ands	r3, r2
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b002      	add	sp, #8
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b08b      	sub	sp, #44	; 0x2c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	2414      	movs	r4, #20
 8000606:	193b      	adds	r3, r7, r4
 8000608:	0018      	movs	r0, r3
 800060a:	2314      	movs	r3, #20
 800060c:	001a      	movs	r2, r3
 800060e:	2100      	movs	r1, #0
 8000610:	f001 fd0c 	bl	800202c <memset>
  if(hi2c->Instance==I2C1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1c      	ldr	r2, [pc, #112]	; (800068c <HAL_I2C_MspInit+0x90>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d131      	bne.n	8000682 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_I2C_MspInit+0x94>)
 8000620:	695a      	ldr	r2, [r3, #20]
 8000622:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <HAL_I2C_MspInit+0x94>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	02c9      	lsls	r1, r1, #11
 8000628:	430a      	orrs	r2, r1
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <HAL_I2C_MspInit+0x94>)
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	02db      	lsls	r3, r3, #11
 8000634:	4013      	ands	r3, r2
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800063a:	0021      	movs	r1, r4
 800063c:	187b      	adds	r3, r7, r1
 800063e:	22c0      	movs	r2, #192	; 0xc0
 8000640:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2212      	movs	r2, #18
 8000646:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2203      	movs	r2, #3
 8000652:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2201      	movs	r2, #1
 8000658:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	187b      	adds	r3, r7, r1
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <HAL_I2C_MspInit+0x98>)
 800065e:	0019      	movs	r1, r3
 8000660:	0010      	movs	r0, r2
 8000662:	f000 f99b 	bl	800099c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_I2C_MspInit+0x94>)
 8000668:	69da      	ldr	r2, [r3, #28]
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_I2C_MspInit+0x94>)
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	0389      	lsls	r1, r1, #14
 8000670:	430a      	orrs	r2, r1
 8000672:	61da      	str	r2, [r3, #28]
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_I2C_MspInit+0x94>)
 8000676:	69da      	ldr	r2, [r3, #28]
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	039b      	lsls	r3, r3, #14
 800067c:	4013      	ands	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b00b      	add	sp, #44	; 0x2c
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40005400 	.word	0x40005400
 8000690:	40021000 	.word	0x40021000
 8000694:	48000400 	.word	0x48000400

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006bc:	f000 f87a 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006d6:	490e      	ldr	r1, [pc, #56]	; (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ec:	4c0b      	ldr	r4, [pc, #44]	; (800071c <LoopForever+0x16>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006fa:	f7ff ffe4 	bl	80006c6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006fe:	f001 fc71 	bl	8001fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff fde5 	bl	80002d0 <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   r0, =_estack
 8000708:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000714:	0800208c 	.word	0x0800208c
  ldr r2, =_sbss
 8000718:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800071c:	2000007c 	.word	0x2000007c

08000720 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_COMP_IRQHandler>
	...

08000724 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <HAL_Init+0x24>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_Init+0x24>)
 800072e:	2110      	movs	r1, #16
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000734:	2000      	movs	r0, #0
 8000736:	f000 f809 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073a:	f7ff ff3b 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <HAL_InitTick+0x5c>)
 8000756:	681c      	ldr	r4, [r3, #0]
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_InitTick+0x60>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	0019      	movs	r1, r3
 800075e:	23fa      	movs	r3, #250	; 0xfa
 8000760:	0098      	lsls	r0, r3, #2
 8000762:	f7ff fcd1 	bl	8000108 <__udivsi3>
 8000766:	0003      	movs	r3, r0
 8000768:	0019      	movs	r1, r3
 800076a:	0020      	movs	r0, r4
 800076c:	f7ff fccc 	bl	8000108 <__udivsi3>
 8000770:	0003      	movs	r3, r0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 f905 	bl	8000982 <HAL_SYSTICK_Config>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	e00f      	b.n	80007a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d80b      	bhi.n	800079e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	2301      	movs	r3, #1
 800078a:	425b      	negs	r3, r3
 800078c:	2200      	movs	r2, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f8e2 	bl	8000958 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_InitTick+0x64>)
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	e000      	b.n	80007a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b003      	add	sp, #12
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	20000004 	.word	0x20000004
 80007ac:	2000000c 	.word	0x2000000c
 80007b0:	20000008 	.word	0x20000008

080007b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_IncTick+0x1c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_IncTick+0x20>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	18d2      	adds	r2, r2, r3
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <HAL_IncTick+0x20>)
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	2000000c 	.word	0x2000000c
 80007d4:	20000078 	.word	0x20000078

080007d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  return uwTick;
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <HAL_GetTick+0x10>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000078 	.word	0x20000078

080007ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f4:	f7ff fff0 	bl	80007d8 <HAL_GetTick>
 80007f8:	0003      	movs	r3, r0
 80007fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3301      	adds	r3, #1
 8000804:	d005      	beq.n	8000812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_Delay+0x44>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	001a      	movs	r2, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	189b      	adds	r3, r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	f7ff ffe0 	bl	80007d8 <HAL_GetTick>
 8000818:	0002      	movs	r2, r0
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	429a      	cmp	r2, r3
 8000822:	d8f7      	bhi.n	8000814 <HAL_Delay+0x28>
  {
  }
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b004      	add	sp, #16
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	2000000c 	.word	0x2000000c

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b7f      	cmp	r3, #127	; 0x7f
 8000848:	d828      	bhi.n	800089c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084a:	4a2f      	ldr	r2, [pc, #188]	; (8000908 <__NVIC_SetPriority+0xd4>)
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	33c0      	adds	r3, #192	; 0xc0
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	589b      	ldr	r3, [r3, r2]
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	0011      	movs	r1, r2
 8000860:	2203      	movs	r2, #3
 8000862:	400a      	ands	r2, r1
 8000864:	00d2      	lsls	r2, r2, #3
 8000866:	21ff      	movs	r1, #255	; 0xff
 8000868:	4091      	lsls	r1, r2
 800086a:	000a      	movs	r2, r1
 800086c:	43d2      	mvns	r2, r2
 800086e:	401a      	ands	r2, r3
 8000870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	019b      	lsls	r3, r3, #6
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	401a      	ands	r2, r3
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	0018      	movs	r0, r3
 8000880:	2303      	movs	r3, #3
 8000882:	4003      	ands	r3, r0
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	481f      	ldr	r0, [pc, #124]	; (8000908 <__NVIC_SetPriority+0xd4>)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b25b      	sxtb	r3, r3
 8000890:	089b      	lsrs	r3, r3, #2
 8000892:	430a      	orrs	r2, r1
 8000894:	33c0      	adds	r3, #192	; 0xc0
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800089a:	e031      	b.n	8000900 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <__NVIC_SetPriority+0xd8>)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	0019      	movs	r1, r3
 80008a4:	230f      	movs	r3, #15
 80008a6:	400b      	ands	r3, r1
 80008a8:	3b08      	subs	r3, #8
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	3306      	adds	r3, #6
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	3304      	adds	r3, #4
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	1dfa      	adds	r2, r7, #7
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	0011      	movs	r1, r2
 80008bc:	2203      	movs	r2, #3
 80008be:	400a      	ands	r2, r1
 80008c0:	00d2      	lsls	r2, r2, #3
 80008c2:	21ff      	movs	r1, #255	; 0xff
 80008c4:	4091      	lsls	r1, r2
 80008c6:	000a      	movs	r2, r1
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	401a      	ands	r2, r3
 80008cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	22ff      	movs	r2, #255	; 0xff
 80008d4:	401a      	ands	r2, r3
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	0018      	movs	r0, r3
 80008dc:	2303      	movs	r3, #3
 80008de:	4003      	ands	r3, r0
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <__NVIC_SetPriority+0xd8>)
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	001c      	movs	r4, r3
 80008ec:	230f      	movs	r3, #15
 80008ee:	4023      	ands	r3, r4
 80008f0:	3b08      	subs	r3, #8
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	430a      	orrs	r2, r1
 80008f6:	3306      	adds	r3, #6
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	18c3      	adds	r3, r0, r3
 80008fc:	3304      	adds	r3, #4
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b003      	add	sp, #12
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	045b      	lsls	r3, r3, #17
 8000920:	429a      	cmp	r2, r3
 8000922:	d301      	bcc.n	8000928 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000924:	2301      	movs	r3, #1
 8000926:	e010      	b.n	800094a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <SysTick_Config+0x44>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	3a01      	subs	r2, #1
 800092e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000930:	2301      	movs	r3, #1
 8000932:	425b      	negs	r3, r3
 8000934:	2103      	movs	r1, #3
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff ff7c 	bl	8000834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <SysTick_Config+0x44>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <SysTick_Config+0x44>)
 8000944:	2207      	movs	r2, #7
 8000946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000948:	2300      	movs	r3, #0
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	e000e010 	.word	0xe000e010

08000958 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	210f      	movs	r1, #15
 8000964:	187b      	adds	r3, r7, r1
 8000966:	1c02      	adds	r2, r0, #0
 8000968:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	187b      	adds	r3, r7, r1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b25b      	sxtb	r3, r3
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ff5d 	bl	8000834 <__NVIC_SetPriority>
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b004      	add	sp, #16
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff ffbf 	bl	8000910 <SysTick_Config>
 8000992:	0003      	movs	r3, r0
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009aa:	e14f      	b.n	8000c4c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2101      	movs	r1, #1
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4091      	lsls	r1, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d100      	bne.n	80009c4 <HAL_GPIO_Init+0x28>
 80009c2:	e140      	b.n	8000c46 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2203      	movs	r2, #3
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d005      	beq.n	80009dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2203      	movs	r2, #3
 80009d6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d130      	bne.n	8000a3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	43da      	mvns	r2, r3
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a12:	2201      	movs	r2, #1
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	2201      	movs	r2, #1
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2203      	movs	r2, #3
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d017      	beq.n	8000a7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2203      	movs	r2, #3
 8000a80:	4013      	ands	r3, r2
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d123      	bne.n	8000ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	08da      	lsrs	r2, r3, #3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3208      	adds	r2, #8
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	58d3      	ldr	r3, [r2, r3]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	2207      	movs	r2, #7
 8000a98:	4013      	ands	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2107      	movs	r1, #7
 8000ab2:	400b      	ands	r3, r1
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	08da      	lsrs	r2, r3, #3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3208      	adds	r2, #8
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	6939      	ldr	r1, [r7, #16]
 8000acc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	2203      	movs	r2, #3
 8000aec:	401a      	ands	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	23c0      	movs	r3, #192	; 0xc0
 8000b08:	029b      	lsls	r3, r3, #10
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	d100      	bne.n	8000b10 <HAL_GPIO_Init+0x174>
 8000b0e:	e09a      	b.n	8000c46 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	4b54      	ldr	r3, [pc, #336]	; (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b12:	699a      	ldr	r2, [r3, #24]
 8000b14:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	619a      	str	r2, [r3, #24]
 8000b1c:	4b51      	ldr	r3, [pc, #324]	; (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	2201      	movs	r2, #1
 8000b22:	4013      	ands	r3, r2
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b28:	4a4f      	ldr	r2, [pc, #316]	; (8000c68 <HAL_GPIO_Init+0x2cc>)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3302      	adds	r3, #2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	589b      	ldr	r3, [r3, r2]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	2203      	movs	r2, #3
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	220f      	movs	r2, #15
 8000b40:	409a      	lsls	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	43da      	mvns	r2, r3
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	2390      	movs	r3, #144	; 0x90
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d013      	beq.n	8000b7e <HAL_GPIO_Init+0x1e2>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a44      	ldr	r2, [pc, #272]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d00d      	beq.n	8000b7a <HAL_GPIO_Init+0x1de>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a43      	ldr	r2, [pc, #268]	; (8000c70 <HAL_GPIO_Init+0x2d4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d007      	beq.n	8000b76 <HAL_GPIO_Init+0x1da>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a42      	ldr	r2, [pc, #264]	; (8000c74 <HAL_GPIO_Init+0x2d8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_GPIO_Init+0x1d6>
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b72:	2305      	movs	r3, #5
 8000b74:	e004      	b.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	2103      	movs	r1, #3
 8000b84:	400a      	ands	r2, r1
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4093      	lsls	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b90:	4935      	ldr	r1, [pc, #212]	; (8000c68 <HAL_GPIO_Init+0x2cc>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b9e:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	025b      	lsls	r3, r3, #9
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43da      	mvns	r2, r3
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	029b      	lsls	r3, r3, #10
 8000be0:	4013      	ands	r3, r2
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	035b      	lsls	r3, r3, #13
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43da      	mvns	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	039b      	lsls	r3, r3, #14
 8000c34:	4013      	ands	r3, r2
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	40da      	lsrs	r2, r3
 8000c54:	1e13      	subs	r3, r2, #0
 8000c56:	d000      	beq.n	8000c5a <HAL_GPIO_Init+0x2be>
 8000c58:	e6a8      	b.n	80009ac <HAL_GPIO_Init+0x10>
  } 
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b006      	add	sp, #24
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	48000800 	.word	0x48000800
 8000c74:	48000c00 	.word	0x48000c00
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	000a      	movs	r2, r1
 8000c86:	1cbb      	adds	r3, r7, #2
 8000c88:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	1cba      	adds	r2, r7, #2
 8000c90:	8812      	ldrh	r2, [r2, #0]
 8000c92:	4013      	ands	r3, r2
 8000c94:	d004      	beq.n	8000ca0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000c96:	230f      	movs	r3, #15
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	e003      	b.n	8000ca8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	781b      	ldrb	r3, [r3, #0]
  }
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b004      	add	sp, #16
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	0008      	movs	r0, r1
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	1cbb      	adds	r3, r7, #2
 8000cc4:	1c02      	adds	r2, r0, #0
 8000cc6:	801a      	strh	r2, [r3, #0]
 8000cc8:	1c7b      	adds	r3, r7, #1
 8000cca:	1c0a      	adds	r2, r1, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cce:	1c7b      	adds	r3, r7, #1
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cd6:	1cbb      	adds	r3, r7, #2
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cde:	e003      	b.n	8000ce8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ce0:	1cbb      	adds	r3, r7, #2
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e082      	b.n	8000e08 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2241      	movs	r2, #65	; 0x41
 8000d06:	5c9b      	ldrb	r3, [r3, r2]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d107      	bne.n	8000d1e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2240      	movs	r2, #64	; 0x40
 8000d12:	2100      	movs	r1, #0
 8000d14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff fc6f 	bl	80005fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2241      	movs	r2, #65	; 0x41
 8000d22:	2124      	movs	r1, #36	; 0x24
 8000d24:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	438a      	bics	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4934      	ldr	r1, [pc, #208]	; (8000e10 <HAL_I2C_Init+0x120>)
 8000d40:	400a      	ands	r2, r1
 8000d42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4931      	ldr	r1, [pc, #196]	; (8000e14 <HAL_I2C_Init+0x124>)
 8000d50:	400a      	ands	r2, r1
 8000d52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d108      	bne.n	8000d6e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0209      	lsls	r1, r1, #8
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	e007      	b.n	8000d7e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2184      	movs	r1, #132	; 0x84
 8000d78:	0209      	lsls	r1, r1, #8
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d104      	bne.n	8000d90 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	491f      	ldr	r1, [pc, #124]	; (8000e18 <HAL_I2C_Init+0x128>)
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	491a      	ldr	r1, [pc, #104]	; (8000e14 <HAL_I2C_Init+0x124>)
 8000dac:	400a      	ands	r2, r1
 8000dae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69d9      	ldr	r1, [r3, #28]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1a      	ldr	r2, [r3, #32]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	430a      	orrs	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2241      	movs	r2, #65	; 0x41
 8000df4:	2120      	movs	r1, #32
 8000df6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2242      	movs	r2, #66	; 0x42
 8000e02:	2100      	movs	r1, #0
 8000e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	f0ffffff 	.word	0xf0ffffff
 8000e14:	ffff7fff 	.word	0xffff7fff
 8000e18:	02008000 	.word	0x02008000

08000e1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	000c      	movs	r4, r1
 8000e26:	0010      	movs	r0, r2
 8000e28:	0019      	movs	r1, r3
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	1c22      	adds	r2, r4, #0
 8000e30:	801a      	strh	r2, [r3, #0]
 8000e32:	2308      	movs	r3, #8
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	1c02      	adds	r2, r0, #0
 8000e38:	801a      	strh	r2, [r3, #0]
 8000e3a:	1dbb      	adds	r3, r7, #6
 8000e3c:	1c0a      	adds	r2, r1, #0
 8000e3e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2241      	movs	r2, #65	; 0x41
 8000e44:	5c9b      	ldrb	r3, [r3, r2]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b20      	cmp	r3, #32
 8000e4a:	d000      	beq.n	8000e4e <HAL_I2C_Mem_Read+0x32>
 8000e4c:	e110      	b.n	8001070 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d004      	beq.n	8000e5e <HAL_I2C_Mem_Read+0x42>
 8000e54:	232c      	movs	r3, #44	; 0x2c
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d105      	bne.n	8000e6a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	0092      	lsls	r2, r2, #2
 8000e64:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e103      	b.n	8001072 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2240      	movs	r2, #64	; 0x40
 8000e6e:	5c9b      	ldrb	r3, [r3, r2]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d101      	bne.n	8000e78 <HAL_I2C_Mem_Read+0x5c>
 8000e74:	2302      	movs	r3, #2
 8000e76:	e0fc      	b.n	8001072 <HAL_I2C_Mem_Read+0x256>
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2240      	movs	r2, #64	; 0x40
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e80:	f7ff fcaa 	bl	80007d8 <HAL_GetTick>
 8000e84:	0003      	movs	r3, r0
 8000e86:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	0219      	lsls	r1, r3, #8
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2319      	movs	r3, #25
 8000e94:	2201      	movs	r2, #1
 8000e96:	f000 f979 	bl	800118c <I2C_WaitOnFlagUntilTimeout>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e0e7      	b.n	8001072 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2241      	movs	r2, #65	; 0x41
 8000ea6:	2122      	movs	r1, #34	; 0x22
 8000ea8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2242      	movs	r2, #66	; 0x42
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	222c      	movs	r2, #44	; 0x2c
 8000ec2:	18ba      	adds	r2, r7, r2
 8000ec4:	8812      	ldrh	r2, [r2, #0]
 8000ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ece:	1dbb      	adds	r3, r7, #6
 8000ed0:	881c      	ldrh	r4, [r3, #0]
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	881a      	ldrh	r2, [r3, #0]
 8000ed8:	230a      	movs	r3, #10
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	8819      	ldrh	r1, [r3, #0]
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	0023      	movs	r3, r4
 8000eea:	f000 f8cb 	bl	8001084 <I2C_RequestMemoryRead>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d005      	beq.n	8000efe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e0b9      	b.n	8001072 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	2bff      	cmp	r3, #255	; 0xff
 8000f06:	d911      	bls.n	8000f2c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	22ff      	movs	r2, #255	; 0xff
 8000f0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	045c      	lsls	r4, r3, #17
 8000f18:	230a      	movs	r3, #10
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	8819      	ldrh	r1, [r3, #0]
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	4b56      	ldr	r3, [pc, #344]	; (800107c <HAL_I2C_Mem_Read+0x260>)
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	0023      	movs	r3, r4
 8000f26:	f000 fa65 	bl	80013f4 <I2C_TransferConfig>
 8000f2a:	e012      	b.n	8000f52 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	049c      	lsls	r4, r3, #18
 8000f40:	230a      	movs	r3, #10
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	8819      	ldrh	r1, [r3, #0]
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	4b4c      	ldr	r3, [pc, #304]	; (800107c <HAL_I2C_Mem_Read+0x260>)
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	0023      	movs	r3, r4
 8000f4e:	f000 fa51 	bl	80013f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2104      	movs	r1, #4
 8000f60:	f000 f914 	bl	800118c <I2C_WaitOnFlagUntilTimeout>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e082      	b.n	8001072 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	3b01      	subs	r3, #1
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d03a      	beq.n	800101e <HAL_I2C_Mem_Read+0x202>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d136      	bne.n	800101e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	0013      	movs	r3, r2
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	f000 f8e5 	bl	800118c <I2C_WaitOnFlagUntilTimeout>
 8000fc2:	1e03      	subs	r3, r0, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e053      	b.n	8001072 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	2bff      	cmp	r3, #255	; 0xff
 8000fd2:	d911      	bls.n	8000ff8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	045c      	lsls	r4, r3, #17
 8000fe4:	230a      	movs	r3, #10
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	8819      	ldrh	r1, [r3, #0]
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	0023      	movs	r3, r4
 8000ff2:	f000 f9ff 	bl	80013f4 <I2C_TransferConfig>
 8000ff6:	e012      	b.n	800101e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001006:	b2da      	uxtb	r2, r3
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	049c      	lsls	r4, r3, #18
 800100c:	230a      	movs	r3, #10
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	8819      	ldrh	r1, [r3, #0]
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	2300      	movs	r3, #0
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	0023      	movs	r3, r4
 800101a:	f000 f9eb 	bl	80013f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001022:	b29b      	uxth	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d194      	bne.n	8000f52 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	0018      	movs	r0, r3
 8001030:	f000 f92a 	bl	8001288 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d001      	beq.n	800103c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e01a      	b.n	8001072 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2220      	movs	r2, #32
 8001042:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	490c      	ldr	r1, [pc, #48]	; (8001080 <HAL_I2C_Mem_Read+0x264>)
 8001050:	400a      	ands	r2, r1
 8001052:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2241      	movs	r2, #65	; 0x41
 8001058:	2120      	movs	r1, #32
 800105a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2242      	movs	r2, #66	; 0x42
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	2100      	movs	r1, #0
 800106a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	e000      	b.n	8001072 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001070:	2302      	movs	r3, #2
  }
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b007      	add	sp, #28
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	80002400 	.word	0x80002400
 8001080:	fe00e800 	.word	0xfe00e800

08001084 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001084:	b5b0      	push	{r4, r5, r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	000c      	movs	r4, r1
 800108e:	0010      	movs	r0, r2
 8001090:	0019      	movs	r1, r3
 8001092:	250a      	movs	r5, #10
 8001094:	197b      	adds	r3, r7, r5
 8001096:	1c22      	adds	r2, r4, #0
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	2308      	movs	r3, #8
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	1c02      	adds	r2, r0, #0
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	1dbb      	adds	r3, r7, #6
 80010a4:	1c0a      	adds	r2, r1, #0
 80010a6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80010a8:	1dbb      	adds	r3, r7, #6
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	197b      	adds	r3, r7, r5
 80010b0:	8819      	ldrh	r1, [r3, #0]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <I2C_RequestMemoryRead+0xc0>)
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2300      	movs	r3, #0
 80010ba:	f000 f99b 	bl	80013f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c0:	6a39      	ldr	r1, [r7, #32]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	0018      	movs	r0, r3
 80010c6:	f000 f8a0 	bl	800120a <I2C_WaitOnTXISFlagUntilTimeout>
 80010ca:	1e03      	subs	r3, r0, #0
 80010cc:	d001      	beq.n	80010d2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e033      	b.n	800113a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80010d2:	1dbb      	adds	r3, r7, #6
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d107      	bne.n	80010ea <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80010da:	2308      	movs	r3, #8
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
 80010e8:	e019      	b.n	800111e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80010ea:	2308      	movs	r3, #8
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fe:	6a39      	ldr	r1, [r7, #32]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	0018      	movs	r0, r3
 8001104:	f000 f881 	bl	800120a <I2C_WaitOnTXISFlagUntilTimeout>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d001      	beq.n	8001110 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e014      	b.n	800113a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001110:	2308      	movs	r3, #8
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800111e:	6a3a      	ldr	r2, [r7, #32]
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	0013      	movs	r3, r2
 8001128:	2200      	movs	r2, #0
 800112a:	2140      	movs	r1, #64	; 0x40
 800112c:	f000 f82e 	bl	800118c <I2C_WaitOnFlagUntilTimeout>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d001      	beq.n	8001138 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	0018      	movs	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	b004      	add	sp, #16
 8001140:	bdb0      	pop	{r4, r5, r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	80002000 	.word	0x80002000

08001148 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2202      	movs	r2, #2
 8001158:	4013      	ands	r3, r2
 800115a:	2b02      	cmp	r3, #2
 800115c:	d103      	bne.n	8001166 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	2201      	movs	r2, #1
 800116e:	4013      	ands	r3, r2
 8001170:	2b01      	cmp	r3, #1
 8001172:	d007      	beq.n	8001184 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2101      	movs	r1, #1
 8001180:	430a      	orrs	r2, r1
 8001182:	619a      	str	r2, [r3, #24]
  }
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}

0800118c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800119c:	e021      	b.n	80011e2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	d01e      	beq.n	80011e2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011a4:	f7ff fb18 	bl	80007d8 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d302      	bcc.n	80011ba <I2C_WaitOnFlagUntilTimeout+0x2e>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d113      	bne.n	80011e2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	2220      	movs	r2, #32
 80011c0:	431a      	orrs	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2241      	movs	r2, #65	; 0x41
 80011ca:	2120      	movs	r1, #32
 80011cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2242      	movs	r2, #66	; 0x42
 80011d2:	2100      	movs	r1, #0
 80011d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2240      	movs	r2, #64	; 0x40
 80011da:	2100      	movs	r1, #0
 80011dc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	4013      	ands	r3, r2
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	425a      	negs	r2, r3
 80011f2:	4153      	adcs	r3, r2
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	001a      	movs	r2, r3
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d0ce      	beq.n	800119e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b004      	add	sp, #16
 8001208:	bd80      	pop	{r7, pc}

0800120a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001216:	e02b      	b.n	8001270 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	0018      	movs	r0, r3
 8001220:	f000 f86e 	bl	8001300 <I2C_IsAcknowledgeFailed>
 8001224:	1e03      	subs	r3, r0, #0
 8001226:	d001      	beq.n	800122c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e029      	b.n	8001280 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3301      	adds	r3, #1
 8001230:	d01e      	beq.n	8001270 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001232:	f7ff fad1 	bl	80007d8 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	429a      	cmp	r2, r3
 8001240:	d302      	bcc.n	8001248 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d113      	bne.n	8001270 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	2220      	movs	r2, #32
 800124e:	431a      	orrs	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2241      	movs	r2, #65	; 0x41
 8001258:	2120      	movs	r1, #32
 800125a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2242      	movs	r2, #66	; 0x42
 8001260:	2100      	movs	r1, #0
 8001262:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2240      	movs	r2, #64	; 0x40
 8001268:	2100      	movs	r1, #0
 800126a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e007      	b.n	8001280 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2202      	movs	r2, #2
 8001278:	4013      	ands	r3, r2
 800127a:	2b02      	cmp	r3, #2
 800127c:	d1cc      	bne.n	8001218 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	0018      	movs	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	b004      	add	sp, #16
 8001286:	bd80      	pop	{r7, pc}

08001288 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001294:	e028      	b.n	80012e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	0018      	movs	r0, r3
 800129e:	f000 f82f 	bl	8001300 <I2C_IsAcknowledgeFailed>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d001      	beq.n	80012aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e026      	b.n	80012f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012aa:	f7ff fa95 	bl	80007d8 <HAL_GetTick>
 80012ae:	0002      	movs	r2, r0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d302      	bcc.n	80012c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d113      	bne.n	80012e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	2220      	movs	r2, #32
 80012c6:	431a      	orrs	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2241      	movs	r2, #65	; 0x41
 80012d0:	2120      	movs	r1, #32
 80012d2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2242      	movs	r2, #66	; 0x42
 80012d8:	2100      	movs	r1, #0
 80012da:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	2100      	movs	r1, #0
 80012e2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e007      	b.n	80012f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2220      	movs	r2, #32
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b20      	cmp	r3, #32
 80012f4:	d1cf      	bne.n	8001296 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}

08001300 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2210      	movs	r2, #16
 8001314:	4013      	ands	r3, r2
 8001316:	2b10      	cmp	r3, #16
 8001318:	d164      	bne.n	80013e4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	049b      	lsls	r3, r3, #18
 8001324:	401a      	ands	r2, r3
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	049b      	lsls	r3, r3, #18
 800132a:	429a      	cmp	r2, r3
 800132c:	d02b      	beq.n	8001386 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	01c9      	lsls	r1, r1, #7
 800133c:	430a      	orrs	r2, r1
 800133e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001340:	e021      	b.n	8001386 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3301      	adds	r3, #1
 8001346:	d01e      	beq.n	8001386 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001348:	f7ff fa46 	bl	80007d8 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	429a      	cmp	r2, r3
 8001356:	d302      	bcc.n	800135e <I2C_IsAcknowledgeFailed+0x5e>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d113      	bne.n	8001386 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	2220      	movs	r2, #32
 8001364:	431a      	orrs	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2241      	movs	r2, #65	; 0x41
 800136e:	2120      	movs	r1, #32
 8001370:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2242      	movs	r2, #66	; 0x42
 8001376:	2100      	movs	r1, #0
 8001378:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2240      	movs	r2, #64	; 0x40
 800137e:	2100      	movs	r1, #0
 8001380:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e02f      	b.n	80013e6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2220      	movs	r2, #32
 800138e:	4013      	ands	r3, r2
 8001390:	2b20      	cmp	r3, #32
 8001392:	d1d6      	bne.n	8001342 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2210      	movs	r2, #16
 800139a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2220      	movs	r2, #32
 80013a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff fece 	bl	8001148 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	490e      	ldr	r1, [pc, #56]	; (80013f0 <I2C_IsAcknowledgeFailed+0xf0>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	2204      	movs	r2, #4
 80013c2:	431a      	orrs	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2241      	movs	r2, #65	; 0x41
 80013cc:	2120      	movs	r1, #32
 80013ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2242      	movs	r2, #66	; 0x42
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	2100      	movs	r1, #0
 80013de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	0018      	movs	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b004      	add	sp, #16
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	fe00e800 	.word	0xfe00e800

080013f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	0008      	movs	r0, r1
 80013fe:	0011      	movs	r1, r2
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	240a      	movs	r4, #10
 8001404:	193b      	adds	r3, r7, r4
 8001406:	1c02      	adds	r2, r0, #0
 8001408:	801a      	strh	r2, [r3, #0]
 800140a:	2009      	movs	r0, #9
 800140c:	183b      	adds	r3, r7, r0
 800140e:	1c0a      	adds	r2, r1, #0
 8001410:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	6a3a      	ldr	r2, [r7, #32]
 800141a:	0d51      	lsrs	r1, r2, #21
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	00d2      	lsls	r2, r2, #3
 8001420:	400a      	ands	r2, r1
 8001422:	490e      	ldr	r1, [pc, #56]	; (800145c <I2C_TransferConfig+0x68>)
 8001424:	430a      	orrs	r2, r1
 8001426:	43d2      	mvns	r2, r2
 8001428:	401a      	ands	r2, r3
 800142a:	0011      	movs	r1, r2
 800142c:	193b      	adds	r3, r7, r4
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	059b      	lsls	r3, r3, #22
 8001432:	0d9a      	lsrs	r2, r3, #22
 8001434:	183b      	adds	r3, r7, r0
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	0418      	lsls	r0, r3, #16
 800143a:	23ff      	movs	r3, #255	; 0xff
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	4003      	ands	r3, r0
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	431a      	orrs	r2, r3
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	431a      	orrs	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b005      	add	sp, #20
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	03ff63ff 	.word	0x03ff63ff

08001460 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2241      	movs	r2, #65	; 0x41
 800146e:	5c9b      	ldrb	r3, [r3, r2]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b20      	cmp	r3, #32
 8001474:	d138      	bne.n	80014e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2240      	movs	r2, #64	; 0x40
 800147a:	5c9b      	ldrb	r3, [r3, r2]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001480:	2302      	movs	r3, #2
 8001482:	e032      	b.n	80014ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2240      	movs	r2, #64	; 0x40
 8001488:	2101      	movs	r1, #1
 800148a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2241      	movs	r2, #65	; 0x41
 8001490:	2124      	movs	r1, #36	; 0x24
 8001492:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	438a      	bics	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4911      	ldr	r1, [pc, #68]	; (80014f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6819      	ldr	r1, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2101      	movs	r1, #1
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2241      	movs	r2, #65	; 0x41
 80014d8:	2120      	movs	r1, #32
 80014da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2240      	movs	r2, #64	; 0x40
 80014e0:	2100      	movs	r1, #0
 80014e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e000      	b.n	80014ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014e8:	2302      	movs	r3, #2
  }
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	ffffefff 	.word	0xffffefff

080014f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2241      	movs	r2, #65	; 0x41
 8001506:	5c9b      	ldrb	r3, [r3, r2]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b20      	cmp	r3, #32
 800150c:	d139      	bne.n	8001582 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2240      	movs	r2, #64	; 0x40
 8001512:	5c9b      	ldrb	r3, [r3, r2]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001518:	2302      	movs	r3, #2
 800151a:	e033      	b.n	8001584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2240      	movs	r2, #64	; 0x40
 8001520:	2101      	movs	r1, #1
 8001522:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2241      	movs	r2, #65	; 0x41
 8001528:	2124      	movs	r1, #36	; 0x24
 800152a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2101      	movs	r1, #1
 8001538:	438a      	bics	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2241      	movs	r2, #65	; 0x41
 8001572:	2120      	movs	r1, #32
 8001574:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2240      	movs	r2, #64	; 0x40
 800157a:	2100      	movs	r1, #0
 800157c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001582:	2302      	movs	r3, #2
  }
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b004      	add	sp, #16
 800158a:	bd80      	pop	{r7, pc}
 800158c:	fffff0ff 	.word	0xfffff0ff

08001590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e301      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	d100      	bne.n	80015ae <HAL_RCC_OscConfig+0x1e>
 80015ac:	e08d      	b.n	80016ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015ae:	4bc3      	ldr	r3, [pc, #780]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	220c      	movs	r2, #12
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d00e      	beq.n	80015d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ba:	4bc0      	ldr	r3, [pc, #768]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	220c      	movs	r2, #12
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d116      	bne.n	80015f4 <HAL_RCC_OscConfig+0x64>
 80015c6:	4bbd      	ldr	r3, [pc, #756]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	401a      	ands	r2, r3
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	025b      	lsls	r3, r3, #9
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d10d      	bne.n	80015f4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	4bb8      	ldr	r3, [pc, #736]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	029b      	lsls	r3, r3, #10
 80015e0:	4013      	ands	r3, r2
 80015e2:	d100      	bne.n	80015e6 <HAL_RCC_OscConfig+0x56>
 80015e4:	e070      	b.n	80016c8 <HAL_RCC_OscConfig+0x138>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d000      	beq.n	80015f0 <HAL_RCC_OscConfig+0x60>
 80015ee:	e06b      	b.n	80016c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e2d8      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d107      	bne.n	800160c <HAL_RCC_OscConfig+0x7c>
 80015fc:	4baf      	ldr	r3, [pc, #700]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4bae      	ldr	r3, [pc, #696]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0249      	lsls	r1, r1, #9
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e02f      	b.n	800166c <HAL_RCC_OscConfig+0xdc>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10c      	bne.n	800162e <HAL_RCC_OscConfig+0x9e>
 8001614:	4ba9      	ldr	r3, [pc, #676]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4ba8      	ldr	r3, [pc, #672]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 800161a:	49a9      	ldr	r1, [pc, #676]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	4ba6      	ldr	r3, [pc, #664]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4ba5      	ldr	r3, [pc, #660]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001626:	49a7      	ldr	r1, [pc, #668]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001628:	400a      	ands	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e01e      	b.n	800166c <HAL_RCC_OscConfig+0xdc>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b05      	cmp	r3, #5
 8001634:	d10e      	bne.n	8001654 <HAL_RCC_OscConfig+0xc4>
 8001636:	4ba1      	ldr	r3, [pc, #644]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4ba0      	ldr	r3, [pc, #640]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	02c9      	lsls	r1, r1, #11
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	4b9d      	ldr	r3, [pc, #628]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b9c      	ldr	r3, [pc, #624]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	0249      	lsls	r1, r1, #9
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0xdc>
 8001654:	4b99      	ldr	r3, [pc, #612]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b98      	ldr	r3, [pc, #608]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 800165a:	4999      	ldr	r1, [pc, #612]	; (80018c0 <HAL_RCC_OscConfig+0x330>)
 800165c:	400a      	ands	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	4b96      	ldr	r3, [pc, #600]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b95      	ldr	r3, [pc, #596]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001666:	4997      	ldr	r1, [pc, #604]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001668:	400a      	ands	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d014      	beq.n	800169e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff f8b0 	bl	80007d8 <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167e:	f7ff f8ab 	bl	80007d8 <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b64      	cmp	r3, #100	; 0x64
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e28a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001690:	4b8a      	ldr	r3, [pc, #552]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	029b      	lsls	r3, r3, #10
 8001698:	4013      	ands	r3, r2
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0xee>
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff f89b 	bl	80007d8 <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff f896 	bl	80007d8 <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e275      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	4b80      	ldr	r3, [pc, #512]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	029b      	lsls	r3, r3, #10
 80016c2:	4013      	ands	r3, r2
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x118>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2202      	movs	r2, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x146>
 80016d4:	e069      	b.n	80017aa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016d6:	4b79      	ldr	r3, [pc, #484]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	220c      	movs	r2, #12
 80016dc:	4013      	ands	r3, r2
 80016de:	d00b      	beq.n	80016f8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016e0:	4b76      	ldr	r3, [pc, #472]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	220c      	movs	r2, #12
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d11c      	bne.n	8001726 <HAL_RCC_OscConfig+0x196>
 80016ec:	4b73      	ldr	r3, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	025b      	lsls	r3, r3, #9
 80016f4:	4013      	ands	r3, r2
 80016f6:	d116      	bne.n	8001726 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f8:	4b70      	ldr	r3, [pc, #448]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2202      	movs	r2, #2
 80016fe:	4013      	ands	r3, r2
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x17e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e24b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b6b      	ldr	r3, [pc, #428]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	22f8      	movs	r2, #248	; 0xf8
 8001714:	4393      	bics	r3, r2
 8001716:	0019      	movs	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	00da      	lsls	r2, r3, #3
 800171e:	4b67      	ldr	r3, [pc, #412]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001724:	e041      	b.n	80017aa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d024      	beq.n	8001778 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172e:	4b63      	ldr	r3, [pc, #396]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4b62      	ldr	r3, [pc, #392]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001734:	2101      	movs	r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff f84d 	bl	80007d8 <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff f848 	bl	80007d8 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e227      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001756:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2202      	movs	r2, #2
 800175c:	4013      	ands	r3, r2
 800175e:	d0f1      	beq.n	8001744 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b56      	ldr	r3, [pc, #344]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	22f8      	movs	r2, #248	; 0xf8
 8001766:	4393      	bics	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00da      	lsls	r2, r3, #3
 8001770:	4b52      	ldr	r3, [pc, #328]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e018      	b.n	80017aa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 800177e:	2101      	movs	r1, #1
 8001780:	438a      	bics	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff f828 	bl	80007d8 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff f823 	bl	80007d8 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e202      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a0:	4b46      	ldr	r3, [pc, #280]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2202      	movs	r2, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	d1f1      	bne.n	800178e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2208      	movs	r2, #8
 80017b0:	4013      	ands	r3, r2
 80017b2:	d036      	beq.n	8001822 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d019      	beq.n	80017f0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017bc:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80017be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c0:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	430a      	orrs	r2, r1
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff f806 	bl	80007d8 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff f801 	bl	80007d8 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1e0      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e4:	4b35      	ldr	r3, [pc, #212]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	2202      	movs	r2, #2
 80017ea:	4013      	ands	r3, r2
 80017ec:	d0f1      	beq.n	80017d2 <HAL_RCC_OscConfig+0x242>
 80017ee:	e018      	b.n	8001822 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80017f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f4:	4b31      	ldr	r3, [pc, #196]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80017f6:	2101      	movs	r1, #1
 80017f8:	438a      	bics	r2, r1
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fc:	f7fe ffec 	bl	80007d8 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001806:	f7fe ffe7 	bl	80007d8 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1c6      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	2202      	movs	r2, #2
 800181e:	4013      	ands	r3, r2
 8001820:	d1f1      	bne.n	8001806 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2204      	movs	r2, #4
 8001828:	4013      	ands	r3, r2
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x29e>
 800182c:	e0b4      	b.n	8001998 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182e:	201f      	movs	r0, #31
 8001830:	183b      	adds	r3, r7, r0
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001838:	69da      	ldr	r2, [r3, #28]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	055b      	lsls	r3, r3, #21
 800183e:	4013      	ands	r3, r2
 8001840:	d110      	bne.n	8001864 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	0549      	lsls	r1, r1, #21
 800184c:	430a      	orrs	r2, r1
 800184e:	61da      	str	r2, [r3, #28]
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	055b      	lsls	r3, r3, #21
 8001858:	4013      	ands	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800185e:	183b      	adds	r3, r7, r0
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_RCC_OscConfig+0x338>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4013      	ands	r3, r2
 800186e:	d11a      	bne.n	80018a6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_RCC_OscConfig+0x338>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_RCC_OscConfig+0x338>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	0049      	lsls	r1, r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7fe ffab 	bl	80007d8 <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001888:	f7fe ffa6 	bl	80007d8 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e185      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_OscConfig+0x338>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d10e      	bne.n	80018cc <HAL_RCC_OscConfig+0x33c>
 80018ae:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80018b0:	6a1a      	ldr	r2, [r3, #32]
 80018b2:	4b02      	ldr	r3, [pc, #8]	; (80018bc <HAL_RCC_OscConfig+0x32c>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	430a      	orrs	r2, r1
 80018b8:	621a      	str	r2, [r3, #32]
 80018ba:	e035      	b.n	8001928 <HAL_RCC_OscConfig+0x398>
 80018bc:	40021000 	.word	0x40021000
 80018c0:	fffeffff 	.word	0xfffeffff
 80018c4:	fffbffff 	.word	0xfffbffff
 80018c8:	40007000 	.word	0x40007000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10c      	bne.n	80018ee <HAL_RCC_OscConfig+0x35e>
 80018d4:	4bb6      	ldr	r3, [pc, #728]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80018d6:	6a1a      	ldr	r2, [r3, #32]
 80018d8:	4bb5      	ldr	r3, [pc, #724]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80018da:	2101      	movs	r1, #1
 80018dc:	438a      	bics	r2, r1
 80018de:	621a      	str	r2, [r3, #32]
 80018e0:	4bb3      	ldr	r3, [pc, #716]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80018e2:	6a1a      	ldr	r2, [r3, #32]
 80018e4:	4bb2      	ldr	r3, [pc, #712]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80018e6:	2104      	movs	r1, #4
 80018e8:	438a      	bics	r2, r1
 80018ea:	621a      	str	r2, [r3, #32]
 80018ec:	e01c      	b.n	8001928 <HAL_RCC_OscConfig+0x398>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x380>
 80018f6:	4bae      	ldr	r3, [pc, #696]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80018f8:	6a1a      	ldr	r2, [r3, #32]
 80018fa:	4bad      	ldr	r3, [pc, #692]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80018fc:	2104      	movs	r1, #4
 80018fe:	430a      	orrs	r2, r1
 8001900:	621a      	str	r2, [r3, #32]
 8001902:	4bab      	ldr	r3, [pc, #684]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001904:	6a1a      	ldr	r2, [r3, #32]
 8001906:	4baa      	ldr	r3, [pc, #680]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001908:	2101      	movs	r1, #1
 800190a:	430a      	orrs	r2, r1
 800190c:	621a      	str	r2, [r3, #32]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0x398>
 8001910:	4ba7      	ldr	r3, [pc, #668]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	4ba6      	ldr	r3, [pc, #664]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001916:	2101      	movs	r1, #1
 8001918:	438a      	bics	r2, r1
 800191a:	621a      	str	r2, [r3, #32]
 800191c:	4ba4      	ldr	r3, [pc, #656]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 800191e:	6a1a      	ldr	r2, [r3, #32]
 8001920:	4ba3      	ldr	r3, [pc, #652]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001922:	2104      	movs	r1, #4
 8001924:	438a      	bics	r2, r1
 8001926:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d014      	beq.n	800195a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7fe ff52 	bl	80007d8 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	e009      	b.n	800194e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7fe ff4d 	bl	80007d8 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	4a9b      	ldr	r2, [pc, #620]	; (8001bb4 <HAL_RCC_OscConfig+0x624>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e12b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194e:	4b98      	ldr	r3, [pc, #608]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	2202      	movs	r2, #2
 8001954:	4013      	ands	r3, r2
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x3aa>
 8001958:	e013      	b.n	8001982 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7fe ff3d 	bl	80007d8 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001962:	e009      	b.n	8001978 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001964:	f7fe ff38 	bl	80007d8 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	4a91      	ldr	r2, [pc, #580]	; (8001bb4 <HAL_RCC_OscConfig+0x624>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e116      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	4b8d      	ldr	r3, [pc, #564]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	2202      	movs	r2, #2
 800197e:	4013      	ands	r3, r2
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001982:	231f      	movs	r3, #31
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198c:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	4b87      	ldr	r3, [pc, #540]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001992:	4989      	ldr	r1, [pc, #548]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001994:	400a      	ands	r2, r1
 8001996:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2210      	movs	r2, #16
 800199e:	4013      	ands	r3, r2
 80019a0:	d063      	beq.n	8001a6a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d12a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019aa:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80019ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ae:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80019b0:	2104      	movs	r1, #4
 80019b2:	430a      	orrs	r2, r1
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019b6:	4b7e      	ldr	r3, [pc, #504]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80019b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ba:	4b7d      	ldr	r3, [pc, #500]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80019bc:	2101      	movs	r1, #1
 80019be:	430a      	orrs	r2, r1
 80019c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c2:	f7fe ff09 	bl	80007d8 <HAL_GetTick>
 80019c6:	0003      	movs	r3, r0
 80019c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019cc:	f7fe ff04 	bl	80007d8 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e0e3      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019de:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80019e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e2:	2202      	movs	r2, #2
 80019e4:	4013      	ands	r3, r2
 80019e6:	d0f1      	beq.n	80019cc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019e8:	4b71      	ldr	r3, [pc, #452]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80019ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ec:	22f8      	movs	r2, #248	; 0xf8
 80019ee:	4393      	bics	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	00da      	lsls	r2, r3, #3
 80019f8:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 80019fa:	430a      	orrs	r2, r1
 80019fc:	635a      	str	r2, [r3, #52]	; 0x34
 80019fe:	e034      	b.n	8001a6a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	3305      	adds	r3, #5
 8001a06:	d111      	bne.n	8001a2c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a08:	4b69      	ldr	r3, [pc, #420]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a0e:	2104      	movs	r1, #4
 8001a10:	438a      	bics	r2, r1
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	22f8      	movs	r2, #248	; 0xf8
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	00da      	lsls	r2, r3, #3
 8001a24:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a26:	430a      	orrs	r2, r1
 8001a28:	635a      	str	r2, [r3, #52]	; 0x34
 8001a2a:	e01e      	b.n	8001a6a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a2c:	4b60      	ldr	r3, [pc, #384]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a30:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a32:	2104      	movs	r1, #4
 8001a34:	430a      	orrs	r2, r1
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a38:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3c:	4b5c      	ldr	r3, [pc, #368]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	438a      	bics	r2, r1
 8001a42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7fe fec8 	bl	80007d8 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a4e:	f7fe fec3 	bl	80007d8 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e0a2      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a64:	2202      	movs	r2, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d1f1      	bne.n	8001a4e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d100      	bne.n	8001a74 <HAL_RCC_OscConfig+0x4e4>
 8001a72:	e097      	b.n	8001ba4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a74:	4b4e      	ldr	r3, [pc, #312]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	220c      	movs	r2, #12
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d100      	bne.n	8001a82 <HAL_RCC_OscConfig+0x4f2>
 8001a80:	e06b      	b.n	8001b5a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d14c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001a90:	494a      	ldr	r1, [pc, #296]	; (8001bbc <HAL_RCC_OscConfig+0x62c>)
 8001a92:	400a      	ands	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7fe fe9f 	bl	80007d8 <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7fe fe9a 	bl	80007d8 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e079      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	049b      	lsls	r3, r3, #18
 8001aba:	4013      	ands	r3, r2
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	4393      	bics	r3, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001acc:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a3a      	ldr	r2, [pc, #232]	; (8001bc0 <HAL_RCC_OscConfig+0x630>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	0449      	lsls	r1, r1, #17
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7fe fe6d 	bl	80007d8 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b04:	f7fe fe68 	bl	80007d8 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e047      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	049b      	lsls	r3, r3, #18
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x574>
 8001b22:	e03f      	b.n	8001ba4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001b2a:	4924      	ldr	r1, [pc, #144]	; (8001bbc <HAL_RCC_OscConfig+0x62c>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7fe fe52 	bl	80007d8 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe fe4d 	bl	80007d8 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e02c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	049b      	lsls	r3, r3, #18
 8001b54:	4013      	ands	r3, r2
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5aa>
 8001b58:	e024      	b.n	8001ba4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e01f      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	401a      	ands	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d10e      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	220f      	movs	r2, #15
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	23f0      	movs	r3, #240	; 0xf0
 8001b94:	039b      	lsls	r3, r3, #14
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b008      	add	sp, #32
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	00001388 	.word	0x00001388
 8001bb8:	efffffff 	.word	0xefffffff
 8001bbc:	feffffff 	.word	0xfeffffff
 8001bc0:	ffc2ffff 	.word	0xffc2ffff

08001bc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b3      	b.n	8001d40 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b5b      	ldr	r3, [pc, #364]	; (8001d48 <HAL_RCC_ClockConfig+0x184>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d911      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <HAL_RCC_ClockConfig+0x184>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	4b55      	ldr	r3, [pc, #340]	; (8001d48 <HAL_RCC_ClockConfig+0x184>)
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf8:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_ClockConfig+0x184>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e09a      	b.n	8001d40 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	d015      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d006      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c1e:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001c24:	21e0      	movs	r1, #224	; 0xe0
 8001c26:	00c9      	lsls	r1, r1, #3
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	22f0      	movs	r2, #240	; 0xf0
 8001c32:	4393      	bics	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	d040      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	029b      	lsls	r3, r3, #10
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d114      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06e      	b.n	8001d40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	049b      	lsls	r3, r3, #18
 8001c72:	4013      	ands	r3, r2
 8001c74:	d108      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e062      	b.n	8001d40 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	4013      	ands	r3, r2
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e05b      	b.n	8001d40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	4393      	bics	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7fe fd9c 	bl	80007d8 <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca4:	e009      	b.n	8001cba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca6:	f7fe fd97 	bl	80007d8 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_RCC_ClockConfig+0x18c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e042      	b.n	8001d40 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1ec      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCC_ClockConfig+0x184>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d211      	bcs.n	8001cfe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_RCC_ClockConfig+0x184>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4393      	bics	r3, r2
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_RCC_ClockConfig+0x184>)
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_RCC_ClockConfig+0x184>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e020      	b.n	8001d40 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2204      	movs	r2, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_RCC_ClockConfig+0x190>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d1c:	f000 f820 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d20:	0001      	movs	r1, r0
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_RCC_ClockConfig+0x188>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	220f      	movs	r2, #15
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_RCC_ClockConfig+0x194>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	000a      	movs	r2, r1
 8001d32:	40da      	lsrs	r2, r3
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x198>)
 8001d36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7fe fd07 	bl	800074c <HAL_InitTick>
  
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b004      	add	sp, #16
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	00001388 	.word	0x00001388
 8001d54:	fffff8ff 	.word	0xfffff8ff
 8001d58:	08002074 	.word	0x08002074
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b08f      	sub	sp, #60	; 0x3c
 8001d64:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d66:	2314      	movs	r3, #20
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d6e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d7a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9c:	220c      	movs	r2, #12
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d002      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x4a>
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d003      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x50>
 8001da8:	e02d      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dae:	e02d      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db2:	0c9b      	lsrs	r3, r3, #18
 8001db4:	220f      	movs	r2, #15
 8001db6:	4013      	ands	r3, r2
 8001db8:	2214      	movs	r2, #20
 8001dba:	18ba      	adds	r2, r7, r2
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	1d3a      	adds	r2, r7, #4
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	025b      	lsls	r3, r3, #9
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d009      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dda:	4812      	ldr	r0, [pc, #72]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ddc:	f7fe f994 	bl	8000108 <__udivsi3>
 8001de0:	0003      	movs	r3, r0
 8001de2:	001a      	movs	r2, r3
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	4353      	muls	r3, r2
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dea:	e009      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dee:	000a      	movs	r2, r1
 8001df0:	0152      	lsls	r2, r2, #5
 8001df2:	1a52      	subs	r2, r2, r1
 8001df4:	0193      	lsls	r3, r2, #6
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	185b      	adds	r3, r3, r1
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e04:	e002      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e0a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b00f      	add	sp, #60	; 0x3c
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	08002054 	.word	0x08002054
 8001e1c:	08002064 	.word	0x08002064
 8001e20:	40021000 	.word	0x40021000
 8001e24:	007a1200 	.word	0x007a1200

08001e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	025b      	lsls	r3, r3, #9
 8001e40:	4013      	ands	r3, r2
 8001e42:	d100      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e44:	e08e      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2017      	movs	r0, #23
 8001e48:	183b      	adds	r3, r7, r0
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b5f      	ldr	r3, [pc, #380]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	055b      	lsls	r3, r3, #21
 8001e56:	4013      	ands	r3, r2
 8001e58:	d110      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b5c      	ldr	r3, [pc, #368]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	0549      	lsls	r1, r1, #21
 8001e64:	430a      	orrs	r2, r1
 8001e66:	61da      	str	r2, [r3, #28]
 8001e68:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	055b      	lsls	r3, r3, #21
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	183b      	adds	r3, r7, r0
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	d11a      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e88:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	0049      	lsls	r1, r1, #1
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e96:	f7fe fc9f 	bl	80007d8 <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7fe fc9a 	bl	80007d8 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e087      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ebe:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	23c0      	movs	r3, #192	; 0xc0
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d034      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d02c      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a3b      	ldr	r2, [pc, #236]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	0249      	lsls	r1, r1, #9
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef8:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001efe:	4936      	ldr	r1, [pc, #216]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f04:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe fc61 	bl	80007d8 <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	e009      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fc5c 	bl	80007d8 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	4a2d      	ldr	r2, [pc, #180]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e048      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	2202      	movs	r2, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f4e:	2317      	movs	r3, #23
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f5e:	4920      	ldr	r1, [pc, #128]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	2203      	movs	r2, #3
 8001f74:	4393      	bics	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2220      	movs	r2, #32
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	2210      	movs	r2, #16
 8001f92:	4393      	bics	r3, r2
 8001f94:	0019      	movs	r1, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d009      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	2240      	movs	r2, #64	; 0x40
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b006      	add	sp, #24
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	fffffcff 	.word	0xfffffcff
 8001fd8:	fffeffff 	.word	0xfffeffff
 8001fdc:	00001388 	.word	0x00001388
 8001fe0:	efffffff 	.word	0xefffffff

08001fe4 <__libc_init_array>:
 8001fe4:	b570      	push	{r4, r5, r6, lr}
 8001fe6:	2600      	movs	r6, #0
 8001fe8:	4d0c      	ldr	r5, [pc, #48]	; (800201c <__libc_init_array+0x38>)
 8001fea:	4c0d      	ldr	r4, [pc, #52]	; (8002020 <__libc_init_array+0x3c>)
 8001fec:	1b64      	subs	r4, r4, r5
 8001fee:	10a4      	asrs	r4, r4, #2
 8001ff0:	42a6      	cmp	r6, r4
 8001ff2:	d109      	bne.n	8002008 <__libc_init_array+0x24>
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	f000 f821 	bl	800203c <_init>
 8001ffa:	4d0a      	ldr	r5, [pc, #40]	; (8002024 <__libc_init_array+0x40>)
 8001ffc:	4c0a      	ldr	r4, [pc, #40]	; (8002028 <__libc_init_array+0x44>)
 8001ffe:	1b64      	subs	r4, r4, r5
 8002000:	10a4      	asrs	r4, r4, #2
 8002002:	42a6      	cmp	r6, r4
 8002004:	d105      	bne.n	8002012 <__libc_init_array+0x2e>
 8002006:	bd70      	pop	{r4, r5, r6, pc}
 8002008:	00b3      	lsls	r3, r6, #2
 800200a:	58eb      	ldr	r3, [r5, r3]
 800200c:	4798      	blx	r3
 800200e:	3601      	adds	r6, #1
 8002010:	e7ee      	b.n	8001ff0 <__libc_init_array+0xc>
 8002012:	00b3      	lsls	r3, r6, #2
 8002014:	58eb      	ldr	r3, [r5, r3]
 8002016:	4798      	blx	r3
 8002018:	3601      	adds	r6, #1
 800201a:	e7f2      	b.n	8002002 <__libc_init_array+0x1e>
 800201c:	08002084 	.word	0x08002084
 8002020:	08002084 	.word	0x08002084
 8002024:	08002084 	.word	0x08002084
 8002028:	08002088 	.word	0x08002088

0800202c <memset>:
 800202c:	0003      	movs	r3, r0
 800202e:	1882      	adds	r2, r0, r2
 8002030:	4293      	cmp	r3, r2
 8002032:	d100      	bne.n	8002036 <memset+0xa>
 8002034:	4770      	bx	lr
 8002036:	7019      	strb	r1, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	e7f9      	b.n	8002030 <memset+0x4>

0800203c <_init>:
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002042:	bc08      	pop	{r3}
 8002044:	469e      	mov	lr, r3
 8002046:	4770      	bx	lr

08002048 <_fini>:
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204e:	bc08      	pop	{r3}
 8002050:	469e      	mov	lr, r3
 8002052:	4770      	bx	lr
