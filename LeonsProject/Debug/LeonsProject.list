
LeonsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a0  080032a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080032a0  080032a0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032a0  080032a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080032a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  080032b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080032b8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007604  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001789  00000000  00000000  0002763c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  00028dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  000294e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010745  00000000  00000000  00029b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000993c  00000000  00000000  0003a275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006193c  00000000  00000000  00043bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a54ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000180c  00000000  00000000  000a5540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003258 	.word	0x08003258

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003258 	.word	0x08003258

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <read_Gyro_data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef read_Gyro_data(DATA_TypeDef *Data)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af04      	add	r7, sp, #16
 8000226:	6078      	str	r0, [r7, #4]
	uint8_t rawData[2];

	HAL_StatusTypeDef ret;
	ret=HAL_OK;
 8000228:	250f      	movs	r5, #15
 800022a:	197b      	adds	r3, r7, r5
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
	//if (ret!= HAL_OK){
	//	return ret;}

	//ret=HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) GYRO_DEVADDR_R, 1000, 5000);
	//HAL_Delay(10);
	ret=HAL_I2C_Mem_Read(&hi2c1, GYRO_DEVADDR_R, Gyro_MSB_X, 1, rawData, 2, 5000);
 8000230:	2141      	movs	r1, #65	; 0x41
 8000232:	4b36      	ldr	r3, [pc, #216]	; (800030c <read_Gyro_data+0xec>)
 8000234:	881a      	ldrh	r2, [r3, #0]
 8000236:	197c      	adds	r4, r7, r5
 8000238:	4835      	ldr	r0, [pc, #212]	; (8000310 <read_Gyro_data+0xf0>)
 800023a:	4b36      	ldr	r3, [pc, #216]	; (8000314 <read_Gyro_data+0xf4>)
 800023c:	9302      	str	r3, [sp, #8]
 800023e:	2302      	movs	r3, #2
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	260c      	movs	r6, #12
 8000244:	19bb      	adds	r3, r7, r6
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	2301      	movs	r3, #1
 800024a:	f001 f8ab 	bl	80013a4 <HAL_I2C_Mem_Read>
 800024e:	0003      	movs	r3, r0
 8000250:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 8000252:	200a      	movs	r0, #10
 8000254:	f000 fade 	bl	8000814 <HAL_Delay>
	ret=HAL_OK;
 8000258:	197b      	adds	r3, r7, r5
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
	ret=HAL_I2C_Mem_Read(&hi2c1, MAGACC_DEVADDR, MAG_MSB_X, 1, rawData, 2, 5000);
 800025e:	211e      	movs	r1, #30
 8000260:	2233      	movs	r2, #51	; 0x33
 8000262:	197c      	adds	r4, r7, r5
 8000264:	482a      	ldr	r0, [pc, #168]	; (8000310 <read_Gyro_data+0xf0>)
 8000266:	4b2b      	ldr	r3, [pc, #172]	; (8000314 <read_Gyro_data+0xf4>)
 8000268:	9302      	str	r3, [sp, #8]
 800026a:	2302      	movs	r3, #2
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	19bb      	adds	r3, r7, r6
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	2301      	movs	r3, #1
 8000274:	f001 f896 	bl	80013a4 <HAL_I2C_Mem_Read>
 8000278:	0003      	movs	r3, r0
 800027a:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 800027c:	200a      	movs	r0, #10
 800027e:	f000 fac9 	bl	8000814 <HAL_Delay>
	ret=HAL_OK;
 8000282:	197b      	adds	r3, r7, r5
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
	ret=HAL_I2C_Master_Transmit(&hi2c1, GYRO_DEVADDR_W, &Gyro_MSB_X, 1, 5000);
 8000288:	2140      	movs	r1, #64	; 0x40
 800028a:	197c      	adds	r4, r7, r5
 800028c:	4a1f      	ldr	r2, [pc, #124]	; (800030c <read_Gyro_data+0xec>)
 800028e:	4820      	ldr	r0, [pc, #128]	; (8000310 <read_Gyro_data+0xf0>)
 8000290:	4b20      	ldr	r3, [pc, #128]	; (8000314 <read_Gyro_data+0xf4>)
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2301      	movs	r3, #1
 8000296:	f000 fe75 	bl	8000f84 <HAL_I2C_Master_Transmit>
 800029a:	0003      	movs	r3, r0
 800029c:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 800029e:	200a      	movs	r0, #10
 80002a0:	f000 fab8 	bl	8000814 <HAL_Delay>
	ret=HAL_OK;
 80002a4:	197b      	adds	r3, r7, r5
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]
	ret=HAL_I2C_Master_Receive(&hi2c1, GYRO_DEVADDR_R, rawData, 2, 5000);
 80002aa:	2141      	movs	r1, #65	; 0x41
 80002ac:	197c      	adds	r4, r7, r5
 80002ae:	19ba      	adds	r2, r7, r6
 80002b0:	4817      	ldr	r0, [pc, #92]	; (8000310 <read_Gyro_data+0xf0>)
 80002b2:	4b18      	ldr	r3, [pc, #96]	; (8000314 <read_Gyro_data+0xf4>)
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	2302      	movs	r3, #2
 80002b8:	f000 ff6c 	bl	8001194 <HAL_I2C_Master_Receive>
 80002bc:	0003      	movs	r3, r0
 80002be:	7023      	strb	r3, [r4, #0]
	//ret=HAL_I2C_Mem_Read(&hi2c1, Sensor_adress, Gyro_MSB_X, 1, rawData, 2, 500);
	HAL_Delay(10);
 80002c0:	200a      	movs	r0, #10
 80002c2:	f000 faa7 	bl	8000814 <HAL_Delay>
		if (ret == HAL_ERROR){
 80002c6:	197b      	adds	r3, r7, r5
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d102      	bne.n	80002d4 <read_Gyro_data+0xb4>
			return ret;}
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	e017      	b.n	8000304 <read_Gyro_data+0xe4>
	Data->x = ((uint16_t) rawData[0])<<8 | ((uint16_t) rawData[1]);
 80002d4:	210c      	movs	r1, #12
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	021b      	lsls	r3, r3, #8
 80002dc:	b21a      	sxth	r2, r3
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	b21b      	sxth	r3, r3
 80002e4:	4313      	orrs	r3, r2
 80002e6:	b21a      	sxth	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	801a      	strh	r2, [r3, #0]
/*
	ret=HAL_I2C_Mem_Read(&hi2c1, Sensor_adress, Gyro_MSB_Y, 1, rawData, 2, 500);
		if (ret == HAL_ERROR){
			return ret;}
	*/
	Data->y = ((uint16_t) rawData[0])<<8 | ((uint16_t) rawData[1]);
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	021b      	lsls	r3, r3, #8
 80002f2:	b21a      	sxth	r2, r3
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	785b      	ldrb	r3, [r3, #1]
 80002f8:	b21b      	sxth	r3, r3
 80002fa:	4313      	orrs	r3, r2
 80002fc:	b21a      	sxth	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	805a      	strh	r2, [r3, #2]
	if (ret!= HAL_OK){
		return ret;}
	GYRO_DATA->z = rawData;
	*/

	return HAL_OK;
 8000302:	2300      	movs	r3, #0
}
 8000304:	0018      	movs	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	b005      	add	sp, #20
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030c:	20000000 	.word	0x20000000
 8000310:	2000002c 	.word	0x2000002c
 8000314:	00001388 	.word	0x00001388

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031e:	f000 fa15 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000322:	f000 f80e 	bl	8000342 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000326:	f000 f8ad 	bl	8000484 <MX_GPIO_Init>
  MX_I2C1_Init();
 800032a:	f000 f86b 	bl	8000404 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 800032e:	23fa      	movs	r3, #250	; 0xfa
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	0018      	movs	r0, r3
 8000334:	f000 fa6e 	bl	8000814 <HAL_Delay>
	  //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  read_Gyro_data(&Gyro_Data);
 8000338:	003b      	movs	r3, r7
 800033a:	0018      	movs	r0, r3
 800033c:	f7ff ff70 	bl	8000220 <read_Gyro_data>
	  HAL_Delay(500);
 8000340:	e7f5      	b.n	800032e <main+0x16>

08000342 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000342:	b590      	push	{r4, r7, lr}
 8000344:	b097      	sub	sp, #92	; 0x5c
 8000346:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000348:	2428      	movs	r4, #40	; 0x28
 800034a:	193b      	adds	r3, r7, r4
 800034c:	0018      	movs	r0, r3
 800034e:	2330      	movs	r3, #48	; 0x30
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f002 ff78 	bl	8003248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	2318      	movs	r3, #24
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	0018      	movs	r0, r3
 800035e:	2310      	movs	r3, #16
 8000360:	001a      	movs	r2, r3
 8000362:	2100      	movs	r1, #0
 8000364:	f002 ff70 	bl	8003248 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	0018      	movs	r0, r3
 800036c:	2314      	movs	r3, #20
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f002 ff69 	bl	8003248 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000376:	0021      	movs	r1, r4
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2202      	movs	r2, #2
 800037c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2201      	movs	r2, #1
 8000382:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2210      	movs	r2, #16
 8000388:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	2202      	movs	r2, #2
 800038e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2200      	movs	r2, #0
 8000394:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000396:	187b      	adds	r3, r7, r1
 8000398:	22a0      	movs	r2, #160	; 0xa0
 800039a:	0392      	lsls	r2, r2, #14
 800039c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2200      	movs	r2, #0
 80003a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	0018      	movs	r0, r3
 80003a8:	f002 fa00 	bl	80027ac <HAL_RCC_OscConfig>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003b0:	f000 f8da 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b4:	2118      	movs	r1, #24
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2207      	movs	r2, #7
 80003ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2202      	movs	r2, #2
 80003c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2101      	movs	r1, #1
 80003d2:	0018      	movs	r0, r3
 80003d4:	f002 fd04 	bl	8002de0 <HAL_RCC_ClockConfig>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003dc:	f000 f8c4 	bl	8000568 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2220      	movs	r2, #32
 80003e4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	0018      	movs	r0, r3
 80003f0:	f002 fe28 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003f8:	f000 f8b6 	bl	8000568 <Error_Handler>
  }
}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b017      	add	sp, #92	; 0x5c
 8000402:	bd90      	pop	{r4, r7, pc}

08000404 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_I2C1_Init+0x74>)
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <MX_I2C1_Init+0x78>)
 800040c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_I2C1_Init+0x74>)
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <MX_I2C1_Init+0x7c>)
 8000412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800041a:	4b17      	ldr	r3, [pc, #92]	; (8000478 <MX_I2C1_Init+0x74>)
 800041c:	2201      	movs	r2, #1
 800041e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000420:	4b15      	ldr	r3, [pc, #84]	; (8000478 <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_I2C1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <MX_I2C1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_I2C1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_I2C1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_I2C1_Init+0x74>)
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fd09 	bl	8000e58 <HAL_I2C_Init>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800044a:	f000 f88d 	bl	8000568 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <MX_I2C1_Init+0x74>)
 8000450:	2100      	movs	r1, #0
 8000452:	0018      	movs	r0, r3
 8000454:	f002 f912 	bl	800267c <HAL_I2CEx_ConfigAnalogFilter>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d001      	beq.n	8000460 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800045c:	f000 f884 	bl	8000568 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <MX_I2C1_Init+0x74>)
 8000462:	2100      	movs	r1, #0
 8000464:	0018      	movs	r0, r3
 8000466:	f002 f955 	bl	8002714 <HAL_I2CEx_ConfigDigitalFilter>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800046e:	f000 f87b 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	2000002c 	.word	0x2000002c
 800047c:	40005400 	.word	0x40005400
 8000480:	2000090e 	.word	0x2000090e

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b089      	sub	sp, #36	; 0x24
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	240c      	movs	r4, #12
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	2314      	movs	r3, #20
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f002 fed7 	bl	8003248 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049a:	4b31      	ldr	r3, [pc, #196]	; (8000560 <MX_GPIO_Init+0xdc>)
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	4b30      	ldr	r3, [pc, #192]	; (8000560 <MX_GPIO_Init+0xdc>)
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	0289      	lsls	r1, r1, #10
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	4b2d      	ldr	r3, [pc, #180]	; (8000560 <MX_GPIO_Init+0xdc>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	029b      	lsls	r3, r3, #10
 80004b0:	4013      	ands	r3, r2
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b6:	4b2a      	ldr	r3, [pc, #168]	; (8000560 <MX_GPIO_Init+0xdc>)
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <MX_GPIO_Init+0xdc>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0309      	lsls	r1, r1, #12
 80004c0:	430a      	orrs	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	4b26      	ldr	r3, [pc, #152]	; (8000560 <MX_GPIO_Init+0xdc>)
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	031b      	lsls	r3, r3, #12
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b23      	ldr	r3, [pc, #140]	; (8000560 <MX_GPIO_Init+0xdc>)
 80004d4:	695a      	ldr	r2, [r3, #20]
 80004d6:	4b22      	ldr	r3, [pc, #136]	; (8000560 <MX_GPIO_Init+0xdc>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	02c9      	lsls	r1, r1, #11
 80004dc:	430a      	orrs	r2, r1
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <MX_GPIO_Init+0xdc>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	02db      	lsls	r3, r3, #11
 80004e8:	4013      	ands	r3, r2
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80004ee:	23c0      	movs	r3, #192	; 0xc0
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	481c      	ldr	r0, [pc, #112]	; (8000564 <MX_GPIO_Init+0xe0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	0019      	movs	r1, r3
 80004f8:	f000 fc50 	bl	8000d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2288      	movs	r2, #136	; 0x88
 8000506:	0352      	lsls	r2, r2, #13
 8000508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000510:	193a      	adds	r2, r7, r4
 8000512:	2390      	movs	r3, #144	; 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	0011      	movs	r1, r2
 8000518:	0018      	movs	r0, r3
 800051a:	f000 facf 	bl	8000abc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800051e:	0021      	movs	r1, r4
 8000520:	187b      	adds	r3, r7, r1
 8000522:	22c0      	movs	r2, #192	; 0xc0
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2201      	movs	r2, #1
 800052c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053a:	187b      	adds	r3, r7, r1
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <MX_GPIO_Init+0xe0>)
 800053e:	0019      	movs	r1, r3
 8000540:	0010      	movs	r0, r2
 8000542:	f000 fabb 	bl	8000abc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2005      	movs	r0, #5
 800054c:	f000 fa32 	bl	80009b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000550:	2005      	movs	r0, #5
 8000552:	f000 fa44 	bl	80009de <HAL_NVIC_EnableIRQ>

}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b009      	add	sp, #36	; 0x24
 800055c:	bd90      	pop	{r4, r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000
 8000564:	48000800 	.word	0x48000800

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	e7fe      	b.n	8000570 <Error_Handler+0x8>
	...

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x44>)
 800057c:	699a      	ldr	r2, [r3, #24]
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <HAL_MspInit+0x44>)
 8000580:	2101      	movs	r1, #1
 8000582:	430a      	orrs	r2, r1
 8000584:	619a      	str	r2, [r3, #24]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	2201      	movs	r2, #1
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_MspInit+0x44>)
 8000594:	69da      	ldr	r2, [r3, #28]
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_MspInit+0x44>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	0549      	lsls	r1, r1, #21
 800059c:	430a      	orrs	r2, r1
 800059e:	61da      	str	r2, [r3, #28]
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HAL_MspInit+0x44>)
 80005a2:	69da      	ldr	r2, [r3, #28]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	055b      	lsls	r3, r3, #21
 80005a8:	4013      	ands	r3, r2
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08b      	sub	sp, #44	; 0x2c
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	2414      	movs	r4, #20
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	0018      	movs	r0, r3
 80005ca:	2314      	movs	r3, #20
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f002 fe3a 	bl	8003248 <memset>
  if(hi2c->Instance==I2C1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <HAL_I2C_MspInit+0xa0>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d139      	bne.n	8000652 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <HAL_I2C_MspInit+0xa4>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <HAL_I2C_MspInit+0xa4>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	02c9      	lsls	r1, r1, #11
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <HAL_I2C_MspInit+0xa4>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	02db      	lsls	r3, r3, #11
 80005f4:	4013      	ands	r3, r2
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005fa:	0021      	movs	r1, r4
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	22c0      	movs	r2, #192	; 0xc0
 8000600:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2212      	movs	r2, #18
 8000606:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2203      	movs	r2, #3
 8000612:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2201      	movs	r2, #1
 8000618:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	187b      	adds	r3, r7, r1
 800061c:	4a11      	ldr	r2, [pc, #68]	; (8000664 <HAL_I2C_MspInit+0xa8>)
 800061e:	0019      	movs	r1, r3
 8000620:	0010      	movs	r0, r2
 8000622:	f000 fa4b 	bl	8000abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_I2C_MspInit+0xa4>)
 8000628:	69da      	ldr	r2, [r3, #28]
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <HAL_I2C_MspInit+0xa4>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0389      	lsls	r1, r1, #14
 8000630:	430a      	orrs	r2, r1
 8000632:	61da      	str	r2, [r3, #28]
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_I2C_MspInit+0xa4>)
 8000636:	69da      	ldr	r2, [r3, #28]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	039b      	lsls	r3, r3, #14
 800063c:	4013      	ands	r3, r2
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2017      	movs	r0, #23
 8000648:	f000 f9b4 	bl	80009b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800064c:	2017      	movs	r0, #23
 800064e:	f000 f9c6 	bl	80009de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b00b      	add	sp, #44	; 0x2c
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40005400 	.word	0x40005400
 8000660:	40021000 	.word	0x40021000
 8000664:	48000400 	.word	0x48000400

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler+0x4>

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068c:	f000 f8a6 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// This Interrupt handles the Push of the Blue PushButton

	//uint8_t rawData[2];
	//HAL_StatusTypeDef ret;
	//ret=HAL_I2C_Mem_Read(&hi2c1, GYRO_DEVADDR_R, Gyro_MSB_X, 1, rawData, 2, 5000);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <EXTI0_1_IRQHandler+0x20>)
 80006a2:	0019      	movs	r1, r3
 80006a4:	0010      	movs	r0, r2
 80006a6:	f000 fb96 	bl	8000dd6 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 fbae 	bl	8000e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	48000800 	.word	0x48000800

080006bc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <I2C1_IRQHandler+0x2c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	699a      	ldr	r2, [r3, #24]
 80006c6:	23e0      	movs	r3, #224	; 0xe0
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	4013      	ands	r3, r2
 80006cc:	d004      	beq.n	80006d8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <I2C1_IRQHandler+0x2c>)
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 ffb5 	bl	8001640 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80006d6:	e003      	b.n	80006e0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <I2C1_IRQHandler+0x2c>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 ff96 	bl	800160c <HAL_I2C_EV_IRQHandler>
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	2000002c 	.word	0x2000002c

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 80006fe:	490e      	ldr	r1, [pc, #56]	; (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000700:	4a0e      	ldr	r2, [pc, #56]	; (800073c <LoopForever+0xe>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000714:	4c0b      	ldr	r4, [pc, #44]	; (8000744 <LoopForever+0x16>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000722:	f7ff ffe3 	bl	80006ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000726:	f002 fd6b 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072a:	f7ff fdf5 	bl	8000318 <main>

0800072e <LoopForever>:

LoopForever:
    b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
  ldr   r0, =_estack
 8000730:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800073c:	080032a8 	.word	0x080032a8
  ldr r2, =_sbss
 8000740:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000744:	2000007c 	.word	0x2000007c

08000748 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_COMP_IRQHandler>
	...

0800074c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <HAL_Init+0x24>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_Init+0x24>)
 8000756:	2110      	movs	r1, #16
 8000758:	430a      	orrs	r2, r1
 800075a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 f809 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000762:	f7ff ff07 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
}
 8000768:	0018      	movs	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <HAL_InitTick+0x5c>)
 800077e:	681c      	ldr	r4, [r3, #0]
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_InitTick+0x60>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0019      	movs	r1, r3
 8000786:	23fa      	movs	r3, #250	; 0xfa
 8000788:	0098      	lsls	r0, r3, #2
 800078a:	f7ff fcbd 	bl	8000108 <__udivsi3>
 800078e:	0003      	movs	r3, r0
 8000790:	0019      	movs	r1, r3
 8000792:	0020      	movs	r0, r4
 8000794:	f7ff fcb8 	bl	8000108 <__udivsi3>
 8000798:	0003      	movs	r3, r0
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f92f 	bl	80009fe <HAL_SYSTICK_Config>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e00f      	b.n	80007c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d80b      	bhi.n	80007c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	2301      	movs	r3, #1
 80007b2:	425b      	negs	r3, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f8fc 	bl	80009b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_InitTick+0x64>)
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b003      	add	sp, #12
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	20000004 	.word	0x20000004
 80007d4:	2000000c 	.word	0x2000000c
 80007d8:	20000008 	.word	0x20000008

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	001a      	movs	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	18d2      	adds	r2, r2, r3
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_IncTick+0x20>)
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	2000000c 	.word	0x2000000c
 80007fc:	20000078 	.word	0x20000078

08000800 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <HAL_GetTick+0x10>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000078 	.word	0x20000078

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff fff0 	bl	8000800 <HAL_GetTick>
 8000820:	0003      	movs	r3, r0
 8000822:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3301      	adds	r3, #1
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_Delay+0x44>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	001a      	movs	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	189b      	adds	r3, r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	f7ff ffe0 	bl	8000800 <HAL_GetTick>
 8000840:	0002      	movs	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b004      	add	sp, #16
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	2000000c 	.word	0x2000000c

0800085c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	0002      	movs	r2, r0
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b7f      	cmp	r3, #127	; 0x7f
 800086e:	d809      	bhi.n	8000884 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	001a      	movs	r2, r3
 8000876:	231f      	movs	r3, #31
 8000878:	401a      	ands	r2, r3
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <__NVIC_EnableIRQ+0x30>)
 800087c:	2101      	movs	r1, #1
 800087e:	4091      	lsls	r1, r2
 8000880:	000a      	movs	r2, r1
 8000882:	601a      	str	r2, [r3, #0]
  }
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b002      	add	sp, #8
 800088a:	bd80      	pop	{r7, pc}
 800088c:	e000e100 	.word	0xe000e100

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	0002      	movs	r2, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b7f      	cmp	r3, #127	; 0x7f
 80008a4:	d828      	bhi.n	80008f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <__NVIC_SetPriority+0xd4>)
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	33c0      	adds	r3, #192	; 0xc0
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	589b      	ldr	r3, [r3, r2]
 80008b6:	1dfa      	adds	r2, r7, #7
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	0011      	movs	r1, r2
 80008bc:	2203      	movs	r2, #3
 80008be:	400a      	ands	r2, r1
 80008c0:	00d2      	lsls	r2, r2, #3
 80008c2:	21ff      	movs	r1, #255	; 0xff
 80008c4:	4091      	lsls	r1, r2
 80008c6:	000a      	movs	r2, r1
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	401a      	ands	r2, r3
 80008cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	22ff      	movs	r2, #255	; 0xff
 80008d4:	401a      	ands	r2, r3
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	0018      	movs	r0, r3
 80008dc:	2303      	movs	r3, #3
 80008de:	4003      	ands	r3, r0
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e4:	481f      	ldr	r0, [pc, #124]	; (8000964 <__NVIC_SetPriority+0xd4>)
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	430a      	orrs	r2, r1
 80008f0:	33c0      	adds	r3, #192	; 0xc0
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008f6:	e031      	b.n	800095c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <__NVIC_SetPriority+0xd8>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	0019      	movs	r1, r3
 8000900:	230f      	movs	r3, #15
 8000902:	400b      	ands	r3, r1
 8000904:	3b08      	subs	r3, #8
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	3306      	adds	r3, #6
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	18d3      	adds	r3, r2, r3
 800090e:	3304      	adds	r3, #4
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1dfa      	adds	r2, r7, #7
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	0011      	movs	r1, r2
 8000918:	2203      	movs	r2, #3
 800091a:	400a      	ands	r2, r1
 800091c:	00d2      	lsls	r2, r2, #3
 800091e:	21ff      	movs	r1, #255	; 0xff
 8000920:	4091      	lsls	r1, r2
 8000922:	000a      	movs	r2, r1
 8000924:	43d2      	mvns	r2, r2
 8000926:	401a      	ands	r2, r3
 8000928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	019b      	lsls	r3, r3, #6
 800092e:	22ff      	movs	r2, #255	; 0xff
 8000930:	401a      	ands	r2, r3
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	0018      	movs	r0, r3
 8000938:	2303      	movs	r3, #3
 800093a:	4003      	ands	r3, r0
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <__NVIC_SetPriority+0xd8>)
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	001c      	movs	r4, r3
 8000948:	230f      	movs	r3, #15
 800094a:	4023      	ands	r3, r4
 800094c:	3b08      	subs	r3, #8
 800094e:	089b      	lsrs	r3, r3, #2
 8000950:	430a      	orrs	r2, r1
 8000952:	3306      	adds	r3, #6
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	18c3      	adds	r3, r0, r3
 8000958:	3304      	adds	r3, #4
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b003      	add	sp, #12
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	e000e100 	.word	0xe000e100
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	1e5a      	subs	r2, r3, #1
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	045b      	lsls	r3, r3, #17
 800097c:	429a      	cmp	r2, r3
 800097e:	d301      	bcc.n	8000984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000980:	2301      	movs	r3, #1
 8000982:	e010      	b.n	80009a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <SysTick_Config+0x44>)
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	3a01      	subs	r2, #1
 800098a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098c:	2301      	movs	r3, #1
 800098e:	425b      	negs	r3, r3
 8000990:	2103      	movs	r1, #3
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff ff7c 	bl	8000890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <SysTick_Config+0x44>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <SysTick_Config+0x44>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	0018      	movs	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b002      	add	sp, #8
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	e000e010 	.word	0xe000e010

080009b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	210f      	movs	r1, #15
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	1c02      	adds	r2, r0, #0
 80009c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	0011      	movs	r1, r2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff ff5d 	bl	8000890 <__NVIC_SetPriority>
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b004      	add	sp, #16
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	0002      	movs	r2, r0
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff ff33 	bl	800085c <__NVIC_EnableIRQ>
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ffaf 	bl	800096c <SysTick_Config>
 8000a0e:	0003      	movs	r3, r0
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a20:	210f      	movs	r1, #15
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2221      	movs	r2, #33	; 0x21
 8000a2c:	5c9b      	ldrb	r3, [r3, r2]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d006      	beq.n	8000a42 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2204      	movs	r2, #4
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	e028      	b.n	8000a94 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	210e      	movs	r1, #14
 8000a4e:	438a      	bics	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	438a      	bics	r2, r1
 8000a60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	000a      	movs	r2, r1
 8000a70:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2221      	movs	r2, #33	; 0x21
 8000a76:	2101      	movs	r1, #1
 8000a78:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	2100      	movs	r1, #0
 8000a80:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d004      	beq.n	8000a94 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	0010      	movs	r0, r2
 8000a92:	4798      	blx	r3
    } 
  }
  return status;
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2221      	movs	r2, #33	; 0x21
 8000aae:	5c9b      	ldrb	r3, [r3, r2]
 8000ab0:	b2db      	uxtb	r3, r3
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aca:	e14f      	b.n	8000d6c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	000a      	movs	r2, r1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d100      	bne.n	8000ae4 <HAL_GPIO_Init+0x28>
 8000ae2:	e140      	b.n	8000d66 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2203      	movs	r2, #3
 8000aea:	4013      	ands	r3, r2
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d005      	beq.n	8000afc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2203      	movs	r2, #3
 8000af6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d130      	bne.n	8000b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2203      	movs	r2, #3
 8000b08:	409a      	lsls	r2, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	0013      	movs	r3, r2
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b32:	2201      	movs	r2, #1
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	091b      	lsrs	r3, r3, #4
 8000b48:	2201      	movs	r2, #1
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2203      	movs	r2, #3
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d017      	beq.n	8000b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d123      	bne.n	8000bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	08da      	lsrs	r2, r3, #3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3208      	adds	r2, #8
 8000bae:	0092      	lsls	r2, r2, #2
 8000bb0:	58d3      	ldr	r3, [r2, r3]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	2207      	movs	r2, #7
 8000bb8:	4013      	ands	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	220f      	movs	r2, #15
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	691a      	ldr	r2, [r3, #16]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2107      	movs	r1, #7
 8000bd2:	400b      	ands	r3, r1
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	08da      	lsrs	r2, r3, #3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3208      	adds	r2, #8
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	6939      	ldr	r1, [r7, #16]
 8000bec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	23c0      	movs	r3, #192	; 0xc0
 8000c28:	029b      	lsls	r3, r3, #10
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	d100      	bne.n	8000c30 <HAL_GPIO_Init+0x174>
 8000c2e:	e09a      	b.n	8000d66 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c30:	4b54      	ldr	r3, [pc, #336]	; (8000d84 <HAL_GPIO_Init+0x2c8>)
 8000c32:	699a      	ldr	r2, [r3, #24]
 8000c34:	4b53      	ldr	r3, [pc, #332]	; (8000d84 <HAL_GPIO_Init+0x2c8>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	619a      	str	r2, [r3, #24]
 8000c3c:	4b51      	ldr	r3, [pc, #324]	; (8000d84 <HAL_GPIO_Init+0x2c8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	2201      	movs	r2, #1
 8000c42:	4013      	ands	r3, r2
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c48:	4a4f      	ldr	r2, [pc, #316]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	3302      	adds	r3, #2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	589b      	ldr	r3, [r3, r2]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2203      	movs	r2, #3
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	220f      	movs	r2, #15
 8000c60:	409a      	lsls	r2, r3
 8000c62:	0013      	movs	r3, r2
 8000c64:	43da      	mvns	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	2390      	movs	r3, #144	; 0x90
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0x1e2>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a44      	ldr	r2, [pc, #272]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d00d      	beq.n	8000c9a <HAL_GPIO_Init+0x1de>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a43      	ldr	r2, [pc, #268]	; (8000d90 <HAL_GPIO_Init+0x2d4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d007      	beq.n	8000c96 <HAL_GPIO_Init+0x1da>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a42      	ldr	r2, [pc, #264]	; (8000d94 <HAL_GPIO_Init+0x2d8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_GPIO_Init+0x1d6>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e006      	b.n	8000ca0 <HAL_GPIO_Init+0x1e4>
 8000c92:	2305      	movs	r3, #5
 8000c94:	e004      	b.n	8000ca0 <HAL_GPIO_Init+0x1e4>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e002      	b.n	8000ca0 <HAL_GPIO_Init+0x1e4>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <HAL_GPIO_Init+0x1e4>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	2103      	movs	r1, #3
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	4093      	lsls	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb0:	4935      	ldr	r1, [pc, #212]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cbe:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	025b      	lsls	r3, r3, #9
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43da      	mvns	r2, r3
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	029b      	lsls	r3, r3, #10
 8000d00:	4013      	ands	r3, r2
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	035b      	lsls	r3, r3, #13
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	43da      	mvns	r2, r3
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	039b      	lsls	r3, r3, #14
 8000d54:	4013      	ands	r3, r2
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	40da      	lsrs	r2, r3
 8000d74:	1e13      	subs	r3, r2, #0
 8000d76:	d000      	beq.n	8000d7a <HAL_GPIO_Init+0x2be>
 8000d78:	e6a8      	b.n	8000acc <HAL_GPIO_Init+0x10>
  } 
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b006      	add	sp, #24
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	48000800 	.word	0x48000800
 8000d94:	48000c00 	.word	0x48000c00
 8000d98:	40010400 	.word	0x40010400

08000d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	0008      	movs	r0, r1
 8000da6:	0011      	movs	r1, r2
 8000da8:	1cbb      	adds	r3, r7, #2
 8000daa:	1c02      	adds	r2, r0, #0
 8000dac:	801a      	strh	r2, [r3, #0]
 8000dae:	1c7b      	adds	r3, r7, #1
 8000db0:	1c0a      	adds	r2, r1, #0
 8000db2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db4:	1c7b      	adds	r3, r7, #1
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d004      	beq.n	8000dc6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dbc:	1cbb      	adds	r3, r7, #2
 8000dbe:	881a      	ldrh	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc4:	e003      	b.n	8000dce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dc6:	1cbb      	adds	r3, r7, #2
 8000dc8:	881a      	ldrh	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	000a      	movs	r2, r1
 8000de0:	1cbb      	adds	r3, r7, #2
 8000de2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dea:	1cbb      	adds	r3, r7, #2
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4013      	ands	r3, r2
 8000df2:	041a      	lsls	r2, r3, #16
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	1cb9      	adds	r1, r7, #2
 8000dfa:	8809      	ldrh	r1, [r1, #0]
 8000dfc:	400b      	ands	r3, r1
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	619a      	str	r2, [r3, #24]
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b004      	add	sp, #16
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	0002      	movs	r2, r0
 8000e14:	1dbb      	adds	r3, r7, #6
 8000e16:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	1dba      	adds	r2, r7, #6
 8000e1e:	8812      	ldrh	r2, [r2, #0]
 8000e20:	4013      	ands	r3, r2
 8000e22:	d008      	beq.n	8000e36 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e26:	1dba      	adds	r2, r7, #6
 8000e28:	8812      	ldrh	r2, [r2, #0]
 8000e2a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e2c:	1dbb      	adds	r3, r7, #6
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	0018      	movs	r0, r3
 8000e32:	f000 f807 	bl	8000e44 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	40010400 	.word	0x40010400

08000e44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	1dbb      	adds	r3, r7, #6
 8000e4e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e082      	b.n	8000f70 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2241      	movs	r2, #65	; 0x41
 8000e6e:	5c9b      	ldrb	r3, [r3, r2]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d107      	bne.n	8000e86 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2240      	movs	r2, #64	; 0x40
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff fb9b 	bl	80005bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2241      	movs	r2, #65	; 0x41
 8000e8a:	2124      	movs	r1, #36	; 0x24
 8000e8c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	438a      	bics	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4934      	ldr	r1, [pc, #208]	; (8000f78 <HAL_I2C_Init+0x120>)
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4931      	ldr	r1, [pc, #196]	; (8000f7c <HAL_I2C_Init+0x124>)
 8000eb8:	400a      	ands	r2, r1
 8000eba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d108      	bne.n	8000ed6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0209      	lsls	r1, r1, #8
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	e007      	b.n	8000ee6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2184      	movs	r1, #132	; 0x84
 8000ee0:	0209      	lsls	r1, r1, #8
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d104      	bne.n	8000ef8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	491f      	ldr	r1, [pc, #124]	; (8000f80 <HAL_I2C_Init+0x128>)
 8000f04:	430a      	orrs	r2, r1
 8000f06:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	491a      	ldr	r1, [pc, #104]	; (8000f7c <HAL_I2C_Init+0x124>)
 8000f14:	400a      	ands	r2, r1
 8000f16:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	431a      	orrs	r2, r3
 8000f22:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69d9      	ldr	r1, [r3, #28]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1a      	ldr	r2, [r3, #32]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2241      	movs	r2, #65	; 0x41
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2242      	movs	r2, #66	; 0x42
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	f0ffffff 	.word	0xf0ffffff
 8000f7c:	ffff7fff 	.word	0xffff7fff
 8000f80:	02008000 	.word	0x02008000

08000f84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	0008      	movs	r0, r1
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	0019      	movs	r1, r3
 8000f92:	230a      	movs	r3, #10
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	1c02      	adds	r2, r0, #0
 8000f98:	801a      	strh	r2, [r3, #0]
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	1c0a      	adds	r2, r1, #0
 8000fa0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2241      	movs	r2, #65	; 0x41
 8000fa6:	5c9b      	ldrb	r3, [r3, r2]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b20      	cmp	r3, #32
 8000fac:	d000      	beq.n	8000fb0 <HAL_I2C_Master_Transmit+0x2c>
 8000fae:	e0e7      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2240      	movs	r2, #64	; 0x40
 8000fb4:	5c9b      	ldrb	r3, [r3, r2]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d101      	bne.n	8000fbe <HAL_I2C_Master_Transmit+0x3a>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e0e1      	b.n	8001182 <HAL_I2C_Master_Transmit+0x1fe>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2240      	movs	r2, #64	; 0x40
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fc6:	f7ff fc1b 	bl	8000800 <HAL_GetTick>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	0219      	lsls	r1, r3, #8
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2319      	movs	r3, #25
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f001 f914 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e0cc      	b.n	8001182 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2241      	movs	r2, #65	; 0x41
 8000fec:	2121      	movs	r1, #33	; 0x21
 8000fee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2242      	movs	r2, #66	; 0x42
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2208      	movs	r2, #8
 8001008:	18ba      	adds	r2, r7, r2
 800100a:	8812      	ldrh	r2, [r2, #0]
 800100c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001018:	b29b      	uxth	r3, r3
 800101a:	2bff      	cmp	r3, #255	; 0xff
 800101c:	d911      	bls.n	8001042 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001028:	b2da      	uxtb	r2, r3
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	045c      	lsls	r4, r3, #17
 800102e:	230a      	movs	r3, #10
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	8819      	ldrh	r1, [r3, #0]
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	4b55      	ldr	r3, [pc, #340]	; (800118c <HAL_I2C_Master_Transmit+0x208>)
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	0023      	movs	r3, r4
 800103c:	f001 fa84 	bl	8002548 <I2C_TransferConfig>
 8001040:	e075      	b.n	800112e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001046:	b29a      	uxth	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001050:	b2da      	uxtb	r2, r3
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	049c      	lsls	r4, r3, #18
 8001056:	230a      	movs	r3, #10
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	8819      	ldrh	r1, [r3, #0]
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	4b4b      	ldr	r3, [pc, #300]	; (800118c <HAL_I2C_Master_Transmit+0x208>)
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	0023      	movs	r3, r4
 8001064:	f001 fa70 	bl	8002548 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001068:	e061      	b.n	800112e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	0018      	movs	r0, r3
 8001072:	f001 f908 	bl	8002286 <I2C_WaitOnTXISFlagUntilTimeout>
 8001076:	1e03      	subs	r3, r0, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e081      	b.n	8001182 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001098:	b29b      	uxth	r3, r3
 800109a:	3b01      	subs	r3, #1
 800109c:	b29a      	uxth	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a6:	3b01      	subs	r3, #1
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d03a      	beq.n	800112e <HAL_I2C_Master_Transmit+0x1aa>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d136      	bne.n	800112e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	0013      	movs	r3, r2
 80010ca:	2200      	movs	r2, #0
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	f001 f89b 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e053      	b.n	8001182 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010de:	b29b      	uxth	r3, r3
 80010e0:	2bff      	cmp	r3, #255	; 0xff
 80010e2:	d911      	bls.n	8001108 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	045c      	lsls	r4, r3, #17
 80010f4:	230a      	movs	r3, #10
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	8819      	ldrh	r1, [r3, #0]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	0023      	movs	r3, r4
 8001102:	f001 fa21 	bl	8002548 <I2C_TransferConfig>
 8001106:	e012      	b.n	800112e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800110c:	b29a      	uxth	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001116:	b2da      	uxtb	r2, r3
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	049c      	lsls	r4, r3, #18
 800111c:	230a      	movs	r3, #10
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	8819      	ldrh	r1, [r3, #0]
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	2300      	movs	r3, #0
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	0023      	movs	r3, r4
 800112a:	f001 fa0d 	bl	8002548 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001132:	b29b      	uxth	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d198      	bne.n	800106a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	0018      	movs	r0, r3
 8001140:	f001 f8e0 	bl	8002304 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e01a      	b.n	8001182 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2220      	movs	r2, #32
 8001152:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	490c      	ldr	r1, [pc, #48]	; (8001190 <HAL_I2C_Master_Transmit+0x20c>)
 8001160:	400a      	ands	r2, r1
 8001162:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2241      	movs	r2, #65	; 0x41
 8001168:	2120      	movs	r1, #32
 800116a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2242      	movs	r2, #66	; 0x42
 8001170:	2100      	movs	r1, #0
 8001172:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2240      	movs	r2, #64	; 0x40
 8001178:	2100      	movs	r1, #0
 800117a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	e000      	b.n	8001182 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001180:	2302      	movs	r3, #2
  }
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	b007      	add	sp, #28
 8001188:	bd90      	pop	{r4, r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	80002000 	.word	0x80002000
 8001190:	fe00e800 	.word	0xfe00e800

08001194 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	0008      	movs	r0, r1
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	0019      	movs	r1, r3
 80011a2:	230a      	movs	r3, #10
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	1c02      	adds	r2, r0, #0
 80011a8:	801a      	strh	r2, [r3, #0]
 80011aa:	2308      	movs	r3, #8
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	1c0a      	adds	r2, r1, #0
 80011b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2241      	movs	r2, #65	; 0x41
 80011b6:	5c9b      	ldrb	r3, [r3, r2]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b20      	cmp	r3, #32
 80011bc:	d000      	beq.n	80011c0 <HAL_I2C_Master_Receive+0x2c>
 80011be:	e0e8      	b.n	8001392 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2240      	movs	r2, #64	; 0x40
 80011c4:	5c9b      	ldrb	r3, [r3, r2]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d101      	bne.n	80011ce <HAL_I2C_Master_Receive+0x3a>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e0e2      	b.n	8001394 <HAL_I2C_Master_Receive+0x200>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2240      	movs	r2, #64	; 0x40
 80011d2:	2101      	movs	r1, #1
 80011d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011d6:	f7ff fb13 	bl	8000800 <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	0219      	lsls	r1, r3, #8
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2319      	movs	r3, #25
 80011ea:	2201      	movs	r2, #1
 80011ec:	f001 f80c 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0cd      	b.n	8001394 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2241      	movs	r2, #65	; 0x41
 80011fc:	2122      	movs	r1, #34	; 0x22
 80011fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2242      	movs	r2, #66	; 0x42
 8001204:	2110      	movs	r1, #16
 8001206:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2208      	movs	r2, #8
 8001218:	18ba      	adds	r2, r7, r2
 800121a:	8812      	ldrh	r2, [r2, #0]
 800121c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001228:	b29b      	uxth	r3, r3
 800122a:	2bff      	cmp	r3, #255	; 0xff
 800122c:	d911      	bls.n	8001252 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	22ff      	movs	r2, #255	; 0xff
 8001232:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	045c      	lsls	r4, r3, #17
 800123e:	230a      	movs	r3, #10
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	8819      	ldrh	r1, [r3, #0]
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	4b55      	ldr	r3, [pc, #340]	; (800139c <HAL_I2C_Master_Receive+0x208>)
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	0023      	movs	r3, r4
 800124c:	f001 f97c 	bl	8002548 <I2C_TransferConfig>
 8001250:	e076      	b.n	8001340 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001256:	b29a      	uxth	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001260:	b2da      	uxtb	r2, r3
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	049c      	lsls	r4, r3, #18
 8001266:	230a      	movs	r3, #10
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	8819      	ldrh	r1, [r3, #0]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	4b4b      	ldr	r3, [pc, #300]	; (800139c <HAL_I2C_Master_Receive+0x208>)
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	0023      	movs	r3, r4
 8001274:	f001 f968 	bl	8002548 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001278:	e062      	b.n	8001340 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	0018      	movs	r0, r3
 8001282:	f001 f87b 	bl	800237c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d001      	beq.n	800128e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e082      	b.n	8001394 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d03a      	beq.n	8001340 <HAL_I2C_Master_Receive+0x1ac>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d136      	bne.n	8001340 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	0013      	movs	r3, r2
 80012dc:	2200      	movs	r2, #0
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	f000 ff92 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d001      	beq.n	80012ec <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e053      	b.n	8001394 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2bff      	cmp	r3, #255	; 0xff
 80012f4:	d911      	bls.n	800131a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001300:	b2da      	uxtb	r2, r3
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	045c      	lsls	r4, r3, #17
 8001306:	230a      	movs	r3, #10
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	8819      	ldrh	r1, [r3, #0]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	2300      	movs	r3, #0
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	0023      	movs	r3, r4
 8001314:	f001 f918 	bl	8002548 <I2C_TransferConfig>
 8001318:	e012      	b.n	8001340 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131e:	b29a      	uxth	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001328:	b2da      	uxtb	r2, r3
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	049c      	lsls	r4, r3, #18
 800132e:	230a      	movs	r3, #10
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	8819      	ldrh	r1, [r3, #0]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	0023      	movs	r3, r4
 800133c:	f001 f904 	bl	8002548 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001344:	b29b      	uxth	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d197      	bne.n	800127a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	0018      	movs	r0, r3
 8001352:	f000 ffd7 	bl	8002304 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e01a      	b.n	8001394 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2220      	movs	r2, #32
 8001364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	490b      	ldr	r1, [pc, #44]	; (80013a0 <HAL_I2C_Master_Receive+0x20c>)
 8001372:	400a      	ands	r2, r1
 8001374:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2241      	movs	r2, #65	; 0x41
 800137a:	2120      	movs	r1, #32
 800137c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2242      	movs	r2, #66	; 0x42
 8001382:	2100      	movs	r1, #0
 8001384:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2240      	movs	r2, #64	; 0x40
 800138a:	2100      	movs	r1, #0
 800138c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001392:	2302      	movs	r3, #2
  }
}
 8001394:	0018      	movs	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	b007      	add	sp, #28
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	80002400 	.word	0x80002400
 80013a0:	fe00e800 	.word	0xfe00e800

080013a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	000c      	movs	r4, r1
 80013ae:	0010      	movs	r0, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	230a      	movs	r3, #10
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	1c22      	adds	r2, r4, #0
 80013b8:	801a      	strh	r2, [r3, #0]
 80013ba:	2308      	movs	r3, #8
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	1c02      	adds	r2, r0, #0
 80013c0:	801a      	strh	r2, [r3, #0]
 80013c2:	1dbb      	adds	r3, r7, #6
 80013c4:	1c0a      	adds	r2, r1, #0
 80013c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2241      	movs	r2, #65	; 0x41
 80013cc:	5c9b      	ldrb	r3, [r3, r2]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	d000      	beq.n	80013d6 <HAL_I2C_Mem_Read+0x32>
 80013d4:	e110      	b.n	80015f8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80013d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <HAL_I2C_Mem_Read+0x42>
 80013dc:	232c      	movs	r3, #44	; 0x2c
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d105      	bne.n	80013f2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e103      	b.n	80015fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2240      	movs	r2, #64	; 0x40
 80013f6:	5c9b      	ldrb	r3, [r3, r2]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_I2C_Mem_Read+0x5c>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e0fc      	b.n	80015fa <HAL_I2C_Mem_Read+0x256>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2240      	movs	r2, #64	; 0x40
 8001404:	2101      	movs	r1, #1
 8001406:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001408:	f7ff f9fa 	bl	8000800 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	0219      	lsls	r1, r3, #8
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2319      	movs	r3, #25
 800141c:	2201      	movs	r2, #1
 800141e:	f000 fef3 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d001      	beq.n	800142a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0e7      	b.n	80015fa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2241      	movs	r2, #65	; 0x41
 800142e:	2122      	movs	r1, #34	; 0x22
 8001430:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2242      	movs	r2, #66	; 0x42
 8001436:	2140      	movs	r1, #64	; 0x40
 8001438:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	222c      	movs	r2, #44	; 0x2c
 800144a:	18ba      	adds	r2, r7, r2
 800144c:	8812      	ldrh	r2, [r2, #0]
 800144e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001456:	1dbb      	adds	r3, r7, #6
 8001458:	881c      	ldrh	r4, [r3, #0]
 800145a:	2308      	movs	r3, #8
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	881a      	ldrh	r2, [r3, #0]
 8001460:	230a      	movs	r3, #10
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	8819      	ldrh	r1, [r3, #0]
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	0023      	movs	r3, r4
 8001472:	f000 fa93 	bl	800199c <I2C_RequestMemoryRead>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d005      	beq.n	8001486 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2240      	movs	r2, #64	; 0x40
 800147e:	2100      	movs	r1, #0
 8001480:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0b9      	b.n	80015fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148a:	b29b      	uxth	r3, r3
 800148c:	2bff      	cmp	r3, #255	; 0xff
 800148e:	d911      	bls.n	80014b4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	22ff      	movs	r2, #255	; 0xff
 8001494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149a:	b2da      	uxtb	r2, r3
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	045c      	lsls	r4, r3, #17
 80014a0:	230a      	movs	r3, #10
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	8819      	ldrh	r1, [r3, #0]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	4b56      	ldr	r3, [pc, #344]	; (8001604 <HAL_I2C_Mem_Read+0x260>)
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	0023      	movs	r3, r4
 80014ae:	f001 f84b 	bl	8002548 <I2C_TransferConfig>
 80014b2:	e012      	b.n	80014da <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	049c      	lsls	r4, r3, #18
 80014c8:	230a      	movs	r3, #10
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	8819      	ldrh	r1, [r3, #0]
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <HAL_I2C_Mem_Read+0x260>)
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	0023      	movs	r3, r4
 80014d6:	f001 f837 	bl	8002548 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80014da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	0013      	movs	r3, r2
 80014e4:	2200      	movs	r2, #0
 80014e6:	2104      	movs	r1, #4
 80014e8:	f000 fe8e 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e082      	b.n	80015fa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001510:	3b01      	subs	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151c:	b29b      	uxth	r3, r3
 800151e:	3b01      	subs	r3, #1
 8001520:	b29a      	uxth	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d03a      	beq.n	80015a6 <HAL_I2C_Mem_Read+0x202>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001534:	2b00      	cmp	r3, #0
 8001536:	d136      	bne.n	80015a6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	0013      	movs	r3, r2
 8001542:	2200      	movs	r2, #0
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	f000 fe5f 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 800154a:	1e03      	subs	r3, r0, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e053      	b.n	80015fa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001556:	b29b      	uxth	r3, r3
 8001558:	2bff      	cmp	r3, #255	; 0xff
 800155a:	d911      	bls.n	8001580 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	22ff      	movs	r2, #255	; 0xff
 8001560:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001566:	b2da      	uxtb	r2, r3
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	045c      	lsls	r4, r3, #17
 800156c:	230a      	movs	r3, #10
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	8819      	ldrh	r1, [r3, #0]
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	2300      	movs	r3, #0
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	0023      	movs	r3, r4
 800157a:	f000 ffe5 	bl	8002548 <I2C_TransferConfig>
 800157e:	e012      	b.n	80015a6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158e:	b2da      	uxtb	r2, r3
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	049c      	lsls	r4, r3, #18
 8001594:	230a      	movs	r3, #10
 8001596:	18fb      	adds	r3, r7, r3
 8001598:	8819      	ldrh	r1, [r3, #0]
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	2300      	movs	r3, #0
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	0023      	movs	r3, r4
 80015a2:	f000 ffd1 	bl	8002548 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d194      	bne.n	80014da <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 fea4 	bl	8002304 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015bc:	1e03      	subs	r3, r0, #0
 80015be:	d001      	beq.n	80015c4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e01a      	b.n	80015fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2220      	movs	r2, #32
 80015ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	490c      	ldr	r1, [pc, #48]	; (8001608 <HAL_I2C_Mem_Read+0x264>)
 80015d8:	400a      	ands	r2, r1
 80015da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2241      	movs	r2, #65	; 0x41
 80015e0:	2120      	movs	r1, #32
 80015e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2242      	movs	r2, #66	; 0x42
 80015e8:	2100      	movs	r1, #0
 80015ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2240      	movs	r2, #64	; 0x40
 80015f0:	2100      	movs	r1, #0
 80015f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e000      	b.n	80015fa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80015f8:	2302      	movs	r3, #2
  }
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b007      	add	sp, #28
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	80002400 	.word	0x80002400
 8001608:	fe00e800 	.word	0xfe00e800

0800160c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	68f9      	ldr	r1, [r7, #12]
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
  }
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	b004      	add	sp, #16
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	001a      	movs	r2, r3
 800165e:	2301      	movs	r3, #1
 8001660:	4013      	ands	r3, r2
 8001662:	d010      	beq.n	8001686 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	09db      	lsrs	r3, r3, #7
 8001668:	001a      	movs	r2, r3
 800166a:	2301      	movs	r3, #1
 800166c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800166e:	d00a      	beq.n	8001686 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	2201      	movs	r2, #1
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	0052      	lsls	r2, r2, #1
 8001684:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	0a9b      	lsrs	r3, r3, #10
 800168a:	001a      	movs	r2, r3
 800168c:	2301      	movs	r3, #1
 800168e:	4013      	ands	r3, r2
 8001690:	d010      	beq.n	80016b4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	09db      	lsrs	r3, r3, #7
 8001696:	001a      	movs	r2, r3
 8001698:	2301      	movs	r3, #1
 800169a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800169c:	d00a      	beq.n	80016b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	2208      	movs	r2, #8
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	00d2      	lsls	r2, r2, #3
 80016b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	0a5b      	lsrs	r3, r3, #9
 80016b8:	001a      	movs	r2, r3
 80016ba:	2301      	movs	r3, #1
 80016bc:	4013      	ands	r3, r2
 80016be:	d010      	beq.n	80016e2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	09db      	lsrs	r3, r3, #7
 80016c4:	001a      	movs	r2, r3
 80016c6:	2301      	movs	r3, #1
 80016c8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016ca:	d00a      	beq.n	80016e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	2202      	movs	r2, #2
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	220b      	movs	r2, #11
 80016ec:	4013      	ands	r3, r2
 80016ee:	d005      	beq.n	80016fc <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0011      	movs	r1, r2
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 fc3a 	bl	8001f70 <I2C_ITError>
  }
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b006      	add	sp, #24
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	0008      	movs	r0, r1
 800172e:	0011      	movs	r1, r2
 8001730:	1cfb      	adds	r3, r7, #3
 8001732:	1c02      	adds	r2, r0, #0
 8001734:	701a      	strb	r2, [r3, #0]
 8001736:	003b      	movs	r3, r7
 8001738:	1c0a      	adds	r2, r1, #0
 800173a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2240      	movs	r2, #64	; 0x40
 800178e:	5c9b      	ldrb	r3, [r3, r2]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <I2C_Slave_ISR_IT+0x24>
 8001794:	2302      	movs	r3, #2
 8001796:	e0fa      	b.n	800198e <I2C_Slave_ISR_IT+0x21a>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	2101      	movs	r1, #1
 800179e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	001a      	movs	r2, r3
 80017a6:	2301      	movs	r3, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	d00b      	beq.n	80017c4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	001a      	movs	r2, r3
 80017b2:	2301      	movs	r3, #1
 80017b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017b6:	d005      	beq.n	80017c4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	0011      	movs	r1, r2
 80017be:	0018      	movs	r0, r3
 80017c0:	f000 fa58 	bl	8001c74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	001a      	movs	r2, r3
 80017ca:	2301      	movs	r3, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	d054      	beq.n	800187a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	001a      	movs	r2, r3
 80017d6:	2301      	movs	r3, #1
 80017d8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017da:	d04e      	beq.n	800187a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d12d      	bne.n	8001842 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2241      	movs	r2, #65	; 0x41
 80017ea:	5c9b      	ldrb	r3, [r3, r2]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b28      	cmp	r3, #40	; 0x28
 80017f0:	d10b      	bne.n	800180a <I2C_Slave_ISR_IT+0x96>
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	049b      	lsls	r3, r3, #18
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d106      	bne.n	800180a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	0011      	movs	r1, r2
 8001802:	0018      	movs	r0, r3
 8001804:	f000 fb5a 	bl	8001ebc <I2C_ITListenCplt>
 8001808:	e036      	b.n	8001878 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2241      	movs	r2, #65	; 0x41
 800180e:	5c9b      	ldrb	r3, [r3, r2]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b29      	cmp	r3, #41	; 0x29
 8001814:	d110      	bne.n	8001838 <I2C_Slave_ISR_IT+0xc4>
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	4a5f      	ldr	r2, [pc, #380]	; (8001998 <I2C_Slave_ISR_IT+0x224>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00c      	beq.n	8001838 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2210      	movs	r2, #16
 8001824:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	0018      	movs	r0, r3
 800182a:	f000 fcac 	bl	8002186 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	0018      	movs	r0, r3
 8001832:	f000 f9b9 	bl	8001ba8 <I2C_ITSlaveSeqCplt>
 8001836:	e01f      	b.n	8001878 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2210      	movs	r2, #16
 800183e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001840:	e09d      	b.n	800197e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2210      	movs	r2, #16
 8001848:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	2204      	movs	r2, #4
 8001850:	431a      	orrs	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <I2C_Slave_ISR_IT+0xf4>
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	045b      	lsls	r3, r3, #17
 8001862:	429a      	cmp	r2, r3
 8001864:	d000      	beq.n	8001868 <I2C_Slave_ISR_IT+0xf4>
 8001866:	e08a      	b.n	800197e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	0011      	movs	r1, r2
 8001870:	0018      	movs	r0, r3
 8001872:	f000 fb7d 	bl	8001f70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001876:	e082      	b.n	800197e <I2C_Slave_ISR_IT+0x20a>
 8001878:	e081      	b.n	800197e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	001a      	movs	r2, r3
 8001880:	2301      	movs	r3, #1
 8001882:	4013      	ands	r3, r2
 8001884:	d031      	beq.n	80018ea <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	001a      	movs	r2, r3
 800188c:	2301      	movs	r3, #1
 800188e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001890:	d02b      	beq.n	80018ea <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d018      	beq.n	80018ce <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d154      	bne.n	8001982 <I2C_Slave_ISR_IT+0x20e>
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <I2C_Slave_ISR_IT+0x224>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d050      	beq.n	8001982 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 f960 	bl	8001ba8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80018e8:	e04b      	b.n	8001982 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	001a      	movs	r2, r3
 80018f0:	2301      	movs	r3, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	d00c      	beq.n	8001910 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	001a      	movs	r2, r3
 80018fc:	2301      	movs	r3, #1
 80018fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001900:	d006      	beq.n	8001910 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	0011      	movs	r1, r2
 8001908:	0018      	movs	r0, r3
 800190a:	f000 f8a9 	bl	8001a60 <I2C_ITAddrCplt>
 800190e:	e039      	b.n	8001984 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	001a      	movs	r2, r3
 8001916:	2301      	movs	r3, #1
 8001918:	4013      	ands	r3, r2
 800191a:	d033      	beq.n	8001984 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	001a      	movs	r2, r3
 8001922:	2301      	movs	r3, #1
 8001924:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001926:	d02d      	beq.n	8001984 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d018      	beq.n	8001964 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28
 8001962:	e00f      	b.n	8001984 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	045b      	lsls	r3, r3, #17
 800196a:	429a      	cmp	r2, r3
 800196c:	d002      	beq.n	8001974 <I2C_Slave_ISR_IT+0x200>
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d107      	bne.n	8001984 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	0018      	movs	r0, r3
 8001978:	f000 f916 	bl	8001ba8 <I2C_ITSlaveSeqCplt>
 800197c:	e002      	b.n	8001984 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	e000      	b.n	8001984 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8001982:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	2100      	movs	r1, #0
 800198a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b006      	add	sp, #24
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	ffff0000 	.word	0xffff0000

0800199c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	000c      	movs	r4, r1
 80019a6:	0010      	movs	r0, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	250a      	movs	r5, #10
 80019ac:	197b      	adds	r3, r7, r5
 80019ae:	1c22      	adds	r2, r4, #0
 80019b0:	801a      	strh	r2, [r3, #0]
 80019b2:	2308      	movs	r3, #8
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	1c02      	adds	r2, r0, #0
 80019b8:	801a      	strh	r2, [r3, #0]
 80019ba:	1dbb      	adds	r3, r7, #6
 80019bc:	1c0a      	adds	r2, r1, #0
 80019be:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80019c0:	1dbb      	adds	r3, r7, #6
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	197b      	adds	r3, r7, r5
 80019c8:	8819      	ldrh	r1, [r3, #0]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <I2C_RequestMemoryRead+0xc0>)
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2300      	movs	r3, #0
 80019d2:	f000 fdb9 	bl	8002548 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d8:	6a39      	ldr	r1, [r7, #32]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 fc52 	bl	8002286 <I2C_WaitOnTXISFlagUntilTimeout>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d001      	beq.n	80019ea <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e033      	b.n	8001a52 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019ea:	1dbb      	adds	r3, r7, #6
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019f2:	2308      	movs	r3, #8
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
 8001a00:	e019      	b.n	8001a36 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a02:	2308      	movs	r3, #8
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a16:	6a39      	ldr	r1, [r7, #32]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 fc33 	bl	8002286 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d001      	beq.n	8001a28 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e014      	b.n	8001a52 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a28:	2308      	movs	r3, #8
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	0013      	movs	r3, r2
 8001a40:	2200      	movs	r2, #0
 8001a42:	2140      	movs	r1, #64	; 0x40
 8001a44:	f000 fbe0 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d001      	beq.n	8001a50 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b004      	add	sp, #16
 8001a58:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	80002000 	.word	0x80002000

08001a60 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2241      	movs	r2, #65	; 0x41
 8001a6e:	5c9b      	ldrb	r3, [r3, r2]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	001a      	movs	r2, r3
 8001a74:	2328      	movs	r3, #40	; 0x28
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b28      	cmp	r3, #40	; 0x28
 8001a7a:	d000      	beq.n	8001a7e <I2C_ITAddrCplt+0x1e>
 8001a7c:	e088      	b.n	8001b90 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	250f      	movs	r5, #15
 8001a8a:	197b      	adds	r3, r7, r5
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	400a      	ands	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	200c      	movs	r0, #12
 8001a9e:	183b      	adds	r3, r7, r0
 8001aa0:	21fe      	movs	r1, #254	; 0xfe
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	240a      	movs	r4, #10
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	0592      	lsls	r2, r2, #22
 8001ab4:	0d92      	lsrs	r2, r2, #22
 8001ab6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	21fe      	movs	r1, #254	; 0xfe
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d148      	bne.n	8001b64 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001ad2:	0021      	movs	r1, r4
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	09db      	lsrs	r3, r3, #7
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	183b      	adds	r3, r7, r0
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	4053      	eors	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d120      	bne.n	8001b2e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001aec:	183b      	adds	r3, r7, r0
 8001aee:	187a      	adds	r2, r7, r1
 8001af0:	8812      	ldrh	r2, [r2, #0]
 8001af2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d14c      	bne.n	8001ba0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2208      	movs	r2, #8
 8001b12:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b1c:	183b      	adds	r3, r7, r0
 8001b1e:	881a      	ldrh	r2, [r3, #0]
 8001b20:	197b      	adds	r3, r7, r5
 8001b22:	7819      	ldrb	r1, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7ff fdfc 	bl	8001724 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001b2c:	e038      	b.n	8001ba0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001b2e:	240c      	movs	r4, #12
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	2208      	movs	r2, #8
 8001b34:	18ba      	adds	r2, r7, r2
 8001b36:	8812      	ldrh	r2, [r2, #0]
 8001b38:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	021a      	lsls	r2, r3, #8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0011      	movs	r1, r2
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 fd36 	bl	80025b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2240      	movs	r2, #64	; 0x40
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b50:	193b      	adds	r3, r7, r4
 8001b52:	881a      	ldrh	r2, [r3, #0]
 8001b54:	230f      	movs	r3, #15
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	7819      	ldrb	r1, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7ff fde1 	bl	8001724 <HAL_I2C_AddrCallback>
}
 8001b62:	e01d      	b.n	8001ba0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	021a      	lsls	r2, r3, #8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 fd21 	bl	80025b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2240      	movs	r2, #64	; 0x40
 8001b76:	2100      	movs	r1, #0
 8001b78:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	230f      	movs	r3, #15
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	7819      	ldrb	r1, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7ff fdcb 	bl	8001724 <HAL_I2C_AddrCallback>
}
 8001b8e:	e007      	b.n	8001ba0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2208      	movs	r2, #8
 8001b96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2240      	movs	r2, #64	; 0x40
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	5499      	strb	r1, [r3, r2]
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b004      	add	sp, #16
 8001ba6:	bdb0      	pop	{r4, r5, r7, pc}

08001ba8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2242      	movs	r2, #66	; 0x42
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	0b9b      	lsrs	r3, r3, #14
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d008      	beq.n	8001bde <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4925      	ldr	r1, [pc, #148]	; (8001c6c <I2C_ITSlaveSeqCplt+0xc4>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e00d      	b.n	8001bfa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	0bdb      	lsrs	r3, r3, #15
 8001be2:	001a      	movs	r2, r3
 8001be4:	2301      	movs	r3, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	d007      	beq.n	8001bfa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	491e      	ldr	r1, [pc, #120]	; (8001c70 <I2C_ITSlaveSeqCplt+0xc8>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2241      	movs	r2, #65	; 0x41
 8001bfe:	5c9b      	ldrb	r3, [r3, r2]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b29      	cmp	r3, #41	; 0x29
 8001c04:	d114      	bne.n	8001c30 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2241      	movs	r2, #65	; 0x41
 8001c0a:	2128      	movs	r1, #40	; 0x28
 8001c0c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2221      	movs	r2, #33	; 0x21
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2101      	movs	r1, #1
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f000 fccb 	bl	80025b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2240      	movs	r2, #64	; 0x40
 8001c22:	2100      	movs	r1, #0
 8001c24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff fd6b 	bl	8001704 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001c2e:	e019      	b.n	8001c64 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2241      	movs	r2, #65	; 0x41
 8001c34:	5c9b      	ldrb	r3, [r3, r2]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b2a      	cmp	r3, #42	; 0x2a
 8001c3a:	d113      	bne.n	8001c64 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2241      	movs	r2, #65	; 0x41
 8001c40:	2128      	movs	r1, #40	; 0x28
 8001c42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2222      	movs	r2, #34	; 0x22
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 fcb0 	bl	80025b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	2100      	movs	r1, #0
 8001c5a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7ff fd58 	bl	8001714 <HAL_I2C_SlaveRxCpltCallback>
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b004      	add	sp, #16
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	ffffbfff 	.word	0xffffbfff
 8001c70:	ffff7fff 	.word	0xffff7fff

08001c74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	183b      	adds	r3, r7, r0
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	2141      	movs	r1, #65	; 0x41
 8001c92:	5c52      	ldrb	r2, [r2, r1]
 8001c94:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b21      	cmp	r3, #33	; 0x21
 8001ca4:	d003      	beq.n	8001cae <I2C_ITSlaveCplt+0x3a>
 8001ca6:	183b      	adds	r3, r7, r0
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b29      	cmp	r3, #41	; 0x29
 8001cac:	d109      	bne.n	8001cc2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001cae:	4a7d      	ldr	r2, [pc, #500]	; (8001ea4 <I2C_ITSlaveCplt+0x230>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	0011      	movs	r1, r2
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f000 fc7d 	bl	80025b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2221      	movs	r2, #33	; 0x21
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc0:	e011      	b.n	8001ce6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	18bb      	adds	r3, r7, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b22      	cmp	r3, #34	; 0x22
 8001cca:	d003      	beq.n	8001cd4 <I2C_ITSlaveCplt+0x60>
 8001ccc:	18bb      	adds	r3, r7, r2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8001cd2:	d108      	bne.n	8001ce6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001cd4:	4a74      	ldr	r2, [pc, #464]	; (8001ea8 <I2C_ITSlaveCplt+0x234>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	0011      	movs	r1, r2
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f000 fc6a 	bl	80025b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2222      	movs	r2, #34	; 0x22
 8001ce4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2180      	movs	r1, #128	; 0x80
 8001cf2:	0209      	lsls	r1, r1, #8
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	496a      	ldr	r1, [pc, #424]	; (8001eac <I2C_ITSlaveCplt+0x238>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 fa3b 	bl	8002186 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	0b9b      	lsrs	r3, r3, #14
 8001d14:	001a      	movs	r2, r3
 8001d16:	2301      	movs	r3, #1
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4962      	ldr	r1, [pc, #392]	; (8001eb0 <I2C_ITSlaveCplt+0x23c>)
 8001d28:	400a      	ands	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d42:	e018      	b.n	8001d76 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	0bdb      	lsrs	r3, r3, #15
 8001d48:	001a      	movs	r2, r3
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d012      	beq.n	8001d76 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4956      	ldr	r1, [pc, #344]	; (8001eb4 <I2C_ITSlaveCplt+0x240>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d020      	beq.n	8001dc4 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2204      	movs	r2, #4
 8001d86:	4393      	bics	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00c      	beq.n	8001dc4 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2242      	movs	r2, #66	; 0x42
 8001dde:	2100      	movs	r1, #0
 8001de0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0011      	movs	r1, r2
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 f8b9 	bl	8001f70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2241      	movs	r2, #65	; 0x41
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b28      	cmp	r3, #40	; 0x28
 8001e08:	d147      	bne.n	8001e9a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	0011      	movs	r1, r2
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 f853 	bl	8001ebc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e16:	e040      	b.n	8001e9a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	4a26      	ldr	r2, [pc, #152]	; (8001eb8 <I2C_ITSlaveCplt+0x244>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d016      	beq.n	8001e50 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff febf 	bl	8001ba8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <I2C_ITSlaveCplt+0x244>)
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2241      	movs	r2, #65	; 0x41
 8001e34:	2120      	movs	r1, #32
 8001e36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2240      	movs	r2, #64	; 0x40
 8001e42:	2100      	movs	r1, #0
 8001e44:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff fc7b 	bl	8001744 <HAL_I2C_ListenCpltCallback>
}
 8001e4e:	e024      	b.n	8001e9a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2241      	movs	r2, #65	; 0x41
 8001e54:	5c9b      	ldrb	r3, [r3, r2]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b22      	cmp	r3, #34	; 0x22
 8001e5a:	d10f      	bne.n	8001e7c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2241      	movs	r2, #65	; 0x41
 8001e60:	2120      	movs	r1, #32
 8001e62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2240      	movs	r2, #64	; 0x40
 8001e6e:	2100      	movs	r1, #0
 8001e70:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff fc4d 	bl	8001714 <HAL_I2C_SlaveRxCpltCallback>
}
 8001e7a:	e00e      	b.n	8001e9a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2241      	movs	r2, #65	; 0x41
 8001e80:	2120      	movs	r1, #32
 8001e82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2240      	movs	r2, #64	; 0x40
 8001e8e:	2100      	movs	r1, #0
 8001e90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff fc35 	bl	8001704 <HAL_I2C_SlaveTxCpltCallback>
}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b006      	add	sp, #24
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	00008001 	.word	0x00008001
 8001ea8:	00008002 	.word	0x00008002
 8001eac:	fe00e800 	.word	0xfe00e800
 8001eb0:	ffffbfff 	.word	0xffffbfff
 8001eb4:	ffff7fff 	.word	0xffff7fff
 8001eb8:	ffff0000 	.word	0xffff0000

08001ebc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a27      	ldr	r2, [pc, #156]	; (8001f68 <I2C_ITListenCplt+0xac>)
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2241      	movs	r2, #65	; 0x41
 8001ed6:	2120      	movs	r1, #32
 8001ed8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2242      	movs	r2, #66	; 0x42
 8001ede:	2100      	movs	r1, #0
 8001ee0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	001a      	movs	r2, r3
 8001eee:	2301      	movs	r3, #1
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d022      	beq.n	8001f3a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d012      	beq.n	8001f3a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	2204      	movs	r2, #4
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <I2C_ITListenCplt+0xb0>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	0011      	movs	r1, r2
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 fb37 	bl	80025b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff fbf3 	bl	8001744 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b002      	add	sp, #8
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	ffff0000 	.word	0xffff0000
 8001f6c:	00008003 	.word	0x00008003

08001f70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	183b      	adds	r3, r7, r0
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	2141      	movs	r1, #65	; 0x41
 8001f82:	5c52      	ldrb	r2, [r2, r1]
 8001f84:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2242      	movs	r2, #66	; 0x42
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a62      	ldr	r2, [pc, #392]	; (800211c <I2C_ITError+0x1ac>)
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b28      	cmp	r3, #40	; 0x28
 8001fac:	d007      	beq.n	8001fbe <I2C_ITError+0x4e>
 8001fae:	183b      	adds	r3, r7, r0
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b29      	cmp	r3, #41	; 0x29
 8001fb4:	d003      	beq.n	8001fbe <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001fb6:	183b      	adds	r3, r7, r0
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b2a      	cmp	r3, #42	; 0x2a
 8001fbc:	d10c      	bne.n	8001fd8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2103      	movs	r1, #3
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 faf6 	bl	80025b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2241      	movs	r2, #65	; 0x41
 8001fcc:	2128      	movs	r1, #40	; 0x28
 8001fce:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a53      	ldr	r2, [pc, #332]	; (8002120 <I2C_ITError+0x1b0>)
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd6:	e012      	b.n	8001ffe <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <I2C_ITError+0x1b4>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0011      	movs	r1, r2
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 fae8 	bl	80025b4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2241      	movs	r2, #65	; 0x41
 8001fe8:	5c9b      	ldrb	r3, [r3, r2]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b60      	cmp	r3, #96	; 0x60
 8001fee:	d003      	beq.n	8001ff8 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2241      	movs	r2, #65	; 0x41
 8001ff4:	2120      	movs	r1, #32
 8001ff6:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002008:	2b00      	cmp	r3, #0
 800200a:	d03b      	beq.n	8002084 <I2C_ITError+0x114>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b11      	cmp	r3, #17
 8002010:	d002      	beq.n	8002018 <I2C_ITError+0xa8>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b21      	cmp	r3, #33	; 0x21
 8002016:	d135      	bne.n	8002084 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	01db      	lsls	r3, r3, #7
 8002022:	401a      	ands	r2, r3
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	01db      	lsls	r3, r3, #7
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	493c      	ldr	r1, [pc, #240]	; (8002128 <I2C_ITError+0x1b8>)
 8002038:	400a      	ands	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	0018      	movs	r0, r3
 8002042:	f7fe fd2e 	bl	8000aa2 <HAL_DMA_GetState>
 8002046:	0003      	movs	r3, r0
 8002048:	2b01      	cmp	r3, #1
 800204a:	d016      	beq.n	800207a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	4a36      	ldr	r2, [pc, #216]	; (800212c <I2C_ITError+0x1bc>)
 8002052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	0018      	movs	r0, r3
 8002062:	f7fe fcd9 	bl	8000a18 <HAL_DMA_Abort_IT>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d051      	beq.n	800210e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	0018      	movs	r0, r3
 8002076:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002078:	e049      	b.n	800210e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f000 f859 	bl	8002134 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002082:	e044      	b.n	800210e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	2b00      	cmp	r3, #0
 800208a:	d03b      	beq.n	8002104 <I2C_ITError+0x194>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b12      	cmp	r3, #18
 8002090:	d002      	beq.n	8002098 <I2C_ITError+0x128>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b22      	cmp	r3, #34	; 0x22
 8002096:	d135      	bne.n	8002104 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	401a      	ands	r2, r3
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d107      	bne.n	80020bc <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	491e      	ldr	r1, [pc, #120]	; (8002130 <I2C_ITError+0x1c0>)
 80020b8:	400a      	ands	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7fe fcee 	bl	8000aa2 <HAL_DMA_GetState>
 80020c6:	0003      	movs	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d016      	beq.n	80020fa <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	4a16      	ldr	r2, [pc, #88]	; (800212c <I2C_ITError+0x1bc>)
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2240      	movs	r2, #64	; 0x40
 80020d8:	2100      	movs	r1, #0
 80020da:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7fe fc99 	bl	8000a18 <HAL_DMA_Abort_IT>
 80020e6:	1e03      	subs	r3, r0, #0
 80020e8:	d013      	beq.n	8002112 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	0018      	movs	r0, r3
 80020f6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020f8:	e00b      	b.n	8002112 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 f819 	bl	8002134 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002102:	e006      	b.n	8002112 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	0018      	movs	r0, r3
 8002108:	f000 f814 	bl	8002134 <I2C_TreatErrorCallback>
  }
}
 800210c:	e002      	b.n	8002114 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	e000      	b.n	8002114 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002112:	46c0      	nop			; (mov r8, r8)
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b004      	add	sp, #16
 800211a:	bd80      	pop	{r7, pc}
 800211c:	ffff0000 	.word	0xffff0000
 8002120:	08001775 	.word	0x08001775
 8002124:	00008003 	.word	0x00008003
 8002128:	ffffbfff 	.word	0xffffbfff
 800212c:	080021cb 	.word	0x080021cb
 8002130:	ffff7fff 	.word	0xffff7fff

08002134 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2241      	movs	r2, #65	; 0x41
 8002140:	5c9b      	ldrb	r3, [r3, r2]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b60      	cmp	r3, #96	; 0x60
 8002146:	d10f      	bne.n	8002168 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2241      	movs	r2, #65	; 0x41
 800214c:	2120      	movs	r1, #32
 800214e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2240      	movs	r2, #64	; 0x40
 800215a:	2100      	movs	r1, #0
 800215c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff faff 	bl	8001764 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002166:	e00a      	b.n	800217e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	2100      	movs	r1, #0
 8002174:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff faeb 	bl	8001754 <HAL_I2C_ErrorCallback>
}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b002      	add	sp, #8
 8002184:	bd80      	pop	{r7, pc}

08002186 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2202      	movs	r2, #2
 8002196:	4013      	ands	r3, r2
 8002198:	2b02      	cmp	r3, #2
 800219a:	d103      	bne.n	80021a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d007      	beq.n	80021c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2101      	movs	r1, #1
 80021be:	430a      	orrs	r2, r1
 80021c0:	619a      	str	r2, [r3, #24]
  }
}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b002      	add	sp, #8
 80021c8:	bd80      	pop	{r7, pc}

080021ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	2200      	movs	r2, #0
 80021e6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	2200      	movs	r2, #0
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7ff ff9a 	bl	8002134 <I2C_TreatErrorCallback>
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}

08002208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002218:	e021      	b.n	800225e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	d01e      	beq.n	800225e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002220:	f7fe faee 	bl	8000800 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d302      	bcc.n	8002236 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d113      	bne.n	800225e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	2220      	movs	r2, #32
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2241      	movs	r2, #65	; 0x41
 8002246:	2120      	movs	r1, #32
 8002248:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2242      	movs	r2, #66	; 0x42
 800224e:	2100      	movs	r1, #0
 8002250:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	4013      	ands	r3, r2
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	425a      	negs	r2, r3
 800226e:	4153      	adcs	r3, r2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	001a      	movs	r2, r3
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d0ce      	beq.n	800221a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bd80      	pop	{r7, pc}

08002286 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002292:	e02b      	b.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f8da 	bl	8002454 <I2C_IsAcknowledgeFailed>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d001      	beq.n	80022a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e029      	b.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3301      	adds	r3, #1
 80022ac:	d01e      	beq.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7fe faa7 	bl	8000800 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d113      	bne.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	2220      	movs	r2, #32
 80022ca:	431a      	orrs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2241      	movs	r2, #65	; 0x41
 80022d4:	2120      	movs	r1, #32
 80022d6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2242      	movs	r2, #66	; 0x42
 80022dc:	2100      	movs	r1, #0
 80022de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2240      	movs	r2, #64	; 0x40
 80022e4:	2100      	movs	r1, #0
 80022e6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e007      	b.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d1cc      	bne.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b004      	add	sp, #16
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002310:	e028      	b.n	8002364 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0018      	movs	r0, r3
 800231a:	f000 f89b 	bl	8002454 <I2C_IsAcknowledgeFailed>
 800231e:	1e03      	subs	r3, r0, #0
 8002320:	d001      	beq.n	8002326 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e026      	b.n	8002374 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7fe fa6b 	bl	8000800 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d113      	bne.n	8002364 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	2220      	movs	r2, #32
 8002342:	431a      	orrs	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2241      	movs	r2, #65	; 0x41
 800234c:	2120      	movs	r1, #32
 800234e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2242      	movs	r2, #66	; 0x42
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2240      	movs	r2, #64	; 0x40
 800235c:	2100      	movs	r1, #0
 800235e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e007      	b.n	8002374 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2220      	movs	r2, #32
 800236c:	4013      	ands	r3, r2
 800236e:	2b20      	cmp	r3, #32
 8002370:	d1cf      	bne.n	8002312 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b004      	add	sp, #16
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002388:	e055      	b.n	8002436 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 f85f 	bl	8002454 <I2C_IsAcknowledgeFailed>
 8002396:	1e03      	subs	r3, r0, #0
 8002398:	d001      	beq.n	800239e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e053      	b.n	8002446 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2220      	movs	r2, #32
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d129      	bne.n	8002400 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2204      	movs	r2, #4
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d105      	bne.n	80023c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e03f      	b.n	8002446 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2220      	movs	r2, #32
 80023cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	491d      	ldr	r1, [pc, #116]	; (8002450 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80023da:	400a      	ands	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2241      	movs	r2, #65	; 0x41
 80023e8:	2120      	movs	r1, #32
 80023ea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2242      	movs	r2, #66	; 0x42
 80023f0:	2100      	movs	r1, #0
 80023f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2240      	movs	r2, #64	; 0x40
 80023f8:	2100      	movs	r1, #0
 80023fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e022      	b.n	8002446 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002400:	f7fe f9fe 	bl	8000800 <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	429a      	cmp	r2, r3
 800240e:	d302      	bcc.n	8002416 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	2220      	movs	r2, #32
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2241      	movs	r2, #65	; 0x41
 8002426:	2120      	movs	r1, #32
 8002428:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2240      	movs	r2, #64	; 0x40
 800242e:	2100      	movs	r1, #0
 8002430:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e007      	b.n	8002446 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2204      	movs	r2, #4
 800243e:	4013      	ands	r3, r2
 8002440:	2b04      	cmp	r3, #4
 8002442:	d1a2      	bne.n	800238a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	0018      	movs	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	b004      	add	sp, #16
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	fe00e800 	.word	0xfe00e800

08002454 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2210      	movs	r2, #16
 8002468:	4013      	ands	r3, r2
 800246a:	2b10      	cmp	r3, #16
 800246c:	d164      	bne.n	8002538 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	049b      	lsls	r3, r3, #18
 8002478:	401a      	ands	r2, r3
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	049b      	lsls	r3, r3, #18
 800247e:	429a      	cmp	r2, r3
 8002480:	d02b      	beq.n	80024da <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2180      	movs	r1, #128	; 0x80
 800248e:	01c9      	lsls	r1, r1, #7
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002494:	e021      	b.n	80024da <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	3301      	adds	r3, #1
 800249a:	d01e      	beq.n	80024da <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249c:	f7fe f9b0 	bl	8000800 <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d302      	bcc.n	80024b2 <I2C_IsAcknowledgeFailed+0x5e>
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d113      	bne.n	80024da <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	2220      	movs	r2, #32
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2241      	movs	r2, #65	; 0x41
 80024c2:	2120      	movs	r1, #32
 80024c4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2242      	movs	r2, #66	; 0x42
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2240      	movs	r2, #64	; 0x40
 80024d2:	2100      	movs	r1, #0
 80024d4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e02f      	b.n	800253a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2220      	movs	r2, #32
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d1d6      	bne.n	8002496 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2210      	movs	r2, #16
 80024ee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2220      	movs	r2, #32
 80024f6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7ff fe43 	bl	8002186 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	490e      	ldr	r1, [pc, #56]	; (8002544 <I2C_IsAcknowledgeFailed+0xf0>)
 800250c:	400a      	ands	r2, r1
 800250e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	2204      	movs	r2, #4
 8002516:	431a      	orrs	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2241      	movs	r2, #65	; 0x41
 8002520:	2120      	movs	r1, #32
 8002522:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2242      	movs	r2, #66	; 0x42
 8002528:	2100      	movs	r1, #0
 800252a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	2100      	movs	r1, #0
 8002532:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b004      	add	sp, #16
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	fe00e800 	.word	0xfe00e800

08002548 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	0008      	movs	r0, r1
 8002552:	0011      	movs	r1, r2
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	240a      	movs	r4, #10
 8002558:	193b      	adds	r3, r7, r4
 800255a:	1c02      	adds	r2, r0, #0
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	2009      	movs	r0, #9
 8002560:	183b      	adds	r3, r7, r0
 8002562:	1c0a      	adds	r2, r1, #0
 8002564:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	0d51      	lsrs	r1, r2, #21
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	00d2      	lsls	r2, r2, #3
 8002574:	400a      	ands	r2, r1
 8002576:	490e      	ldr	r1, [pc, #56]	; (80025b0 <I2C_TransferConfig+0x68>)
 8002578:	430a      	orrs	r2, r1
 800257a:	43d2      	mvns	r2, r2
 800257c:	401a      	ands	r2, r3
 800257e:	0011      	movs	r1, r2
 8002580:	193b      	adds	r3, r7, r4
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	059b      	lsls	r3, r3, #22
 8002586:	0d9a      	lsrs	r2, r3, #22
 8002588:	183b      	adds	r3, r7, r0
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	0418      	lsls	r0, r3, #16
 800258e:	23ff      	movs	r3, #255	; 0xff
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	4003      	ands	r3, r0
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	431a      	orrs	r2, r3
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	431a      	orrs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b005      	add	sp, #20
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	03ff63ff 	.word	0x03ff63ff

080025b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	000a      	movs	r2, r1
 80025be:	1cbb      	adds	r3, r7, #2
 80025c0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80025c6:	1cbb      	adds	r3, r7, #2
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	d010      	beq.n	80025f2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2242      	movs	r2, #66	; 0x42
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2241      	movs	r2, #65	; 0x41
 80025dc:	5c9b      	ldrb	r3, [r3, r2]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	001a      	movs	r2, r3
 80025e2:	2328      	movs	r3, #40	; 0x28
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b28      	cmp	r3, #40	; 0x28
 80025e8:	d003      	beq.n	80025f2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	22b0      	movs	r2, #176	; 0xb0
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80025f2:	1cbb      	adds	r3, r7, #2
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2202      	movs	r2, #2
 80025f8:	4013      	ands	r3, r2
 80025fa:	d010      	beq.n	800261e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2244      	movs	r2, #68	; 0x44
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2241      	movs	r2, #65	; 0x41
 8002608:	5c9b      	ldrb	r3, [r3, r2]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	001a      	movs	r2, r3
 800260e:	2328      	movs	r3, #40	; 0x28
 8002610:	4013      	ands	r3, r2
 8002612:	2b28      	cmp	r3, #40	; 0x28
 8002614:	d003      	beq.n	800261e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	22b0      	movs	r2, #176	; 0xb0
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800261e:	1cbb      	adds	r3, r7, #2
 8002620:	2200      	movs	r2, #0
 8002622:	5e9b      	ldrsh	r3, [r3, r2]
 8002624:	2b00      	cmp	r3, #0
 8002626:	da03      	bge.n	8002630 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	22b8      	movs	r2, #184	; 0xb8
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002630:	1cbb      	adds	r3, r7, #2
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	2b10      	cmp	r3, #16
 8002636:	d103      	bne.n	8002640 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2290      	movs	r2, #144	; 0x90
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002640:	1cbb      	adds	r3, r7, #2
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	2b20      	cmp	r3, #32
 8002646:	d103      	bne.n	8002650 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002650:	1cbb      	adds	r3, r7, #2
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d103      	bne.n	8002660 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2240      	movs	r2, #64	; 0x40
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43d9      	mvns	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	400a      	ands	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b004      	add	sp, #16
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2241      	movs	r2, #65	; 0x41
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	d138      	bne.n	8002704 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2240      	movs	r2, #64	; 0x40
 8002696:	5c9b      	ldrb	r3, [r3, r2]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800269c:	2302      	movs	r3, #2
 800269e:	e032      	b.n	8002706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2240      	movs	r2, #64	; 0x40
 80026a4:	2101      	movs	r1, #1
 80026a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2241      	movs	r2, #65	; 0x41
 80026ac:	2124      	movs	r1, #36	; 0x24
 80026ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2101      	movs	r1, #1
 80026bc:	438a      	bics	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4911      	ldr	r1, [pc, #68]	; (8002710 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2101      	movs	r1, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2241      	movs	r2, #65	; 0x41
 80026f4:	2120      	movs	r1, #32
 80026f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2240      	movs	r2, #64	; 0x40
 80026fc:	2100      	movs	r1, #0
 80026fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
  }
}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	ffffefff 	.word	0xffffefff

08002714 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2241      	movs	r2, #65	; 0x41
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	d139      	bne.n	800279e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002734:	2302      	movs	r3, #2
 8002736:	e033      	b.n	80027a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	2101      	movs	r1, #1
 800273e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2241      	movs	r2, #65	; 0x41
 8002744:	2124      	movs	r1, #36	; 0x24
 8002746:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2101      	movs	r1, #1
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002764:	4013      	ands	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2241      	movs	r2, #65	; 0x41
 800278e:	2120      	movs	r1, #32
 8002790:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2240      	movs	r2, #64	; 0x40
 8002796:	2100      	movs	r1, #0
 8002798:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
  }
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	fffff0ff 	.word	0xfffff0ff

080027ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e301      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d100      	bne.n	80027ca <HAL_RCC_OscConfig+0x1e>
 80027c8:	e08d      	b.n	80028e6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027ca:	4bc3      	ldr	r3, [pc, #780]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	220c      	movs	r2, #12
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d00e      	beq.n	80027f4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027d6:	4bc0      	ldr	r3, [pc, #768]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	220c      	movs	r2, #12
 80027dc:	4013      	ands	r3, r2
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x64>
 80027e2:	4bbd      	ldr	r3, [pc, #756]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	025b      	lsls	r3, r3, #9
 80027ea:	401a      	ands	r2, r3
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	025b      	lsls	r3, r3, #9
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d10d      	bne.n	8002810 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	4bb8      	ldr	r3, [pc, #736]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	4013      	ands	r3, r2
 80027fe:	d100      	bne.n	8002802 <HAL_RCC_OscConfig+0x56>
 8002800:	e070      	b.n	80028e4 <HAL_RCC_OscConfig+0x138>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d000      	beq.n	800280c <HAL_RCC_OscConfig+0x60>
 800280a:	e06b      	b.n	80028e4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e2d8      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_RCC_OscConfig+0x7c>
 8002818:	4baf      	ldr	r3, [pc, #700]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4bae      	ldr	r3, [pc, #696]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	0249      	lsls	r1, r1, #9
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e02f      	b.n	8002888 <HAL_RCC_OscConfig+0xdc>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10c      	bne.n	800284a <HAL_RCC_OscConfig+0x9e>
 8002830:	4ba9      	ldr	r3, [pc, #676]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4ba8      	ldr	r3, [pc, #672]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002836:	49a9      	ldr	r1, [pc, #676]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002838:	400a      	ands	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	4ba6      	ldr	r3, [pc, #664]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4ba5      	ldr	r3, [pc, #660]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002842:	49a7      	ldr	r1, [pc, #668]	; (8002ae0 <HAL_RCC_OscConfig+0x334>)
 8002844:	400a      	ands	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	e01e      	b.n	8002888 <HAL_RCC_OscConfig+0xdc>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b05      	cmp	r3, #5
 8002850:	d10e      	bne.n	8002870 <HAL_RCC_OscConfig+0xc4>
 8002852:	4ba1      	ldr	r3, [pc, #644]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4ba0      	ldr	r3, [pc, #640]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	02c9      	lsls	r1, r1, #11
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	4b9d      	ldr	r3, [pc, #628]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b9c      	ldr	r3, [pc, #624]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	0249      	lsls	r1, r1, #9
 800286a:	430a      	orrs	r2, r1
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0xdc>
 8002870:	4b99      	ldr	r3, [pc, #612]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b98      	ldr	r3, [pc, #608]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002876:	4999      	ldr	r1, [pc, #612]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 8002878:	400a      	ands	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	4b96      	ldr	r3, [pc, #600]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b95      	ldr	r3, [pc, #596]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002882:	4997      	ldr	r1, [pc, #604]	; (8002ae0 <HAL_RCC_OscConfig+0x334>)
 8002884:	400a      	ands	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d014      	beq.n	80028ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fd ffb6 	bl	8000800 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289a:	f7fd ffb1 	bl	8000800 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b64      	cmp	r3, #100	; 0x64
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e28a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ac:	4b8a      	ldr	r3, [pc, #552]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	029b      	lsls	r3, r3, #10
 80028b4:	4013      	ands	r3, r2
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0xee>
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fd ffa1 	bl	8000800 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fd ff9c 	bl	8000800 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e275      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	4b80      	ldr	r3, [pc, #512]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	029b      	lsls	r3, r3, #10
 80028de:	4013      	ands	r3, r2
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x118>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2202      	movs	r2, #2
 80028ec:	4013      	ands	r3, r2
 80028ee:	d100      	bne.n	80028f2 <HAL_RCC_OscConfig+0x146>
 80028f0:	e069      	b.n	80029c6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028f2:	4b79      	ldr	r3, [pc, #484]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	220c      	movs	r2, #12
 80028f8:	4013      	ands	r3, r2
 80028fa:	d00b      	beq.n	8002914 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028fc:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	220c      	movs	r2, #12
 8002902:	4013      	ands	r3, r2
 8002904:	2b08      	cmp	r3, #8
 8002906:	d11c      	bne.n	8002942 <HAL_RCC_OscConfig+0x196>
 8002908:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	4013      	ands	r3, r2
 8002912:	d116      	bne.n	8002942 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002914:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d005      	beq.n	800292a <HAL_RCC_OscConfig+0x17e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e24b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292a:	4b6b      	ldr	r3, [pc, #428]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	22f8      	movs	r2, #248	; 0xf8
 8002930:	4393      	bics	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	00da      	lsls	r2, r3, #3
 800293a:	4b67      	ldr	r3, [pc, #412]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002940:	e041      	b.n	80029c6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d024      	beq.n	8002994 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294a:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fd ff53 	bl	8000800 <HAL_GetTick>
 800295a:	0003      	movs	r3, r0
 800295c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002960:	f7fd ff4e 	bl	8000800 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e227      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002972:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
 800297a:	d0f1      	beq.n	8002960 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297c:	4b56      	ldr	r3, [pc, #344]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	22f8      	movs	r2, #248	; 0xf8
 8002982:	4393      	bics	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00da      	lsls	r2, r3, #3
 800298c:	4b52      	ldr	r3, [pc, #328]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e018      	b.n	80029c6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002994:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b4f      	ldr	r3, [pc, #316]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 800299a:	2101      	movs	r1, #1
 800299c:	438a      	bics	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fd ff2e 	bl	8000800 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029aa:	f7fd ff29 	bl	8000800 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e202      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029bc:	4b46      	ldr	r3, [pc, #280]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d1f1      	bne.n	80029aa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2208      	movs	r2, #8
 80029cc:	4013      	ands	r3, r2
 80029ce:	d036      	beq.n	8002a3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d019      	beq.n	8002a0c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d8:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80029da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029dc:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80029de:	2101      	movs	r1, #1
 80029e0:	430a      	orrs	r2, r1
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fd ff0c 	bl	8000800 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fd ff07 	bl	8000800 <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e1e0      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a00:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	d0f1      	beq.n	80029ee <HAL_RCC_OscConfig+0x242>
 8002a0a:	e018      	b.n	8002a3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a10:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	438a      	bics	r2, r1
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a18:	f7fd fef2 	bl	8000800 <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fd feed 	bl	8000800 <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1c6      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d1f1      	bne.n	8002a22 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2204      	movs	r2, #4
 8002a44:	4013      	ands	r3, r2
 8002a46:	d100      	bne.n	8002a4a <HAL_RCC_OscConfig+0x29e>
 8002a48:	e0b4      	b.n	8002bb4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	201f      	movs	r0, #31
 8002a4c:	183b      	adds	r3, r7, r0
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	055b      	lsls	r3, r3, #21
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d110      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	0549      	lsls	r1, r1, #21
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	61da      	str	r2, [r3, #28]
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	055b      	lsls	r3, r3, #21
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a7a:	183b      	adds	r3, r7, r0
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <HAL_RCC_OscConfig+0x338>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d11a      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_RCC_OscConfig+0x338>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <HAL_RCC_OscConfig+0x338>)
 8002a92:	2180      	movs	r1, #128	; 0x80
 8002a94:	0049      	lsls	r1, r1, #1
 8002a96:	430a      	orrs	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9a:	f7fd feb1 	bl	8000800 <HAL_GetTick>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa4:	f7fd feac 	bl	8000800 <HAL_GetTick>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e185      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_OscConfig+0x338>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x33c>
 8002aca:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	621a      	str	r2, [r3, #32]
 8002ad6:	e035      	b.n	8002b44 <HAL_RCC_OscConfig+0x398>
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	fffeffff 	.word	0xfffeffff
 8002ae0:	fffbffff 	.word	0xfffbffff
 8002ae4:	40007000 	.word	0x40007000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_OscConfig+0x35e>
 8002af0:	4bb6      	ldr	r3, [pc, #728]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002af2:	6a1a      	ldr	r2, [r3, #32]
 8002af4:	4bb5      	ldr	r3, [pc, #724]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002af6:	2101      	movs	r1, #1
 8002af8:	438a      	bics	r2, r1
 8002afa:	621a      	str	r2, [r3, #32]
 8002afc:	4bb3      	ldr	r3, [pc, #716]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	4bb2      	ldr	r3, [pc, #712]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b02:	2104      	movs	r1, #4
 8002b04:	438a      	bics	r2, r1
 8002b06:	621a      	str	r2, [r3, #32]
 8002b08:	e01c      	b.n	8002b44 <HAL_RCC_OscConfig+0x398>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x380>
 8002b12:	4bae      	ldr	r3, [pc, #696]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	4bad      	ldr	r3, [pc, #692]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b18:	2104      	movs	r1, #4
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	621a      	str	r2, [r3, #32]
 8002b1e:	4bab      	ldr	r3, [pc, #684]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b20:	6a1a      	ldr	r2, [r3, #32]
 8002b22:	4baa      	ldr	r3, [pc, #680]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b24:	2101      	movs	r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	621a      	str	r2, [r3, #32]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0x398>
 8002b2c:	4ba7      	ldr	r3, [pc, #668]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b2e:	6a1a      	ldr	r2, [r3, #32]
 8002b30:	4ba6      	ldr	r3, [pc, #664]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b32:	2101      	movs	r1, #1
 8002b34:	438a      	bics	r2, r1
 8002b36:	621a      	str	r2, [r3, #32]
 8002b38:	4ba4      	ldr	r3, [pc, #656]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b3a:	6a1a      	ldr	r2, [r3, #32]
 8002b3c:	4ba3      	ldr	r3, [pc, #652]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b3e:	2104      	movs	r1, #4
 8002b40:	438a      	bics	r2, r1
 8002b42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d014      	beq.n	8002b76 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4c:	f7fd fe58 	bl	8000800 <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	e009      	b.n	8002b6a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fd fe53 	bl	8000800 <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	4a9b      	ldr	r2, [pc, #620]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e12b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6a:	4b98      	ldr	r3, [pc, #608]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	4013      	ands	r3, r2
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x3aa>
 8002b74:	e013      	b.n	8002b9e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7fd fe43 	bl	8000800 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7e:	e009      	b.n	8002b94 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fd fe3e 	bl	8000800 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	4a91      	ldr	r2, [pc, #580]	; (8002dd0 <HAL_RCC_OscConfig+0x624>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e116      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b94:	4b8d      	ldr	r3, [pc, #564]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b9e:	231f      	movs	r3, #31
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba8:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	4b87      	ldr	r3, [pc, #540]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002bae:	4989      	ldr	r1, [pc, #548]	; (8002dd4 <HAL_RCC_OscConfig+0x628>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d063      	beq.n	8002c86 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d12a      	bne.n	8002c1c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bc6:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bca:	4b80      	ldr	r3, [pc, #512]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002bcc:	2104      	movs	r1, #4
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002bd2:	4b7e      	ldr	r3, [pc, #504]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd6:	4b7d      	ldr	r3, [pc, #500]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7fd fe0f 	bl	8000800 <HAL_GetTick>
 8002be2:	0003      	movs	r3, r0
 8002be4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002be8:	f7fd fe0a 	bl	8000800 <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e0e3      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bfa:	4b74      	ldr	r3, [pc, #464]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfe:	2202      	movs	r2, #2
 8002c00:	4013      	ands	r3, r2
 8002c02:	d0f1      	beq.n	8002be8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c04:	4b71      	ldr	r3, [pc, #452]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c08:	22f8      	movs	r2, #248	; 0xf8
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	00da      	lsls	r2, r3, #3
 8002c14:	4b6d      	ldr	r3, [pc, #436]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c16:	430a      	orrs	r2, r1
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
 8002c1a:	e034      	b.n	8002c86 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	3305      	adds	r3, #5
 8002c22:	d111      	bne.n	8002c48 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c24:	4b69      	ldr	r3, [pc, #420]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c28:	4b68      	ldr	r3, [pc, #416]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c30:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	22f8      	movs	r2, #248	; 0xf8
 8002c36:	4393      	bics	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	00da      	lsls	r2, r3, #3
 8002c40:	4b62      	ldr	r3, [pc, #392]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c42:	430a      	orrs	r2, r1
 8002c44:	635a      	str	r2, [r3, #52]	; 0x34
 8002c46:	e01e      	b.n	8002c86 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c48:	4b60      	ldr	r3, [pc, #384]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4c:	4b5f      	ldr	r3, [pc, #380]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c4e:	2104      	movs	r1, #4
 8002c50:	430a      	orrs	r2, r1
 8002c52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c54:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c58:	4b5c      	ldr	r3, [pc, #368]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	438a      	bics	r2, r1
 8002c5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fd fdce 	bl	8000800 <HAL_GetTick>
 8002c64:	0003      	movs	r3, r0
 8002c66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c6a:	f7fd fdc9 	bl	8000800 <HAL_GetTick>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0a2      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d1f1      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d100      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4e4>
 8002c8e:	e097      	b.n	8002dc0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c90:	4b4e      	ldr	r3, [pc, #312]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	220c      	movs	r2, #12
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d100      	bne.n	8002c9e <HAL_RCC_OscConfig+0x4f2>
 8002c9c:	e06b      	b.n	8002d76 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d14c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca6:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b48      	ldr	r3, [pc, #288]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002cac:	494a      	ldr	r1, [pc, #296]	; (8002dd8 <HAL_RCC_OscConfig+0x62c>)
 8002cae:	400a      	ands	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fd fda5 	bl	8000800 <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fd fda0 	bl	8000800 <HAL_GetTick>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e079      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cce:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	049b      	lsls	r3, r3, #18
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cda:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	220f      	movs	r2, #15
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce8:	4b38      	ldr	r3, [pc, #224]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a3a      	ldr	r2, [pc, #232]	; (8002ddc <HAL_RCC_OscConfig+0x630>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	431a      	orrs	r2, r3
 8002d02:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d08:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	0449      	lsls	r1, r1, #17
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fd fd73 	bl	8000800 <HAL_GetTick>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fd fd6e 	bl	8000800 <HAL_GetTick>
 8002d24:	0002      	movs	r2, r0
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e047      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	049b      	lsls	r3, r3, #18
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x574>
 8002d3e:	e03f      	b.n	8002dc0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002d46:	4924      	ldr	r1, [pc, #144]	; (8002dd8 <HAL_RCC_OscConfig+0x62c>)
 8002d48:	400a      	ands	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fd fd58 	bl	8000800 <HAL_GetTick>
 8002d50:	0003      	movs	r3, r0
 8002d52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d56:	f7fd fd53 	bl	8000800 <HAL_GetTick>
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e02c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d68:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	049b      	lsls	r3, r3, #18
 8002d70:	4013      	ands	r3, r2
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x5aa>
 8002d74:	e024      	b.n	8002dc0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e01f      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_RCC_OscConfig+0x620>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	025b      	lsls	r3, r3, #9
 8002d94:	401a      	ands	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d10e      	bne.n	8002dbc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	220f      	movs	r2, #15
 8002da2:	401a      	ands	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	23f0      	movs	r3, #240	; 0xf0
 8002db0:	039b      	lsls	r3, r3, #14
 8002db2:	401a      	ands	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b008      	add	sp, #32
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	00001388 	.word	0x00001388
 8002dd4:	efffffff 	.word	0xefffffff
 8002dd8:	feffffff 	.word	0xfeffffff
 8002ddc:	ffc2ffff 	.word	0xffc2ffff

08002de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b3      	b.n	8002f5c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <HAL_RCC_ClockConfig+0x184>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d911      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <HAL_RCC_ClockConfig+0x184>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	4393      	bics	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <HAL_RCC_ClockConfig+0x184>)
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_ClockConfig+0x184>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e09a      	b.n	8002f5c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d015      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2204      	movs	r2, #4
 8002e36:	4013      	ands	r3, r2
 8002e38:	d006      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e3a:	4b4b      	ldr	r3, [pc, #300]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002e40:	21e0      	movs	r1, #224	; 0xe0
 8002e42:	00c9      	lsls	r1, r1, #3
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	22f0      	movs	r2, #240	; 0xf0
 8002e4e:	4393      	bics	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2201      	movs	r2, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	d040      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b3e      	ldr	r3, [pc, #248]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	029b      	lsls	r3, r3, #10
 8002e76:	4013      	ands	r3, r2
 8002e78:	d114      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06e      	b.n	8002f5c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	049b      	lsls	r3, r3, #18
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e062      	b.n	8002f5c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e05b      	b.n	8002f5c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea4:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	4393      	bics	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7fd fca2 	bl	8000800 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec0:	e009      	b.n	8002ed6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec2:	f7fd fc9d 	bl	8000800 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <HAL_RCC_ClockConfig+0x18c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e042      	b.n	8002f5c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	220c      	movs	r2, #12
 8002edc:	401a      	ands	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1ec      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_RCC_ClockConfig+0x184>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2201      	movs	r2, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d211      	bcs.n	8002f1a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_RCC_ClockConfig+0x184>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2201      	movs	r2, #1
 8002efc:	4393      	bics	r3, r2
 8002efe:	0019      	movs	r1, r3
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_RCC_ClockConfig+0x184>)
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x184>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4013      	ands	r3, r2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e020      	b.n	8002f5c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	4013      	ands	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <HAL_RCC_ClockConfig+0x190>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f38:	f000 f820 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002f3c:	0001      	movs	r1, r0
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x188>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	220f      	movs	r2, #15
 8002f46:	4013      	ands	r3, r2
 8002f48:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <HAL_RCC_ClockConfig+0x194>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	000a      	movs	r2, r1
 8002f4e:	40da      	lsrs	r2, r3
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_ClockConfig+0x198>)
 8002f52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fd fc0d 	bl	8000774 <HAL_InitTick>
  
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b004      	add	sp, #16
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	00001388 	.word	0x00001388
 8002f70:	fffff8ff 	.word	0xfffff8ff
 8002f74:	08003290 	.word	0x08003290
 8002f78:	20000004 	.word	0x20000004

08002f7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b08f      	sub	sp, #60	; 0x3c
 8002f80:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002f82:	2314      	movs	r3, #20
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	4a2b      	ldr	r2, [pc, #172]	; (8003034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f8a:	c313      	stmia	r3!, {r0, r1, r4}
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	4a29      	ldr	r2, [pc, #164]	; (8003038 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f94:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f96:	c313      	stmia	r3!, {r0, r1, r4}
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	220c      	movs	r2, #12
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d002      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x4a>
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d003      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x50>
 8002fc4:	e02d      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fca:	e02d      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	0c9b      	lsrs	r3, r3, #18
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2214      	movs	r2, #20
 8002fd6:	18ba      	adds	r2, r7, r2
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	1d3a      	adds	r2, r7, #4
 8002fe6:	5cd3      	ldrb	r3, [r2, r3]
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	025b      	lsls	r3, r3, #9
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d009      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff6:	4812      	ldr	r0, [pc, #72]	; (8003040 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ff8:	f7fd f886 	bl	8000108 <__udivsi3>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	001a      	movs	r2, r3
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	4353      	muls	r3, r2
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
 8003006:	e009      	b.n	800301c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800300a:	000a      	movs	r2, r1
 800300c:	0152      	lsls	r2, r2, #5
 800300e:	1a52      	subs	r2, r2, r1
 8003010:	0193      	lsls	r3, r2, #6
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	185b      	adds	r3, r3, r1
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003020:	e002      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003026:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b00f      	add	sp, #60	; 0x3c
 8003030:	bd90      	pop	{r4, r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	08003270 	.word	0x08003270
 8003038:	08003280 	.word	0x08003280
 800303c:	40021000 	.word	0x40021000
 8003040:	007a1200 	.word	0x007a1200

08003044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	025b      	lsls	r3, r3, #9
 800305c:	4013      	ands	r3, r2
 800305e:	d100      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003060:	e08e      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003062:	2017      	movs	r0, #23
 8003064:	183b      	adds	r3, r7, r0
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306a:	4b5f      	ldr	r3, [pc, #380]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	055b      	lsls	r3, r3, #21
 8003072:	4013      	ands	r3, r2
 8003074:	d110      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	4b5c      	ldr	r3, [pc, #368]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	4b5b      	ldr	r3, [pc, #364]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	0549      	lsls	r1, r1, #21
 8003080:	430a      	orrs	r2, r1
 8003082:	61da      	str	r2, [r3, #28]
 8003084:	4b58      	ldr	r3, [pc, #352]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	055b      	lsls	r3, r3, #21
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003092:	183b      	adds	r3, r7, r0
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b54      	ldr	r3, [pc, #336]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	d11a      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a4:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b50      	ldr	r3, [pc, #320]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	0049      	lsls	r1, r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b2:	f7fd fba5 	bl	8000800 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	e008      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030bc:	f7fd fba0 	bl	8000800 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	; 0x64
 80030c8:	d901      	bls.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e087      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4013      	ands	r3, r2
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030da:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030dc:	6a1a      	ldr	r2, [r3, #32]
 80030de:	23c0      	movs	r3, #192	; 0xc0
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4013      	ands	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d034      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	23c0      	movs	r3, #192	; 0xc0
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4013      	ands	r3, r2
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d02c      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030fc:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4a3b      	ldr	r2, [pc, #236]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003102:	4013      	ands	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003106:	4b38      	ldr	r3, [pc, #224]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003108:	6a1a      	ldr	r2, [r3, #32]
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	0249      	lsls	r1, r1, #9
 8003110:	430a      	orrs	r2, r1
 8003112:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003114:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003116:	6a1a      	ldr	r2, [r3, #32]
 8003118:	4b33      	ldr	r3, [pc, #204]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800311a:	4936      	ldr	r1, [pc, #216]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800311c:	400a      	ands	r2, r1
 800311e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	4013      	ands	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fd fb67 	bl	8000800 <HAL_GetTick>
 8003132:	0003      	movs	r3, r0
 8003134:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003136:	e009      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7fd fb62 	bl	8000800 <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	4a2d      	ldr	r2, [pc, #180]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e048      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	2202      	movs	r2, #2
 8003152:	4013      	ands	r3, r2
 8003154:	d0f0      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003156:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800315c:	4013      	ands	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003166:	430a      	orrs	r2, r1
 8003168:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800316a:	2317      	movs	r3, #23
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800317a:	4920      	ldr	r1, [pc, #128]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800317c:	400a      	ands	r2, r1
 800317e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	4013      	ands	r3, r2
 8003188:	d009      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	2203      	movs	r2, #3
 8003190:	4393      	bics	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800319a:	430a      	orrs	r2, r1
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2220      	movs	r2, #32
 80031a4:	4013      	ands	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	2210      	movs	r2, #16
 80031ae:	4393      	bics	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031b8:	430a      	orrs	r2, r1
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4013      	ands	r3, r2
 80031c6:	d009      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	2240      	movs	r2, #64	; 0x40
 80031ce:	4393      	bics	r3, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031d8:	430a      	orrs	r2, r1
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b006      	add	sp, #24
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
 80031f0:	fffffcff 	.word	0xfffffcff
 80031f4:	fffeffff 	.word	0xfffeffff
 80031f8:	00001388 	.word	0x00001388
 80031fc:	efffffff 	.word	0xefffffff

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	2600      	movs	r6, #0
 8003204:	4d0c      	ldr	r5, [pc, #48]	; (8003238 <__libc_init_array+0x38>)
 8003206:	4c0d      	ldr	r4, [pc, #52]	; (800323c <__libc_init_array+0x3c>)
 8003208:	1b64      	subs	r4, r4, r5
 800320a:	10a4      	asrs	r4, r4, #2
 800320c:	42a6      	cmp	r6, r4
 800320e:	d109      	bne.n	8003224 <__libc_init_array+0x24>
 8003210:	2600      	movs	r6, #0
 8003212:	f000 f821 	bl	8003258 <_init>
 8003216:	4d0a      	ldr	r5, [pc, #40]	; (8003240 <__libc_init_array+0x40>)
 8003218:	4c0a      	ldr	r4, [pc, #40]	; (8003244 <__libc_init_array+0x44>)
 800321a:	1b64      	subs	r4, r4, r5
 800321c:	10a4      	asrs	r4, r4, #2
 800321e:	42a6      	cmp	r6, r4
 8003220:	d105      	bne.n	800322e <__libc_init_array+0x2e>
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	00b3      	lsls	r3, r6, #2
 8003226:	58eb      	ldr	r3, [r5, r3]
 8003228:	4798      	blx	r3
 800322a:	3601      	adds	r6, #1
 800322c:	e7ee      	b.n	800320c <__libc_init_array+0xc>
 800322e:	00b3      	lsls	r3, r6, #2
 8003230:	58eb      	ldr	r3, [r5, r3]
 8003232:	4798      	blx	r3
 8003234:	3601      	adds	r6, #1
 8003236:	e7f2      	b.n	800321e <__libc_init_array+0x1e>
 8003238:	080032a0 	.word	0x080032a0
 800323c:	080032a0 	.word	0x080032a0
 8003240:	080032a0 	.word	0x080032a0
 8003244:	080032a4 	.word	0x080032a4

08003248 <memset>:
 8003248:	0003      	movs	r3, r0
 800324a:	1882      	adds	r2, r0, r2
 800324c:	4293      	cmp	r3, r2
 800324e:	d100      	bne.n	8003252 <memset+0xa>
 8003250:	4770      	bx	lr
 8003252:	7019      	strb	r1, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	e7f9      	b.n	800324c <memset+0x4>

08003258 <_init>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr

08003264 <_fini>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr
