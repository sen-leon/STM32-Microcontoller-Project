
LeonsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000941c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  080094e0  080094e0  000194e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a58  08009a58  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009a58  08009a58  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a58  08009a58  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a58  08009a58  00019a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a5c  08009a5c  00019a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  200001ec  08009c4c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08009c4c  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc2a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f51  00000000  00000000  0002ce3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0002ed90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  0002fad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012fc3  00000000  00000000  00030718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f836  00000000  00000000  000436db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fb32  00000000  00000000  00052f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004200  00000000  00000000  000c2a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080094c4 	.word	0x080094c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	080094c4 	.word	0x080094c4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa1f 	bl	8001880 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f96f 	bl	8001730 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa11 	bl	8001880 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa07 	bl	8001880 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f997 	bl	80017b4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f98d 	bl	80017b4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46c6      	mov	lr, r8
 80004ac:	0243      	lsls	r3, r0, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	024e      	lsls	r6, r1, #9
 80004b2:	0045      	lsls	r5, r0, #1
 80004b4:	004f      	lsls	r7, r1, #1
 80004b6:	00da      	lsls	r2, r3, #3
 80004b8:	0fc4      	lsrs	r4, r0, #31
 80004ba:	469c      	mov	ip, r3
 80004bc:	0a70      	lsrs	r0, r6, #9
 80004be:	4690      	mov	r8, r2
 80004c0:	b500      	push	{lr}
 80004c2:	0e2d      	lsrs	r5, r5, #24
 80004c4:	0e3f      	lsrs	r7, r7, #24
 80004c6:	0fc9      	lsrs	r1, r1, #31
 80004c8:	09b6      	lsrs	r6, r6, #6
 80004ca:	428c      	cmp	r4, r1
 80004cc:	d04b      	beq.n	8000566 <__aeabi_fadd+0xbe>
 80004ce:	1bea      	subs	r2, r5, r7
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	dd36      	ble.n	8000542 <__aeabi_fadd+0x9a>
 80004d4:	2f00      	cmp	r7, #0
 80004d6:	d061      	beq.n	800059c <__aeabi_fadd+0xf4>
 80004d8:	2dff      	cmp	r5, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0x36>
 80004dc:	e0ad      	b.n	800063a <__aeabi_fadd+0x192>
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	04db      	lsls	r3, r3, #19
 80004e2:	431e      	orrs	r6, r3
 80004e4:	2a1b      	cmp	r2, #27
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_fadd+0x42>
 80004e8:	e0d3      	b.n	8000692 <__aeabi_fadd+0x1ea>
 80004ea:	2001      	movs	r0, #1
 80004ec:	4643      	mov	r3, r8
 80004ee:	1a18      	subs	r0, r3, r0
 80004f0:	0143      	lsls	r3, r0, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0x4e>
 80004f4:	e08c      	b.n	8000610 <__aeabi_fadd+0x168>
 80004f6:	0180      	lsls	r0, r0, #6
 80004f8:	0987      	lsrs	r7, r0, #6
 80004fa:	0038      	movs	r0, r7
 80004fc:	f002 f99c 	bl	8002838 <__clzsi2>
 8000500:	3805      	subs	r0, #5
 8000502:	4087      	lsls	r7, r0
 8000504:	4285      	cmp	r5, r0
 8000506:	dc00      	bgt.n	800050a <__aeabi_fadd+0x62>
 8000508:	e0b6      	b.n	8000678 <__aeabi_fadd+0x1d0>
 800050a:	1a2d      	subs	r5, r5, r0
 800050c:	48b3      	ldr	r0, [pc, #716]	; (80007dc <__aeabi_fadd+0x334>)
 800050e:	4038      	ands	r0, r7
 8000510:	0743      	lsls	r3, r0, #29
 8000512:	d004      	beq.n	800051e <__aeabi_fadd+0x76>
 8000514:	230f      	movs	r3, #15
 8000516:	4003      	ands	r3, r0
 8000518:	2b04      	cmp	r3, #4
 800051a:	d000      	beq.n	800051e <__aeabi_fadd+0x76>
 800051c:	3004      	adds	r0, #4
 800051e:	0143      	lsls	r3, r0, #5
 8000520:	d400      	bmi.n	8000524 <__aeabi_fadd+0x7c>
 8000522:	e078      	b.n	8000616 <__aeabi_fadd+0x16e>
 8000524:	1c6a      	adds	r2, r5, #1
 8000526:	2dfe      	cmp	r5, #254	; 0xfe
 8000528:	d065      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800052a:	0180      	lsls	r0, r0, #6
 800052c:	0a43      	lsrs	r3, r0, #9
 800052e:	469c      	mov	ip, r3
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	4663      	mov	r3, ip
 8000534:	05d0      	lsls	r0, r2, #23
 8000536:	4318      	orrs	r0, r3
 8000538:	07e4      	lsls	r4, r4, #31
 800053a:	4320      	orrs	r0, r4
 800053c:	bc80      	pop	{r7}
 800053e:	46b8      	mov	r8, r7
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	2a00      	cmp	r2, #0
 8000544:	d035      	beq.n	80005b2 <__aeabi_fadd+0x10a>
 8000546:	1b7a      	subs	r2, r7, r5
 8000548:	2d00      	cmp	r5, #0
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0xa6>
 800054c:	e0af      	b.n	80006ae <__aeabi_fadd+0x206>
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0xae>
 8000554:	e0a7      	b.n	80006a6 <__aeabi_fadd+0x1fe>
 8000556:	1e53      	subs	r3, r2, #1
 8000558:	2a01      	cmp	r2, #1
 800055a:	d100      	bne.n	800055e <__aeabi_fadd+0xb6>
 800055c:	e12f      	b.n	80007be <__aeabi_fadd+0x316>
 800055e:	2aff      	cmp	r2, #255	; 0xff
 8000560:	d069      	beq.n	8000636 <__aeabi_fadd+0x18e>
 8000562:	001a      	movs	r2, r3
 8000564:	e0aa      	b.n	80006bc <__aeabi_fadd+0x214>
 8000566:	1be9      	subs	r1, r5, r7
 8000568:	2900      	cmp	r1, #0
 800056a:	dd70      	ble.n	800064e <__aeabi_fadd+0x1a6>
 800056c:	2f00      	cmp	r7, #0
 800056e:	d037      	beq.n	80005e0 <__aeabi_fadd+0x138>
 8000570:	2dff      	cmp	r5, #255	; 0xff
 8000572:	d062      	beq.n	800063a <__aeabi_fadd+0x192>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	04db      	lsls	r3, r3, #19
 8000578:	431e      	orrs	r6, r3
 800057a:	291b      	cmp	r1, #27
 800057c:	dc00      	bgt.n	8000580 <__aeabi_fadd+0xd8>
 800057e:	e0b0      	b.n	80006e2 <__aeabi_fadd+0x23a>
 8000580:	2001      	movs	r0, #1
 8000582:	4440      	add	r0, r8
 8000584:	0143      	lsls	r3, r0, #5
 8000586:	d543      	bpl.n	8000610 <__aeabi_fadd+0x168>
 8000588:	3501      	adds	r5, #1
 800058a:	2dff      	cmp	r5, #255	; 0xff
 800058c:	d033      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800058e:	2301      	movs	r3, #1
 8000590:	4a93      	ldr	r2, [pc, #588]	; (80007e0 <__aeabi_fadd+0x338>)
 8000592:	4003      	ands	r3, r0
 8000594:	0840      	lsrs	r0, r0, #1
 8000596:	4010      	ands	r0, r2
 8000598:	4318      	orrs	r0, r3
 800059a:	e7b9      	b.n	8000510 <__aeabi_fadd+0x68>
 800059c:	2e00      	cmp	r6, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0xfa>
 80005a0:	e083      	b.n	80006aa <__aeabi_fadd+0x202>
 80005a2:	1e51      	subs	r1, r2, #1
 80005a4:	2a01      	cmp	r2, #1
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x102>
 80005a8:	e0d8      	b.n	800075c <__aeabi_fadd+0x2b4>
 80005aa:	2aff      	cmp	r2, #255	; 0xff
 80005ac:	d045      	beq.n	800063a <__aeabi_fadd+0x192>
 80005ae:	000a      	movs	r2, r1
 80005b0:	e798      	b.n	80004e4 <__aeabi_fadd+0x3c>
 80005b2:	27fe      	movs	r7, #254	; 0xfe
 80005b4:	1c6a      	adds	r2, r5, #1
 80005b6:	4217      	tst	r7, r2
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x114>
 80005ba:	e086      	b.n	80006ca <__aeabi_fadd+0x222>
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x11a>
 80005c0:	e0b7      	b.n	8000732 <__aeabi_fadd+0x28a>
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x122>
 80005c8:	e0f3      	b.n	80007b2 <__aeabi_fadd+0x30a>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d0b0      	beq.n	8000532 <__aeabi_fadd+0x8a>
 80005d0:	1b98      	subs	r0, r3, r6
 80005d2:	0143      	lsls	r3, r0, #5
 80005d4:	d400      	bmi.n	80005d8 <__aeabi_fadd+0x130>
 80005d6:	e0fa      	b.n	80007ce <__aeabi_fadd+0x326>
 80005d8:	4643      	mov	r3, r8
 80005da:	000c      	movs	r4, r1
 80005dc:	1af0      	subs	r0, r6, r3
 80005de:	e797      	b.n	8000510 <__aeabi_fadd+0x68>
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0x13e>
 80005e4:	e0c8      	b.n	8000778 <__aeabi_fadd+0x2d0>
 80005e6:	1e4a      	subs	r2, r1, #1
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d100      	bne.n	80005ee <__aeabi_fadd+0x146>
 80005ec:	e0ae      	b.n	800074c <__aeabi_fadd+0x2a4>
 80005ee:	29ff      	cmp	r1, #255	; 0xff
 80005f0:	d023      	beq.n	800063a <__aeabi_fadd+0x192>
 80005f2:	0011      	movs	r1, r2
 80005f4:	e7c1      	b.n	800057a <__aeabi_fadd+0xd2>
 80005f6:	2300      	movs	r3, #0
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	469c      	mov	ip, r3
 80005fc:	e799      	b.n	8000532 <__aeabi_fadd+0x8a>
 80005fe:	21fe      	movs	r1, #254	; 0xfe
 8000600:	1c6a      	adds	r2, r5, #1
 8000602:	4211      	tst	r1, r2
 8000604:	d077      	beq.n	80006f6 <__aeabi_fadd+0x24e>
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d0f5      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800060a:	0015      	movs	r5, r2
 800060c:	4446      	add	r6, r8
 800060e:	0870      	lsrs	r0, r6, #1
 8000610:	0743      	lsls	r3, r0, #29
 8000612:	d000      	beq.n	8000616 <__aeabi_fadd+0x16e>
 8000614:	e77e      	b.n	8000514 <__aeabi_fadd+0x6c>
 8000616:	08c3      	lsrs	r3, r0, #3
 8000618:	2dff      	cmp	r5, #255	; 0xff
 800061a:	d00e      	beq.n	800063a <__aeabi_fadd+0x192>
 800061c:	025b      	lsls	r3, r3, #9
 800061e:	0a5b      	lsrs	r3, r3, #9
 8000620:	469c      	mov	ip, r3
 8000622:	b2ea      	uxtb	r2, r5
 8000624:	e785      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000626:	2e00      	cmp	r6, #0
 8000628:	d007      	beq.n	800063a <__aeabi_fadd+0x192>
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	4213      	tst	r3, r2
 8000630:	d003      	beq.n	800063a <__aeabi_fadd+0x192>
 8000632:	4210      	tst	r0, r2
 8000634:	d101      	bne.n	800063a <__aeabi_fadd+0x192>
 8000636:	000c      	movs	r4, r1
 8000638:	0003      	movs	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0db      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4318      	orrs	r0, r3
 8000644:	0240      	lsls	r0, r0, #9
 8000646:	0a43      	lsrs	r3, r0, #9
 8000648:	469c      	mov	ip, r3
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	e771      	b.n	8000532 <__aeabi_fadd+0x8a>
 800064e:	2900      	cmp	r1, #0
 8000650:	d0d5      	beq.n	80005fe <__aeabi_fadd+0x156>
 8000652:	1b7a      	subs	r2, r7, r5
 8000654:	2d00      	cmp	r5, #0
 8000656:	d160      	bne.n	800071a <__aeabi_fadd+0x272>
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d024      	beq.n	80006a8 <__aeabi_fadd+0x200>
 800065e:	1e53      	subs	r3, r2, #1
 8000660:	2a01      	cmp	r2, #1
 8000662:	d073      	beq.n	800074c <__aeabi_fadd+0x2a4>
 8000664:	2aff      	cmp	r2, #255	; 0xff
 8000666:	d0e7      	beq.n	8000638 <__aeabi_fadd+0x190>
 8000668:	001a      	movs	r2, r3
 800066a:	2a1b      	cmp	r2, #27
 800066c:	dc00      	bgt.n	8000670 <__aeabi_fadd+0x1c8>
 800066e:	e085      	b.n	800077c <__aeabi_fadd+0x2d4>
 8000670:	2001      	movs	r0, #1
 8000672:	003d      	movs	r5, r7
 8000674:	1980      	adds	r0, r0, r6
 8000676:	e785      	b.n	8000584 <__aeabi_fadd+0xdc>
 8000678:	2320      	movs	r3, #32
 800067a:	003a      	movs	r2, r7
 800067c:	1b45      	subs	r5, r0, r5
 800067e:	0038      	movs	r0, r7
 8000680:	3501      	adds	r5, #1
 8000682:	40ea      	lsrs	r2, r5
 8000684:	1b5d      	subs	r5, r3, r5
 8000686:	40a8      	lsls	r0, r5
 8000688:	1e43      	subs	r3, r0, #1
 800068a:	4198      	sbcs	r0, r3
 800068c:	2500      	movs	r5, #0
 800068e:	4310      	orrs	r0, r2
 8000690:	e73e      	b.n	8000510 <__aeabi_fadd+0x68>
 8000692:	2320      	movs	r3, #32
 8000694:	0030      	movs	r0, r6
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	0031      	movs	r1, r6
 800069a:	4098      	lsls	r0, r3
 800069c:	40d1      	lsrs	r1, r2
 800069e:	1e43      	subs	r3, r0, #1
 80006a0:	4198      	sbcs	r0, r3
 80006a2:	4308      	orrs	r0, r1
 80006a4:	e722      	b.n	80004ec <__aeabi_fadd+0x44>
 80006a6:	000c      	movs	r4, r1
 80006a8:	0003      	movs	r3, r0
 80006aa:	0015      	movs	r5, r2
 80006ac:	e7b4      	b.n	8000618 <__aeabi_fadd+0x170>
 80006ae:	2fff      	cmp	r7, #255	; 0xff
 80006b0:	d0c1      	beq.n	8000636 <__aeabi_fadd+0x18e>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	4640      	mov	r0, r8
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	4318      	orrs	r0, r3
 80006ba:	4680      	mov	r8, r0
 80006bc:	2a1b      	cmp	r2, #27
 80006be:	dd51      	ble.n	8000764 <__aeabi_fadd+0x2bc>
 80006c0:	2001      	movs	r0, #1
 80006c2:	000c      	movs	r4, r1
 80006c4:	003d      	movs	r5, r7
 80006c6:	1a30      	subs	r0, r6, r0
 80006c8:	e712      	b.n	80004f0 <__aeabi_fadd+0x48>
 80006ca:	4643      	mov	r3, r8
 80006cc:	1b9f      	subs	r7, r3, r6
 80006ce:	017b      	lsls	r3, r7, #5
 80006d0:	d42b      	bmi.n	800072a <__aeabi_fadd+0x282>
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80006d6:	e710      	b.n	80004fa <__aeabi_fadd+0x52>
 80006d8:	2300      	movs	r3, #0
 80006da:	2400      	movs	r4, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	469c      	mov	ip, r3
 80006e0:	e727      	b.n	8000532 <__aeabi_fadd+0x8a>
 80006e2:	2320      	movs	r3, #32
 80006e4:	0032      	movs	r2, r6
 80006e6:	0030      	movs	r0, r6
 80006e8:	40ca      	lsrs	r2, r1
 80006ea:	1a59      	subs	r1, r3, r1
 80006ec:	4088      	lsls	r0, r1
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4310      	orrs	r0, r2
 80006f4:	e745      	b.n	8000582 <__aeabi_fadd+0xda>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d14a      	bne.n	8000790 <__aeabi_fadd+0x2e8>
 80006fa:	4643      	mov	r3, r8
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d063      	beq.n	80007c8 <__aeabi_fadd+0x320>
 8000700:	2200      	movs	r2, #0
 8000702:	2e00      	cmp	r6, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x260>
 8000706:	e714      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000708:	0030      	movs	r0, r6
 800070a:	4440      	add	r0, r8
 800070c:	0143      	lsls	r3, r0, #5
 800070e:	d400      	bmi.n	8000712 <__aeabi_fadd+0x26a>
 8000710:	e77e      	b.n	8000610 <__aeabi_fadd+0x168>
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <__aeabi_fadd+0x334>)
 8000714:	3501      	adds	r5, #1
 8000716:	4018      	ands	r0, r3
 8000718:	e77a      	b.n	8000610 <__aeabi_fadd+0x168>
 800071a:	2fff      	cmp	r7, #255	; 0xff
 800071c:	d08c      	beq.n	8000638 <__aeabi_fadd+0x190>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	4641      	mov	r1, r8
 8000722:	04db      	lsls	r3, r3, #19
 8000724:	4319      	orrs	r1, r3
 8000726:	4688      	mov	r8, r1
 8000728:	e79f      	b.n	800066a <__aeabi_fadd+0x1c2>
 800072a:	4643      	mov	r3, r8
 800072c:	000c      	movs	r4, r1
 800072e:	1af7      	subs	r7, r6, r3
 8000730:	e6e3      	b.n	80004fa <__aeabi_fadd+0x52>
 8000732:	4642      	mov	r2, r8
 8000734:	2a00      	cmp	r2, #0
 8000736:	d000      	beq.n	800073a <__aeabi_fadd+0x292>
 8000738:	e775      	b.n	8000626 <__aeabi_fadd+0x17e>
 800073a:	2e00      	cmp	r6, #0
 800073c:	d000      	beq.n	8000740 <__aeabi_fadd+0x298>
 800073e:	e77a      	b.n	8000636 <__aeabi_fadd+0x18e>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	03db      	lsls	r3, r3, #15
 8000744:	2400      	movs	r4, #0
 8000746:	469c      	mov	ip, r3
 8000748:	22ff      	movs	r2, #255	; 0xff
 800074a:	e6f2      	b.n	8000532 <__aeabi_fadd+0x8a>
 800074c:	0030      	movs	r0, r6
 800074e:	4440      	add	r0, r8
 8000750:	2501      	movs	r5, #1
 8000752:	0143      	lsls	r3, r0, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fadd+0x2b0>
 8000756:	e75b      	b.n	8000610 <__aeabi_fadd+0x168>
 8000758:	2502      	movs	r5, #2
 800075a:	e718      	b.n	800058e <__aeabi_fadd+0xe6>
 800075c:	4643      	mov	r3, r8
 800075e:	2501      	movs	r5, #1
 8000760:	1b98      	subs	r0, r3, r6
 8000762:	e6c5      	b.n	80004f0 <__aeabi_fadd+0x48>
 8000764:	2320      	movs	r3, #32
 8000766:	4644      	mov	r4, r8
 8000768:	4640      	mov	r0, r8
 800076a:	40d4      	lsrs	r4, r2
 800076c:	1a9a      	subs	r2, r3, r2
 800076e:	4090      	lsls	r0, r2
 8000770:	1e43      	subs	r3, r0, #1
 8000772:	4198      	sbcs	r0, r3
 8000774:	4320      	orrs	r0, r4
 8000776:	e7a4      	b.n	80006c2 <__aeabi_fadd+0x21a>
 8000778:	000d      	movs	r5, r1
 800077a:	e74d      	b.n	8000618 <__aeabi_fadd+0x170>
 800077c:	2320      	movs	r3, #32
 800077e:	4641      	mov	r1, r8
 8000780:	4640      	mov	r0, r8
 8000782:	40d1      	lsrs	r1, r2
 8000784:	1a9a      	subs	r2, r3, r2
 8000786:	4090      	lsls	r0, r2
 8000788:	1e43      	subs	r3, r0, #1
 800078a:	4198      	sbcs	r0, r3
 800078c:	4308      	orrs	r0, r1
 800078e:	e770      	b.n	8000672 <__aeabi_fadd+0x1ca>
 8000790:	4642      	mov	r2, r8
 8000792:	2a00      	cmp	r2, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x2f0>
 8000796:	e74f      	b.n	8000638 <__aeabi_fadd+0x190>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2f6>
 800079c:	e74d      	b.n	800063a <__aeabi_fadd+0x192>
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4213      	tst	r3, r2
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x300>
 80007a6:	e748      	b.n	800063a <__aeabi_fadd+0x192>
 80007a8:	4210      	tst	r0, r2
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0x306>
 80007ac:	e745      	b.n	800063a <__aeabi_fadd+0x192>
 80007ae:	0003      	movs	r3, r0
 80007b0:	e743      	b.n	800063a <__aeabi_fadd+0x192>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d090      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80007b6:	000c      	movs	r4, r1
 80007b8:	4684      	mov	ip, r0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e6b9      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007be:	4643      	mov	r3, r8
 80007c0:	000c      	movs	r4, r1
 80007c2:	1af0      	subs	r0, r6, r3
 80007c4:	3501      	adds	r5, #1
 80007c6:	e693      	b.n	80004f0 <__aeabi_fadd+0x48>
 80007c8:	4684      	mov	ip, r0
 80007ca:	2200      	movs	r2, #0
 80007cc:	e6b1      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fadd+0x32c>
 80007d2:	e71d      	b.n	8000610 <__aeabi_fadd+0x168>
 80007d4:	2300      	movs	r3, #0
 80007d6:	2400      	movs	r4, #0
 80007d8:	469c      	mov	ip, r3
 80007da:	e6aa      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007dc:	fbffffff 	.word	0xfbffffff
 80007e0:	7dffffff 	.word	0x7dffffff

080007e4 <__aeabi_fmul>:
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	464f      	mov	r7, r9
 80007e8:	4646      	mov	r6, r8
 80007ea:	46d6      	mov	lr, sl
 80007ec:	0244      	lsls	r4, r0, #9
 80007ee:	0045      	lsls	r5, r0, #1
 80007f0:	b5c0      	push	{r6, r7, lr}
 80007f2:	0a64      	lsrs	r4, r4, #9
 80007f4:	1c0f      	adds	r7, r1, #0
 80007f6:	0e2d      	lsrs	r5, r5, #24
 80007f8:	0fc6      	lsrs	r6, r0, #31
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fmul+0x1c>
 80007fe:	e08d      	b.n	800091c <__aeabi_fmul+0x138>
 8000800:	2dff      	cmp	r5, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fmul+0x22>
 8000804:	e092      	b.n	800092c <__aeabi_fmul+0x148>
 8000806:	2300      	movs	r3, #0
 8000808:	2080      	movs	r0, #128	; 0x80
 800080a:	4699      	mov	r9, r3
 800080c:	469a      	mov	sl, r3
 800080e:	00e4      	lsls	r4, r4, #3
 8000810:	04c0      	lsls	r0, r0, #19
 8000812:	4304      	orrs	r4, r0
 8000814:	3d7f      	subs	r5, #127	; 0x7f
 8000816:	0278      	lsls	r0, r7, #9
 8000818:	0a43      	lsrs	r3, r0, #9
 800081a:	4698      	mov	r8, r3
 800081c:	007b      	lsls	r3, r7, #1
 800081e:	0e1b      	lsrs	r3, r3, #24
 8000820:	0fff      	lsrs	r7, r7, #31
 8000822:	2b00      	cmp	r3, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fmul+0x44>
 8000826:	e070      	b.n	800090a <__aeabi_fmul+0x126>
 8000828:	2bff      	cmp	r3, #255	; 0xff
 800082a:	d100      	bne.n	800082e <__aeabi_fmul+0x4a>
 800082c:	e086      	b.n	800093c <__aeabi_fmul+0x158>
 800082e:	4642      	mov	r2, r8
 8000830:	00d0      	lsls	r0, r2, #3
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	3b7f      	subs	r3, #127	; 0x7f
 8000836:	18ed      	adds	r5, r5, r3
 8000838:	2300      	movs	r3, #0
 800083a:	04d2      	lsls	r2, r2, #19
 800083c:	4302      	orrs	r2, r0
 800083e:	4690      	mov	r8, r2
 8000840:	469c      	mov	ip, r3
 8000842:	0031      	movs	r1, r6
 8000844:	464b      	mov	r3, r9
 8000846:	4079      	eors	r1, r7
 8000848:	1c68      	adds	r0, r5, #1
 800084a:	2b0f      	cmp	r3, #15
 800084c:	d81c      	bhi.n	8000888 <__aeabi_fmul+0xa4>
 800084e:	4a76      	ldr	r2, [pc, #472]	; (8000a28 <__aeabi_fmul+0x244>)
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	58d3      	ldr	r3, [r2, r3]
 8000854:	469f      	mov	pc, r3
 8000856:	0039      	movs	r1, r7
 8000858:	4644      	mov	r4, r8
 800085a:	46e2      	mov	sl, ip
 800085c:	4653      	mov	r3, sl
 800085e:	2b02      	cmp	r3, #2
 8000860:	d00f      	beq.n	8000882 <__aeabi_fmul+0x9e>
 8000862:	2b03      	cmp	r3, #3
 8000864:	d100      	bne.n	8000868 <__aeabi_fmul+0x84>
 8000866:	e0d7      	b.n	8000a18 <__aeabi_fmul+0x234>
 8000868:	2b01      	cmp	r3, #1
 800086a:	d137      	bne.n	80008dc <__aeabi_fmul+0xf8>
 800086c:	2000      	movs	r0, #0
 800086e:	2400      	movs	r4, #0
 8000870:	05c0      	lsls	r0, r0, #23
 8000872:	4320      	orrs	r0, r4
 8000874:	07c9      	lsls	r1, r1, #31
 8000876:	4308      	orrs	r0, r1
 8000878:	bce0      	pop	{r5, r6, r7}
 800087a:	46ba      	mov	sl, r7
 800087c:	46b1      	mov	r9, r6
 800087e:	46a8      	mov	r8, r5
 8000880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000882:	20ff      	movs	r0, #255	; 0xff
 8000884:	2400      	movs	r4, #0
 8000886:	e7f3      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000888:	0c26      	lsrs	r6, r4, #16
 800088a:	0424      	lsls	r4, r4, #16
 800088c:	0c22      	lsrs	r2, r4, #16
 800088e:	4644      	mov	r4, r8
 8000890:	0424      	lsls	r4, r4, #16
 8000892:	0c24      	lsrs	r4, r4, #16
 8000894:	4643      	mov	r3, r8
 8000896:	0027      	movs	r7, r4
 8000898:	0c1b      	lsrs	r3, r3, #16
 800089a:	4357      	muls	r7, r2
 800089c:	4374      	muls	r4, r6
 800089e:	435a      	muls	r2, r3
 80008a0:	435e      	muls	r6, r3
 80008a2:	1912      	adds	r2, r2, r4
 80008a4:	0c3b      	lsrs	r3, r7, #16
 80008a6:	189b      	adds	r3, r3, r2
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d903      	bls.n	80008b4 <__aeabi_fmul+0xd0>
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	0252      	lsls	r2, r2, #9
 80008b0:	4694      	mov	ip, r2
 80008b2:	4466      	add	r6, ip
 80008b4:	043f      	lsls	r7, r7, #16
 80008b6:	041a      	lsls	r2, r3, #16
 80008b8:	0c3f      	lsrs	r7, r7, #16
 80008ba:	19d2      	adds	r2, r2, r7
 80008bc:	0194      	lsls	r4, r2, #6
 80008be:	1e67      	subs	r7, r4, #1
 80008c0:	41bc      	sbcs	r4, r7
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	0e92      	lsrs	r2, r2, #26
 80008c6:	199b      	adds	r3, r3, r6
 80008c8:	4314      	orrs	r4, r2
 80008ca:	019b      	lsls	r3, r3, #6
 80008cc:	431c      	orrs	r4, r3
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_fmul+0xf0>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_fmul+0x228>
 80008d4:	2301      	movs	r3, #1
 80008d6:	0862      	lsrs	r2, r4, #1
 80008d8:	401c      	ands	r4, r3
 80008da:	4314      	orrs	r4, r2
 80008dc:	0002      	movs	r2, r0
 80008de:	327f      	adds	r2, #127	; 0x7f
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	dd64      	ble.n	80009ae <__aeabi_fmul+0x1ca>
 80008e4:	0763      	lsls	r3, r4, #29
 80008e6:	d004      	beq.n	80008f2 <__aeabi_fmul+0x10e>
 80008e8:	230f      	movs	r3, #15
 80008ea:	4023      	ands	r3, r4
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d000      	beq.n	80008f2 <__aeabi_fmul+0x10e>
 80008f0:	3404      	adds	r4, #4
 80008f2:	0123      	lsls	r3, r4, #4
 80008f4:	d503      	bpl.n	80008fe <__aeabi_fmul+0x11a>
 80008f6:	0002      	movs	r2, r0
 80008f8:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <__aeabi_fmul+0x248>)
 80008fa:	3280      	adds	r2, #128	; 0x80
 80008fc:	401c      	ands	r4, r3
 80008fe:	2afe      	cmp	r2, #254	; 0xfe
 8000900:	dcbf      	bgt.n	8000882 <__aeabi_fmul+0x9e>
 8000902:	01a4      	lsls	r4, r4, #6
 8000904:	0a64      	lsrs	r4, r4, #9
 8000906:	b2d0      	uxtb	r0, r2
 8000908:	e7b2      	b.n	8000870 <__aeabi_fmul+0x8c>
 800090a:	4643      	mov	r3, r8
 800090c:	2b00      	cmp	r3, #0
 800090e:	d13d      	bne.n	800098c <__aeabi_fmul+0x1a8>
 8000910:	464a      	mov	r2, r9
 8000912:	3301      	adds	r3, #1
 8000914:	431a      	orrs	r2, r3
 8000916:	4691      	mov	r9, r2
 8000918:	469c      	mov	ip, r3
 800091a:	e792      	b.n	8000842 <__aeabi_fmul+0x5e>
 800091c:	2c00      	cmp	r4, #0
 800091e:	d129      	bne.n	8000974 <__aeabi_fmul+0x190>
 8000920:	2304      	movs	r3, #4
 8000922:	4699      	mov	r9, r3
 8000924:	3b03      	subs	r3, #3
 8000926:	2500      	movs	r5, #0
 8000928:	469a      	mov	sl, r3
 800092a:	e774      	b.n	8000816 <__aeabi_fmul+0x32>
 800092c:	2c00      	cmp	r4, #0
 800092e:	d11b      	bne.n	8000968 <__aeabi_fmul+0x184>
 8000930:	2308      	movs	r3, #8
 8000932:	4699      	mov	r9, r3
 8000934:	3b06      	subs	r3, #6
 8000936:	25ff      	movs	r5, #255	; 0xff
 8000938:	469a      	mov	sl, r3
 800093a:	e76c      	b.n	8000816 <__aeabi_fmul+0x32>
 800093c:	4643      	mov	r3, r8
 800093e:	35ff      	adds	r5, #255	; 0xff
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10b      	bne.n	800095c <__aeabi_fmul+0x178>
 8000944:	2302      	movs	r3, #2
 8000946:	464a      	mov	r2, r9
 8000948:	431a      	orrs	r2, r3
 800094a:	4691      	mov	r9, r2
 800094c:	469c      	mov	ip, r3
 800094e:	e778      	b.n	8000842 <__aeabi_fmul+0x5e>
 8000950:	4653      	mov	r3, sl
 8000952:	0031      	movs	r1, r6
 8000954:	2b02      	cmp	r3, #2
 8000956:	d000      	beq.n	800095a <__aeabi_fmul+0x176>
 8000958:	e783      	b.n	8000862 <__aeabi_fmul+0x7e>
 800095a:	e792      	b.n	8000882 <__aeabi_fmul+0x9e>
 800095c:	2303      	movs	r3, #3
 800095e:	464a      	mov	r2, r9
 8000960:	431a      	orrs	r2, r3
 8000962:	4691      	mov	r9, r2
 8000964:	469c      	mov	ip, r3
 8000966:	e76c      	b.n	8000842 <__aeabi_fmul+0x5e>
 8000968:	230c      	movs	r3, #12
 800096a:	4699      	mov	r9, r3
 800096c:	3b09      	subs	r3, #9
 800096e:	25ff      	movs	r5, #255	; 0xff
 8000970:	469a      	mov	sl, r3
 8000972:	e750      	b.n	8000816 <__aeabi_fmul+0x32>
 8000974:	0020      	movs	r0, r4
 8000976:	f001 ff5f 	bl	8002838 <__clzsi2>
 800097a:	2576      	movs	r5, #118	; 0x76
 800097c:	1f43      	subs	r3, r0, #5
 800097e:	409c      	lsls	r4, r3
 8000980:	2300      	movs	r3, #0
 8000982:	426d      	negs	r5, r5
 8000984:	4699      	mov	r9, r3
 8000986:	469a      	mov	sl, r3
 8000988:	1a2d      	subs	r5, r5, r0
 800098a:	e744      	b.n	8000816 <__aeabi_fmul+0x32>
 800098c:	4640      	mov	r0, r8
 800098e:	f001 ff53 	bl	8002838 <__clzsi2>
 8000992:	4642      	mov	r2, r8
 8000994:	1f43      	subs	r3, r0, #5
 8000996:	409a      	lsls	r2, r3
 8000998:	2300      	movs	r3, #0
 800099a:	1a2d      	subs	r5, r5, r0
 800099c:	4690      	mov	r8, r2
 800099e:	469c      	mov	ip, r3
 80009a0:	3d76      	subs	r5, #118	; 0x76
 80009a2:	e74e      	b.n	8000842 <__aeabi_fmul+0x5e>
 80009a4:	2480      	movs	r4, #128	; 0x80
 80009a6:	2100      	movs	r1, #0
 80009a8:	20ff      	movs	r0, #255	; 0xff
 80009aa:	03e4      	lsls	r4, r4, #15
 80009ac:	e760      	b.n	8000870 <__aeabi_fmul+0x8c>
 80009ae:	2301      	movs	r3, #1
 80009b0:	1a9b      	subs	r3, r3, r2
 80009b2:	2b1b      	cmp	r3, #27
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_fmul+0x1d4>
 80009b6:	e759      	b.n	800086c <__aeabi_fmul+0x88>
 80009b8:	0022      	movs	r2, r4
 80009ba:	309e      	adds	r0, #158	; 0x9e
 80009bc:	40da      	lsrs	r2, r3
 80009be:	4084      	lsls	r4, r0
 80009c0:	0013      	movs	r3, r2
 80009c2:	1e62      	subs	r2, r4, #1
 80009c4:	4194      	sbcs	r4, r2
 80009c6:	431c      	orrs	r4, r3
 80009c8:	0763      	lsls	r3, r4, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fmul+0x1f2>
 80009cc:	230f      	movs	r3, #15
 80009ce:	4023      	ands	r3, r4
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fmul+0x1f2>
 80009d4:	3404      	adds	r4, #4
 80009d6:	0163      	lsls	r3, r4, #5
 80009d8:	d51a      	bpl.n	8000a10 <__aeabi_fmul+0x22c>
 80009da:	2001      	movs	r0, #1
 80009dc:	2400      	movs	r4, #0
 80009de:	e747      	b.n	8000870 <__aeabi_fmul+0x8c>
 80009e0:	2080      	movs	r0, #128	; 0x80
 80009e2:	03c0      	lsls	r0, r0, #15
 80009e4:	4204      	tst	r4, r0
 80009e6:	d009      	beq.n	80009fc <__aeabi_fmul+0x218>
 80009e8:	4643      	mov	r3, r8
 80009ea:	4203      	tst	r3, r0
 80009ec:	d106      	bne.n	80009fc <__aeabi_fmul+0x218>
 80009ee:	4644      	mov	r4, r8
 80009f0:	4304      	orrs	r4, r0
 80009f2:	0264      	lsls	r4, r4, #9
 80009f4:	0039      	movs	r1, r7
 80009f6:	20ff      	movs	r0, #255	; 0xff
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	e739      	b.n	8000870 <__aeabi_fmul+0x8c>
 80009fc:	2080      	movs	r0, #128	; 0x80
 80009fe:	03c0      	lsls	r0, r0, #15
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0264      	lsls	r4, r4, #9
 8000a04:	0031      	movs	r1, r6
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	0a64      	lsrs	r4, r4, #9
 8000a0a:	e731      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000a0c:	0028      	movs	r0, r5
 8000a0e:	e765      	b.n	80008dc <__aeabi_fmul+0xf8>
 8000a10:	01a4      	lsls	r4, r4, #6
 8000a12:	2000      	movs	r0, #0
 8000a14:	0a64      	lsrs	r4, r4, #9
 8000a16:	e72b      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000a18:	2080      	movs	r0, #128	; 0x80
 8000a1a:	03c0      	lsls	r0, r0, #15
 8000a1c:	4304      	orrs	r4, r0
 8000a1e:	0264      	lsls	r4, r4, #9
 8000a20:	20ff      	movs	r0, #255	; 0xff
 8000a22:	0a64      	lsrs	r4, r4, #9
 8000a24:	e724      	b.n	8000870 <__aeabi_fmul+0x8c>
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	0800953c 	.word	0x0800953c
 8000a2c:	f7ffffff 	.word	0xf7ffffff

08000a30 <__aeabi_i2f>:
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d013      	beq.n	8000a5e <__aeabi_i2f+0x2e>
 8000a36:	17c3      	asrs	r3, r0, #31
 8000a38:	18c6      	adds	r6, r0, r3
 8000a3a:	405e      	eors	r6, r3
 8000a3c:	0fc4      	lsrs	r4, r0, #31
 8000a3e:	0030      	movs	r0, r6
 8000a40:	f001 fefa 	bl	8002838 <__clzsi2>
 8000a44:	239e      	movs	r3, #158	; 0x9e
 8000a46:	0005      	movs	r5, r0
 8000a48:	1a1b      	subs	r3, r3, r0
 8000a4a:	2b96      	cmp	r3, #150	; 0x96
 8000a4c:	dc0f      	bgt.n	8000a6e <__aeabi_i2f+0x3e>
 8000a4e:	2808      	cmp	r0, #8
 8000a50:	dd01      	ble.n	8000a56 <__aeabi_i2f+0x26>
 8000a52:	3d08      	subs	r5, #8
 8000a54:	40ae      	lsls	r6, r5
 8000a56:	0276      	lsls	r6, r6, #9
 8000a58:	0a76      	lsrs	r6, r6, #9
 8000a5a:	b2d8      	uxtb	r0, r3
 8000a5c:	e002      	b.n	8000a64 <__aeabi_i2f+0x34>
 8000a5e:	2400      	movs	r4, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	2600      	movs	r6, #0
 8000a64:	05c0      	lsls	r0, r0, #23
 8000a66:	4330      	orrs	r0, r6
 8000a68:	07e4      	lsls	r4, r4, #31
 8000a6a:	4320      	orrs	r0, r4
 8000a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a6e:	2b99      	cmp	r3, #153	; 0x99
 8000a70:	dd0c      	ble.n	8000a8c <__aeabi_i2f+0x5c>
 8000a72:	2205      	movs	r2, #5
 8000a74:	0031      	movs	r1, r6
 8000a76:	1a12      	subs	r2, r2, r0
 8000a78:	40d1      	lsrs	r1, r2
 8000a7a:	000a      	movs	r2, r1
 8000a7c:	0001      	movs	r1, r0
 8000a7e:	0030      	movs	r0, r6
 8000a80:	311b      	adds	r1, #27
 8000a82:	4088      	lsls	r0, r1
 8000a84:	1e41      	subs	r1, r0, #1
 8000a86:	4188      	sbcs	r0, r1
 8000a88:	4302      	orrs	r2, r0
 8000a8a:	0016      	movs	r6, r2
 8000a8c:	2d05      	cmp	r5, #5
 8000a8e:	dc12      	bgt.n	8000ab6 <__aeabi_i2f+0x86>
 8000a90:	0031      	movs	r1, r6
 8000a92:	4f0d      	ldr	r7, [pc, #52]	; (8000ac8 <__aeabi_i2f+0x98>)
 8000a94:	4039      	ands	r1, r7
 8000a96:	0772      	lsls	r2, r6, #29
 8000a98:	d009      	beq.n	8000aae <__aeabi_i2f+0x7e>
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	4030      	ands	r0, r6
 8000a9e:	2804      	cmp	r0, #4
 8000aa0:	d005      	beq.n	8000aae <__aeabi_i2f+0x7e>
 8000aa2:	3104      	adds	r1, #4
 8000aa4:	014a      	lsls	r2, r1, #5
 8000aa6:	d502      	bpl.n	8000aae <__aeabi_i2f+0x7e>
 8000aa8:	239f      	movs	r3, #159	; 0x9f
 8000aaa:	4039      	ands	r1, r7
 8000aac:	1b5b      	subs	r3, r3, r5
 8000aae:	0189      	lsls	r1, r1, #6
 8000ab0:	0a4e      	lsrs	r6, r1, #9
 8000ab2:	b2d8      	uxtb	r0, r3
 8000ab4:	e7d6      	b.n	8000a64 <__aeabi_i2f+0x34>
 8000ab6:	1f6a      	subs	r2, r5, #5
 8000ab8:	4096      	lsls	r6, r2
 8000aba:	0031      	movs	r1, r6
 8000abc:	4f02      	ldr	r7, [pc, #8]	; (8000ac8 <__aeabi_i2f+0x98>)
 8000abe:	4039      	ands	r1, r7
 8000ac0:	0772      	lsls	r2, r6, #29
 8000ac2:	d0f4      	beq.n	8000aae <__aeabi_i2f+0x7e>
 8000ac4:	e7e9      	b.n	8000a9a <__aeabi_i2f+0x6a>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff

08000acc <__aeabi_dadd>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	464f      	mov	r7, r9
 8000ad0:	4646      	mov	r6, r8
 8000ad2:	46d6      	mov	lr, sl
 8000ad4:	000d      	movs	r5, r1
 8000ad6:	0004      	movs	r4, r0
 8000ad8:	b5c0      	push	{r6, r7, lr}
 8000ada:	001f      	movs	r7, r3
 8000adc:	0011      	movs	r1, r2
 8000ade:	0328      	lsls	r0, r5, #12
 8000ae0:	0f62      	lsrs	r2, r4, #29
 8000ae2:	0a40      	lsrs	r0, r0, #9
 8000ae4:	4310      	orrs	r0, r2
 8000ae6:	007a      	lsls	r2, r7, #1
 8000ae8:	0d52      	lsrs	r2, r2, #21
 8000aea:	00e3      	lsls	r3, r4, #3
 8000aec:	033c      	lsls	r4, r7, #12
 8000aee:	4691      	mov	r9, r2
 8000af0:	0a64      	lsrs	r4, r4, #9
 8000af2:	0ffa      	lsrs	r2, r7, #31
 8000af4:	0f4f      	lsrs	r7, r1, #29
 8000af6:	006e      	lsls	r6, r5, #1
 8000af8:	4327      	orrs	r7, r4
 8000afa:	4692      	mov	sl, r2
 8000afc:	46b8      	mov	r8, r7
 8000afe:	0d76      	lsrs	r6, r6, #21
 8000b00:	0fed      	lsrs	r5, r5, #31
 8000b02:	00c9      	lsls	r1, r1, #3
 8000b04:	4295      	cmp	r5, r2
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x3e>
 8000b08:	e099      	b.n	8000c3e <__aeabi_dadd+0x172>
 8000b0a:	464c      	mov	r4, r9
 8000b0c:	1b34      	subs	r4, r6, r4
 8000b0e:	46a4      	mov	ip, r4
 8000b10:	2c00      	cmp	r4, #0
 8000b12:	dc00      	bgt.n	8000b16 <__aeabi_dadd+0x4a>
 8000b14:	e07c      	b.n	8000c10 <__aeabi_dadd+0x144>
 8000b16:	464a      	mov	r2, r9
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x52>
 8000b1c:	e0b8      	b.n	8000c90 <__aeabi_dadd+0x1c4>
 8000b1e:	4ac5      	ldr	r2, [pc, #788]	; (8000e34 <__aeabi_dadd+0x368>)
 8000b20:	4296      	cmp	r6, r2
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x5a>
 8000b24:	e11c      	b.n	8000d60 <__aeabi_dadd+0x294>
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	003c      	movs	r4, r7
 8000b2a:	0412      	lsls	r2, r2, #16
 8000b2c:	4314      	orrs	r4, r2
 8000b2e:	46a0      	mov	r8, r4
 8000b30:	4662      	mov	r2, ip
 8000b32:	2a38      	cmp	r2, #56	; 0x38
 8000b34:	dd00      	ble.n	8000b38 <__aeabi_dadd+0x6c>
 8000b36:	e161      	b.n	8000dfc <__aeabi_dadd+0x330>
 8000b38:	2a1f      	cmp	r2, #31
 8000b3a:	dd00      	ble.n	8000b3e <__aeabi_dadd+0x72>
 8000b3c:	e1cc      	b.n	8000ed8 <__aeabi_dadd+0x40c>
 8000b3e:	4664      	mov	r4, ip
 8000b40:	2220      	movs	r2, #32
 8000b42:	1b12      	subs	r2, r2, r4
 8000b44:	4644      	mov	r4, r8
 8000b46:	4094      	lsls	r4, r2
 8000b48:	000f      	movs	r7, r1
 8000b4a:	46a1      	mov	r9, r4
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	40e7      	lsrs	r7, r4
 8000b52:	464c      	mov	r4, r9
 8000b54:	1e4a      	subs	r2, r1, #1
 8000b56:	4191      	sbcs	r1, r2
 8000b58:	433c      	orrs	r4, r7
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	4321      	orrs	r1, r4
 8000b5e:	4664      	mov	r4, ip
 8000b60:	40e2      	lsrs	r2, r4
 8000b62:	1a80      	subs	r0, r0, r2
 8000b64:	1a5c      	subs	r4, r3, r1
 8000b66:	42a3      	cmp	r3, r4
 8000b68:	419b      	sbcs	r3, r3
 8000b6a:	425f      	negs	r7, r3
 8000b6c:	1bc7      	subs	r7, r0, r7
 8000b6e:	023b      	lsls	r3, r7, #8
 8000b70:	d400      	bmi.n	8000b74 <__aeabi_dadd+0xa8>
 8000b72:	e0d0      	b.n	8000d16 <__aeabi_dadd+0x24a>
 8000b74:	027f      	lsls	r7, r7, #9
 8000b76:	0a7f      	lsrs	r7, r7, #9
 8000b78:	2f00      	cmp	r7, #0
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0xb2>
 8000b7c:	e0ff      	b.n	8000d7e <__aeabi_dadd+0x2b2>
 8000b7e:	0038      	movs	r0, r7
 8000b80:	f001 fe5a 	bl	8002838 <__clzsi2>
 8000b84:	0001      	movs	r1, r0
 8000b86:	3908      	subs	r1, #8
 8000b88:	2320      	movs	r3, #32
 8000b8a:	0022      	movs	r2, r4
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	408f      	lsls	r7, r1
 8000b90:	40da      	lsrs	r2, r3
 8000b92:	408c      	lsls	r4, r1
 8000b94:	4317      	orrs	r7, r2
 8000b96:	42b1      	cmp	r1, r6
 8000b98:	da00      	bge.n	8000b9c <__aeabi_dadd+0xd0>
 8000b9a:	e0ff      	b.n	8000d9c <__aeabi_dadd+0x2d0>
 8000b9c:	1b89      	subs	r1, r1, r6
 8000b9e:	1c4b      	adds	r3, r1, #1
 8000ba0:	2b1f      	cmp	r3, #31
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_dadd+0xda>
 8000ba4:	e0a8      	b.n	8000cf8 <__aeabi_dadd+0x22c>
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	0039      	movs	r1, r7
 8000baa:	1ad2      	subs	r2, r2, r3
 8000bac:	0020      	movs	r0, r4
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	40d8      	lsrs	r0, r3
 8000bb4:	1e62      	subs	r2, r4, #1
 8000bb6:	4194      	sbcs	r4, r2
 8000bb8:	40df      	lsrs	r7, r3
 8000bba:	2600      	movs	r6, #0
 8000bbc:	4301      	orrs	r1, r0
 8000bbe:	430c      	orrs	r4, r1
 8000bc0:	0763      	lsls	r3, r4, #29
 8000bc2:	d009      	beq.n	8000bd8 <__aeabi_dadd+0x10c>
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	4023      	ands	r3, r4
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d005      	beq.n	8000bd8 <__aeabi_dadd+0x10c>
 8000bcc:	1d23      	adds	r3, r4, #4
 8000bce:	42a3      	cmp	r3, r4
 8000bd0:	41a4      	sbcs	r4, r4
 8000bd2:	4264      	negs	r4, r4
 8000bd4:	193f      	adds	r7, r7, r4
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	023b      	lsls	r3, r7, #8
 8000bda:	d400      	bmi.n	8000bde <__aeabi_dadd+0x112>
 8000bdc:	e09e      	b.n	8000d1c <__aeabi_dadd+0x250>
 8000bde:	4b95      	ldr	r3, [pc, #596]	; (8000e34 <__aeabi_dadd+0x368>)
 8000be0:	3601      	adds	r6, #1
 8000be2:	429e      	cmp	r6, r3
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dadd+0x11c>
 8000be6:	e0b7      	b.n	8000d58 <__aeabi_dadd+0x28c>
 8000be8:	4a93      	ldr	r2, [pc, #588]	; (8000e38 <__aeabi_dadd+0x36c>)
 8000bea:	08e4      	lsrs	r4, r4, #3
 8000bec:	4017      	ands	r7, r2
 8000bee:	077b      	lsls	r3, r7, #29
 8000bf0:	0571      	lsls	r1, r6, #21
 8000bf2:	027f      	lsls	r7, r7, #9
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	0b3f      	lsrs	r7, r7, #12
 8000bf8:	0d4a      	lsrs	r2, r1, #21
 8000bfa:	0512      	lsls	r2, r2, #20
 8000bfc:	433a      	orrs	r2, r7
 8000bfe:	07ed      	lsls	r5, r5, #31
 8000c00:	432a      	orrs	r2, r5
 8000c02:	0018      	movs	r0, r3
 8000c04:	0011      	movs	r1, r2
 8000c06:	bce0      	pop	{r5, r6, r7}
 8000c08:	46ba      	mov	sl, r7
 8000c0a:	46b1      	mov	r9, r6
 8000c0c:	46a8      	mov	r8, r5
 8000c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c10:	2c00      	cmp	r4, #0
 8000c12:	d04b      	beq.n	8000cac <__aeabi_dadd+0x1e0>
 8000c14:	464c      	mov	r4, r9
 8000c16:	1ba4      	subs	r4, r4, r6
 8000c18:	46a4      	mov	ip, r4
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_dadd+0x154>
 8000c1e:	e123      	b.n	8000e68 <__aeabi_dadd+0x39c>
 8000c20:	0004      	movs	r4, r0
 8000c22:	431c      	orrs	r4, r3
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x15c>
 8000c26:	e1af      	b.n	8000f88 <__aeabi_dadd+0x4bc>
 8000c28:	4662      	mov	r2, ip
 8000c2a:	1e54      	subs	r4, r2, #1
 8000c2c:	2a01      	cmp	r2, #1
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dadd+0x166>
 8000c30:	e215      	b.n	800105e <__aeabi_dadd+0x592>
 8000c32:	4d80      	ldr	r5, [pc, #512]	; (8000e34 <__aeabi_dadd+0x368>)
 8000c34:	45ac      	cmp	ip, r5
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x16e>
 8000c38:	e1c8      	b.n	8000fcc <__aeabi_dadd+0x500>
 8000c3a:	46a4      	mov	ip, r4
 8000c3c:	e11b      	b.n	8000e76 <__aeabi_dadd+0x3aa>
 8000c3e:	464a      	mov	r2, r9
 8000c40:	1ab2      	subs	r2, r6, r2
 8000c42:	4694      	mov	ip, r2
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	dc00      	bgt.n	8000c4a <__aeabi_dadd+0x17e>
 8000c48:	e0ac      	b.n	8000da4 <__aeabi_dadd+0x2d8>
 8000c4a:	464a      	mov	r2, r9
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d043      	beq.n	8000cd8 <__aeabi_dadd+0x20c>
 8000c50:	4a78      	ldr	r2, [pc, #480]	; (8000e34 <__aeabi_dadd+0x368>)
 8000c52:	4296      	cmp	r6, r2
 8000c54:	d100      	bne.n	8000c58 <__aeabi_dadd+0x18c>
 8000c56:	e1af      	b.n	8000fb8 <__aeabi_dadd+0x4ec>
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	003c      	movs	r4, r7
 8000c5c:	0412      	lsls	r2, r2, #16
 8000c5e:	4314      	orrs	r4, r2
 8000c60:	46a0      	mov	r8, r4
 8000c62:	4662      	mov	r2, ip
 8000c64:	2a38      	cmp	r2, #56	; 0x38
 8000c66:	dc67      	bgt.n	8000d38 <__aeabi_dadd+0x26c>
 8000c68:	2a1f      	cmp	r2, #31
 8000c6a:	dc00      	bgt.n	8000c6e <__aeabi_dadd+0x1a2>
 8000c6c:	e15f      	b.n	8000f2e <__aeabi_dadd+0x462>
 8000c6e:	4647      	mov	r7, r8
 8000c70:	3a20      	subs	r2, #32
 8000c72:	40d7      	lsrs	r7, r2
 8000c74:	4662      	mov	r2, ip
 8000c76:	2a20      	cmp	r2, #32
 8000c78:	d005      	beq.n	8000c86 <__aeabi_dadd+0x1ba>
 8000c7a:	4664      	mov	r4, ip
 8000c7c:	2240      	movs	r2, #64	; 0x40
 8000c7e:	1b12      	subs	r2, r2, r4
 8000c80:	4644      	mov	r4, r8
 8000c82:	4094      	lsls	r4, r2
 8000c84:	4321      	orrs	r1, r4
 8000c86:	1e4a      	subs	r2, r1, #1
 8000c88:	4191      	sbcs	r1, r2
 8000c8a:	000c      	movs	r4, r1
 8000c8c:	433c      	orrs	r4, r7
 8000c8e:	e057      	b.n	8000d40 <__aeabi_dadd+0x274>
 8000c90:	003a      	movs	r2, r7
 8000c92:	430a      	orrs	r2, r1
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x1cc>
 8000c96:	e105      	b.n	8000ea4 <__aeabi_dadd+0x3d8>
 8000c98:	0022      	movs	r2, r4
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	2c01      	cmp	r4, #1
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x1d6>
 8000ca0:	e182      	b.n	8000fa8 <__aeabi_dadd+0x4dc>
 8000ca2:	4c64      	ldr	r4, [pc, #400]	; (8000e34 <__aeabi_dadd+0x368>)
 8000ca4:	45a4      	cmp	ip, r4
 8000ca6:	d05b      	beq.n	8000d60 <__aeabi_dadd+0x294>
 8000ca8:	4694      	mov	ip, r2
 8000caa:	e741      	b.n	8000b30 <__aeabi_dadd+0x64>
 8000cac:	4c63      	ldr	r4, [pc, #396]	; (8000e3c <__aeabi_dadd+0x370>)
 8000cae:	1c77      	adds	r7, r6, #1
 8000cb0:	4227      	tst	r7, r4
 8000cb2:	d000      	beq.n	8000cb6 <__aeabi_dadd+0x1ea>
 8000cb4:	e0c4      	b.n	8000e40 <__aeabi_dadd+0x374>
 8000cb6:	0004      	movs	r4, r0
 8000cb8:	431c      	orrs	r4, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_dadd+0x1f4>
 8000cbe:	e169      	b.n	8000f94 <__aeabi_dadd+0x4c8>
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_dadd+0x1fa>
 8000cc4:	e1bf      	b.n	8001046 <__aeabi_dadd+0x57a>
 8000cc6:	4644      	mov	r4, r8
 8000cc8:	430c      	orrs	r4, r1
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x202>
 8000ccc:	e1d0      	b.n	8001070 <__aeabi_dadd+0x5a4>
 8000cce:	0742      	lsls	r2, r0, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	08c0      	lsrs	r0, r0, #3
 8000cd6:	e029      	b.n	8000d2c <__aeabi_dadd+0x260>
 8000cd8:	003a      	movs	r2, r7
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dadd+0x214>
 8000cde:	e170      	b.n	8000fc2 <__aeabi_dadd+0x4f6>
 8000ce0:	4662      	mov	r2, ip
 8000ce2:	4664      	mov	r4, ip
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	2c01      	cmp	r4, #1
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x220>
 8000cea:	e0e0      	b.n	8000eae <__aeabi_dadd+0x3e2>
 8000cec:	4c51      	ldr	r4, [pc, #324]	; (8000e34 <__aeabi_dadd+0x368>)
 8000cee:	45a4      	cmp	ip, r4
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_dadd+0x228>
 8000cf2:	e161      	b.n	8000fb8 <__aeabi_dadd+0x4ec>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	e7b4      	b.n	8000c62 <__aeabi_dadd+0x196>
 8000cf8:	003a      	movs	r2, r7
 8000cfa:	391f      	subs	r1, #31
 8000cfc:	40ca      	lsrs	r2, r1
 8000cfe:	0011      	movs	r1, r2
 8000d00:	2b20      	cmp	r3, #32
 8000d02:	d003      	beq.n	8000d0c <__aeabi_dadd+0x240>
 8000d04:	2240      	movs	r2, #64	; 0x40
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	409f      	lsls	r7, r3
 8000d0a:	433c      	orrs	r4, r7
 8000d0c:	1e63      	subs	r3, r4, #1
 8000d0e:	419c      	sbcs	r4, r3
 8000d10:	2700      	movs	r7, #0
 8000d12:	2600      	movs	r6, #0
 8000d14:	430c      	orrs	r4, r1
 8000d16:	0763      	lsls	r3, r4, #29
 8000d18:	d000      	beq.n	8000d1c <__aeabi_dadd+0x250>
 8000d1a:	e753      	b.n	8000bc4 <__aeabi_dadd+0xf8>
 8000d1c:	46b4      	mov	ip, r6
 8000d1e:	08e4      	lsrs	r4, r4, #3
 8000d20:	077b      	lsls	r3, r7, #29
 8000d22:	4323      	orrs	r3, r4
 8000d24:	08f8      	lsrs	r0, r7, #3
 8000d26:	4a43      	ldr	r2, [pc, #268]	; (8000e34 <__aeabi_dadd+0x368>)
 8000d28:	4594      	cmp	ip, r2
 8000d2a:	d01d      	beq.n	8000d68 <__aeabi_dadd+0x29c>
 8000d2c:	4662      	mov	r2, ip
 8000d2e:	0307      	lsls	r7, r0, #12
 8000d30:	0552      	lsls	r2, r2, #21
 8000d32:	0b3f      	lsrs	r7, r7, #12
 8000d34:	0d52      	lsrs	r2, r2, #21
 8000d36:	e760      	b.n	8000bfa <__aeabi_dadd+0x12e>
 8000d38:	4644      	mov	r4, r8
 8000d3a:	430c      	orrs	r4, r1
 8000d3c:	1e62      	subs	r2, r4, #1
 8000d3e:	4194      	sbcs	r4, r2
 8000d40:	18e4      	adds	r4, r4, r3
 8000d42:	429c      	cmp	r4, r3
 8000d44:	419b      	sbcs	r3, r3
 8000d46:	425f      	negs	r7, r3
 8000d48:	183f      	adds	r7, r7, r0
 8000d4a:	023b      	lsls	r3, r7, #8
 8000d4c:	d5e3      	bpl.n	8000d16 <__aeabi_dadd+0x24a>
 8000d4e:	4b39      	ldr	r3, [pc, #228]	; (8000e34 <__aeabi_dadd+0x368>)
 8000d50:	3601      	adds	r6, #1
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d000      	beq.n	8000d58 <__aeabi_dadd+0x28c>
 8000d56:	e0b5      	b.n	8000ec4 <__aeabi_dadd+0x3f8>
 8000d58:	0032      	movs	r2, r6
 8000d5a:	2700      	movs	r7, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e74c      	b.n	8000bfa <__aeabi_dadd+0x12e>
 8000d60:	0742      	lsls	r2, r0, #29
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	08c0      	lsrs	r0, r0, #3
 8000d68:	001a      	movs	r2, r3
 8000d6a:	4302      	orrs	r2, r0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dadd+0x2a4>
 8000d6e:	e1e1      	b.n	8001134 <__aeabi_dadd+0x668>
 8000d70:	2780      	movs	r7, #128	; 0x80
 8000d72:	033f      	lsls	r7, r7, #12
 8000d74:	4307      	orrs	r7, r0
 8000d76:	033f      	lsls	r7, r7, #12
 8000d78:	4a2e      	ldr	r2, [pc, #184]	; (8000e34 <__aeabi_dadd+0x368>)
 8000d7a:	0b3f      	lsrs	r7, r7, #12
 8000d7c:	e73d      	b.n	8000bfa <__aeabi_dadd+0x12e>
 8000d7e:	0020      	movs	r0, r4
 8000d80:	f001 fd5a 	bl	8002838 <__clzsi2>
 8000d84:	0001      	movs	r1, r0
 8000d86:	3118      	adds	r1, #24
 8000d88:	291f      	cmp	r1, #31
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_dadd+0x2c2>
 8000d8c:	e6fc      	b.n	8000b88 <__aeabi_dadd+0xbc>
 8000d8e:	3808      	subs	r0, #8
 8000d90:	4084      	lsls	r4, r0
 8000d92:	0027      	movs	r7, r4
 8000d94:	2400      	movs	r4, #0
 8000d96:	42b1      	cmp	r1, r6
 8000d98:	db00      	blt.n	8000d9c <__aeabi_dadd+0x2d0>
 8000d9a:	e6ff      	b.n	8000b9c <__aeabi_dadd+0xd0>
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <__aeabi_dadd+0x36c>)
 8000d9e:	1a76      	subs	r6, r6, r1
 8000da0:	4017      	ands	r7, r2
 8000da2:	e70d      	b.n	8000bc0 <__aeabi_dadd+0xf4>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	d02f      	beq.n	8000e08 <__aeabi_dadd+0x33c>
 8000da8:	464a      	mov	r2, r9
 8000daa:	1b92      	subs	r2, r2, r6
 8000dac:	4694      	mov	ip, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_dadd+0x2e8>
 8000db2:	e0ad      	b.n	8000f10 <__aeabi_dadd+0x444>
 8000db4:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <__aeabi_dadd+0x368>)
 8000db6:	4591      	cmp	r9, r2
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dadd+0x2f0>
 8000dba:	e10f      	b.n	8000fdc <__aeabi_dadd+0x510>
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	0412      	lsls	r2, r2, #16
 8000dc0:	4310      	orrs	r0, r2
 8000dc2:	4662      	mov	r2, ip
 8000dc4:	2a38      	cmp	r2, #56	; 0x38
 8000dc6:	dd00      	ble.n	8000dca <__aeabi_dadd+0x2fe>
 8000dc8:	e10f      	b.n	8000fea <__aeabi_dadd+0x51e>
 8000dca:	2a1f      	cmp	r2, #31
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_dadd+0x304>
 8000dce:	e180      	b.n	80010d2 <__aeabi_dadd+0x606>
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	001e      	movs	r6, r3
 8000dd6:	1b12      	subs	r2, r2, r4
 8000dd8:	4667      	mov	r7, ip
 8000dda:	0004      	movs	r4, r0
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	4094      	lsls	r4, r2
 8000de0:	40fe      	lsrs	r6, r7
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	4193      	sbcs	r3, r2
 8000de6:	40f8      	lsrs	r0, r7
 8000de8:	4334      	orrs	r4, r6
 8000dea:	431c      	orrs	r4, r3
 8000dec:	4480      	add	r8, r0
 8000dee:	1864      	adds	r4, r4, r1
 8000df0:	428c      	cmp	r4, r1
 8000df2:	41bf      	sbcs	r7, r7
 8000df4:	427f      	negs	r7, r7
 8000df6:	464e      	mov	r6, r9
 8000df8:	4447      	add	r7, r8
 8000dfa:	e7a6      	b.n	8000d4a <__aeabi_dadd+0x27e>
 8000dfc:	4642      	mov	r2, r8
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	0011      	movs	r1, r2
 8000e02:	1e4a      	subs	r2, r1, #1
 8000e04:	4191      	sbcs	r1, r2
 8000e06:	e6ad      	b.n	8000b64 <__aeabi_dadd+0x98>
 8000e08:	4c0c      	ldr	r4, [pc, #48]	; (8000e3c <__aeabi_dadd+0x370>)
 8000e0a:	1c72      	adds	r2, r6, #1
 8000e0c:	4222      	tst	r2, r4
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_dadd+0x346>
 8000e10:	e0a1      	b.n	8000f56 <__aeabi_dadd+0x48a>
 8000e12:	0002      	movs	r2, r0
 8000e14:	431a      	orrs	r2, r3
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	d000      	beq.n	8000e1c <__aeabi_dadd+0x350>
 8000e1a:	e0fa      	b.n	8001012 <__aeabi_dadd+0x546>
 8000e1c:	2a00      	cmp	r2, #0
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dadd+0x356>
 8000e20:	e145      	b.n	80010ae <__aeabi_dadd+0x5e2>
 8000e22:	003a      	movs	r2, r7
 8000e24:	430a      	orrs	r2, r1
 8000e26:	d000      	beq.n	8000e2a <__aeabi_dadd+0x35e>
 8000e28:	e146      	b.n	80010b8 <__aeabi_dadd+0x5ec>
 8000e2a:	0742      	lsls	r2, r0, #29
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	08c0      	lsrs	r0, r0, #3
 8000e32:	e77b      	b.n	8000d2c <__aeabi_dadd+0x260>
 8000e34:	000007ff 	.word	0x000007ff
 8000e38:	ff7fffff 	.word	0xff7fffff
 8000e3c:	000007fe 	.word	0x000007fe
 8000e40:	4647      	mov	r7, r8
 8000e42:	1a5c      	subs	r4, r3, r1
 8000e44:	1bc2      	subs	r2, r0, r7
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	41bf      	sbcs	r7, r7
 8000e4a:	427f      	negs	r7, r7
 8000e4c:	46b9      	mov	r9, r7
 8000e4e:	0017      	movs	r7, r2
 8000e50:	464a      	mov	r2, r9
 8000e52:	1abf      	subs	r7, r7, r2
 8000e54:	023a      	lsls	r2, r7, #8
 8000e56:	d500      	bpl.n	8000e5a <__aeabi_dadd+0x38e>
 8000e58:	e08d      	b.n	8000f76 <__aeabi_dadd+0x4aa>
 8000e5a:	0023      	movs	r3, r4
 8000e5c:	433b      	orrs	r3, r7
 8000e5e:	d000      	beq.n	8000e62 <__aeabi_dadd+0x396>
 8000e60:	e68a      	b.n	8000b78 <__aeabi_dadd+0xac>
 8000e62:	2000      	movs	r0, #0
 8000e64:	2500      	movs	r5, #0
 8000e66:	e761      	b.n	8000d2c <__aeabi_dadd+0x260>
 8000e68:	4cb4      	ldr	r4, [pc, #720]	; (800113c <__aeabi_dadd+0x670>)
 8000e6a:	45a1      	cmp	r9, r4
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dadd+0x3a4>
 8000e6e:	e0ad      	b.n	8000fcc <__aeabi_dadd+0x500>
 8000e70:	2480      	movs	r4, #128	; 0x80
 8000e72:	0424      	lsls	r4, r4, #16
 8000e74:	4320      	orrs	r0, r4
 8000e76:	4664      	mov	r4, ip
 8000e78:	2c38      	cmp	r4, #56	; 0x38
 8000e7a:	dc3d      	bgt.n	8000ef8 <__aeabi_dadd+0x42c>
 8000e7c:	4662      	mov	r2, ip
 8000e7e:	2c1f      	cmp	r4, #31
 8000e80:	dd00      	ble.n	8000e84 <__aeabi_dadd+0x3b8>
 8000e82:	e0b7      	b.n	8000ff4 <__aeabi_dadd+0x528>
 8000e84:	2520      	movs	r5, #32
 8000e86:	001e      	movs	r6, r3
 8000e88:	1b2d      	subs	r5, r5, r4
 8000e8a:	0004      	movs	r4, r0
 8000e8c:	40ab      	lsls	r3, r5
 8000e8e:	40ac      	lsls	r4, r5
 8000e90:	40d6      	lsrs	r6, r2
 8000e92:	40d0      	lsrs	r0, r2
 8000e94:	4642      	mov	r2, r8
 8000e96:	1e5d      	subs	r5, r3, #1
 8000e98:	41ab      	sbcs	r3, r5
 8000e9a:	4334      	orrs	r4, r6
 8000e9c:	1a12      	subs	r2, r2, r0
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	4323      	orrs	r3, r4
 8000ea2:	e02c      	b.n	8000efe <__aeabi_dadd+0x432>
 8000ea4:	0742      	lsls	r2, r0, #29
 8000ea6:	08db      	lsrs	r3, r3, #3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	08c0      	lsrs	r0, r0, #3
 8000eac:	e73b      	b.n	8000d26 <__aeabi_dadd+0x25a>
 8000eae:	185c      	adds	r4, r3, r1
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	419b      	sbcs	r3, r3
 8000eb4:	4440      	add	r0, r8
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	18c7      	adds	r7, r0, r3
 8000eba:	2601      	movs	r6, #1
 8000ebc:	023b      	lsls	r3, r7, #8
 8000ebe:	d400      	bmi.n	8000ec2 <__aeabi_dadd+0x3f6>
 8000ec0:	e729      	b.n	8000d16 <__aeabi_dadd+0x24a>
 8000ec2:	2602      	movs	r6, #2
 8000ec4:	4a9e      	ldr	r2, [pc, #632]	; (8001140 <__aeabi_dadd+0x674>)
 8000ec6:	0863      	lsrs	r3, r4, #1
 8000ec8:	4017      	ands	r7, r2
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4014      	ands	r4, r2
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	07fb      	lsls	r3, r7, #31
 8000ed2:	431c      	orrs	r4, r3
 8000ed4:	087f      	lsrs	r7, r7, #1
 8000ed6:	e673      	b.n	8000bc0 <__aeabi_dadd+0xf4>
 8000ed8:	4644      	mov	r4, r8
 8000eda:	3a20      	subs	r2, #32
 8000edc:	40d4      	lsrs	r4, r2
 8000ede:	4662      	mov	r2, ip
 8000ee0:	2a20      	cmp	r2, #32
 8000ee2:	d005      	beq.n	8000ef0 <__aeabi_dadd+0x424>
 8000ee4:	4667      	mov	r7, ip
 8000ee6:	2240      	movs	r2, #64	; 0x40
 8000ee8:	1bd2      	subs	r2, r2, r7
 8000eea:	4647      	mov	r7, r8
 8000eec:	4097      	lsls	r7, r2
 8000eee:	4339      	orrs	r1, r7
 8000ef0:	1e4a      	subs	r2, r1, #1
 8000ef2:	4191      	sbcs	r1, r2
 8000ef4:	4321      	orrs	r1, r4
 8000ef6:	e635      	b.n	8000b64 <__aeabi_dadd+0x98>
 8000ef8:	4303      	orrs	r3, r0
 8000efa:	1e58      	subs	r0, r3, #1
 8000efc:	4183      	sbcs	r3, r0
 8000efe:	1acc      	subs	r4, r1, r3
 8000f00:	42a1      	cmp	r1, r4
 8000f02:	41bf      	sbcs	r7, r7
 8000f04:	4643      	mov	r3, r8
 8000f06:	427f      	negs	r7, r7
 8000f08:	4655      	mov	r5, sl
 8000f0a:	464e      	mov	r6, r9
 8000f0c:	1bdf      	subs	r7, r3, r7
 8000f0e:	e62e      	b.n	8000b6e <__aeabi_dadd+0xa2>
 8000f10:	0002      	movs	r2, r0
 8000f12:	431a      	orrs	r2, r3
 8000f14:	d100      	bne.n	8000f18 <__aeabi_dadd+0x44c>
 8000f16:	e0bd      	b.n	8001094 <__aeabi_dadd+0x5c8>
 8000f18:	4662      	mov	r2, ip
 8000f1a:	4664      	mov	r4, ip
 8000f1c:	3a01      	subs	r2, #1
 8000f1e:	2c01      	cmp	r4, #1
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dadd+0x458>
 8000f22:	e0e5      	b.n	80010f0 <__aeabi_dadd+0x624>
 8000f24:	4c85      	ldr	r4, [pc, #532]	; (800113c <__aeabi_dadd+0x670>)
 8000f26:	45a4      	cmp	ip, r4
 8000f28:	d058      	beq.n	8000fdc <__aeabi_dadd+0x510>
 8000f2a:	4694      	mov	ip, r2
 8000f2c:	e749      	b.n	8000dc2 <__aeabi_dadd+0x2f6>
 8000f2e:	4664      	mov	r4, ip
 8000f30:	2220      	movs	r2, #32
 8000f32:	1b12      	subs	r2, r2, r4
 8000f34:	4644      	mov	r4, r8
 8000f36:	4094      	lsls	r4, r2
 8000f38:	000f      	movs	r7, r1
 8000f3a:	46a1      	mov	r9, r4
 8000f3c:	4664      	mov	r4, ip
 8000f3e:	4091      	lsls	r1, r2
 8000f40:	40e7      	lsrs	r7, r4
 8000f42:	464c      	mov	r4, r9
 8000f44:	1e4a      	subs	r2, r1, #1
 8000f46:	4191      	sbcs	r1, r2
 8000f48:	433c      	orrs	r4, r7
 8000f4a:	4642      	mov	r2, r8
 8000f4c:	430c      	orrs	r4, r1
 8000f4e:	4661      	mov	r1, ip
 8000f50:	40ca      	lsrs	r2, r1
 8000f52:	1880      	adds	r0, r0, r2
 8000f54:	e6f4      	b.n	8000d40 <__aeabi_dadd+0x274>
 8000f56:	4c79      	ldr	r4, [pc, #484]	; (800113c <__aeabi_dadd+0x670>)
 8000f58:	42a2      	cmp	r2, r4
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dadd+0x492>
 8000f5c:	e6fd      	b.n	8000d5a <__aeabi_dadd+0x28e>
 8000f5e:	1859      	adds	r1, r3, r1
 8000f60:	4299      	cmp	r1, r3
 8000f62:	419b      	sbcs	r3, r3
 8000f64:	4440      	add	r0, r8
 8000f66:	425f      	negs	r7, r3
 8000f68:	19c7      	adds	r7, r0, r7
 8000f6a:	07fc      	lsls	r4, r7, #31
 8000f6c:	0849      	lsrs	r1, r1, #1
 8000f6e:	0016      	movs	r6, r2
 8000f70:	430c      	orrs	r4, r1
 8000f72:	087f      	lsrs	r7, r7, #1
 8000f74:	e6cf      	b.n	8000d16 <__aeabi_dadd+0x24a>
 8000f76:	1acc      	subs	r4, r1, r3
 8000f78:	42a1      	cmp	r1, r4
 8000f7a:	41bf      	sbcs	r7, r7
 8000f7c:	4643      	mov	r3, r8
 8000f7e:	427f      	negs	r7, r7
 8000f80:	1a18      	subs	r0, r3, r0
 8000f82:	4655      	mov	r5, sl
 8000f84:	1bc7      	subs	r7, r0, r7
 8000f86:	e5f7      	b.n	8000b78 <__aeabi_dadd+0xac>
 8000f88:	08c9      	lsrs	r1, r1, #3
 8000f8a:	077b      	lsls	r3, r7, #29
 8000f8c:	4655      	mov	r5, sl
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	08f8      	lsrs	r0, r7, #3
 8000f92:	e6c8      	b.n	8000d26 <__aeabi_dadd+0x25a>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d000      	beq.n	8000f9a <__aeabi_dadd+0x4ce>
 8000f98:	e081      	b.n	800109e <__aeabi_dadd+0x5d2>
 8000f9a:	4643      	mov	r3, r8
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	d115      	bne.n	8000fcc <__aeabi_dadd+0x500>
 8000fa0:	2080      	movs	r0, #128	; 0x80
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	0300      	lsls	r0, r0, #12
 8000fa6:	e6e3      	b.n	8000d70 <__aeabi_dadd+0x2a4>
 8000fa8:	1a5c      	subs	r4, r3, r1
 8000faa:	42a3      	cmp	r3, r4
 8000fac:	419b      	sbcs	r3, r3
 8000fae:	1bc7      	subs	r7, r0, r7
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	2601      	movs	r6, #1
 8000fb4:	1aff      	subs	r7, r7, r3
 8000fb6:	e5da      	b.n	8000b6e <__aeabi_dadd+0xa2>
 8000fb8:	0742      	lsls	r2, r0, #29
 8000fba:	08db      	lsrs	r3, r3, #3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	08c0      	lsrs	r0, r0, #3
 8000fc0:	e6d2      	b.n	8000d68 <__aeabi_dadd+0x29c>
 8000fc2:	0742      	lsls	r2, r0, #29
 8000fc4:	08db      	lsrs	r3, r3, #3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	08c0      	lsrs	r0, r0, #3
 8000fca:	e6ac      	b.n	8000d26 <__aeabi_dadd+0x25a>
 8000fcc:	4643      	mov	r3, r8
 8000fce:	4642      	mov	r2, r8
 8000fd0:	08c9      	lsrs	r1, r1, #3
 8000fd2:	075b      	lsls	r3, r3, #29
 8000fd4:	4655      	mov	r5, sl
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	08d0      	lsrs	r0, r2, #3
 8000fda:	e6c5      	b.n	8000d68 <__aeabi_dadd+0x29c>
 8000fdc:	4643      	mov	r3, r8
 8000fde:	4642      	mov	r2, r8
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	08c9      	lsrs	r1, r1, #3
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	08d0      	lsrs	r0, r2, #3
 8000fe8:	e6be      	b.n	8000d68 <__aeabi_dadd+0x29c>
 8000fea:	4303      	orrs	r3, r0
 8000fec:	001c      	movs	r4, r3
 8000fee:	1e63      	subs	r3, r4, #1
 8000ff0:	419c      	sbcs	r4, r3
 8000ff2:	e6fc      	b.n	8000dee <__aeabi_dadd+0x322>
 8000ff4:	0002      	movs	r2, r0
 8000ff6:	3c20      	subs	r4, #32
 8000ff8:	40e2      	lsrs	r2, r4
 8000ffa:	0014      	movs	r4, r2
 8000ffc:	4662      	mov	r2, ip
 8000ffe:	2a20      	cmp	r2, #32
 8001000:	d003      	beq.n	800100a <__aeabi_dadd+0x53e>
 8001002:	2540      	movs	r5, #64	; 0x40
 8001004:	1aad      	subs	r5, r5, r2
 8001006:	40a8      	lsls	r0, r5
 8001008:	4303      	orrs	r3, r0
 800100a:	1e58      	subs	r0, r3, #1
 800100c:	4183      	sbcs	r3, r0
 800100e:	4323      	orrs	r3, r4
 8001010:	e775      	b.n	8000efe <__aeabi_dadd+0x432>
 8001012:	2a00      	cmp	r2, #0
 8001014:	d0e2      	beq.n	8000fdc <__aeabi_dadd+0x510>
 8001016:	003a      	movs	r2, r7
 8001018:	430a      	orrs	r2, r1
 800101a:	d0cd      	beq.n	8000fb8 <__aeabi_dadd+0x4ec>
 800101c:	0742      	lsls	r2, r0, #29
 800101e:	08db      	lsrs	r3, r3, #3
 8001020:	4313      	orrs	r3, r2
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	08c0      	lsrs	r0, r0, #3
 8001026:	0312      	lsls	r2, r2, #12
 8001028:	4210      	tst	r0, r2
 800102a:	d006      	beq.n	800103a <__aeabi_dadd+0x56e>
 800102c:	08fc      	lsrs	r4, r7, #3
 800102e:	4214      	tst	r4, r2
 8001030:	d103      	bne.n	800103a <__aeabi_dadd+0x56e>
 8001032:	0020      	movs	r0, r4
 8001034:	08cb      	lsrs	r3, r1, #3
 8001036:	077a      	lsls	r2, r7, #29
 8001038:	4313      	orrs	r3, r2
 800103a:	0f5a      	lsrs	r2, r3, #29
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	0752      	lsls	r2, r2, #29
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	4313      	orrs	r3, r2
 8001044:	e690      	b.n	8000d68 <__aeabi_dadd+0x29c>
 8001046:	4643      	mov	r3, r8
 8001048:	430b      	orrs	r3, r1
 800104a:	d100      	bne.n	800104e <__aeabi_dadd+0x582>
 800104c:	e709      	b.n	8000e62 <__aeabi_dadd+0x396>
 800104e:	4643      	mov	r3, r8
 8001050:	4642      	mov	r2, r8
 8001052:	08c9      	lsrs	r1, r1, #3
 8001054:	075b      	lsls	r3, r3, #29
 8001056:	4655      	mov	r5, sl
 8001058:	430b      	orrs	r3, r1
 800105a:	08d0      	lsrs	r0, r2, #3
 800105c:	e666      	b.n	8000d2c <__aeabi_dadd+0x260>
 800105e:	1acc      	subs	r4, r1, r3
 8001060:	42a1      	cmp	r1, r4
 8001062:	4189      	sbcs	r1, r1
 8001064:	1a3f      	subs	r7, r7, r0
 8001066:	4249      	negs	r1, r1
 8001068:	4655      	mov	r5, sl
 800106a:	2601      	movs	r6, #1
 800106c:	1a7f      	subs	r7, r7, r1
 800106e:	e57e      	b.n	8000b6e <__aeabi_dadd+0xa2>
 8001070:	4642      	mov	r2, r8
 8001072:	1a5c      	subs	r4, r3, r1
 8001074:	1a87      	subs	r7, r0, r2
 8001076:	42a3      	cmp	r3, r4
 8001078:	4192      	sbcs	r2, r2
 800107a:	4252      	negs	r2, r2
 800107c:	1abf      	subs	r7, r7, r2
 800107e:	023a      	lsls	r2, r7, #8
 8001080:	d53d      	bpl.n	80010fe <__aeabi_dadd+0x632>
 8001082:	1acc      	subs	r4, r1, r3
 8001084:	42a1      	cmp	r1, r4
 8001086:	4189      	sbcs	r1, r1
 8001088:	4643      	mov	r3, r8
 800108a:	4249      	negs	r1, r1
 800108c:	1a1f      	subs	r7, r3, r0
 800108e:	4655      	mov	r5, sl
 8001090:	1a7f      	subs	r7, r7, r1
 8001092:	e595      	b.n	8000bc0 <__aeabi_dadd+0xf4>
 8001094:	077b      	lsls	r3, r7, #29
 8001096:	08c9      	lsrs	r1, r1, #3
 8001098:	430b      	orrs	r3, r1
 800109a:	08f8      	lsrs	r0, r7, #3
 800109c:	e643      	b.n	8000d26 <__aeabi_dadd+0x25a>
 800109e:	4644      	mov	r4, r8
 80010a0:	08db      	lsrs	r3, r3, #3
 80010a2:	430c      	orrs	r4, r1
 80010a4:	d130      	bne.n	8001108 <__aeabi_dadd+0x63c>
 80010a6:	0742      	lsls	r2, r0, #29
 80010a8:	4313      	orrs	r3, r2
 80010aa:	08c0      	lsrs	r0, r0, #3
 80010ac:	e65c      	b.n	8000d68 <__aeabi_dadd+0x29c>
 80010ae:	077b      	lsls	r3, r7, #29
 80010b0:	08c9      	lsrs	r1, r1, #3
 80010b2:	430b      	orrs	r3, r1
 80010b4:	08f8      	lsrs	r0, r7, #3
 80010b6:	e639      	b.n	8000d2c <__aeabi_dadd+0x260>
 80010b8:	185c      	adds	r4, r3, r1
 80010ba:	429c      	cmp	r4, r3
 80010bc:	419b      	sbcs	r3, r3
 80010be:	4440      	add	r0, r8
 80010c0:	425b      	negs	r3, r3
 80010c2:	18c7      	adds	r7, r0, r3
 80010c4:	023b      	lsls	r3, r7, #8
 80010c6:	d400      	bmi.n	80010ca <__aeabi_dadd+0x5fe>
 80010c8:	e625      	b.n	8000d16 <__aeabi_dadd+0x24a>
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <__aeabi_dadd+0x674>)
 80010cc:	2601      	movs	r6, #1
 80010ce:	401f      	ands	r7, r3
 80010d0:	e621      	b.n	8000d16 <__aeabi_dadd+0x24a>
 80010d2:	0004      	movs	r4, r0
 80010d4:	3a20      	subs	r2, #32
 80010d6:	40d4      	lsrs	r4, r2
 80010d8:	4662      	mov	r2, ip
 80010da:	2a20      	cmp	r2, #32
 80010dc:	d004      	beq.n	80010e8 <__aeabi_dadd+0x61c>
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	4666      	mov	r6, ip
 80010e2:	1b92      	subs	r2, r2, r6
 80010e4:	4090      	lsls	r0, r2
 80010e6:	4303      	orrs	r3, r0
 80010e8:	1e5a      	subs	r2, r3, #1
 80010ea:	4193      	sbcs	r3, r2
 80010ec:	431c      	orrs	r4, r3
 80010ee:	e67e      	b.n	8000dee <__aeabi_dadd+0x322>
 80010f0:	185c      	adds	r4, r3, r1
 80010f2:	428c      	cmp	r4, r1
 80010f4:	4189      	sbcs	r1, r1
 80010f6:	4440      	add	r0, r8
 80010f8:	4249      	negs	r1, r1
 80010fa:	1847      	adds	r7, r0, r1
 80010fc:	e6dd      	b.n	8000eba <__aeabi_dadd+0x3ee>
 80010fe:	0023      	movs	r3, r4
 8001100:	433b      	orrs	r3, r7
 8001102:	d100      	bne.n	8001106 <__aeabi_dadd+0x63a>
 8001104:	e6ad      	b.n	8000e62 <__aeabi_dadd+0x396>
 8001106:	e606      	b.n	8000d16 <__aeabi_dadd+0x24a>
 8001108:	0744      	lsls	r4, r0, #29
 800110a:	4323      	orrs	r3, r4
 800110c:	2480      	movs	r4, #128	; 0x80
 800110e:	08c0      	lsrs	r0, r0, #3
 8001110:	0324      	lsls	r4, r4, #12
 8001112:	4220      	tst	r0, r4
 8001114:	d008      	beq.n	8001128 <__aeabi_dadd+0x65c>
 8001116:	4642      	mov	r2, r8
 8001118:	08d6      	lsrs	r6, r2, #3
 800111a:	4226      	tst	r6, r4
 800111c:	d104      	bne.n	8001128 <__aeabi_dadd+0x65c>
 800111e:	4655      	mov	r5, sl
 8001120:	0030      	movs	r0, r6
 8001122:	08cb      	lsrs	r3, r1, #3
 8001124:	0751      	lsls	r1, r2, #29
 8001126:	430b      	orrs	r3, r1
 8001128:	0f5a      	lsrs	r2, r3, #29
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	0752      	lsls	r2, r2, #29
 8001130:	4313      	orrs	r3, r2
 8001132:	e619      	b.n	8000d68 <__aeabi_dadd+0x29c>
 8001134:	2300      	movs	r3, #0
 8001136:	4a01      	ldr	r2, [pc, #4]	; (800113c <__aeabi_dadd+0x670>)
 8001138:	001f      	movs	r7, r3
 800113a:	e55e      	b.n	8000bfa <__aeabi_dadd+0x12e>
 800113c:	000007ff 	.word	0x000007ff
 8001140:	ff7fffff 	.word	0xff7fffff

08001144 <__aeabi_ddiv>:
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	4657      	mov	r7, sl
 8001148:	464e      	mov	r6, r9
 800114a:	4645      	mov	r5, r8
 800114c:	46de      	mov	lr, fp
 800114e:	b5e0      	push	{r5, r6, r7, lr}
 8001150:	4681      	mov	r9, r0
 8001152:	0005      	movs	r5, r0
 8001154:	030c      	lsls	r4, r1, #12
 8001156:	0048      	lsls	r0, r1, #1
 8001158:	4692      	mov	sl, r2
 800115a:	001f      	movs	r7, r3
 800115c:	b085      	sub	sp, #20
 800115e:	0b24      	lsrs	r4, r4, #12
 8001160:	0d40      	lsrs	r0, r0, #21
 8001162:	0fce      	lsrs	r6, r1, #31
 8001164:	2800      	cmp	r0, #0
 8001166:	d100      	bne.n	800116a <__aeabi_ddiv+0x26>
 8001168:	e156      	b.n	8001418 <__aeabi_ddiv+0x2d4>
 800116a:	4bd4      	ldr	r3, [pc, #848]	; (80014bc <__aeabi_ddiv+0x378>)
 800116c:	4298      	cmp	r0, r3
 800116e:	d100      	bne.n	8001172 <__aeabi_ddiv+0x2e>
 8001170:	e172      	b.n	8001458 <__aeabi_ddiv+0x314>
 8001172:	0f6b      	lsrs	r3, r5, #29
 8001174:	00e4      	lsls	r4, r4, #3
 8001176:	431c      	orrs	r4, r3
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	041b      	lsls	r3, r3, #16
 800117c:	4323      	orrs	r3, r4
 800117e:	4698      	mov	r8, r3
 8001180:	4bcf      	ldr	r3, [pc, #828]	; (80014c0 <__aeabi_ddiv+0x37c>)
 8001182:	00ed      	lsls	r5, r5, #3
 8001184:	469b      	mov	fp, r3
 8001186:	2300      	movs	r3, #0
 8001188:	4699      	mov	r9, r3
 800118a:	4483      	add	fp, r0
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	033c      	lsls	r4, r7, #12
 8001190:	007b      	lsls	r3, r7, #1
 8001192:	4650      	mov	r0, sl
 8001194:	0b24      	lsrs	r4, r4, #12
 8001196:	0d5b      	lsrs	r3, r3, #21
 8001198:	0fff      	lsrs	r7, r7, #31
 800119a:	2b00      	cmp	r3, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_ddiv+0x5c>
 800119e:	e11f      	b.n	80013e0 <__aeabi_ddiv+0x29c>
 80011a0:	4ac6      	ldr	r2, [pc, #792]	; (80014bc <__aeabi_ddiv+0x378>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x64>
 80011a6:	e162      	b.n	800146e <__aeabi_ddiv+0x32a>
 80011a8:	49c5      	ldr	r1, [pc, #788]	; (80014c0 <__aeabi_ddiv+0x37c>)
 80011aa:	0f42      	lsrs	r2, r0, #29
 80011ac:	468c      	mov	ip, r1
 80011ae:	00e4      	lsls	r4, r4, #3
 80011b0:	4659      	mov	r1, fp
 80011b2:	4314      	orrs	r4, r2
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	4463      	add	r3, ip
 80011b8:	0412      	lsls	r2, r2, #16
 80011ba:	1acb      	subs	r3, r1, r3
 80011bc:	4314      	orrs	r4, r2
 80011be:	469b      	mov	fp, r3
 80011c0:	00c2      	lsls	r2, r0, #3
 80011c2:	2000      	movs	r0, #0
 80011c4:	0033      	movs	r3, r6
 80011c6:	407b      	eors	r3, r7
 80011c8:	469a      	mov	sl, r3
 80011ca:	464b      	mov	r3, r9
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d827      	bhi.n	8001220 <__aeabi_ddiv+0xdc>
 80011d0:	49bc      	ldr	r1, [pc, #752]	; (80014c4 <__aeabi_ddiv+0x380>)
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	58cb      	ldr	r3, [r1, r3]
 80011d6:	469f      	mov	pc, r3
 80011d8:	46b2      	mov	sl, r6
 80011da:	9b00      	ldr	r3, [sp, #0]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d016      	beq.n	800120e <__aeabi_ddiv+0xca>
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0xa2>
 80011e4:	e28e      	b.n	8001704 <__aeabi_ddiv+0x5c0>
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d000      	beq.n	80011ec <__aeabi_ddiv+0xa8>
 80011ea:	e0d9      	b.n	80013a0 <__aeabi_ddiv+0x25c>
 80011ec:	2300      	movs	r3, #0
 80011ee:	2400      	movs	r4, #0
 80011f0:	2500      	movs	r5, #0
 80011f2:	4652      	mov	r2, sl
 80011f4:	051b      	lsls	r3, r3, #20
 80011f6:	4323      	orrs	r3, r4
 80011f8:	07d2      	lsls	r2, r2, #31
 80011fa:	4313      	orrs	r3, r2
 80011fc:	0028      	movs	r0, r5
 80011fe:	0019      	movs	r1, r3
 8001200:	b005      	add	sp, #20
 8001202:	bcf0      	pop	{r4, r5, r6, r7}
 8001204:	46bb      	mov	fp, r7
 8001206:	46b2      	mov	sl, r6
 8001208:	46a9      	mov	r9, r5
 800120a:	46a0      	mov	r8, r4
 800120c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120e:	2400      	movs	r4, #0
 8001210:	2500      	movs	r5, #0
 8001212:	4baa      	ldr	r3, [pc, #680]	; (80014bc <__aeabi_ddiv+0x378>)
 8001214:	e7ed      	b.n	80011f2 <__aeabi_ddiv+0xae>
 8001216:	46ba      	mov	sl, r7
 8001218:	46a0      	mov	r8, r4
 800121a:	0015      	movs	r5, r2
 800121c:	9000      	str	r0, [sp, #0]
 800121e:	e7dc      	b.n	80011da <__aeabi_ddiv+0x96>
 8001220:	4544      	cmp	r4, r8
 8001222:	d200      	bcs.n	8001226 <__aeabi_ddiv+0xe2>
 8001224:	e1c7      	b.n	80015b6 <__aeabi_ddiv+0x472>
 8001226:	d100      	bne.n	800122a <__aeabi_ddiv+0xe6>
 8001228:	e1c2      	b.n	80015b0 <__aeabi_ddiv+0x46c>
 800122a:	2301      	movs	r3, #1
 800122c:	425b      	negs	r3, r3
 800122e:	469c      	mov	ip, r3
 8001230:	002e      	movs	r6, r5
 8001232:	4640      	mov	r0, r8
 8001234:	2500      	movs	r5, #0
 8001236:	44e3      	add	fp, ip
 8001238:	0223      	lsls	r3, r4, #8
 800123a:	0e14      	lsrs	r4, r2, #24
 800123c:	431c      	orrs	r4, r3
 800123e:	0c1b      	lsrs	r3, r3, #16
 8001240:	4699      	mov	r9, r3
 8001242:	0423      	lsls	r3, r4, #16
 8001244:	0c1f      	lsrs	r7, r3, #16
 8001246:	0212      	lsls	r2, r2, #8
 8001248:	4649      	mov	r1, r9
 800124a:	9200      	str	r2, [sp, #0]
 800124c:	9701      	str	r7, [sp, #4]
 800124e:	f7fe fffd 	bl	800024c <__aeabi_uidivmod>
 8001252:	0002      	movs	r2, r0
 8001254:	437a      	muls	r2, r7
 8001256:	040b      	lsls	r3, r1, #16
 8001258:	0c31      	lsrs	r1, r6, #16
 800125a:	4680      	mov	r8, r0
 800125c:	4319      	orrs	r1, r3
 800125e:	428a      	cmp	r2, r1
 8001260:	d907      	bls.n	8001272 <__aeabi_ddiv+0x12e>
 8001262:	2301      	movs	r3, #1
 8001264:	425b      	negs	r3, r3
 8001266:	469c      	mov	ip, r3
 8001268:	1909      	adds	r1, r1, r4
 800126a:	44e0      	add	r8, ip
 800126c:	428c      	cmp	r4, r1
 800126e:	d800      	bhi.n	8001272 <__aeabi_ddiv+0x12e>
 8001270:	e207      	b.n	8001682 <__aeabi_ddiv+0x53e>
 8001272:	1a88      	subs	r0, r1, r2
 8001274:	4649      	mov	r1, r9
 8001276:	f7fe ffe9 	bl	800024c <__aeabi_uidivmod>
 800127a:	0409      	lsls	r1, r1, #16
 800127c:	468c      	mov	ip, r1
 800127e:	0431      	lsls	r1, r6, #16
 8001280:	4666      	mov	r6, ip
 8001282:	9a01      	ldr	r2, [sp, #4]
 8001284:	0c09      	lsrs	r1, r1, #16
 8001286:	4342      	muls	r2, r0
 8001288:	0003      	movs	r3, r0
 800128a:	4331      	orrs	r1, r6
 800128c:	428a      	cmp	r2, r1
 800128e:	d904      	bls.n	800129a <__aeabi_ddiv+0x156>
 8001290:	1909      	adds	r1, r1, r4
 8001292:	3b01      	subs	r3, #1
 8001294:	428c      	cmp	r4, r1
 8001296:	d800      	bhi.n	800129a <__aeabi_ddiv+0x156>
 8001298:	e1ed      	b.n	8001676 <__aeabi_ddiv+0x532>
 800129a:	1a88      	subs	r0, r1, r2
 800129c:	4642      	mov	r2, r8
 800129e:	0412      	lsls	r2, r2, #16
 80012a0:	431a      	orrs	r2, r3
 80012a2:	4690      	mov	r8, r2
 80012a4:	4641      	mov	r1, r8
 80012a6:	9b00      	ldr	r3, [sp, #0]
 80012a8:	040e      	lsls	r6, r1, #16
 80012aa:	0c1b      	lsrs	r3, r3, #16
 80012ac:	001f      	movs	r7, r3
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	9b00      	ldr	r3, [sp, #0]
 80012b2:	0c36      	lsrs	r6, r6, #16
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	0c19      	lsrs	r1, r3, #16
 80012b8:	000b      	movs	r3, r1
 80012ba:	4373      	muls	r3, r6
 80012bc:	0c12      	lsrs	r2, r2, #16
 80012be:	437e      	muls	r6, r7
 80012c0:	9103      	str	r1, [sp, #12]
 80012c2:	4351      	muls	r1, r2
 80012c4:	437a      	muls	r2, r7
 80012c6:	0c1f      	lsrs	r7, r3, #16
 80012c8:	46bc      	mov	ip, r7
 80012ca:	1876      	adds	r6, r6, r1
 80012cc:	4466      	add	r6, ip
 80012ce:	42b1      	cmp	r1, r6
 80012d0:	d903      	bls.n	80012da <__aeabi_ddiv+0x196>
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	0249      	lsls	r1, r1, #9
 80012d6:	468c      	mov	ip, r1
 80012d8:	4462      	add	r2, ip
 80012da:	0c31      	lsrs	r1, r6, #16
 80012dc:	188a      	adds	r2, r1, r2
 80012de:	0431      	lsls	r1, r6, #16
 80012e0:	041e      	lsls	r6, r3, #16
 80012e2:	0c36      	lsrs	r6, r6, #16
 80012e4:	198e      	adds	r6, r1, r6
 80012e6:	4290      	cmp	r0, r2
 80012e8:	d302      	bcc.n	80012f0 <__aeabi_ddiv+0x1ac>
 80012ea:	d112      	bne.n	8001312 <__aeabi_ddiv+0x1ce>
 80012ec:	42b5      	cmp	r5, r6
 80012ee:	d210      	bcs.n	8001312 <__aeabi_ddiv+0x1ce>
 80012f0:	4643      	mov	r3, r8
 80012f2:	1e59      	subs	r1, r3, #1
 80012f4:	9b00      	ldr	r3, [sp, #0]
 80012f6:	469c      	mov	ip, r3
 80012f8:	4465      	add	r5, ip
 80012fa:	001f      	movs	r7, r3
 80012fc:	429d      	cmp	r5, r3
 80012fe:	419b      	sbcs	r3, r3
 8001300:	425b      	negs	r3, r3
 8001302:	191b      	adds	r3, r3, r4
 8001304:	18c0      	adds	r0, r0, r3
 8001306:	4284      	cmp	r4, r0
 8001308:	d200      	bcs.n	800130c <__aeabi_ddiv+0x1c8>
 800130a:	e1a0      	b.n	800164e <__aeabi_ddiv+0x50a>
 800130c:	d100      	bne.n	8001310 <__aeabi_ddiv+0x1cc>
 800130e:	e19b      	b.n	8001648 <__aeabi_ddiv+0x504>
 8001310:	4688      	mov	r8, r1
 8001312:	1bae      	subs	r6, r5, r6
 8001314:	42b5      	cmp	r5, r6
 8001316:	41ad      	sbcs	r5, r5
 8001318:	1a80      	subs	r0, r0, r2
 800131a:	426d      	negs	r5, r5
 800131c:	1b40      	subs	r0, r0, r5
 800131e:	4284      	cmp	r4, r0
 8001320:	d100      	bne.n	8001324 <__aeabi_ddiv+0x1e0>
 8001322:	e1d5      	b.n	80016d0 <__aeabi_ddiv+0x58c>
 8001324:	4649      	mov	r1, r9
 8001326:	f7fe ff91 	bl	800024c <__aeabi_uidivmod>
 800132a:	9a01      	ldr	r2, [sp, #4]
 800132c:	040b      	lsls	r3, r1, #16
 800132e:	4342      	muls	r2, r0
 8001330:	0c31      	lsrs	r1, r6, #16
 8001332:	0005      	movs	r5, r0
 8001334:	4319      	orrs	r1, r3
 8001336:	428a      	cmp	r2, r1
 8001338:	d900      	bls.n	800133c <__aeabi_ddiv+0x1f8>
 800133a:	e16c      	b.n	8001616 <__aeabi_ddiv+0x4d2>
 800133c:	1a88      	subs	r0, r1, r2
 800133e:	4649      	mov	r1, r9
 8001340:	f7fe ff84 	bl	800024c <__aeabi_uidivmod>
 8001344:	9a01      	ldr	r2, [sp, #4]
 8001346:	0436      	lsls	r6, r6, #16
 8001348:	4342      	muls	r2, r0
 800134a:	0409      	lsls	r1, r1, #16
 800134c:	0c36      	lsrs	r6, r6, #16
 800134e:	0003      	movs	r3, r0
 8001350:	430e      	orrs	r6, r1
 8001352:	42b2      	cmp	r2, r6
 8001354:	d900      	bls.n	8001358 <__aeabi_ddiv+0x214>
 8001356:	e153      	b.n	8001600 <__aeabi_ddiv+0x4bc>
 8001358:	9803      	ldr	r0, [sp, #12]
 800135a:	1ab6      	subs	r6, r6, r2
 800135c:	0002      	movs	r2, r0
 800135e:	042d      	lsls	r5, r5, #16
 8001360:	431d      	orrs	r5, r3
 8001362:	9f02      	ldr	r7, [sp, #8]
 8001364:	042b      	lsls	r3, r5, #16
 8001366:	0c1b      	lsrs	r3, r3, #16
 8001368:	435a      	muls	r2, r3
 800136a:	437b      	muls	r3, r7
 800136c:	469c      	mov	ip, r3
 800136e:	0c29      	lsrs	r1, r5, #16
 8001370:	4348      	muls	r0, r1
 8001372:	0c13      	lsrs	r3, r2, #16
 8001374:	4484      	add	ip, r0
 8001376:	4463      	add	r3, ip
 8001378:	4379      	muls	r1, r7
 800137a:	4298      	cmp	r0, r3
 800137c:	d903      	bls.n	8001386 <__aeabi_ddiv+0x242>
 800137e:	2080      	movs	r0, #128	; 0x80
 8001380:	0240      	lsls	r0, r0, #9
 8001382:	4684      	mov	ip, r0
 8001384:	4461      	add	r1, ip
 8001386:	0c18      	lsrs	r0, r3, #16
 8001388:	0412      	lsls	r2, r2, #16
 800138a:	041b      	lsls	r3, r3, #16
 800138c:	0c12      	lsrs	r2, r2, #16
 800138e:	1841      	adds	r1, r0, r1
 8001390:	189b      	adds	r3, r3, r2
 8001392:	428e      	cmp	r6, r1
 8001394:	d200      	bcs.n	8001398 <__aeabi_ddiv+0x254>
 8001396:	e0ff      	b.n	8001598 <__aeabi_ddiv+0x454>
 8001398:	d100      	bne.n	800139c <__aeabi_ddiv+0x258>
 800139a:	e0fa      	b.n	8001592 <__aeabi_ddiv+0x44e>
 800139c:	2301      	movs	r3, #1
 800139e:	431d      	orrs	r5, r3
 80013a0:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <__aeabi_ddiv+0x384>)
 80013a2:	445a      	add	r2, fp
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	dc00      	bgt.n	80013aa <__aeabi_ddiv+0x266>
 80013a8:	e0aa      	b.n	8001500 <__aeabi_ddiv+0x3bc>
 80013aa:	076b      	lsls	r3, r5, #29
 80013ac:	d000      	beq.n	80013b0 <__aeabi_ddiv+0x26c>
 80013ae:	e13d      	b.n	800162c <__aeabi_ddiv+0x4e8>
 80013b0:	08ed      	lsrs	r5, r5, #3
 80013b2:	4643      	mov	r3, r8
 80013b4:	01db      	lsls	r3, r3, #7
 80013b6:	d506      	bpl.n	80013c6 <__aeabi_ddiv+0x282>
 80013b8:	4642      	mov	r2, r8
 80013ba:	4b44      	ldr	r3, [pc, #272]	; (80014cc <__aeabi_ddiv+0x388>)
 80013bc:	401a      	ands	r2, r3
 80013be:	4690      	mov	r8, r2
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	00d2      	lsls	r2, r2, #3
 80013c4:	445a      	add	r2, fp
 80013c6:	4b42      	ldr	r3, [pc, #264]	; (80014d0 <__aeabi_ddiv+0x38c>)
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dd00      	ble.n	80013ce <__aeabi_ddiv+0x28a>
 80013cc:	e71f      	b.n	800120e <__aeabi_ddiv+0xca>
 80013ce:	4643      	mov	r3, r8
 80013d0:	075b      	lsls	r3, r3, #29
 80013d2:	431d      	orrs	r5, r3
 80013d4:	4643      	mov	r3, r8
 80013d6:	0552      	lsls	r2, r2, #21
 80013d8:	025c      	lsls	r4, r3, #9
 80013da:	0b24      	lsrs	r4, r4, #12
 80013dc:	0d53      	lsrs	r3, r2, #21
 80013de:	e708      	b.n	80011f2 <__aeabi_ddiv+0xae>
 80013e0:	4652      	mov	r2, sl
 80013e2:	4322      	orrs	r2, r4
 80013e4:	d100      	bne.n	80013e8 <__aeabi_ddiv+0x2a4>
 80013e6:	e07b      	b.n	80014e0 <__aeabi_ddiv+0x39c>
 80013e8:	2c00      	cmp	r4, #0
 80013ea:	d100      	bne.n	80013ee <__aeabi_ddiv+0x2aa>
 80013ec:	e0fa      	b.n	80015e4 <__aeabi_ddiv+0x4a0>
 80013ee:	0020      	movs	r0, r4
 80013f0:	f001 fa22 	bl	8002838 <__clzsi2>
 80013f4:	0002      	movs	r2, r0
 80013f6:	3a0b      	subs	r2, #11
 80013f8:	231d      	movs	r3, #29
 80013fa:	0001      	movs	r1, r0
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	4652      	mov	r2, sl
 8001400:	3908      	subs	r1, #8
 8001402:	40da      	lsrs	r2, r3
 8001404:	408c      	lsls	r4, r1
 8001406:	4314      	orrs	r4, r2
 8001408:	4652      	mov	r2, sl
 800140a:	408a      	lsls	r2, r1
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <__aeabi_ddiv+0x390>)
 800140e:	4458      	add	r0, fp
 8001410:	469b      	mov	fp, r3
 8001412:	4483      	add	fp, r0
 8001414:	2000      	movs	r0, #0
 8001416:	e6d5      	b.n	80011c4 <__aeabi_ddiv+0x80>
 8001418:	464b      	mov	r3, r9
 800141a:	4323      	orrs	r3, r4
 800141c:	4698      	mov	r8, r3
 800141e:	d044      	beq.n	80014aa <__aeabi_ddiv+0x366>
 8001420:	2c00      	cmp	r4, #0
 8001422:	d100      	bne.n	8001426 <__aeabi_ddiv+0x2e2>
 8001424:	e0ce      	b.n	80015c4 <__aeabi_ddiv+0x480>
 8001426:	0020      	movs	r0, r4
 8001428:	f001 fa06 	bl	8002838 <__clzsi2>
 800142c:	0001      	movs	r1, r0
 800142e:	0002      	movs	r2, r0
 8001430:	390b      	subs	r1, #11
 8001432:	231d      	movs	r3, #29
 8001434:	1a5b      	subs	r3, r3, r1
 8001436:	4649      	mov	r1, r9
 8001438:	0010      	movs	r0, r2
 800143a:	40d9      	lsrs	r1, r3
 800143c:	3808      	subs	r0, #8
 800143e:	4084      	lsls	r4, r0
 8001440:	000b      	movs	r3, r1
 8001442:	464d      	mov	r5, r9
 8001444:	4323      	orrs	r3, r4
 8001446:	4698      	mov	r8, r3
 8001448:	4085      	lsls	r5, r0
 800144a:	4823      	ldr	r0, [pc, #140]	; (80014d8 <__aeabi_ddiv+0x394>)
 800144c:	1a83      	subs	r3, r0, r2
 800144e:	469b      	mov	fp, r3
 8001450:	2300      	movs	r3, #0
 8001452:	4699      	mov	r9, r3
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	e69a      	b.n	800118e <__aeabi_ddiv+0x4a>
 8001458:	464b      	mov	r3, r9
 800145a:	4323      	orrs	r3, r4
 800145c:	4698      	mov	r8, r3
 800145e:	d11d      	bne.n	800149c <__aeabi_ddiv+0x358>
 8001460:	2308      	movs	r3, #8
 8001462:	4699      	mov	r9, r3
 8001464:	3b06      	subs	r3, #6
 8001466:	2500      	movs	r5, #0
 8001468:	4683      	mov	fp, r0
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	e68f      	b.n	800118e <__aeabi_ddiv+0x4a>
 800146e:	4652      	mov	r2, sl
 8001470:	4322      	orrs	r2, r4
 8001472:	d109      	bne.n	8001488 <__aeabi_ddiv+0x344>
 8001474:	2302      	movs	r3, #2
 8001476:	4649      	mov	r1, r9
 8001478:	4319      	orrs	r1, r3
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <__aeabi_ddiv+0x398>)
 800147c:	4689      	mov	r9, r1
 800147e:	469c      	mov	ip, r3
 8001480:	2400      	movs	r4, #0
 8001482:	2002      	movs	r0, #2
 8001484:	44e3      	add	fp, ip
 8001486:	e69d      	b.n	80011c4 <__aeabi_ddiv+0x80>
 8001488:	2303      	movs	r3, #3
 800148a:	464a      	mov	r2, r9
 800148c:	431a      	orrs	r2, r3
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <__aeabi_ddiv+0x398>)
 8001490:	4691      	mov	r9, r2
 8001492:	469c      	mov	ip, r3
 8001494:	4652      	mov	r2, sl
 8001496:	2003      	movs	r0, #3
 8001498:	44e3      	add	fp, ip
 800149a:	e693      	b.n	80011c4 <__aeabi_ddiv+0x80>
 800149c:	230c      	movs	r3, #12
 800149e:	4699      	mov	r9, r3
 80014a0:	3b09      	subs	r3, #9
 80014a2:	46a0      	mov	r8, r4
 80014a4:	4683      	mov	fp, r0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	e671      	b.n	800118e <__aeabi_ddiv+0x4a>
 80014aa:	2304      	movs	r3, #4
 80014ac:	4699      	mov	r9, r3
 80014ae:	2300      	movs	r3, #0
 80014b0:	469b      	mov	fp, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	2500      	movs	r5, #0
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	e669      	b.n	800118e <__aeabi_ddiv+0x4a>
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	000007ff 	.word	0x000007ff
 80014c0:	fffffc01 	.word	0xfffffc01
 80014c4:	0800957c 	.word	0x0800957c
 80014c8:	000003ff 	.word	0x000003ff
 80014cc:	feffffff 	.word	0xfeffffff
 80014d0:	000007fe 	.word	0x000007fe
 80014d4:	000003f3 	.word	0x000003f3
 80014d8:	fffffc0d 	.word	0xfffffc0d
 80014dc:	fffff801 	.word	0xfffff801
 80014e0:	4649      	mov	r1, r9
 80014e2:	2301      	movs	r3, #1
 80014e4:	4319      	orrs	r1, r3
 80014e6:	4689      	mov	r9, r1
 80014e8:	2400      	movs	r4, #0
 80014ea:	2001      	movs	r0, #1
 80014ec:	e66a      	b.n	80011c4 <__aeabi_ddiv+0x80>
 80014ee:	2300      	movs	r3, #0
 80014f0:	2480      	movs	r4, #128	; 0x80
 80014f2:	469a      	mov	sl, r3
 80014f4:	2500      	movs	r5, #0
 80014f6:	4b8a      	ldr	r3, [pc, #552]	; (8001720 <__aeabi_ddiv+0x5dc>)
 80014f8:	0324      	lsls	r4, r4, #12
 80014fa:	e67a      	b.n	80011f2 <__aeabi_ddiv+0xae>
 80014fc:	2501      	movs	r5, #1
 80014fe:	426d      	negs	r5, r5
 8001500:	2301      	movs	r3, #1
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	2b38      	cmp	r3, #56	; 0x38
 8001506:	dd00      	ble.n	800150a <__aeabi_ddiv+0x3c6>
 8001508:	e670      	b.n	80011ec <__aeabi_ddiv+0xa8>
 800150a:	2b1f      	cmp	r3, #31
 800150c:	dc00      	bgt.n	8001510 <__aeabi_ddiv+0x3cc>
 800150e:	e0bf      	b.n	8001690 <__aeabi_ddiv+0x54c>
 8001510:	211f      	movs	r1, #31
 8001512:	4249      	negs	r1, r1
 8001514:	1a8a      	subs	r2, r1, r2
 8001516:	4641      	mov	r1, r8
 8001518:	40d1      	lsrs	r1, r2
 800151a:	000a      	movs	r2, r1
 800151c:	2b20      	cmp	r3, #32
 800151e:	d004      	beq.n	800152a <__aeabi_ddiv+0x3e6>
 8001520:	4641      	mov	r1, r8
 8001522:	4b80      	ldr	r3, [pc, #512]	; (8001724 <__aeabi_ddiv+0x5e0>)
 8001524:	445b      	add	r3, fp
 8001526:	4099      	lsls	r1, r3
 8001528:	430d      	orrs	r5, r1
 800152a:	1e6b      	subs	r3, r5, #1
 800152c:	419d      	sbcs	r5, r3
 800152e:	2307      	movs	r3, #7
 8001530:	432a      	orrs	r2, r5
 8001532:	001d      	movs	r5, r3
 8001534:	2400      	movs	r4, #0
 8001536:	4015      	ands	r5, r2
 8001538:	4213      	tst	r3, r2
 800153a:	d100      	bne.n	800153e <__aeabi_ddiv+0x3fa>
 800153c:	e0d4      	b.n	80016e8 <__aeabi_ddiv+0x5a4>
 800153e:	210f      	movs	r1, #15
 8001540:	2300      	movs	r3, #0
 8001542:	4011      	ands	r1, r2
 8001544:	2904      	cmp	r1, #4
 8001546:	d100      	bne.n	800154a <__aeabi_ddiv+0x406>
 8001548:	e0cb      	b.n	80016e2 <__aeabi_ddiv+0x59e>
 800154a:	1d11      	adds	r1, r2, #4
 800154c:	4291      	cmp	r1, r2
 800154e:	4192      	sbcs	r2, r2
 8001550:	4252      	negs	r2, r2
 8001552:	189b      	adds	r3, r3, r2
 8001554:	000a      	movs	r2, r1
 8001556:	0219      	lsls	r1, r3, #8
 8001558:	d400      	bmi.n	800155c <__aeabi_ddiv+0x418>
 800155a:	e0c2      	b.n	80016e2 <__aeabi_ddiv+0x59e>
 800155c:	2301      	movs	r3, #1
 800155e:	2400      	movs	r4, #0
 8001560:	2500      	movs	r5, #0
 8001562:	e646      	b.n	80011f2 <__aeabi_ddiv+0xae>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	4641      	mov	r1, r8
 8001568:	031b      	lsls	r3, r3, #12
 800156a:	4219      	tst	r1, r3
 800156c:	d008      	beq.n	8001580 <__aeabi_ddiv+0x43c>
 800156e:	421c      	tst	r4, r3
 8001570:	d106      	bne.n	8001580 <__aeabi_ddiv+0x43c>
 8001572:	431c      	orrs	r4, r3
 8001574:	0324      	lsls	r4, r4, #12
 8001576:	46ba      	mov	sl, r7
 8001578:	0015      	movs	r5, r2
 800157a:	4b69      	ldr	r3, [pc, #420]	; (8001720 <__aeabi_ddiv+0x5dc>)
 800157c:	0b24      	lsrs	r4, r4, #12
 800157e:	e638      	b.n	80011f2 <__aeabi_ddiv+0xae>
 8001580:	2480      	movs	r4, #128	; 0x80
 8001582:	4643      	mov	r3, r8
 8001584:	0324      	lsls	r4, r4, #12
 8001586:	431c      	orrs	r4, r3
 8001588:	0324      	lsls	r4, r4, #12
 800158a:	46b2      	mov	sl, r6
 800158c:	4b64      	ldr	r3, [pc, #400]	; (8001720 <__aeabi_ddiv+0x5dc>)
 800158e:	0b24      	lsrs	r4, r4, #12
 8001590:	e62f      	b.n	80011f2 <__aeabi_ddiv+0xae>
 8001592:	2b00      	cmp	r3, #0
 8001594:	d100      	bne.n	8001598 <__aeabi_ddiv+0x454>
 8001596:	e703      	b.n	80013a0 <__aeabi_ddiv+0x25c>
 8001598:	19a6      	adds	r6, r4, r6
 800159a:	1e68      	subs	r0, r5, #1
 800159c:	42a6      	cmp	r6, r4
 800159e:	d200      	bcs.n	80015a2 <__aeabi_ddiv+0x45e>
 80015a0:	e08d      	b.n	80016be <__aeabi_ddiv+0x57a>
 80015a2:	428e      	cmp	r6, r1
 80015a4:	d200      	bcs.n	80015a8 <__aeabi_ddiv+0x464>
 80015a6:	e0a3      	b.n	80016f0 <__aeabi_ddiv+0x5ac>
 80015a8:	d100      	bne.n	80015ac <__aeabi_ddiv+0x468>
 80015aa:	e0b3      	b.n	8001714 <__aeabi_ddiv+0x5d0>
 80015ac:	0005      	movs	r5, r0
 80015ae:	e6f5      	b.n	800139c <__aeabi_ddiv+0x258>
 80015b0:	42aa      	cmp	r2, r5
 80015b2:	d900      	bls.n	80015b6 <__aeabi_ddiv+0x472>
 80015b4:	e639      	b.n	800122a <__aeabi_ddiv+0xe6>
 80015b6:	4643      	mov	r3, r8
 80015b8:	07de      	lsls	r6, r3, #31
 80015ba:	0858      	lsrs	r0, r3, #1
 80015bc:	086b      	lsrs	r3, r5, #1
 80015be:	431e      	orrs	r6, r3
 80015c0:	07ed      	lsls	r5, r5, #31
 80015c2:	e639      	b.n	8001238 <__aeabi_ddiv+0xf4>
 80015c4:	4648      	mov	r0, r9
 80015c6:	f001 f937 	bl	8002838 <__clzsi2>
 80015ca:	0001      	movs	r1, r0
 80015cc:	0002      	movs	r2, r0
 80015ce:	3115      	adds	r1, #21
 80015d0:	3220      	adds	r2, #32
 80015d2:	291c      	cmp	r1, #28
 80015d4:	dc00      	bgt.n	80015d8 <__aeabi_ddiv+0x494>
 80015d6:	e72c      	b.n	8001432 <__aeabi_ddiv+0x2ee>
 80015d8:	464b      	mov	r3, r9
 80015da:	3808      	subs	r0, #8
 80015dc:	4083      	lsls	r3, r0
 80015de:	2500      	movs	r5, #0
 80015e0:	4698      	mov	r8, r3
 80015e2:	e732      	b.n	800144a <__aeabi_ddiv+0x306>
 80015e4:	f001 f928 	bl	8002838 <__clzsi2>
 80015e8:	0003      	movs	r3, r0
 80015ea:	001a      	movs	r2, r3
 80015ec:	3215      	adds	r2, #21
 80015ee:	3020      	adds	r0, #32
 80015f0:	2a1c      	cmp	r2, #28
 80015f2:	dc00      	bgt.n	80015f6 <__aeabi_ddiv+0x4b2>
 80015f4:	e700      	b.n	80013f8 <__aeabi_ddiv+0x2b4>
 80015f6:	4654      	mov	r4, sl
 80015f8:	3b08      	subs	r3, #8
 80015fa:	2200      	movs	r2, #0
 80015fc:	409c      	lsls	r4, r3
 80015fe:	e705      	b.n	800140c <__aeabi_ddiv+0x2c8>
 8001600:	1936      	adds	r6, r6, r4
 8001602:	3b01      	subs	r3, #1
 8001604:	42b4      	cmp	r4, r6
 8001606:	d900      	bls.n	800160a <__aeabi_ddiv+0x4c6>
 8001608:	e6a6      	b.n	8001358 <__aeabi_ddiv+0x214>
 800160a:	42b2      	cmp	r2, r6
 800160c:	d800      	bhi.n	8001610 <__aeabi_ddiv+0x4cc>
 800160e:	e6a3      	b.n	8001358 <__aeabi_ddiv+0x214>
 8001610:	1e83      	subs	r3, r0, #2
 8001612:	1936      	adds	r6, r6, r4
 8001614:	e6a0      	b.n	8001358 <__aeabi_ddiv+0x214>
 8001616:	1909      	adds	r1, r1, r4
 8001618:	3d01      	subs	r5, #1
 800161a:	428c      	cmp	r4, r1
 800161c:	d900      	bls.n	8001620 <__aeabi_ddiv+0x4dc>
 800161e:	e68d      	b.n	800133c <__aeabi_ddiv+0x1f8>
 8001620:	428a      	cmp	r2, r1
 8001622:	d800      	bhi.n	8001626 <__aeabi_ddiv+0x4e2>
 8001624:	e68a      	b.n	800133c <__aeabi_ddiv+0x1f8>
 8001626:	1e85      	subs	r5, r0, #2
 8001628:	1909      	adds	r1, r1, r4
 800162a:	e687      	b.n	800133c <__aeabi_ddiv+0x1f8>
 800162c:	230f      	movs	r3, #15
 800162e:	402b      	ands	r3, r5
 8001630:	2b04      	cmp	r3, #4
 8001632:	d100      	bne.n	8001636 <__aeabi_ddiv+0x4f2>
 8001634:	e6bc      	b.n	80013b0 <__aeabi_ddiv+0x26c>
 8001636:	2305      	movs	r3, #5
 8001638:	425b      	negs	r3, r3
 800163a:	42ab      	cmp	r3, r5
 800163c:	419b      	sbcs	r3, r3
 800163e:	3504      	adds	r5, #4
 8001640:	425b      	negs	r3, r3
 8001642:	08ed      	lsrs	r5, r5, #3
 8001644:	4498      	add	r8, r3
 8001646:	e6b4      	b.n	80013b2 <__aeabi_ddiv+0x26e>
 8001648:	42af      	cmp	r7, r5
 800164a:	d900      	bls.n	800164e <__aeabi_ddiv+0x50a>
 800164c:	e660      	b.n	8001310 <__aeabi_ddiv+0x1cc>
 800164e:	4282      	cmp	r2, r0
 8001650:	d804      	bhi.n	800165c <__aeabi_ddiv+0x518>
 8001652:	d000      	beq.n	8001656 <__aeabi_ddiv+0x512>
 8001654:	e65c      	b.n	8001310 <__aeabi_ddiv+0x1cc>
 8001656:	42ae      	cmp	r6, r5
 8001658:	d800      	bhi.n	800165c <__aeabi_ddiv+0x518>
 800165a:	e659      	b.n	8001310 <__aeabi_ddiv+0x1cc>
 800165c:	2302      	movs	r3, #2
 800165e:	425b      	negs	r3, r3
 8001660:	469c      	mov	ip, r3
 8001662:	9b00      	ldr	r3, [sp, #0]
 8001664:	44e0      	add	r8, ip
 8001666:	469c      	mov	ip, r3
 8001668:	4465      	add	r5, ip
 800166a:	429d      	cmp	r5, r3
 800166c:	419b      	sbcs	r3, r3
 800166e:	425b      	negs	r3, r3
 8001670:	191b      	adds	r3, r3, r4
 8001672:	18c0      	adds	r0, r0, r3
 8001674:	e64d      	b.n	8001312 <__aeabi_ddiv+0x1ce>
 8001676:	428a      	cmp	r2, r1
 8001678:	d800      	bhi.n	800167c <__aeabi_ddiv+0x538>
 800167a:	e60e      	b.n	800129a <__aeabi_ddiv+0x156>
 800167c:	1e83      	subs	r3, r0, #2
 800167e:	1909      	adds	r1, r1, r4
 8001680:	e60b      	b.n	800129a <__aeabi_ddiv+0x156>
 8001682:	428a      	cmp	r2, r1
 8001684:	d800      	bhi.n	8001688 <__aeabi_ddiv+0x544>
 8001686:	e5f4      	b.n	8001272 <__aeabi_ddiv+0x12e>
 8001688:	1e83      	subs	r3, r0, #2
 800168a:	4698      	mov	r8, r3
 800168c:	1909      	adds	r1, r1, r4
 800168e:	e5f0      	b.n	8001272 <__aeabi_ddiv+0x12e>
 8001690:	4925      	ldr	r1, [pc, #148]	; (8001728 <__aeabi_ddiv+0x5e4>)
 8001692:	0028      	movs	r0, r5
 8001694:	4459      	add	r1, fp
 8001696:	408d      	lsls	r5, r1
 8001698:	4642      	mov	r2, r8
 800169a:	408a      	lsls	r2, r1
 800169c:	1e69      	subs	r1, r5, #1
 800169e:	418d      	sbcs	r5, r1
 80016a0:	4641      	mov	r1, r8
 80016a2:	40d8      	lsrs	r0, r3
 80016a4:	40d9      	lsrs	r1, r3
 80016a6:	4302      	orrs	r2, r0
 80016a8:	432a      	orrs	r2, r5
 80016aa:	000b      	movs	r3, r1
 80016ac:	0751      	lsls	r1, r2, #29
 80016ae:	d100      	bne.n	80016b2 <__aeabi_ddiv+0x56e>
 80016b0:	e751      	b.n	8001556 <__aeabi_ddiv+0x412>
 80016b2:	210f      	movs	r1, #15
 80016b4:	4011      	ands	r1, r2
 80016b6:	2904      	cmp	r1, #4
 80016b8:	d000      	beq.n	80016bc <__aeabi_ddiv+0x578>
 80016ba:	e746      	b.n	800154a <__aeabi_ddiv+0x406>
 80016bc:	e74b      	b.n	8001556 <__aeabi_ddiv+0x412>
 80016be:	0005      	movs	r5, r0
 80016c0:	428e      	cmp	r6, r1
 80016c2:	d000      	beq.n	80016c6 <__aeabi_ddiv+0x582>
 80016c4:	e66a      	b.n	800139c <__aeabi_ddiv+0x258>
 80016c6:	9a00      	ldr	r2, [sp, #0]
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d000      	beq.n	80016ce <__aeabi_ddiv+0x58a>
 80016cc:	e666      	b.n	800139c <__aeabi_ddiv+0x258>
 80016ce:	e667      	b.n	80013a0 <__aeabi_ddiv+0x25c>
 80016d0:	4a16      	ldr	r2, [pc, #88]	; (800172c <__aeabi_ddiv+0x5e8>)
 80016d2:	445a      	add	r2, fp
 80016d4:	2a00      	cmp	r2, #0
 80016d6:	dc00      	bgt.n	80016da <__aeabi_ddiv+0x596>
 80016d8:	e710      	b.n	80014fc <__aeabi_ddiv+0x3b8>
 80016da:	2301      	movs	r3, #1
 80016dc:	2500      	movs	r5, #0
 80016de:	4498      	add	r8, r3
 80016e0:	e667      	b.n	80013b2 <__aeabi_ddiv+0x26e>
 80016e2:	075d      	lsls	r5, r3, #29
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	0b1c      	lsrs	r4, r3, #12
 80016e8:	08d2      	lsrs	r2, r2, #3
 80016ea:	2300      	movs	r3, #0
 80016ec:	4315      	orrs	r5, r2
 80016ee:	e580      	b.n	80011f2 <__aeabi_ddiv+0xae>
 80016f0:	9800      	ldr	r0, [sp, #0]
 80016f2:	3d02      	subs	r5, #2
 80016f4:	0042      	lsls	r2, r0, #1
 80016f6:	4282      	cmp	r2, r0
 80016f8:	41bf      	sbcs	r7, r7
 80016fa:	427f      	negs	r7, r7
 80016fc:	193c      	adds	r4, r7, r4
 80016fe:	1936      	adds	r6, r6, r4
 8001700:	9200      	str	r2, [sp, #0]
 8001702:	e7dd      	b.n	80016c0 <__aeabi_ddiv+0x57c>
 8001704:	2480      	movs	r4, #128	; 0x80
 8001706:	4643      	mov	r3, r8
 8001708:	0324      	lsls	r4, r4, #12
 800170a:	431c      	orrs	r4, r3
 800170c:	0324      	lsls	r4, r4, #12
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__aeabi_ddiv+0x5dc>)
 8001710:	0b24      	lsrs	r4, r4, #12
 8001712:	e56e      	b.n	80011f2 <__aeabi_ddiv+0xae>
 8001714:	9a00      	ldr	r2, [sp, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3ea      	bcc.n	80016f0 <__aeabi_ddiv+0x5ac>
 800171a:	0005      	movs	r5, r0
 800171c:	e7d3      	b.n	80016c6 <__aeabi_ddiv+0x582>
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	000007ff 	.word	0x000007ff
 8001724:	0000043e 	.word	0x0000043e
 8001728:	0000041e 	.word	0x0000041e
 800172c:	000003ff 	.word	0x000003ff

08001730 <__eqdf2>:
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	464e      	mov	r6, r9
 8001734:	4645      	mov	r5, r8
 8001736:	46de      	mov	lr, fp
 8001738:	4657      	mov	r7, sl
 800173a:	4690      	mov	r8, r2
 800173c:	b5e0      	push	{r5, r6, r7, lr}
 800173e:	0017      	movs	r7, r2
 8001740:	031a      	lsls	r2, r3, #12
 8001742:	0b12      	lsrs	r2, r2, #12
 8001744:	0005      	movs	r5, r0
 8001746:	4684      	mov	ip, r0
 8001748:	4819      	ldr	r0, [pc, #100]	; (80017b0 <__eqdf2+0x80>)
 800174a:	030e      	lsls	r6, r1, #12
 800174c:	004c      	lsls	r4, r1, #1
 800174e:	4691      	mov	r9, r2
 8001750:	005a      	lsls	r2, r3, #1
 8001752:	0fdb      	lsrs	r3, r3, #31
 8001754:	469b      	mov	fp, r3
 8001756:	0b36      	lsrs	r6, r6, #12
 8001758:	0d64      	lsrs	r4, r4, #21
 800175a:	0fc9      	lsrs	r1, r1, #31
 800175c:	0d52      	lsrs	r2, r2, #21
 800175e:	4284      	cmp	r4, r0
 8001760:	d019      	beq.n	8001796 <__eqdf2+0x66>
 8001762:	4282      	cmp	r2, r0
 8001764:	d010      	beq.n	8001788 <__eqdf2+0x58>
 8001766:	2001      	movs	r0, #1
 8001768:	4294      	cmp	r4, r2
 800176a:	d10e      	bne.n	800178a <__eqdf2+0x5a>
 800176c:	454e      	cmp	r6, r9
 800176e:	d10c      	bne.n	800178a <__eqdf2+0x5a>
 8001770:	2001      	movs	r0, #1
 8001772:	45c4      	cmp	ip, r8
 8001774:	d109      	bne.n	800178a <__eqdf2+0x5a>
 8001776:	4559      	cmp	r1, fp
 8001778:	d017      	beq.n	80017aa <__eqdf2+0x7a>
 800177a:	2c00      	cmp	r4, #0
 800177c:	d105      	bne.n	800178a <__eqdf2+0x5a>
 800177e:	0030      	movs	r0, r6
 8001780:	4328      	orrs	r0, r5
 8001782:	1e43      	subs	r3, r0, #1
 8001784:	4198      	sbcs	r0, r3
 8001786:	e000      	b.n	800178a <__eqdf2+0x5a>
 8001788:	2001      	movs	r0, #1
 800178a:	bcf0      	pop	{r4, r5, r6, r7}
 800178c:	46bb      	mov	fp, r7
 800178e:	46b2      	mov	sl, r6
 8001790:	46a9      	mov	r9, r5
 8001792:	46a0      	mov	r8, r4
 8001794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001796:	0033      	movs	r3, r6
 8001798:	2001      	movs	r0, #1
 800179a:	432b      	orrs	r3, r5
 800179c:	d1f5      	bne.n	800178a <__eqdf2+0x5a>
 800179e:	42a2      	cmp	r2, r4
 80017a0:	d1f3      	bne.n	800178a <__eqdf2+0x5a>
 80017a2:	464b      	mov	r3, r9
 80017a4:	433b      	orrs	r3, r7
 80017a6:	d1f0      	bne.n	800178a <__eqdf2+0x5a>
 80017a8:	e7e2      	b.n	8001770 <__eqdf2+0x40>
 80017aa:	2000      	movs	r0, #0
 80017ac:	e7ed      	b.n	800178a <__eqdf2+0x5a>
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	000007ff 	.word	0x000007ff

080017b4 <__gedf2>:
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	4647      	mov	r7, r8
 80017b8:	46ce      	mov	lr, r9
 80017ba:	0004      	movs	r4, r0
 80017bc:	0018      	movs	r0, r3
 80017be:	0016      	movs	r6, r2
 80017c0:	031b      	lsls	r3, r3, #12
 80017c2:	0b1b      	lsrs	r3, r3, #12
 80017c4:	4d2d      	ldr	r5, [pc, #180]	; (800187c <__gedf2+0xc8>)
 80017c6:	004a      	lsls	r2, r1, #1
 80017c8:	4699      	mov	r9, r3
 80017ca:	b580      	push	{r7, lr}
 80017cc:	0043      	lsls	r3, r0, #1
 80017ce:	030f      	lsls	r7, r1, #12
 80017d0:	46a4      	mov	ip, r4
 80017d2:	46b0      	mov	r8, r6
 80017d4:	0b3f      	lsrs	r7, r7, #12
 80017d6:	0d52      	lsrs	r2, r2, #21
 80017d8:	0fc9      	lsrs	r1, r1, #31
 80017da:	0d5b      	lsrs	r3, r3, #21
 80017dc:	0fc0      	lsrs	r0, r0, #31
 80017de:	42aa      	cmp	r2, r5
 80017e0:	d021      	beq.n	8001826 <__gedf2+0x72>
 80017e2:	42ab      	cmp	r3, r5
 80017e4:	d013      	beq.n	800180e <__gedf2+0x5a>
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	d122      	bne.n	8001830 <__gedf2+0x7c>
 80017ea:	433c      	orrs	r4, r7
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <__gedf2+0x42>
 80017f0:	464d      	mov	r5, r9
 80017f2:	432e      	orrs	r6, r5
 80017f4:	d022      	beq.n	800183c <__gedf2+0x88>
 80017f6:	2c00      	cmp	r4, #0
 80017f8:	d010      	beq.n	800181c <__gedf2+0x68>
 80017fa:	4281      	cmp	r1, r0
 80017fc:	d022      	beq.n	8001844 <__gedf2+0x90>
 80017fe:	2002      	movs	r0, #2
 8001800:	3901      	subs	r1, #1
 8001802:	4008      	ands	r0, r1
 8001804:	3801      	subs	r0, #1
 8001806:	bcc0      	pop	{r6, r7}
 8001808:	46b9      	mov	r9, r7
 800180a:	46b0      	mov	r8, r6
 800180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180e:	464d      	mov	r5, r9
 8001810:	432e      	orrs	r6, r5
 8001812:	d129      	bne.n	8001868 <__gedf2+0xb4>
 8001814:	2a00      	cmp	r2, #0
 8001816:	d1f0      	bne.n	80017fa <__gedf2+0x46>
 8001818:	433c      	orrs	r4, r7
 800181a:	d1ee      	bne.n	80017fa <__gedf2+0x46>
 800181c:	2800      	cmp	r0, #0
 800181e:	d1f2      	bne.n	8001806 <__gedf2+0x52>
 8001820:	2001      	movs	r0, #1
 8001822:	4240      	negs	r0, r0
 8001824:	e7ef      	b.n	8001806 <__gedf2+0x52>
 8001826:	003d      	movs	r5, r7
 8001828:	4325      	orrs	r5, r4
 800182a:	d11d      	bne.n	8001868 <__gedf2+0xb4>
 800182c:	4293      	cmp	r3, r2
 800182e:	d0ee      	beq.n	800180e <__gedf2+0x5a>
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e2      	bne.n	80017fa <__gedf2+0x46>
 8001834:	464c      	mov	r4, r9
 8001836:	4326      	orrs	r6, r4
 8001838:	d1df      	bne.n	80017fa <__gedf2+0x46>
 800183a:	e7e0      	b.n	80017fe <__gedf2+0x4a>
 800183c:	2000      	movs	r0, #0
 800183e:	2c00      	cmp	r4, #0
 8001840:	d0e1      	beq.n	8001806 <__gedf2+0x52>
 8001842:	e7dc      	b.n	80017fe <__gedf2+0x4a>
 8001844:	429a      	cmp	r2, r3
 8001846:	dc0a      	bgt.n	800185e <__gedf2+0xaa>
 8001848:	dbe8      	blt.n	800181c <__gedf2+0x68>
 800184a:	454f      	cmp	r7, r9
 800184c:	d8d7      	bhi.n	80017fe <__gedf2+0x4a>
 800184e:	d00e      	beq.n	800186e <__gedf2+0xba>
 8001850:	2000      	movs	r0, #0
 8001852:	454f      	cmp	r7, r9
 8001854:	d2d7      	bcs.n	8001806 <__gedf2+0x52>
 8001856:	2900      	cmp	r1, #0
 8001858:	d0e2      	beq.n	8001820 <__gedf2+0x6c>
 800185a:	0008      	movs	r0, r1
 800185c:	e7d3      	b.n	8001806 <__gedf2+0x52>
 800185e:	4243      	negs	r3, r0
 8001860:	4158      	adcs	r0, r3
 8001862:	0040      	lsls	r0, r0, #1
 8001864:	3801      	subs	r0, #1
 8001866:	e7ce      	b.n	8001806 <__gedf2+0x52>
 8001868:	2002      	movs	r0, #2
 800186a:	4240      	negs	r0, r0
 800186c:	e7cb      	b.n	8001806 <__gedf2+0x52>
 800186e:	45c4      	cmp	ip, r8
 8001870:	d8c5      	bhi.n	80017fe <__gedf2+0x4a>
 8001872:	2000      	movs	r0, #0
 8001874:	45c4      	cmp	ip, r8
 8001876:	d2c6      	bcs.n	8001806 <__gedf2+0x52>
 8001878:	e7ed      	b.n	8001856 <__gedf2+0xa2>
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	000007ff 	.word	0x000007ff

08001880 <__ledf2>:
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	4647      	mov	r7, r8
 8001884:	46ce      	mov	lr, r9
 8001886:	0004      	movs	r4, r0
 8001888:	0018      	movs	r0, r3
 800188a:	0016      	movs	r6, r2
 800188c:	031b      	lsls	r3, r3, #12
 800188e:	0b1b      	lsrs	r3, r3, #12
 8001890:	4d2c      	ldr	r5, [pc, #176]	; (8001944 <__ledf2+0xc4>)
 8001892:	004a      	lsls	r2, r1, #1
 8001894:	4699      	mov	r9, r3
 8001896:	b580      	push	{r7, lr}
 8001898:	0043      	lsls	r3, r0, #1
 800189a:	030f      	lsls	r7, r1, #12
 800189c:	46a4      	mov	ip, r4
 800189e:	46b0      	mov	r8, r6
 80018a0:	0b3f      	lsrs	r7, r7, #12
 80018a2:	0d52      	lsrs	r2, r2, #21
 80018a4:	0fc9      	lsrs	r1, r1, #31
 80018a6:	0d5b      	lsrs	r3, r3, #21
 80018a8:	0fc0      	lsrs	r0, r0, #31
 80018aa:	42aa      	cmp	r2, r5
 80018ac:	d00d      	beq.n	80018ca <__ledf2+0x4a>
 80018ae:	42ab      	cmp	r3, r5
 80018b0:	d010      	beq.n	80018d4 <__ledf2+0x54>
 80018b2:	2a00      	cmp	r2, #0
 80018b4:	d127      	bne.n	8001906 <__ledf2+0x86>
 80018b6:	433c      	orrs	r4, r7
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d111      	bne.n	80018e0 <__ledf2+0x60>
 80018bc:	464d      	mov	r5, r9
 80018be:	432e      	orrs	r6, r5
 80018c0:	d10e      	bne.n	80018e0 <__ledf2+0x60>
 80018c2:	2000      	movs	r0, #0
 80018c4:	2c00      	cmp	r4, #0
 80018c6:	d015      	beq.n	80018f4 <__ledf2+0x74>
 80018c8:	e00e      	b.n	80018e8 <__ledf2+0x68>
 80018ca:	003d      	movs	r5, r7
 80018cc:	4325      	orrs	r5, r4
 80018ce:	d110      	bne.n	80018f2 <__ledf2+0x72>
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d118      	bne.n	8001906 <__ledf2+0x86>
 80018d4:	464d      	mov	r5, r9
 80018d6:	432e      	orrs	r6, r5
 80018d8:	d10b      	bne.n	80018f2 <__ledf2+0x72>
 80018da:	2a00      	cmp	r2, #0
 80018dc:	d102      	bne.n	80018e4 <__ledf2+0x64>
 80018de:	433c      	orrs	r4, r7
 80018e0:	2c00      	cmp	r4, #0
 80018e2:	d00b      	beq.n	80018fc <__ledf2+0x7c>
 80018e4:	4281      	cmp	r1, r0
 80018e6:	d014      	beq.n	8001912 <__ledf2+0x92>
 80018e8:	2002      	movs	r0, #2
 80018ea:	3901      	subs	r1, #1
 80018ec:	4008      	ands	r0, r1
 80018ee:	3801      	subs	r0, #1
 80018f0:	e000      	b.n	80018f4 <__ledf2+0x74>
 80018f2:	2002      	movs	r0, #2
 80018f4:	bcc0      	pop	{r6, r7}
 80018f6:	46b9      	mov	r9, r7
 80018f8:	46b0      	mov	r8, r6
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1f9      	bne.n	80018f4 <__ledf2+0x74>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7f6      	b.n	80018f4 <__ledf2+0x74>
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ec      	bne.n	80018e4 <__ledf2+0x64>
 800190a:	464c      	mov	r4, r9
 800190c:	4326      	orrs	r6, r4
 800190e:	d1e9      	bne.n	80018e4 <__ledf2+0x64>
 8001910:	e7ea      	b.n	80018e8 <__ledf2+0x68>
 8001912:	429a      	cmp	r2, r3
 8001914:	dd04      	ble.n	8001920 <__ledf2+0xa0>
 8001916:	4243      	negs	r3, r0
 8001918:	4158      	adcs	r0, r3
 800191a:	0040      	lsls	r0, r0, #1
 800191c:	3801      	subs	r0, #1
 800191e:	e7e9      	b.n	80018f4 <__ledf2+0x74>
 8001920:	429a      	cmp	r2, r3
 8001922:	dbeb      	blt.n	80018fc <__ledf2+0x7c>
 8001924:	454f      	cmp	r7, r9
 8001926:	d8df      	bhi.n	80018e8 <__ledf2+0x68>
 8001928:	d006      	beq.n	8001938 <__ledf2+0xb8>
 800192a:	2000      	movs	r0, #0
 800192c:	454f      	cmp	r7, r9
 800192e:	d2e1      	bcs.n	80018f4 <__ledf2+0x74>
 8001930:	2900      	cmp	r1, #0
 8001932:	d0e5      	beq.n	8001900 <__ledf2+0x80>
 8001934:	0008      	movs	r0, r1
 8001936:	e7dd      	b.n	80018f4 <__ledf2+0x74>
 8001938:	45c4      	cmp	ip, r8
 800193a:	d8d5      	bhi.n	80018e8 <__ledf2+0x68>
 800193c:	2000      	movs	r0, #0
 800193e:	45c4      	cmp	ip, r8
 8001940:	d2d8      	bcs.n	80018f4 <__ledf2+0x74>
 8001942:	e7f5      	b.n	8001930 <__ledf2+0xb0>
 8001944:	000007ff 	.word	0x000007ff

08001948 <__aeabi_dmul>:
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	4657      	mov	r7, sl
 800194c:	464e      	mov	r6, r9
 800194e:	4645      	mov	r5, r8
 8001950:	46de      	mov	lr, fp
 8001952:	b5e0      	push	{r5, r6, r7, lr}
 8001954:	4698      	mov	r8, r3
 8001956:	030c      	lsls	r4, r1, #12
 8001958:	004b      	lsls	r3, r1, #1
 800195a:	0006      	movs	r6, r0
 800195c:	4692      	mov	sl, r2
 800195e:	b087      	sub	sp, #28
 8001960:	0b24      	lsrs	r4, r4, #12
 8001962:	0d5b      	lsrs	r3, r3, #21
 8001964:	0fcf      	lsrs	r7, r1, #31
 8001966:	2b00      	cmp	r3, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dmul+0x24>
 800196a:	e15c      	b.n	8001c26 <__aeabi_dmul+0x2de>
 800196c:	4ad9      	ldr	r2, [pc, #868]	; (8001cd4 <__aeabi_dmul+0x38c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d100      	bne.n	8001974 <__aeabi_dmul+0x2c>
 8001972:	e175      	b.n	8001c60 <__aeabi_dmul+0x318>
 8001974:	0f42      	lsrs	r2, r0, #29
 8001976:	00e4      	lsls	r4, r4, #3
 8001978:	4314      	orrs	r4, r2
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	0412      	lsls	r2, r2, #16
 800197e:	4314      	orrs	r4, r2
 8001980:	4ad5      	ldr	r2, [pc, #852]	; (8001cd8 <__aeabi_dmul+0x390>)
 8001982:	00c5      	lsls	r5, r0, #3
 8001984:	4694      	mov	ip, r2
 8001986:	4463      	add	r3, ip
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2300      	movs	r3, #0
 800198c:	4699      	mov	r9, r3
 800198e:	469b      	mov	fp, r3
 8001990:	4643      	mov	r3, r8
 8001992:	4642      	mov	r2, r8
 8001994:	031e      	lsls	r6, r3, #12
 8001996:	0fd2      	lsrs	r2, r2, #31
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4650      	mov	r0, sl
 800199c:	4690      	mov	r8, r2
 800199e:	0b36      	lsrs	r6, r6, #12
 80019a0:	0d5b      	lsrs	r3, r3, #21
 80019a2:	d100      	bne.n	80019a6 <__aeabi_dmul+0x5e>
 80019a4:	e120      	b.n	8001be8 <__aeabi_dmul+0x2a0>
 80019a6:	4acb      	ldr	r2, [pc, #812]	; (8001cd4 <__aeabi_dmul+0x38c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d100      	bne.n	80019ae <__aeabi_dmul+0x66>
 80019ac:	e162      	b.n	8001c74 <__aeabi_dmul+0x32c>
 80019ae:	49ca      	ldr	r1, [pc, #808]	; (8001cd8 <__aeabi_dmul+0x390>)
 80019b0:	0f42      	lsrs	r2, r0, #29
 80019b2:	468c      	mov	ip, r1
 80019b4:	9900      	ldr	r1, [sp, #0]
 80019b6:	4463      	add	r3, ip
 80019b8:	00f6      	lsls	r6, r6, #3
 80019ba:	468c      	mov	ip, r1
 80019bc:	4316      	orrs	r6, r2
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	449c      	add	ip, r3
 80019c2:	0412      	lsls	r2, r2, #16
 80019c4:	4663      	mov	r3, ip
 80019c6:	4316      	orrs	r6, r2
 80019c8:	00c2      	lsls	r2, r0, #3
 80019ca:	2000      	movs	r0, #0
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	9900      	ldr	r1, [sp, #0]
 80019d0:	4643      	mov	r3, r8
 80019d2:	3101      	adds	r1, #1
 80019d4:	468c      	mov	ip, r1
 80019d6:	4649      	mov	r1, r9
 80019d8:	407b      	eors	r3, r7
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	290f      	cmp	r1, #15
 80019de:	d826      	bhi.n	8001a2e <__aeabi_dmul+0xe6>
 80019e0:	4bbe      	ldr	r3, [pc, #760]	; (8001cdc <__aeabi_dmul+0x394>)
 80019e2:	0089      	lsls	r1, r1, #2
 80019e4:	5859      	ldr	r1, [r3, r1]
 80019e6:	468f      	mov	pc, r1
 80019e8:	4643      	mov	r3, r8
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	0034      	movs	r4, r6
 80019ee:	0015      	movs	r5, r2
 80019f0:	4683      	mov	fp, r0
 80019f2:	465b      	mov	r3, fp
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d016      	beq.n	8001a26 <__aeabi_dmul+0xde>
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d100      	bne.n	80019fe <__aeabi_dmul+0xb6>
 80019fc:	e203      	b.n	8001e06 <__aeabi_dmul+0x4be>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dmul+0xbc>
 8001a02:	e0cd      	b.n	8001ba0 <__aeabi_dmul+0x258>
 8001a04:	2200      	movs	r2, #0
 8001a06:	2400      	movs	r4, #0
 8001a08:	2500      	movs	r5, #0
 8001a0a:	9b01      	ldr	r3, [sp, #4]
 8001a0c:	0512      	lsls	r2, r2, #20
 8001a0e:	4322      	orrs	r2, r4
 8001a10:	07db      	lsls	r3, r3, #31
 8001a12:	431a      	orrs	r2, r3
 8001a14:	0028      	movs	r0, r5
 8001a16:	0011      	movs	r1, r2
 8001a18:	b007      	add	sp, #28
 8001a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1c:	46bb      	mov	fp, r7
 8001a1e:	46b2      	mov	sl, r6
 8001a20:	46a9      	mov	r9, r5
 8001a22:	46a0      	mov	r8, r4
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a26:	2400      	movs	r4, #0
 8001a28:	2500      	movs	r5, #0
 8001a2a:	4aaa      	ldr	r2, [pc, #680]	; (8001cd4 <__aeabi_dmul+0x38c>)
 8001a2c:	e7ed      	b.n	8001a0a <__aeabi_dmul+0xc2>
 8001a2e:	0c28      	lsrs	r0, r5, #16
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	0c2d      	lsrs	r5, r5, #16
 8001a34:	002b      	movs	r3, r5
 8001a36:	0c11      	lsrs	r1, r2, #16
 8001a38:	0412      	lsls	r2, r2, #16
 8001a3a:	0c12      	lsrs	r2, r2, #16
 8001a3c:	4353      	muls	r3, r2
 8001a3e:	4698      	mov	r8, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	002f      	movs	r7, r5
 8001a44:	4343      	muls	r3, r0
 8001a46:	4699      	mov	r9, r3
 8001a48:	434f      	muls	r7, r1
 8001a4a:	444f      	add	r7, r9
 8001a4c:	46bb      	mov	fp, r7
 8001a4e:	4647      	mov	r7, r8
 8001a50:	000b      	movs	r3, r1
 8001a52:	0c3f      	lsrs	r7, r7, #16
 8001a54:	46ba      	mov	sl, r7
 8001a56:	4343      	muls	r3, r0
 8001a58:	44da      	add	sl, fp
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	45d1      	cmp	r9, sl
 8001a5e:	d904      	bls.n	8001a6a <__aeabi_dmul+0x122>
 8001a60:	2780      	movs	r7, #128	; 0x80
 8001a62:	027f      	lsls	r7, r7, #9
 8001a64:	46b9      	mov	r9, r7
 8001a66:	444b      	add	r3, r9
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	4653      	mov	r3, sl
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	469b      	mov	fp, r3
 8001a70:	4653      	mov	r3, sl
 8001a72:	041f      	lsls	r7, r3, #16
 8001a74:	4643      	mov	r3, r8
 8001a76:	041b      	lsls	r3, r3, #16
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	4698      	mov	r8, r3
 8001a7c:	003b      	movs	r3, r7
 8001a7e:	4443      	add	r3, r8
 8001a80:	9304      	str	r3, [sp, #16]
 8001a82:	0c33      	lsrs	r3, r6, #16
 8001a84:	0436      	lsls	r6, r6, #16
 8001a86:	0c36      	lsrs	r6, r6, #16
 8001a88:	4698      	mov	r8, r3
 8001a8a:	0033      	movs	r3, r6
 8001a8c:	4343      	muls	r3, r0
 8001a8e:	4699      	mov	r9, r3
 8001a90:	4643      	mov	r3, r8
 8001a92:	4343      	muls	r3, r0
 8001a94:	002f      	movs	r7, r5
 8001a96:	469a      	mov	sl, r3
 8001a98:	4643      	mov	r3, r8
 8001a9a:	4377      	muls	r7, r6
 8001a9c:	435d      	muls	r5, r3
 8001a9e:	0c38      	lsrs	r0, r7, #16
 8001aa0:	444d      	add	r5, r9
 8001aa2:	1945      	adds	r5, r0, r5
 8001aa4:	45a9      	cmp	r9, r5
 8001aa6:	d903      	bls.n	8001ab0 <__aeabi_dmul+0x168>
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	025b      	lsls	r3, r3, #9
 8001aac:	4699      	mov	r9, r3
 8001aae:	44ca      	add	sl, r9
 8001ab0:	043f      	lsls	r7, r7, #16
 8001ab2:	0c28      	lsrs	r0, r5, #16
 8001ab4:	0c3f      	lsrs	r7, r7, #16
 8001ab6:	042d      	lsls	r5, r5, #16
 8001ab8:	19ed      	adds	r5, r5, r7
 8001aba:	0c27      	lsrs	r7, r4, #16
 8001abc:	0424      	lsls	r4, r4, #16
 8001abe:	0c24      	lsrs	r4, r4, #16
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	0020      	movs	r0, r4
 8001ac4:	4350      	muls	r0, r2
 8001ac6:	437a      	muls	r2, r7
 8001ac8:	4691      	mov	r9, r2
 8001aca:	003a      	movs	r2, r7
 8001acc:	4453      	add	r3, sl
 8001ace:	9305      	str	r3, [sp, #20]
 8001ad0:	0c03      	lsrs	r3, r0, #16
 8001ad2:	469a      	mov	sl, r3
 8001ad4:	434a      	muls	r2, r1
 8001ad6:	4361      	muls	r1, r4
 8001ad8:	4449      	add	r1, r9
 8001ada:	4451      	add	r1, sl
 8001adc:	44ab      	add	fp, r5
 8001ade:	4589      	cmp	r9, r1
 8001ae0:	d903      	bls.n	8001aea <__aeabi_dmul+0x1a2>
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	025b      	lsls	r3, r3, #9
 8001ae6:	4699      	mov	r9, r3
 8001ae8:	444a      	add	r2, r9
 8001aea:	0400      	lsls	r0, r0, #16
 8001aec:	0c0b      	lsrs	r3, r1, #16
 8001aee:	0c00      	lsrs	r0, r0, #16
 8001af0:	0409      	lsls	r1, r1, #16
 8001af2:	1809      	adds	r1, r1, r0
 8001af4:	0020      	movs	r0, r4
 8001af6:	4699      	mov	r9, r3
 8001af8:	4643      	mov	r3, r8
 8001afa:	4370      	muls	r0, r6
 8001afc:	435c      	muls	r4, r3
 8001afe:	437e      	muls	r6, r7
 8001b00:	435f      	muls	r7, r3
 8001b02:	0c03      	lsrs	r3, r0, #16
 8001b04:	4698      	mov	r8, r3
 8001b06:	19a4      	adds	r4, r4, r6
 8001b08:	4444      	add	r4, r8
 8001b0a:	444a      	add	r2, r9
 8001b0c:	9703      	str	r7, [sp, #12]
 8001b0e:	42a6      	cmp	r6, r4
 8001b10:	d904      	bls.n	8001b1c <__aeabi_dmul+0x1d4>
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	025b      	lsls	r3, r3, #9
 8001b16:	4698      	mov	r8, r3
 8001b18:	4447      	add	r7, r8
 8001b1a:	9703      	str	r7, [sp, #12]
 8001b1c:	0423      	lsls	r3, r4, #16
 8001b1e:	9e02      	ldr	r6, [sp, #8]
 8001b20:	469a      	mov	sl, r3
 8001b22:	9b05      	ldr	r3, [sp, #20]
 8001b24:	445e      	add	r6, fp
 8001b26:	4698      	mov	r8, r3
 8001b28:	42ae      	cmp	r6, r5
 8001b2a:	41ad      	sbcs	r5, r5
 8001b2c:	1876      	adds	r6, r6, r1
 8001b2e:	428e      	cmp	r6, r1
 8001b30:	4189      	sbcs	r1, r1
 8001b32:	0400      	lsls	r0, r0, #16
 8001b34:	0c00      	lsrs	r0, r0, #16
 8001b36:	4450      	add	r0, sl
 8001b38:	4440      	add	r0, r8
 8001b3a:	426d      	negs	r5, r5
 8001b3c:	1947      	adds	r7, r0, r5
 8001b3e:	46b8      	mov	r8, r7
 8001b40:	4693      	mov	fp, r2
 8001b42:	4249      	negs	r1, r1
 8001b44:	4689      	mov	r9, r1
 8001b46:	44c3      	add	fp, r8
 8001b48:	44d9      	add	r9, fp
 8001b4a:	4298      	cmp	r0, r3
 8001b4c:	4180      	sbcs	r0, r0
 8001b4e:	45a8      	cmp	r8, r5
 8001b50:	41ad      	sbcs	r5, r5
 8001b52:	4593      	cmp	fp, r2
 8001b54:	4192      	sbcs	r2, r2
 8001b56:	4589      	cmp	r9, r1
 8001b58:	4189      	sbcs	r1, r1
 8001b5a:	426d      	negs	r5, r5
 8001b5c:	4240      	negs	r0, r0
 8001b5e:	4328      	orrs	r0, r5
 8001b60:	0c24      	lsrs	r4, r4, #16
 8001b62:	4252      	negs	r2, r2
 8001b64:	4249      	negs	r1, r1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	9b03      	ldr	r3, [sp, #12]
 8001b6a:	1900      	adds	r0, r0, r4
 8001b6c:	1880      	adds	r0, r0, r2
 8001b6e:	18c7      	adds	r7, r0, r3
 8001b70:	464b      	mov	r3, r9
 8001b72:	0ddc      	lsrs	r4, r3, #23
 8001b74:	9b04      	ldr	r3, [sp, #16]
 8001b76:	0275      	lsls	r5, r6, #9
 8001b78:	431d      	orrs	r5, r3
 8001b7a:	1e6a      	subs	r2, r5, #1
 8001b7c:	4195      	sbcs	r5, r2
 8001b7e:	464b      	mov	r3, r9
 8001b80:	0df6      	lsrs	r6, r6, #23
 8001b82:	027f      	lsls	r7, r7, #9
 8001b84:	4335      	orrs	r5, r6
 8001b86:	025a      	lsls	r2, r3, #9
 8001b88:	433c      	orrs	r4, r7
 8001b8a:	4315      	orrs	r5, r2
 8001b8c:	01fb      	lsls	r3, r7, #7
 8001b8e:	d400      	bmi.n	8001b92 <__aeabi_dmul+0x24a>
 8001b90:	e11c      	b.n	8001dcc <__aeabi_dmul+0x484>
 8001b92:	2101      	movs	r1, #1
 8001b94:	086a      	lsrs	r2, r5, #1
 8001b96:	400d      	ands	r5, r1
 8001b98:	4315      	orrs	r5, r2
 8001b9a:	07e2      	lsls	r2, r4, #31
 8001b9c:	4315      	orrs	r5, r2
 8001b9e:	0864      	lsrs	r4, r4, #1
 8001ba0:	494f      	ldr	r1, [pc, #316]	; (8001ce0 <__aeabi_dmul+0x398>)
 8001ba2:	4461      	add	r1, ip
 8001ba4:	2900      	cmp	r1, #0
 8001ba6:	dc00      	bgt.n	8001baa <__aeabi_dmul+0x262>
 8001ba8:	e0b0      	b.n	8001d0c <__aeabi_dmul+0x3c4>
 8001baa:	076b      	lsls	r3, r5, #29
 8001bac:	d009      	beq.n	8001bc2 <__aeabi_dmul+0x27a>
 8001bae:	220f      	movs	r2, #15
 8001bb0:	402a      	ands	r2, r5
 8001bb2:	2a04      	cmp	r2, #4
 8001bb4:	d005      	beq.n	8001bc2 <__aeabi_dmul+0x27a>
 8001bb6:	1d2a      	adds	r2, r5, #4
 8001bb8:	42aa      	cmp	r2, r5
 8001bba:	41ad      	sbcs	r5, r5
 8001bbc:	426d      	negs	r5, r5
 8001bbe:	1964      	adds	r4, r4, r5
 8001bc0:	0015      	movs	r5, r2
 8001bc2:	01e3      	lsls	r3, r4, #7
 8001bc4:	d504      	bpl.n	8001bd0 <__aeabi_dmul+0x288>
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	4a46      	ldr	r2, [pc, #280]	; (8001ce4 <__aeabi_dmul+0x39c>)
 8001bca:	00c9      	lsls	r1, r1, #3
 8001bcc:	4014      	ands	r4, r2
 8001bce:	4461      	add	r1, ip
 8001bd0:	4a45      	ldr	r2, [pc, #276]	; (8001ce8 <__aeabi_dmul+0x3a0>)
 8001bd2:	4291      	cmp	r1, r2
 8001bd4:	dd00      	ble.n	8001bd8 <__aeabi_dmul+0x290>
 8001bd6:	e726      	b.n	8001a26 <__aeabi_dmul+0xde>
 8001bd8:	0762      	lsls	r2, r4, #29
 8001bda:	08ed      	lsrs	r5, r5, #3
 8001bdc:	0264      	lsls	r4, r4, #9
 8001bde:	0549      	lsls	r1, r1, #21
 8001be0:	4315      	orrs	r5, r2
 8001be2:	0b24      	lsrs	r4, r4, #12
 8001be4:	0d4a      	lsrs	r2, r1, #21
 8001be6:	e710      	b.n	8001a0a <__aeabi_dmul+0xc2>
 8001be8:	4652      	mov	r2, sl
 8001bea:	4332      	orrs	r2, r6
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dmul+0x2a8>
 8001bee:	e07f      	b.n	8001cf0 <__aeabi_dmul+0x3a8>
 8001bf0:	2e00      	cmp	r6, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dmul+0x2ae>
 8001bf4:	e0dc      	b.n	8001db0 <__aeabi_dmul+0x468>
 8001bf6:	0030      	movs	r0, r6
 8001bf8:	f000 fe1e 	bl	8002838 <__clzsi2>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	3a0b      	subs	r2, #11
 8001c00:	231d      	movs	r3, #29
 8001c02:	0001      	movs	r1, r0
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	4652      	mov	r2, sl
 8001c08:	3908      	subs	r1, #8
 8001c0a:	40da      	lsrs	r2, r3
 8001c0c:	408e      	lsls	r6, r1
 8001c0e:	4316      	orrs	r6, r2
 8001c10:	4652      	mov	r2, sl
 8001c12:	408a      	lsls	r2, r1
 8001c14:	9b00      	ldr	r3, [sp, #0]
 8001c16:	4935      	ldr	r1, [pc, #212]	; (8001cec <__aeabi_dmul+0x3a4>)
 8001c18:	1a18      	subs	r0, r3, r0
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	468c      	mov	ip, r1
 8001c1e:	4463      	add	r3, ip
 8001c20:	2000      	movs	r0, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	e6d3      	b.n	80019ce <__aeabi_dmul+0x86>
 8001c26:	0025      	movs	r5, r4
 8001c28:	4305      	orrs	r5, r0
 8001c2a:	d04a      	beq.n	8001cc2 <__aeabi_dmul+0x37a>
 8001c2c:	2c00      	cmp	r4, #0
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dmul+0x2ea>
 8001c30:	e0b0      	b.n	8001d94 <__aeabi_dmul+0x44c>
 8001c32:	0020      	movs	r0, r4
 8001c34:	f000 fe00 	bl	8002838 <__clzsi2>
 8001c38:	0001      	movs	r1, r0
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	390b      	subs	r1, #11
 8001c3e:	231d      	movs	r3, #29
 8001c40:	0010      	movs	r0, r2
 8001c42:	1a5b      	subs	r3, r3, r1
 8001c44:	0031      	movs	r1, r6
 8001c46:	0035      	movs	r5, r6
 8001c48:	3808      	subs	r0, #8
 8001c4a:	4084      	lsls	r4, r0
 8001c4c:	40d9      	lsrs	r1, r3
 8001c4e:	4085      	lsls	r5, r0
 8001c50:	430c      	orrs	r4, r1
 8001c52:	4826      	ldr	r0, [pc, #152]	; (8001cec <__aeabi_dmul+0x3a4>)
 8001c54:	1a83      	subs	r3, r0, r2
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	4699      	mov	r9, r3
 8001c5c:	469b      	mov	fp, r3
 8001c5e:	e697      	b.n	8001990 <__aeabi_dmul+0x48>
 8001c60:	0005      	movs	r5, r0
 8001c62:	4325      	orrs	r5, r4
 8001c64:	d126      	bne.n	8001cb4 <__aeabi_dmul+0x36c>
 8001c66:	2208      	movs	r2, #8
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	2400      	movs	r4, #0
 8001c6e:	4691      	mov	r9, r2
 8001c70:	469b      	mov	fp, r3
 8001c72:	e68d      	b.n	8001990 <__aeabi_dmul+0x48>
 8001c74:	4652      	mov	r2, sl
 8001c76:	9b00      	ldr	r3, [sp, #0]
 8001c78:	4332      	orrs	r2, r6
 8001c7a:	d110      	bne.n	8001c9e <__aeabi_dmul+0x356>
 8001c7c:	4915      	ldr	r1, [pc, #84]	; (8001cd4 <__aeabi_dmul+0x38c>)
 8001c7e:	2600      	movs	r6, #0
 8001c80:	468c      	mov	ip, r1
 8001c82:	4463      	add	r3, ip
 8001c84:	4649      	mov	r1, r9
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2302      	movs	r3, #2
 8001c8a:	4319      	orrs	r1, r3
 8001c8c:	4689      	mov	r9, r1
 8001c8e:	2002      	movs	r0, #2
 8001c90:	e69d      	b.n	80019ce <__aeabi_dmul+0x86>
 8001c92:	465b      	mov	r3, fp
 8001c94:	9701      	str	r7, [sp, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d000      	beq.n	8001c9c <__aeabi_dmul+0x354>
 8001c9a:	e6ad      	b.n	80019f8 <__aeabi_dmul+0xb0>
 8001c9c:	e6c3      	b.n	8001a26 <__aeabi_dmul+0xde>
 8001c9e:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <__aeabi_dmul+0x38c>)
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	4694      	mov	ip, r2
 8001ca4:	4463      	add	r3, ip
 8001ca6:	464a      	mov	r2, r9
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2303      	movs	r3, #3
 8001cac:	431a      	orrs	r2, r3
 8001cae:	4691      	mov	r9, r2
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	e68c      	b.n	80019ce <__aeabi_dmul+0x86>
 8001cb4:	220c      	movs	r2, #12
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2303      	movs	r3, #3
 8001cba:	0005      	movs	r5, r0
 8001cbc:	4691      	mov	r9, r2
 8001cbe:	469b      	mov	fp, r3
 8001cc0:	e666      	b.n	8001990 <__aeabi_dmul+0x48>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	2400      	movs	r4, #0
 8001cce:	469b      	mov	fp, r3
 8001cd0:	e65e      	b.n	8001990 <__aeabi_dmul+0x48>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	fffffc01 	.word	0xfffffc01
 8001cdc:	080095bc 	.word	0x080095bc
 8001ce0:	000003ff 	.word	0x000003ff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	fffffc0d 	.word	0xfffffc0d
 8001cf0:	4649      	mov	r1, r9
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	4319      	orrs	r1, r3
 8001cf6:	4689      	mov	r9, r1
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	e667      	b.n	80019ce <__aeabi_dmul+0x86>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2480      	movs	r4, #128	; 0x80
 8001d02:	2500      	movs	r5, #0
 8001d04:	4a43      	ldr	r2, [pc, #268]	; (8001e14 <__aeabi_dmul+0x4cc>)
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	0324      	lsls	r4, r4, #12
 8001d0a:	e67e      	b.n	8001a0a <__aeabi_dmul+0xc2>
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	1a40      	subs	r0, r0, r1
 8001d10:	2838      	cmp	r0, #56	; 0x38
 8001d12:	dd00      	ble.n	8001d16 <__aeabi_dmul+0x3ce>
 8001d14:	e676      	b.n	8001a04 <__aeabi_dmul+0xbc>
 8001d16:	281f      	cmp	r0, #31
 8001d18:	dd5b      	ble.n	8001dd2 <__aeabi_dmul+0x48a>
 8001d1a:	221f      	movs	r2, #31
 8001d1c:	0023      	movs	r3, r4
 8001d1e:	4252      	negs	r2, r2
 8001d20:	1a51      	subs	r1, r2, r1
 8001d22:	40cb      	lsrs	r3, r1
 8001d24:	0019      	movs	r1, r3
 8001d26:	2820      	cmp	r0, #32
 8001d28:	d003      	beq.n	8001d32 <__aeabi_dmul+0x3ea>
 8001d2a:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <__aeabi_dmul+0x4d0>)
 8001d2c:	4462      	add	r2, ip
 8001d2e:	4094      	lsls	r4, r2
 8001d30:	4325      	orrs	r5, r4
 8001d32:	1e6a      	subs	r2, r5, #1
 8001d34:	4195      	sbcs	r5, r2
 8001d36:	002a      	movs	r2, r5
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	2107      	movs	r1, #7
 8001d3c:	000d      	movs	r5, r1
 8001d3e:	2400      	movs	r4, #0
 8001d40:	4015      	ands	r5, r2
 8001d42:	4211      	tst	r1, r2
 8001d44:	d05b      	beq.n	8001dfe <__aeabi_dmul+0x4b6>
 8001d46:	210f      	movs	r1, #15
 8001d48:	2400      	movs	r4, #0
 8001d4a:	4011      	ands	r1, r2
 8001d4c:	2904      	cmp	r1, #4
 8001d4e:	d053      	beq.n	8001df8 <__aeabi_dmul+0x4b0>
 8001d50:	1d11      	adds	r1, r2, #4
 8001d52:	4291      	cmp	r1, r2
 8001d54:	4192      	sbcs	r2, r2
 8001d56:	4252      	negs	r2, r2
 8001d58:	18a4      	adds	r4, r4, r2
 8001d5a:	000a      	movs	r2, r1
 8001d5c:	0223      	lsls	r3, r4, #8
 8001d5e:	d54b      	bpl.n	8001df8 <__aeabi_dmul+0x4b0>
 8001d60:	2201      	movs	r2, #1
 8001d62:	2400      	movs	r4, #0
 8001d64:	2500      	movs	r5, #0
 8001d66:	e650      	b.n	8001a0a <__aeabi_dmul+0xc2>
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	031b      	lsls	r3, r3, #12
 8001d6c:	421c      	tst	r4, r3
 8001d6e:	d009      	beq.n	8001d84 <__aeabi_dmul+0x43c>
 8001d70:	421e      	tst	r6, r3
 8001d72:	d107      	bne.n	8001d84 <__aeabi_dmul+0x43c>
 8001d74:	4333      	orrs	r3, r6
 8001d76:	031c      	lsls	r4, r3, #12
 8001d78:	4643      	mov	r3, r8
 8001d7a:	0015      	movs	r5, r2
 8001d7c:	0b24      	lsrs	r4, r4, #12
 8001d7e:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <__aeabi_dmul+0x4cc>)
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	e642      	b.n	8001a0a <__aeabi_dmul+0xc2>
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	0312      	lsls	r2, r2, #12
 8001d88:	4314      	orrs	r4, r2
 8001d8a:	0324      	lsls	r4, r4, #12
 8001d8c:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <__aeabi_dmul+0x4cc>)
 8001d8e:	0b24      	lsrs	r4, r4, #12
 8001d90:	9701      	str	r7, [sp, #4]
 8001d92:	e63a      	b.n	8001a0a <__aeabi_dmul+0xc2>
 8001d94:	f000 fd50 	bl	8002838 <__clzsi2>
 8001d98:	0001      	movs	r1, r0
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	3115      	adds	r1, #21
 8001d9e:	3220      	adds	r2, #32
 8001da0:	291c      	cmp	r1, #28
 8001da2:	dc00      	bgt.n	8001da6 <__aeabi_dmul+0x45e>
 8001da4:	e74b      	b.n	8001c3e <__aeabi_dmul+0x2f6>
 8001da6:	0034      	movs	r4, r6
 8001da8:	3808      	subs	r0, #8
 8001daa:	2500      	movs	r5, #0
 8001dac:	4084      	lsls	r4, r0
 8001dae:	e750      	b.n	8001c52 <__aeabi_dmul+0x30a>
 8001db0:	f000 fd42 	bl	8002838 <__clzsi2>
 8001db4:	0003      	movs	r3, r0
 8001db6:	001a      	movs	r2, r3
 8001db8:	3215      	adds	r2, #21
 8001dba:	3020      	adds	r0, #32
 8001dbc:	2a1c      	cmp	r2, #28
 8001dbe:	dc00      	bgt.n	8001dc2 <__aeabi_dmul+0x47a>
 8001dc0:	e71e      	b.n	8001c00 <__aeabi_dmul+0x2b8>
 8001dc2:	4656      	mov	r6, sl
 8001dc4:	3b08      	subs	r3, #8
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	409e      	lsls	r6, r3
 8001dca:	e723      	b.n	8001c14 <__aeabi_dmul+0x2cc>
 8001dcc:	9b00      	ldr	r3, [sp, #0]
 8001dce:	469c      	mov	ip, r3
 8001dd0:	e6e6      	b.n	8001ba0 <__aeabi_dmul+0x258>
 8001dd2:	4912      	ldr	r1, [pc, #72]	; (8001e1c <__aeabi_dmul+0x4d4>)
 8001dd4:	0022      	movs	r2, r4
 8001dd6:	4461      	add	r1, ip
 8001dd8:	002e      	movs	r6, r5
 8001dda:	408d      	lsls	r5, r1
 8001ddc:	408a      	lsls	r2, r1
 8001dde:	40c6      	lsrs	r6, r0
 8001de0:	1e69      	subs	r1, r5, #1
 8001de2:	418d      	sbcs	r5, r1
 8001de4:	4332      	orrs	r2, r6
 8001de6:	432a      	orrs	r2, r5
 8001de8:	40c4      	lsrs	r4, r0
 8001dea:	0753      	lsls	r3, r2, #29
 8001dec:	d0b6      	beq.n	8001d5c <__aeabi_dmul+0x414>
 8001dee:	210f      	movs	r1, #15
 8001df0:	4011      	ands	r1, r2
 8001df2:	2904      	cmp	r1, #4
 8001df4:	d1ac      	bne.n	8001d50 <__aeabi_dmul+0x408>
 8001df6:	e7b1      	b.n	8001d5c <__aeabi_dmul+0x414>
 8001df8:	0765      	lsls	r5, r4, #29
 8001dfa:	0264      	lsls	r4, r4, #9
 8001dfc:	0b24      	lsrs	r4, r4, #12
 8001dfe:	08d2      	lsrs	r2, r2, #3
 8001e00:	4315      	orrs	r5, r2
 8001e02:	2200      	movs	r2, #0
 8001e04:	e601      	b.n	8001a0a <__aeabi_dmul+0xc2>
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	0312      	lsls	r2, r2, #12
 8001e0a:	4314      	orrs	r4, r2
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	4a01      	ldr	r2, [pc, #4]	; (8001e14 <__aeabi_dmul+0x4cc>)
 8001e10:	0b24      	lsrs	r4, r4, #12
 8001e12:	e5fa      	b.n	8001a0a <__aeabi_dmul+0xc2>
 8001e14:	000007ff 	.word	0x000007ff
 8001e18:	0000043e 	.word	0x0000043e
 8001e1c:	0000041e 	.word	0x0000041e

08001e20 <__aeabi_dsub>:
 8001e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e22:	4657      	mov	r7, sl
 8001e24:	464e      	mov	r6, r9
 8001e26:	4645      	mov	r5, r8
 8001e28:	46de      	mov	lr, fp
 8001e2a:	b5e0      	push	{r5, r6, r7, lr}
 8001e2c:	001e      	movs	r6, r3
 8001e2e:	0017      	movs	r7, r2
 8001e30:	004a      	lsls	r2, r1, #1
 8001e32:	030b      	lsls	r3, r1, #12
 8001e34:	0d52      	lsrs	r2, r2, #21
 8001e36:	0a5b      	lsrs	r3, r3, #9
 8001e38:	4690      	mov	r8, r2
 8001e3a:	0f42      	lsrs	r2, r0, #29
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	0fcd      	lsrs	r5, r1, #31
 8001e40:	4ccd      	ldr	r4, [pc, #820]	; (8002178 <__aeabi_dsub+0x358>)
 8001e42:	0331      	lsls	r1, r6, #12
 8001e44:	00c3      	lsls	r3, r0, #3
 8001e46:	4694      	mov	ip, r2
 8001e48:	0070      	lsls	r0, r6, #1
 8001e4a:	0f7a      	lsrs	r2, r7, #29
 8001e4c:	0a49      	lsrs	r1, r1, #9
 8001e4e:	00ff      	lsls	r7, r7, #3
 8001e50:	469a      	mov	sl, r3
 8001e52:	46b9      	mov	r9, r7
 8001e54:	0d40      	lsrs	r0, r0, #21
 8001e56:	0ff6      	lsrs	r6, r6, #31
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	42a0      	cmp	r0, r4
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x40>
 8001e5e:	e0b1      	b.n	8001fc4 <__aeabi_dsub+0x1a4>
 8001e60:	2201      	movs	r2, #1
 8001e62:	4056      	eors	r6, r2
 8001e64:	46b3      	mov	fp, r6
 8001e66:	42b5      	cmp	r5, r6
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x4c>
 8001e6a:	e088      	b.n	8001f7e <__aeabi_dsub+0x15e>
 8001e6c:	4642      	mov	r2, r8
 8001e6e:	1a12      	subs	r2, r2, r0
 8001e70:	2a00      	cmp	r2, #0
 8001e72:	dc00      	bgt.n	8001e76 <__aeabi_dsub+0x56>
 8001e74:	e0ae      	b.n	8001fd4 <__aeabi_dsub+0x1b4>
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x5c>
 8001e7a:	e0c1      	b.n	8002000 <__aeabi_dsub+0x1e0>
 8001e7c:	48be      	ldr	r0, [pc, #760]	; (8002178 <__aeabi_dsub+0x358>)
 8001e7e:	4580      	cmp	r8, r0
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x64>
 8001e82:	e151      	b.n	8002128 <__aeabi_dsub+0x308>
 8001e84:	2080      	movs	r0, #128	; 0x80
 8001e86:	0400      	lsls	r0, r0, #16
 8001e88:	4301      	orrs	r1, r0
 8001e8a:	2a38      	cmp	r2, #56	; 0x38
 8001e8c:	dd00      	ble.n	8001e90 <__aeabi_dsub+0x70>
 8001e8e:	e17b      	b.n	8002188 <__aeabi_dsub+0x368>
 8001e90:	2a1f      	cmp	r2, #31
 8001e92:	dd00      	ble.n	8001e96 <__aeabi_dsub+0x76>
 8001e94:	e1ee      	b.n	8002274 <__aeabi_dsub+0x454>
 8001e96:	2020      	movs	r0, #32
 8001e98:	003e      	movs	r6, r7
 8001e9a:	1a80      	subs	r0, r0, r2
 8001e9c:	000c      	movs	r4, r1
 8001e9e:	40d6      	lsrs	r6, r2
 8001ea0:	40d1      	lsrs	r1, r2
 8001ea2:	4087      	lsls	r7, r0
 8001ea4:	4662      	mov	r2, ip
 8001ea6:	4084      	lsls	r4, r0
 8001ea8:	1a52      	subs	r2, r2, r1
 8001eaa:	1e78      	subs	r0, r7, #1
 8001eac:	4187      	sbcs	r7, r0
 8001eae:	4694      	mov	ip, r2
 8001eb0:	4334      	orrs	r4, r6
 8001eb2:	4327      	orrs	r7, r4
 8001eb4:	1bdc      	subs	r4, r3, r7
 8001eb6:	42a3      	cmp	r3, r4
 8001eb8:	419b      	sbcs	r3, r3
 8001eba:	4662      	mov	r2, ip
 8001ebc:	425b      	negs	r3, r3
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	4699      	mov	r9, r3
 8001ec2:	464b      	mov	r3, r9
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	d400      	bmi.n	8001eca <__aeabi_dsub+0xaa>
 8001ec8:	e118      	b.n	80020fc <__aeabi_dsub+0x2dc>
 8001eca:	464b      	mov	r3, r9
 8001ecc:	0258      	lsls	r0, r3, #9
 8001ece:	0a43      	lsrs	r3, r0, #9
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0xba>
 8001ed8:	e137      	b.n	800214a <__aeabi_dsub+0x32a>
 8001eda:	4648      	mov	r0, r9
 8001edc:	f000 fcac 	bl	8002838 <__clzsi2>
 8001ee0:	0001      	movs	r1, r0
 8001ee2:	3908      	subs	r1, #8
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	0022      	movs	r2, r4
 8001ee8:	4648      	mov	r0, r9
 8001eea:	1a5b      	subs	r3, r3, r1
 8001eec:	40da      	lsrs	r2, r3
 8001eee:	4088      	lsls	r0, r1
 8001ef0:	408c      	lsls	r4, r1
 8001ef2:	4643      	mov	r3, r8
 8001ef4:	4310      	orrs	r0, r2
 8001ef6:	4588      	cmp	r8, r1
 8001ef8:	dd00      	ble.n	8001efc <__aeabi_dsub+0xdc>
 8001efa:	e136      	b.n	800216a <__aeabi_dsub+0x34a>
 8001efc:	1ac9      	subs	r1, r1, r3
 8001efe:	1c4b      	adds	r3, r1, #1
 8001f00:	2b1f      	cmp	r3, #31
 8001f02:	dd00      	ble.n	8001f06 <__aeabi_dsub+0xe6>
 8001f04:	e0ea      	b.n	80020dc <__aeabi_dsub+0x2bc>
 8001f06:	2220      	movs	r2, #32
 8001f08:	0026      	movs	r6, r4
 8001f0a:	1ad2      	subs	r2, r2, r3
 8001f0c:	0001      	movs	r1, r0
 8001f0e:	4094      	lsls	r4, r2
 8001f10:	40de      	lsrs	r6, r3
 8001f12:	40d8      	lsrs	r0, r3
 8001f14:	2300      	movs	r3, #0
 8001f16:	4091      	lsls	r1, r2
 8001f18:	1e62      	subs	r2, r4, #1
 8001f1a:	4194      	sbcs	r4, r2
 8001f1c:	4681      	mov	r9, r0
 8001f1e:	4698      	mov	r8, r3
 8001f20:	4331      	orrs	r1, r6
 8001f22:	430c      	orrs	r4, r1
 8001f24:	0763      	lsls	r3, r4, #29
 8001f26:	d009      	beq.n	8001f3c <__aeabi_dsub+0x11c>
 8001f28:	230f      	movs	r3, #15
 8001f2a:	4023      	ands	r3, r4
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d005      	beq.n	8001f3c <__aeabi_dsub+0x11c>
 8001f30:	1d23      	adds	r3, r4, #4
 8001f32:	42a3      	cmp	r3, r4
 8001f34:	41a4      	sbcs	r4, r4
 8001f36:	4264      	negs	r4, r4
 8001f38:	44a1      	add	r9, r4
 8001f3a:	001c      	movs	r4, r3
 8001f3c:	464b      	mov	r3, r9
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	d400      	bmi.n	8001f44 <__aeabi_dsub+0x124>
 8001f42:	e0de      	b.n	8002102 <__aeabi_dsub+0x2e2>
 8001f44:	4641      	mov	r1, r8
 8001f46:	4b8c      	ldr	r3, [pc, #560]	; (8002178 <__aeabi_dsub+0x358>)
 8001f48:	3101      	adds	r1, #1
 8001f4a:	4299      	cmp	r1, r3
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x130>
 8001f4e:	e0e7      	b.n	8002120 <__aeabi_dsub+0x300>
 8001f50:	464b      	mov	r3, r9
 8001f52:	488a      	ldr	r0, [pc, #552]	; (800217c <__aeabi_dsub+0x35c>)
 8001f54:	08e4      	lsrs	r4, r4, #3
 8001f56:	4003      	ands	r3, r0
 8001f58:	0018      	movs	r0, r3
 8001f5a:	0549      	lsls	r1, r1, #21
 8001f5c:	075b      	lsls	r3, r3, #29
 8001f5e:	0240      	lsls	r0, r0, #9
 8001f60:	4323      	orrs	r3, r4
 8001f62:	0d4a      	lsrs	r2, r1, #21
 8001f64:	0b04      	lsrs	r4, r0, #12
 8001f66:	0512      	lsls	r2, r2, #20
 8001f68:	07ed      	lsls	r5, r5, #31
 8001f6a:	4322      	orrs	r2, r4
 8001f6c:	432a      	orrs	r2, r5
 8001f6e:	0018      	movs	r0, r3
 8001f70:	0011      	movs	r1, r2
 8001f72:	bcf0      	pop	{r4, r5, r6, r7}
 8001f74:	46bb      	mov	fp, r7
 8001f76:	46b2      	mov	sl, r6
 8001f78:	46a9      	mov	r9, r5
 8001f7a:	46a0      	mov	r8, r4
 8001f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f7e:	4642      	mov	r2, r8
 8001f80:	1a12      	subs	r2, r2, r0
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	dd52      	ble.n	800202c <__aeabi_dsub+0x20c>
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x16c>
 8001f8a:	e09c      	b.n	80020c6 <__aeabi_dsub+0x2a6>
 8001f8c:	45a0      	cmp	r8, r4
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dsub+0x172>
 8001f90:	e0ca      	b.n	8002128 <__aeabi_dsub+0x308>
 8001f92:	2080      	movs	r0, #128	; 0x80
 8001f94:	0400      	lsls	r0, r0, #16
 8001f96:	4301      	orrs	r1, r0
 8001f98:	2a38      	cmp	r2, #56	; 0x38
 8001f9a:	dd00      	ble.n	8001f9e <__aeabi_dsub+0x17e>
 8001f9c:	e149      	b.n	8002232 <__aeabi_dsub+0x412>
 8001f9e:	2a1f      	cmp	r2, #31
 8001fa0:	dc00      	bgt.n	8001fa4 <__aeabi_dsub+0x184>
 8001fa2:	e197      	b.n	80022d4 <__aeabi_dsub+0x4b4>
 8001fa4:	0010      	movs	r0, r2
 8001fa6:	000e      	movs	r6, r1
 8001fa8:	3820      	subs	r0, #32
 8001faa:	40c6      	lsrs	r6, r0
 8001fac:	2a20      	cmp	r2, #32
 8001fae:	d004      	beq.n	8001fba <__aeabi_dsub+0x19a>
 8001fb0:	2040      	movs	r0, #64	; 0x40
 8001fb2:	1a82      	subs	r2, r0, r2
 8001fb4:	4091      	lsls	r1, r2
 8001fb6:	430f      	orrs	r7, r1
 8001fb8:	46b9      	mov	r9, r7
 8001fba:	464c      	mov	r4, r9
 8001fbc:	1e62      	subs	r2, r4, #1
 8001fbe:	4194      	sbcs	r4, r2
 8001fc0:	4334      	orrs	r4, r6
 8001fc2:	e13a      	b.n	800223a <__aeabi_dsub+0x41a>
 8001fc4:	000a      	movs	r2, r1
 8001fc6:	433a      	orrs	r2, r7
 8001fc8:	d028      	beq.n	800201c <__aeabi_dsub+0x1fc>
 8001fca:	46b3      	mov	fp, r6
 8001fcc:	42b5      	cmp	r5, r6
 8001fce:	d02b      	beq.n	8002028 <__aeabi_dsub+0x208>
 8001fd0:	4a6b      	ldr	r2, [pc, #428]	; (8002180 <__aeabi_dsub+0x360>)
 8001fd2:	4442      	add	r2, r8
 8001fd4:	2a00      	cmp	r2, #0
 8001fd6:	d05d      	beq.n	8002094 <__aeabi_dsub+0x274>
 8001fd8:	4642      	mov	r2, r8
 8001fda:	4644      	mov	r4, r8
 8001fdc:	1a82      	subs	r2, r0, r2
 8001fde:	2c00      	cmp	r4, #0
 8001fe0:	d000      	beq.n	8001fe4 <__aeabi_dsub+0x1c4>
 8001fe2:	e0f5      	b.n	80021d0 <__aeabi_dsub+0x3b0>
 8001fe4:	4665      	mov	r5, ip
 8001fe6:	431d      	orrs	r5, r3
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x1cc>
 8001fea:	e19c      	b.n	8002326 <__aeabi_dsub+0x506>
 8001fec:	1e55      	subs	r5, r2, #1
 8001fee:	2a01      	cmp	r2, #1
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dsub+0x1d4>
 8001ff2:	e1fb      	b.n	80023ec <__aeabi_dsub+0x5cc>
 8001ff4:	4c60      	ldr	r4, [pc, #384]	; (8002178 <__aeabi_dsub+0x358>)
 8001ff6:	42a2      	cmp	r2, r4
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_dsub+0x1dc>
 8001ffa:	e1bd      	b.n	8002378 <__aeabi_dsub+0x558>
 8001ffc:	002a      	movs	r2, r5
 8001ffe:	e0f0      	b.n	80021e2 <__aeabi_dsub+0x3c2>
 8002000:	0008      	movs	r0, r1
 8002002:	4338      	orrs	r0, r7
 8002004:	d100      	bne.n	8002008 <__aeabi_dsub+0x1e8>
 8002006:	e0c3      	b.n	8002190 <__aeabi_dsub+0x370>
 8002008:	1e50      	subs	r0, r2, #1
 800200a:	2a01      	cmp	r2, #1
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x1f0>
 800200e:	e1a8      	b.n	8002362 <__aeabi_dsub+0x542>
 8002010:	4c59      	ldr	r4, [pc, #356]	; (8002178 <__aeabi_dsub+0x358>)
 8002012:	42a2      	cmp	r2, r4
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x1f8>
 8002016:	e087      	b.n	8002128 <__aeabi_dsub+0x308>
 8002018:	0002      	movs	r2, r0
 800201a:	e736      	b.n	8001e8a <__aeabi_dsub+0x6a>
 800201c:	2201      	movs	r2, #1
 800201e:	4056      	eors	r6, r2
 8002020:	46b3      	mov	fp, r6
 8002022:	42b5      	cmp	r5, r6
 8002024:	d000      	beq.n	8002028 <__aeabi_dsub+0x208>
 8002026:	e721      	b.n	8001e6c <__aeabi_dsub+0x4c>
 8002028:	4a55      	ldr	r2, [pc, #340]	; (8002180 <__aeabi_dsub+0x360>)
 800202a:	4442      	add	r2, r8
 800202c:	2a00      	cmp	r2, #0
 800202e:	d100      	bne.n	8002032 <__aeabi_dsub+0x212>
 8002030:	e0b5      	b.n	800219e <__aeabi_dsub+0x37e>
 8002032:	4642      	mov	r2, r8
 8002034:	4644      	mov	r4, r8
 8002036:	1a82      	subs	r2, r0, r2
 8002038:	2c00      	cmp	r4, #0
 800203a:	d100      	bne.n	800203e <__aeabi_dsub+0x21e>
 800203c:	e138      	b.n	80022b0 <__aeabi_dsub+0x490>
 800203e:	4e4e      	ldr	r6, [pc, #312]	; (8002178 <__aeabi_dsub+0x358>)
 8002040:	42b0      	cmp	r0, r6
 8002042:	d100      	bne.n	8002046 <__aeabi_dsub+0x226>
 8002044:	e1de      	b.n	8002404 <__aeabi_dsub+0x5e4>
 8002046:	2680      	movs	r6, #128	; 0x80
 8002048:	4664      	mov	r4, ip
 800204a:	0436      	lsls	r6, r6, #16
 800204c:	4334      	orrs	r4, r6
 800204e:	46a4      	mov	ip, r4
 8002050:	2a38      	cmp	r2, #56	; 0x38
 8002052:	dd00      	ble.n	8002056 <__aeabi_dsub+0x236>
 8002054:	e196      	b.n	8002384 <__aeabi_dsub+0x564>
 8002056:	2a1f      	cmp	r2, #31
 8002058:	dd00      	ble.n	800205c <__aeabi_dsub+0x23c>
 800205a:	e224      	b.n	80024a6 <__aeabi_dsub+0x686>
 800205c:	2620      	movs	r6, #32
 800205e:	1ab4      	subs	r4, r6, r2
 8002060:	46a2      	mov	sl, r4
 8002062:	4664      	mov	r4, ip
 8002064:	4656      	mov	r6, sl
 8002066:	40b4      	lsls	r4, r6
 8002068:	46a1      	mov	r9, r4
 800206a:	001c      	movs	r4, r3
 800206c:	464e      	mov	r6, r9
 800206e:	40d4      	lsrs	r4, r2
 8002070:	4326      	orrs	r6, r4
 8002072:	0034      	movs	r4, r6
 8002074:	4656      	mov	r6, sl
 8002076:	40b3      	lsls	r3, r6
 8002078:	1e5e      	subs	r6, r3, #1
 800207a:	41b3      	sbcs	r3, r6
 800207c:	431c      	orrs	r4, r3
 800207e:	4663      	mov	r3, ip
 8002080:	40d3      	lsrs	r3, r2
 8002082:	18c9      	adds	r1, r1, r3
 8002084:	19e4      	adds	r4, r4, r7
 8002086:	42bc      	cmp	r4, r7
 8002088:	41bf      	sbcs	r7, r7
 800208a:	427f      	negs	r7, r7
 800208c:	46b9      	mov	r9, r7
 800208e:	4680      	mov	r8, r0
 8002090:	4489      	add	r9, r1
 8002092:	e0d8      	b.n	8002246 <__aeabi_dsub+0x426>
 8002094:	4640      	mov	r0, r8
 8002096:	4c3b      	ldr	r4, [pc, #236]	; (8002184 <__aeabi_dsub+0x364>)
 8002098:	3001      	adds	r0, #1
 800209a:	4220      	tst	r0, r4
 800209c:	d000      	beq.n	80020a0 <__aeabi_dsub+0x280>
 800209e:	e0b4      	b.n	800220a <__aeabi_dsub+0x3ea>
 80020a0:	4640      	mov	r0, r8
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d000      	beq.n	80020a8 <__aeabi_dsub+0x288>
 80020a6:	e144      	b.n	8002332 <__aeabi_dsub+0x512>
 80020a8:	4660      	mov	r0, ip
 80020aa:	4318      	orrs	r0, r3
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x290>
 80020ae:	e190      	b.n	80023d2 <__aeabi_dsub+0x5b2>
 80020b0:	0008      	movs	r0, r1
 80020b2:	4338      	orrs	r0, r7
 80020b4:	d000      	beq.n	80020b8 <__aeabi_dsub+0x298>
 80020b6:	e1aa      	b.n	800240e <__aeabi_dsub+0x5ee>
 80020b8:	4661      	mov	r1, ip
 80020ba:	08db      	lsrs	r3, r3, #3
 80020bc:	0749      	lsls	r1, r1, #29
 80020be:	430b      	orrs	r3, r1
 80020c0:	4661      	mov	r1, ip
 80020c2:	08cc      	lsrs	r4, r1, #3
 80020c4:	e027      	b.n	8002116 <__aeabi_dsub+0x2f6>
 80020c6:	0008      	movs	r0, r1
 80020c8:	4338      	orrs	r0, r7
 80020ca:	d061      	beq.n	8002190 <__aeabi_dsub+0x370>
 80020cc:	1e50      	subs	r0, r2, #1
 80020ce:	2a01      	cmp	r2, #1
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dsub+0x2b4>
 80020d2:	e139      	b.n	8002348 <__aeabi_dsub+0x528>
 80020d4:	42a2      	cmp	r2, r4
 80020d6:	d027      	beq.n	8002128 <__aeabi_dsub+0x308>
 80020d8:	0002      	movs	r2, r0
 80020da:	e75d      	b.n	8001f98 <__aeabi_dsub+0x178>
 80020dc:	0002      	movs	r2, r0
 80020de:	391f      	subs	r1, #31
 80020e0:	40ca      	lsrs	r2, r1
 80020e2:	0011      	movs	r1, r2
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d003      	beq.n	80020f0 <__aeabi_dsub+0x2d0>
 80020e8:	2240      	movs	r2, #64	; 0x40
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	4098      	lsls	r0, r3
 80020ee:	4304      	orrs	r4, r0
 80020f0:	1e63      	subs	r3, r4, #1
 80020f2:	419c      	sbcs	r4, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	4699      	mov	r9, r3
 80020f8:	4698      	mov	r8, r3
 80020fa:	430c      	orrs	r4, r1
 80020fc:	0763      	lsls	r3, r4, #29
 80020fe:	d000      	beq.n	8002102 <__aeabi_dsub+0x2e2>
 8002100:	e712      	b.n	8001f28 <__aeabi_dsub+0x108>
 8002102:	464b      	mov	r3, r9
 8002104:	464a      	mov	r2, r9
 8002106:	08e4      	lsrs	r4, r4, #3
 8002108:	075b      	lsls	r3, r3, #29
 800210a:	4323      	orrs	r3, r4
 800210c:	08d4      	lsrs	r4, r2, #3
 800210e:	4642      	mov	r2, r8
 8002110:	4919      	ldr	r1, [pc, #100]	; (8002178 <__aeabi_dsub+0x358>)
 8002112:	428a      	cmp	r2, r1
 8002114:	d00e      	beq.n	8002134 <__aeabi_dsub+0x314>
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	0552      	lsls	r2, r2, #21
 800211a:	0b24      	lsrs	r4, r4, #12
 800211c:	0d52      	lsrs	r2, r2, #21
 800211e:	e722      	b.n	8001f66 <__aeabi_dsub+0x146>
 8002120:	000a      	movs	r2, r1
 8002122:	2400      	movs	r4, #0
 8002124:	2300      	movs	r3, #0
 8002126:	e71e      	b.n	8001f66 <__aeabi_dsub+0x146>
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	4662      	mov	r2, ip
 800212c:	0752      	lsls	r2, r2, #29
 800212e:	4313      	orrs	r3, r2
 8002130:	4662      	mov	r2, ip
 8002132:	08d4      	lsrs	r4, r2, #3
 8002134:	001a      	movs	r2, r3
 8002136:	4322      	orrs	r2, r4
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x31c>
 800213a:	e1fc      	b.n	8002536 <__aeabi_dsub+0x716>
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	0312      	lsls	r2, r2, #12
 8002140:	4314      	orrs	r4, r2
 8002142:	0324      	lsls	r4, r4, #12
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <__aeabi_dsub+0x358>)
 8002146:	0b24      	lsrs	r4, r4, #12
 8002148:	e70d      	b.n	8001f66 <__aeabi_dsub+0x146>
 800214a:	0020      	movs	r0, r4
 800214c:	f000 fb74 	bl	8002838 <__clzsi2>
 8002150:	0001      	movs	r1, r0
 8002152:	3118      	adds	r1, #24
 8002154:	291f      	cmp	r1, #31
 8002156:	dc00      	bgt.n	800215a <__aeabi_dsub+0x33a>
 8002158:	e6c4      	b.n	8001ee4 <__aeabi_dsub+0xc4>
 800215a:	3808      	subs	r0, #8
 800215c:	4084      	lsls	r4, r0
 800215e:	4643      	mov	r3, r8
 8002160:	0020      	movs	r0, r4
 8002162:	2400      	movs	r4, #0
 8002164:	4588      	cmp	r8, r1
 8002166:	dc00      	bgt.n	800216a <__aeabi_dsub+0x34a>
 8002168:	e6c8      	b.n	8001efc <__aeabi_dsub+0xdc>
 800216a:	4a04      	ldr	r2, [pc, #16]	; (800217c <__aeabi_dsub+0x35c>)
 800216c:	1a5b      	subs	r3, r3, r1
 800216e:	4010      	ands	r0, r2
 8002170:	4698      	mov	r8, r3
 8002172:	4681      	mov	r9, r0
 8002174:	e6d6      	b.n	8001f24 <__aeabi_dsub+0x104>
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	000007ff 	.word	0x000007ff
 800217c:	ff7fffff 	.word	0xff7fffff
 8002180:	fffff801 	.word	0xfffff801
 8002184:	000007fe 	.word	0x000007fe
 8002188:	430f      	orrs	r7, r1
 800218a:	1e7a      	subs	r2, r7, #1
 800218c:	4197      	sbcs	r7, r2
 800218e:	e691      	b.n	8001eb4 <__aeabi_dsub+0x94>
 8002190:	4661      	mov	r1, ip
 8002192:	08db      	lsrs	r3, r3, #3
 8002194:	0749      	lsls	r1, r1, #29
 8002196:	430b      	orrs	r3, r1
 8002198:	4661      	mov	r1, ip
 800219a:	08cc      	lsrs	r4, r1, #3
 800219c:	e7b8      	b.n	8002110 <__aeabi_dsub+0x2f0>
 800219e:	4640      	mov	r0, r8
 80021a0:	4cd3      	ldr	r4, [pc, #844]	; (80024f0 <__aeabi_dsub+0x6d0>)
 80021a2:	3001      	adds	r0, #1
 80021a4:	4220      	tst	r0, r4
 80021a6:	d000      	beq.n	80021aa <__aeabi_dsub+0x38a>
 80021a8:	e0a2      	b.n	80022f0 <__aeabi_dsub+0x4d0>
 80021aa:	4640      	mov	r0, r8
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d000      	beq.n	80021b2 <__aeabi_dsub+0x392>
 80021b0:	e101      	b.n	80023b6 <__aeabi_dsub+0x596>
 80021b2:	4660      	mov	r0, ip
 80021b4:	4318      	orrs	r0, r3
 80021b6:	d100      	bne.n	80021ba <__aeabi_dsub+0x39a>
 80021b8:	e15e      	b.n	8002478 <__aeabi_dsub+0x658>
 80021ba:	0008      	movs	r0, r1
 80021bc:	4338      	orrs	r0, r7
 80021be:	d000      	beq.n	80021c2 <__aeabi_dsub+0x3a2>
 80021c0:	e15f      	b.n	8002482 <__aeabi_dsub+0x662>
 80021c2:	4661      	mov	r1, ip
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	0749      	lsls	r1, r1, #29
 80021c8:	430b      	orrs	r3, r1
 80021ca:	4661      	mov	r1, ip
 80021cc:	08cc      	lsrs	r4, r1, #3
 80021ce:	e7a2      	b.n	8002116 <__aeabi_dsub+0x2f6>
 80021d0:	4dc8      	ldr	r5, [pc, #800]	; (80024f4 <__aeabi_dsub+0x6d4>)
 80021d2:	42a8      	cmp	r0, r5
 80021d4:	d100      	bne.n	80021d8 <__aeabi_dsub+0x3b8>
 80021d6:	e0cf      	b.n	8002378 <__aeabi_dsub+0x558>
 80021d8:	2580      	movs	r5, #128	; 0x80
 80021da:	4664      	mov	r4, ip
 80021dc:	042d      	lsls	r5, r5, #16
 80021de:	432c      	orrs	r4, r5
 80021e0:	46a4      	mov	ip, r4
 80021e2:	2a38      	cmp	r2, #56	; 0x38
 80021e4:	dc56      	bgt.n	8002294 <__aeabi_dsub+0x474>
 80021e6:	2a1f      	cmp	r2, #31
 80021e8:	dd00      	ble.n	80021ec <__aeabi_dsub+0x3cc>
 80021ea:	e0d1      	b.n	8002390 <__aeabi_dsub+0x570>
 80021ec:	2520      	movs	r5, #32
 80021ee:	001e      	movs	r6, r3
 80021f0:	1aad      	subs	r5, r5, r2
 80021f2:	4664      	mov	r4, ip
 80021f4:	40ab      	lsls	r3, r5
 80021f6:	40ac      	lsls	r4, r5
 80021f8:	40d6      	lsrs	r6, r2
 80021fa:	1e5d      	subs	r5, r3, #1
 80021fc:	41ab      	sbcs	r3, r5
 80021fe:	4334      	orrs	r4, r6
 8002200:	4323      	orrs	r3, r4
 8002202:	4664      	mov	r4, ip
 8002204:	40d4      	lsrs	r4, r2
 8002206:	1b09      	subs	r1, r1, r4
 8002208:	e049      	b.n	800229e <__aeabi_dsub+0x47e>
 800220a:	4660      	mov	r0, ip
 800220c:	1bdc      	subs	r4, r3, r7
 800220e:	1a46      	subs	r6, r0, r1
 8002210:	42a3      	cmp	r3, r4
 8002212:	4180      	sbcs	r0, r0
 8002214:	4240      	negs	r0, r0
 8002216:	4681      	mov	r9, r0
 8002218:	0030      	movs	r0, r6
 800221a:	464e      	mov	r6, r9
 800221c:	1b80      	subs	r0, r0, r6
 800221e:	4681      	mov	r9, r0
 8002220:	0200      	lsls	r0, r0, #8
 8002222:	d476      	bmi.n	8002312 <__aeabi_dsub+0x4f2>
 8002224:	464b      	mov	r3, r9
 8002226:	4323      	orrs	r3, r4
 8002228:	d000      	beq.n	800222c <__aeabi_dsub+0x40c>
 800222a:	e652      	b.n	8001ed2 <__aeabi_dsub+0xb2>
 800222c:	2400      	movs	r4, #0
 800222e:	2500      	movs	r5, #0
 8002230:	e771      	b.n	8002116 <__aeabi_dsub+0x2f6>
 8002232:	4339      	orrs	r1, r7
 8002234:	000c      	movs	r4, r1
 8002236:	1e62      	subs	r2, r4, #1
 8002238:	4194      	sbcs	r4, r2
 800223a:	18e4      	adds	r4, r4, r3
 800223c:	429c      	cmp	r4, r3
 800223e:	419b      	sbcs	r3, r3
 8002240:	425b      	negs	r3, r3
 8002242:	4463      	add	r3, ip
 8002244:	4699      	mov	r9, r3
 8002246:	464b      	mov	r3, r9
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	d400      	bmi.n	800224e <__aeabi_dsub+0x42e>
 800224c:	e756      	b.n	80020fc <__aeabi_dsub+0x2dc>
 800224e:	2301      	movs	r3, #1
 8002250:	469c      	mov	ip, r3
 8002252:	4ba8      	ldr	r3, [pc, #672]	; (80024f4 <__aeabi_dsub+0x6d4>)
 8002254:	44e0      	add	r8, ip
 8002256:	4598      	cmp	r8, r3
 8002258:	d038      	beq.n	80022cc <__aeabi_dsub+0x4ac>
 800225a:	464b      	mov	r3, r9
 800225c:	48a6      	ldr	r0, [pc, #664]	; (80024f8 <__aeabi_dsub+0x6d8>)
 800225e:	2201      	movs	r2, #1
 8002260:	4003      	ands	r3, r0
 8002262:	0018      	movs	r0, r3
 8002264:	0863      	lsrs	r3, r4, #1
 8002266:	4014      	ands	r4, r2
 8002268:	431c      	orrs	r4, r3
 800226a:	07c3      	lsls	r3, r0, #31
 800226c:	431c      	orrs	r4, r3
 800226e:	0843      	lsrs	r3, r0, #1
 8002270:	4699      	mov	r9, r3
 8002272:	e657      	b.n	8001f24 <__aeabi_dsub+0x104>
 8002274:	0010      	movs	r0, r2
 8002276:	000e      	movs	r6, r1
 8002278:	3820      	subs	r0, #32
 800227a:	40c6      	lsrs	r6, r0
 800227c:	2a20      	cmp	r2, #32
 800227e:	d004      	beq.n	800228a <__aeabi_dsub+0x46a>
 8002280:	2040      	movs	r0, #64	; 0x40
 8002282:	1a82      	subs	r2, r0, r2
 8002284:	4091      	lsls	r1, r2
 8002286:	430f      	orrs	r7, r1
 8002288:	46b9      	mov	r9, r7
 800228a:	464f      	mov	r7, r9
 800228c:	1e7a      	subs	r2, r7, #1
 800228e:	4197      	sbcs	r7, r2
 8002290:	4337      	orrs	r7, r6
 8002292:	e60f      	b.n	8001eb4 <__aeabi_dsub+0x94>
 8002294:	4662      	mov	r2, ip
 8002296:	431a      	orrs	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	1e5a      	subs	r2, r3, #1
 800229c:	4193      	sbcs	r3, r2
 800229e:	1afc      	subs	r4, r7, r3
 80022a0:	42a7      	cmp	r7, r4
 80022a2:	41bf      	sbcs	r7, r7
 80022a4:	427f      	negs	r7, r7
 80022a6:	1bcb      	subs	r3, r1, r7
 80022a8:	4699      	mov	r9, r3
 80022aa:	465d      	mov	r5, fp
 80022ac:	4680      	mov	r8, r0
 80022ae:	e608      	b.n	8001ec2 <__aeabi_dsub+0xa2>
 80022b0:	4666      	mov	r6, ip
 80022b2:	431e      	orrs	r6, r3
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x498>
 80022b6:	e0be      	b.n	8002436 <__aeabi_dsub+0x616>
 80022b8:	1e56      	subs	r6, r2, #1
 80022ba:	2a01      	cmp	r2, #1
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dsub+0x4a0>
 80022be:	e109      	b.n	80024d4 <__aeabi_dsub+0x6b4>
 80022c0:	4c8c      	ldr	r4, [pc, #560]	; (80024f4 <__aeabi_dsub+0x6d4>)
 80022c2:	42a2      	cmp	r2, r4
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dsub+0x4a8>
 80022c6:	e119      	b.n	80024fc <__aeabi_dsub+0x6dc>
 80022c8:	0032      	movs	r2, r6
 80022ca:	e6c1      	b.n	8002050 <__aeabi_dsub+0x230>
 80022cc:	4642      	mov	r2, r8
 80022ce:	2400      	movs	r4, #0
 80022d0:	2300      	movs	r3, #0
 80022d2:	e648      	b.n	8001f66 <__aeabi_dsub+0x146>
 80022d4:	2020      	movs	r0, #32
 80022d6:	000c      	movs	r4, r1
 80022d8:	1a80      	subs	r0, r0, r2
 80022da:	003e      	movs	r6, r7
 80022dc:	4087      	lsls	r7, r0
 80022de:	4084      	lsls	r4, r0
 80022e0:	40d6      	lsrs	r6, r2
 80022e2:	1e78      	subs	r0, r7, #1
 80022e4:	4187      	sbcs	r7, r0
 80022e6:	40d1      	lsrs	r1, r2
 80022e8:	4334      	orrs	r4, r6
 80022ea:	433c      	orrs	r4, r7
 80022ec:	448c      	add	ip, r1
 80022ee:	e7a4      	b.n	800223a <__aeabi_dsub+0x41a>
 80022f0:	4a80      	ldr	r2, [pc, #512]	; (80024f4 <__aeabi_dsub+0x6d4>)
 80022f2:	4290      	cmp	r0, r2
 80022f4:	d100      	bne.n	80022f8 <__aeabi_dsub+0x4d8>
 80022f6:	e0e9      	b.n	80024cc <__aeabi_dsub+0x6ac>
 80022f8:	19df      	adds	r7, r3, r7
 80022fa:	429f      	cmp	r7, r3
 80022fc:	419b      	sbcs	r3, r3
 80022fe:	4461      	add	r1, ip
 8002300:	425b      	negs	r3, r3
 8002302:	18c9      	adds	r1, r1, r3
 8002304:	07cc      	lsls	r4, r1, #31
 8002306:	087f      	lsrs	r7, r7, #1
 8002308:	084b      	lsrs	r3, r1, #1
 800230a:	4699      	mov	r9, r3
 800230c:	4680      	mov	r8, r0
 800230e:	433c      	orrs	r4, r7
 8002310:	e6f4      	b.n	80020fc <__aeabi_dsub+0x2dc>
 8002312:	1afc      	subs	r4, r7, r3
 8002314:	42a7      	cmp	r7, r4
 8002316:	41bf      	sbcs	r7, r7
 8002318:	4663      	mov	r3, ip
 800231a:	427f      	negs	r7, r7
 800231c:	1ac9      	subs	r1, r1, r3
 800231e:	1bcb      	subs	r3, r1, r7
 8002320:	4699      	mov	r9, r3
 8002322:	465d      	mov	r5, fp
 8002324:	e5d5      	b.n	8001ed2 <__aeabi_dsub+0xb2>
 8002326:	08ff      	lsrs	r7, r7, #3
 8002328:	074b      	lsls	r3, r1, #29
 800232a:	465d      	mov	r5, fp
 800232c:	433b      	orrs	r3, r7
 800232e:	08cc      	lsrs	r4, r1, #3
 8002330:	e6ee      	b.n	8002110 <__aeabi_dsub+0x2f0>
 8002332:	4662      	mov	r2, ip
 8002334:	431a      	orrs	r2, r3
 8002336:	d000      	beq.n	800233a <__aeabi_dsub+0x51a>
 8002338:	e082      	b.n	8002440 <__aeabi_dsub+0x620>
 800233a:	000b      	movs	r3, r1
 800233c:	433b      	orrs	r3, r7
 800233e:	d11b      	bne.n	8002378 <__aeabi_dsub+0x558>
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	2500      	movs	r5, #0
 8002344:	0324      	lsls	r4, r4, #12
 8002346:	e6f9      	b.n	800213c <__aeabi_dsub+0x31c>
 8002348:	19dc      	adds	r4, r3, r7
 800234a:	429c      	cmp	r4, r3
 800234c:	419b      	sbcs	r3, r3
 800234e:	4461      	add	r1, ip
 8002350:	4689      	mov	r9, r1
 8002352:	425b      	negs	r3, r3
 8002354:	4499      	add	r9, r3
 8002356:	464b      	mov	r3, r9
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	d444      	bmi.n	80023e6 <__aeabi_dsub+0x5c6>
 800235c:	2301      	movs	r3, #1
 800235e:	4698      	mov	r8, r3
 8002360:	e6cc      	b.n	80020fc <__aeabi_dsub+0x2dc>
 8002362:	1bdc      	subs	r4, r3, r7
 8002364:	4662      	mov	r2, ip
 8002366:	42a3      	cmp	r3, r4
 8002368:	419b      	sbcs	r3, r3
 800236a:	1a51      	subs	r1, r2, r1
 800236c:	425b      	negs	r3, r3
 800236e:	1acb      	subs	r3, r1, r3
 8002370:	4699      	mov	r9, r3
 8002372:	2301      	movs	r3, #1
 8002374:	4698      	mov	r8, r3
 8002376:	e5a4      	b.n	8001ec2 <__aeabi_dsub+0xa2>
 8002378:	08ff      	lsrs	r7, r7, #3
 800237a:	074b      	lsls	r3, r1, #29
 800237c:	465d      	mov	r5, fp
 800237e:	433b      	orrs	r3, r7
 8002380:	08cc      	lsrs	r4, r1, #3
 8002382:	e6d7      	b.n	8002134 <__aeabi_dsub+0x314>
 8002384:	4662      	mov	r2, ip
 8002386:	431a      	orrs	r2, r3
 8002388:	0014      	movs	r4, r2
 800238a:	1e63      	subs	r3, r4, #1
 800238c:	419c      	sbcs	r4, r3
 800238e:	e679      	b.n	8002084 <__aeabi_dsub+0x264>
 8002390:	0015      	movs	r5, r2
 8002392:	4664      	mov	r4, ip
 8002394:	3d20      	subs	r5, #32
 8002396:	40ec      	lsrs	r4, r5
 8002398:	46a0      	mov	r8, r4
 800239a:	2a20      	cmp	r2, #32
 800239c:	d005      	beq.n	80023aa <__aeabi_dsub+0x58a>
 800239e:	2540      	movs	r5, #64	; 0x40
 80023a0:	4664      	mov	r4, ip
 80023a2:	1aaa      	subs	r2, r5, r2
 80023a4:	4094      	lsls	r4, r2
 80023a6:	4323      	orrs	r3, r4
 80023a8:	469a      	mov	sl, r3
 80023aa:	4654      	mov	r4, sl
 80023ac:	1e63      	subs	r3, r4, #1
 80023ae:	419c      	sbcs	r4, r3
 80023b0:	4643      	mov	r3, r8
 80023b2:	4323      	orrs	r3, r4
 80023b4:	e773      	b.n	800229e <__aeabi_dsub+0x47e>
 80023b6:	4662      	mov	r2, ip
 80023b8:	431a      	orrs	r2, r3
 80023ba:	d023      	beq.n	8002404 <__aeabi_dsub+0x5e4>
 80023bc:	000a      	movs	r2, r1
 80023be:	433a      	orrs	r2, r7
 80023c0:	d000      	beq.n	80023c4 <__aeabi_dsub+0x5a4>
 80023c2:	e0a0      	b.n	8002506 <__aeabi_dsub+0x6e6>
 80023c4:	4662      	mov	r2, ip
 80023c6:	08db      	lsrs	r3, r3, #3
 80023c8:	0752      	lsls	r2, r2, #29
 80023ca:	4313      	orrs	r3, r2
 80023cc:	4662      	mov	r2, ip
 80023ce:	08d4      	lsrs	r4, r2, #3
 80023d0:	e6b0      	b.n	8002134 <__aeabi_dsub+0x314>
 80023d2:	000b      	movs	r3, r1
 80023d4:	433b      	orrs	r3, r7
 80023d6:	d100      	bne.n	80023da <__aeabi_dsub+0x5ba>
 80023d8:	e728      	b.n	800222c <__aeabi_dsub+0x40c>
 80023da:	08ff      	lsrs	r7, r7, #3
 80023dc:	074b      	lsls	r3, r1, #29
 80023de:	465d      	mov	r5, fp
 80023e0:	433b      	orrs	r3, r7
 80023e2:	08cc      	lsrs	r4, r1, #3
 80023e4:	e697      	b.n	8002116 <__aeabi_dsub+0x2f6>
 80023e6:	2302      	movs	r3, #2
 80023e8:	4698      	mov	r8, r3
 80023ea:	e736      	b.n	800225a <__aeabi_dsub+0x43a>
 80023ec:	1afc      	subs	r4, r7, r3
 80023ee:	42a7      	cmp	r7, r4
 80023f0:	41bf      	sbcs	r7, r7
 80023f2:	4663      	mov	r3, ip
 80023f4:	427f      	negs	r7, r7
 80023f6:	1ac9      	subs	r1, r1, r3
 80023f8:	1bcb      	subs	r3, r1, r7
 80023fa:	4699      	mov	r9, r3
 80023fc:	2301      	movs	r3, #1
 80023fe:	465d      	mov	r5, fp
 8002400:	4698      	mov	r8, r3
 8002402:	e55e      	b.n	8001ec2 <__aeabi_dsub+0xa2>
 8002404:	074b      	lsls	r3, r1, #29
 8002406:	08ff      	lsrs	r7, r7, #3
 8002408:	433b      	orrs	r3, r7
 800240a:	08cc      	lsrs	r4, r1, #3
 800240c:	e692      	b.n	8002134 <__aeabi_dsub+0x314>
 800240e:	1bdc      	subs	r4, r3, r7
 8002410:	4660      	mov	r0, ip
 8002412:	42a3      	cmp	r3, r4
 8002414:	41b6      	sbcs	r6, r6
 8002416:	1a40      	subs	r0, r0, r1
 8002418:	4276      	negs	r6, r6
 800241a:	1b80      	subs	r0, r0, r6
 800241c:	4681      	mov	r9, r0
 800241e:	0200      	lsls	r0, r0, #8
 8002420:	d560      	bpl.n	80024e4 <__aeabi_dsub+0x6c4>
 8002422:	1afc      	subs	r4, r7, r3
 8002424:	42a7      	cmp	r7, r4
 8002426:	41bf      	sbcs	r7, r7
 8002428:	4663      	mov	r3, ip
 800242a:	427f      	negs	r7, r7
 800242c:	1ac9      	subs	r1, r1, r3
 800242e:	1bcb      	subs	r3, r1, r7
 8002430:	4699      	mov	r9, r3
 8002432:	465d      	mov	r5, fp
 8002434:	e576      	b.n	8001f24 <__aeabi_dsub+0x104>
 8002436:	08ff      	lsrs	r7, r7, #3
 8002438:	074b      	lsls	r3, r1, #29
 800243a:	433b      	orrs	r3, r7
 800243c:	08cc      	lsrs	r4, r1, #3
 800243e:	e667      	b.n	8002110 <__aeabi_dsub+0x2f0>
 8002440:	000a      	movs	r2, r1
 8002442:	08db      	lsrs	r3, r3, #3
 8002444:	433a      	orrs	r2, r7
 8002446:	d100      	bne.n	800244a <__aeabi_dsub+0x62a>
 8002448:	e66f      	b.n	800212a <__aeabi_dsub+0x30a>
 800244a:	4662      	mov	r2, ip
 800244c:	0752      	lsls	r2, r2, #29
 800244e:	4313      	orrs	r3, r2
 8002450:	4662      	mov	r2, ip
 8002452:	08d4      	lsrs	r4, r2, #3
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	0312      	lsls	r2, r2, #12
 8002458:	4214      	tst	r4, r2
 800245a:	d007      	beq.n	800246c <__aeabi_dsub+0x64c>
 800245c:	08c8      	lsrs	r0, r1, #3
 800245e:	4210      	tst	r0, r2
 8002460:	d104      	bne.n	800246c <__aeabi_dsub+0x64c>
 8002462:	465d      	mov	r5, fp
 8002464:	0004      	movs	r4, r0
 8002466:	08fb      	lsrs	r3, r7, #3
 8002468:	0749      	lsls	r1, r1, #29
 800246a:	430b      	orrs	r3, r1
 800246c:	0f5a      	lsrs	r2, r3, #29
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	08db      	lsrs	r3, r3, #3
 8002472:	0752      	lsls	r2, r2, #29
 8002474:	4313      	orrs	r3, r2
 8002476:	e65d      	b.n	8002134 <__aeabi_dsub+0x314>
 8002478:	074b      	lsls	r3, r1, #29
 800247a:	08ff      	lsrs	r7, r7, #3
 800247c:	433b      	orrs	r3, r7
 800247e:	08cc      	lsrs	r4, r1, #3
 8002480:	e649      	b.n	8002116 <__aeabi_dsub+0x2f6>
 8002482:	19dc      	adds	r4, r3, r7
 8002484:	429c      	cmp	r4, r3
 8002486:	419b      	sbcs	r3, r3
 8002488:	4461      	add	r1, ip
 800248a:	4689      	mov	r9, r1
 800248c:	425b      	negs	r3, r3
 800248e:	4499      	add	r9, r3
 8002490:	464b      	mov	r3, r9
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	d400      	bmi.n	8002498 <__aeabi_dsub+0x678>
 8002496:	e631      	b.n	80020fc <__aeabi_dsub+0x2dc>
 8002498:	464a      	mov	r2, r9
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <__aeabi_dsub+0x6d8>)
 800249c:	401a      	ands	r2, r3
 800249e:	2301      	movs	r3, #1
 80024a0:	4691      	mov	r9, r2
 80024a2:	4698      	mov	r8, r3
 80024a4:	e62a      	b.n	80020fc <__aeabi_dsub+0x2dc>
 80024a6:	0016      	movs	r6, r2
 80024a8:	4664      	mov	r4, ip
 80024aa:	3e20      	subs	r6, #32
 80024ac:	40f4      	lsrs	r4, r6
 80024ae:	46a0      	mov	r8, r4
 80024b0:	2a20      	cmp	r2, #32
 80024b2:	d005      	beq.n	80024c0 <__aeabi_dsub+0x6a0>
 80024b4:	2640      	movs	r6, #64	; 0x40
 80024b6:	4664      	mov	r4, ip
 80024b8:	1ab2      	subs	r2, r6, r2
 80024ba:	4094      	lsls	r4, r2
 80024bc:	4323      	orrs	r3, r4
 80024be:	469a      	mov	sl, r3
 80024c0:	4654      	mov	r4, sl
 80024c2:	1e63      	subs	r3, r4, #1
 80024c4:	419c      	sbcs	r4, r3
 80024c6:	4643      	mov	r3, r8
 80024c8:	431c      	orrs	r4, r3
 80024ca:	e5db      	b.n	8002084 <__aeabi_dsub+0x264>
 80024cc:	0002      	movs	r2, r0
 80024ce:	2400      	movs	r4, #0
 80024d0:	2300      	movs	r3, #0
 80024d2:	e548      	b.n	8001f66 <__aeabi_dsub+0x146>
 80024d4:	19dc      	adds	r4, r3, r7
 80024d6:	42bc      	cmp	r4, r7
 80024d8:	41bf      	sbcs	r7, r7
 80024da:	4461      	add	r1, ip
 80024dc:	4689      	mov	r9, r1
 80024de:	427f      	negs	r7, r7
 80024e0:	44b9      	add	r9, r7
 80024e2:	e738      	b.n	8002356 <__aeabi_dsub+0x536>
 80024e4:	464b      	mov	r3, r9
 80024e6:	4323      	orrs	r3, r4
 80024e8:	d100      	bne.n	80024ec <__aeabi_dsub+0x6cc>
 80024ea:	e69f      	b.n	800222c <__aeabi_dsub+0x40c>
 80024ec:	e606      	b.n	80020fc <__aeabi_dsub+0x2dc>
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	000007fe 	.word	0x000007fe
 80024f4:	000007ff 	.word	0x000007ff
 80024f8:	ff7fffff 	.word	0xff7fffff
 80024fc:	08ff      	lsrs	r7, r7, #3
 80024fe:	074b      	lsls	r3, r1, #29
 8002500:	433b      	orrs	r3, r7
 8002502:	08cc      	lsrs	r4, r1, #3
 8002504:	e616      	b.n	8002134 <__aeabi_dsub+0x314>
 8002506:	4662      	mov	r2, ip
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	0752      	lsls	r2, r2, #29
 800250c:	4313      	orrs	r3, r2
 800250e:	4662      	mov	r2, ip
 8002510:	08d4      	lsrs	r4, r2, #3
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	0312      	lsls	r2, r2, #12
 8002516:	4214      	tst	r4, r2
 8002518:	d007      	beq.n	800252a <__aeabi_dsub+0x70a>
 800251a:	08c8      	lsrs	r0, r1, #3
 800251c:	4210      	tst	r0, r2
 800251e:	d104      	bne.n	800252a <__aeabi_dsub+0x70a>
 8002520:	465d      	mov	r5, fp
 8002522:	0004      	movs	r4, r0
 8002524:	08fb      	lsrs	r3, r7, #3
 8002526:	0749      	lsls	r1, r1, #29
 8002528:	430b      	orrs	r3, r1
 800252a:	0f5a      	lsrs	r2, r3, #29
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	0752      	lsls	r2, r2, #29
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	4313      	orrs	r3, r2
 8002534:	e5fe      	b.n	8002134 <__aeabi_dsub+0x314>
 8002536:	2300      	movs	r3, #0
 8002538:	4a01      	ldr	r2, [pc, #4]	; (8002540 <__aeabi_dsub+0x720>)
 800253a:	001c      	movs	r4, r3
 800253c:	e513      	b.n	8001f66 <__aeabi_dsub+0x146>
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	000007ff 	.word	0x000007ff

08002544 <__aeabi_dcmpun>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	0005      	movs	r5, r0
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <__aeabi_dcmpun+0x38>)
 800254a:	031c      	lsls	r4, r3, #12
 800254c:	0016      	movs	r6, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	030a      	lsls	r2, r1, #12
 8002552:	0049      	lsls	r1, r1, #1
 8002554:	0b12      	lsrs	r2, r2, #12
 8002556:	0d49      	lsrs	r1, r1, #21
 8002558:	0b24      	lsrs	r4, r4, #12
 800255a:	0d5b      	lsrs	r3, r3, #21
 800255c:	4281      	cmp	r1, r0
 800255e:	d008      	beq.n	8002572 <__aeabi_dcmpun+0x2e>
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <__aeabi_dcmpun+0x38>)
 8002562:	2000      	movs	r0, #0
 8002564:	4293      	cmp	r3, r2
 8002566:	d103      	bne.n	8002570 <__aeabi_dcmpun+0x2c>
 8002568:	0020      	movs	r0, r4
 800256a:	4330      	orrs	r0, r6
 800256c:	1e43      	subs	r3, r0, #1
 800256e:	4198      	sbcs	r0, r3
 8002570:	bd70      	pop	{r4, r5, r6, pc}
 8002572:	2001      	movs	r0, #1
 8002574:	432a      	orrs	r2, r5
 8002576:	d1fb      	bne.n	8002570 <__aeabi_dcmpun+0x2c>
 8002578:	e7f2      	b.n	8002560 <__aeabi_dcmpun+0x1c>
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	000007ff 	.word	0x000007ff

08002580 <__aeabi_d2iz>:
 8002580:	000a      	movs	r2, r1
 8002582:	b530      	push	{r4, r5, lr}
 8002584:	4c13      	ldr	r4, [pc, #76]	; (80025d4 <__aeabi_d2iz+0x54>)
 8002586:	0053      	lsls	r3, r2, #1
 8002588:	0309      	lsls	r1, r1, #12
 800258a:	0005      	movs	r5, r0
 800258c:	0b09      	lsrs	r1, r1, #12
 800258e:	2000      	movs	r0, #0
 8002590:	0d5b      	lsrs	r3, r3, #21
 8002592:	0fd2      	lsrs	r2, r2, #31
 8002594:	42a3      	cmp	r3, r4
 8002596:	dd04      	ble.n	80025a2 <__aeabi_d2iz+0x22>
 8002598:	480f      	ldr	r0, [pc, #60]	; (80025d8 <__aeabi_d2iz+0x58>)
 800259a:	4283      	cmp	r3, r0
 800259c:	dd02      	ble.n	80025a4 <__aeabi_d2iz+0x24>
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <__aeabi_d2iz+0x5c>)
 80025a0:	18d0      	adds	r0, r2, r3
 80025a2:	bd30      	pop	{r4, r5, pc}
 80025a4:	2080      	movs	r0, #128	; 0x80
 80025a6:	0340      	lsls	r0, r0, #13
 80025a8:	4301      	orrs	r1, r0
 80025aa:	480d      	ldr	r0, [pc, #52]	; (80025e0 <__aeabi_d2iz+0x60>)
 80025ac:	1ac0      	subs	r0, r0, r3
 80025ae:	281f      	cmp	r0, #31
 80025b0:	dd08      	ble.n	80025c4 <__aeabi_d2iz+0x44>
 80025b2:	480c      	ldr	r0, [pc, #48]	; (80025e4 <__aeabi_d2iz+0x64>)
 80025b4:	1ac3      	subs	r3, r0, r3
 80025b6:	40d9      	lsrs	r1, r3
 80025b8:	000b      	movs	r3, r1
 80025ba:	4258      	negs	r0, r3
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d1f0      	bne.n	80025a2 <__aeabi_d2iz+0x22>
 80025c0:	0018      	movs	r0, r3
 80025c2:	e7ee      	b.n	80025a2 <__aeabi_d2iz+0x22>
 80025c4:	4c08      	ldr	r4, [pc, #32]	; (80025e8 <__aeabi_d2iz+0x68>)
 80025c6:	40c5      	lsrs	r5, r0
 80025c8:	46a4      	mov	ip, r4
 80025ca:	4463      	add	r3, ip
 80025cc:	4099      	lsls	r1, r3
 80025ce:	000b      	movs	r3, r1
 80025d0:	432b      	orrs	r3, r5
 80025d2:	e7f2      	b.n	80025ba <__aeabi_d2iz+0x3a>
 80025d4:	000003fe 	.word	0x000003fe
 80025d8:	0000041d 	.word	0x0000041d
 80025dc:	7fffffff 	.word	0x7fffffff
 80025e0:	00000433 	.word	0x00000433
 80025e4:	00000413 	.word	0x00000413
 80025e8:	fffffbed 	.word	0xfffffbed

080025ec <__aeabi_i2d>:
 80025ec:	b570      	push	{r4, r5, r6, lr}
 80025ee:	2800      	cmp	r0, #0
 80025f0:	d016      	beq.n	8002620 <__aeabi_i2d+0x34>
 80025f2:	17c3      	asrs	r3, r0, #31
 80025f4:	18c5      	adds	r5, r0, r3
 80025f6:	405d      	eors	r5, r3
 80025f8:	0fc4      	lsrs	r4, r0, #31
 80025fa:	0028      	movs	r0, r5
 80025fc:	f000 f91c 	bl	8002838 <__clzsi2>
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <__aeabi_i2d+0x5c>)
 8002602:	1a12      	subs	r2, r2, r0
 8002604:	280a      	cmp	r0, #10
 8002606:	dc16      	bgt.n	8002636 <__aeabi_i2d+0x4a>
 8002608:	0003      	movs	r3, r0
 800260a:	002e      	movs	r6, r5
 800260c:	3315      	adds	r3, #21
 800260e:	409e      	lsls	r6, r3
 8002610:	230b      	movs	r3, #11
 8002612:	1a18      	subs	r0, r3, r0
 8002614:	40c5      	lsrs	r5, r0
 8002616:	0552      	lsls	r2, r2, #21
 8002618:	032d      	lsls	r5, r5, #12
 800261a:	0b2d      	lsrs	r5, r5, #12
 800261c:	0d53      	lsrs	r3, r2, #21
 800261e:	e003      	b.n	8002628 <__aeabi_i2d+0x3c>
 8002620:	2400      	movs	r4, #0
 8002622:	2300      	movs	r3, #0
 8002624:	2500      	movs	r5, #0
 8002626:	2600      	movs	r6, #0
 8002628:	051b      	lsls	r3, r3, #20
 800262a:	432b      	orrs	r3, r5
 800262c:	07e4      	lsls	r4, r4, #31
 800262e:	4323      	orrs	r3, r4
 8002630:	0030      	movs	r0, r6
 8002632:	0019      	movs	r1, r3
 8002634:	bd70      	pop	{r4, r5, r6, pc}
 8002636:	380b      	subs	r0, #11
 8002638:	4085      	lsls	r5, r0
 800263a:	0552      	lsls	r2, r2, #21
 800263c:	032d      	lsls	r5, r5, #12
 800263e:	2600      	movs	r6, #0
 8002640:	0b2d      	lsrs	r5, r5, #12
 8002642:	0d53      	lsrs	r3, r2, #21
 8002644:	e7f0      	b.n	8002628 <__aeabi_i2d+0x3c>
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	0000041e 	.word	0x0000041e

0800264c <__aeabi_ui2d>:
 800264c:	b510      	push	{r4, lr}
 800264e:	1e04      	subs	r4, r0, #0
 8002650:	d010      	beq.n	8002674 <__aeabi_ui2d+0x28>
 8002652:	f000 f8f1 	bl	8002838 <__clzsi2>
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <__aeabi_ui2d+0x48>)
 8002658:	1a1b      	subs	r3, r3, r0
 800265a:	280a      	cmp	r0, #10
 800265c:	dc11      	bgt.n	8002682 <__aeabi_ui2d+0x36>
 800265e:	220b      	movs	r2, #11
 8002660:	0021      	movs	r1, r4
 8002662:	1a12      	subs	r2, r2, r0
 8002664:	40d1      	lsrs	r1, r2
 8002666:	3015      	adds	r0, #21
 8002668:	030a      	lsls	r2, r1, #12
 800266a:	055b      	lsls	r3, r3, #21
 800266c:	4084      	lsls	r4, r0
 800266e:	0b12      	lsrs	r2, r2, #12
 8002670:	0d5b      	lsrs	r3, r3, #21
 8002672:	e001      	b.n	8002678 <__aeabi_ui2d+0x2c>
 8002674:	2300      	movs	r3, #0
 8002676:	2200      	movs	r2, #0
 8002678:	051b      	lsls	r3, r3, #20
 800267a:	4313      	orrs	r3, r2
 800267c:	0020      	movs	r0, r4
 800267e:	0019      	movs	r1, r3
 8002680:	bd10      	pop	{r4, pc}
 8002682:	0022      	movs	r2, r4
 8002684:	380b      	subs	r0, #11
 8002686:	4082      	lsls	r2, r0
 8002688:	055b      	lsls	r3, r3, #21
 800268a:	0312      	lsls	r2, r2, #12
 800268c:	2400      	movs	r4, #0
 800268e:	0b12      	lsrs	r2, r2, #12
 8002690:	0d5b      	lsrs	r3, r3, #21
 8002692:	e7f1      	b.n	8002678 <__aeabi_ui2d+0x2c>
 8002694:	0000041e 	.word	0x0000041e

08002698 <__aeabi_f2d>:
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	0043      	lsls	r3, r0, #1
 800269c:	0246      	lsls	r6, r0, #9
 800269e:	0fc4      	lsrs	r4, r0, #31
 80026a0:	20fe      	movs	r0, #254	; 0xfe
 80026a2:	0e1b      	lsrs	r3, r3, #24
 80026a4:	1c59      	adds	r1, r3, #1
 80026a6:	0a75      	lsrs	r5, r6, #9
 80026a8:	4208      	tst	r0, r1
 80026aa:	d00c      	beq.n	80026c6 <__aeabi_f2d+0x2e>
 80026ac:	22e0      	movs	r2, #224	; 0xe0
 80026ae:	0092      	lsls	r2, r2, #2
 80026b0:	4694      	mov	ip, r2
 80026b2:	076d      	lsls	r5, r5, #29
 80026b4:	0b36      	lsrs	r6, r6, #12
 80026b6:	4463      	add	r3, ip
 80026b8:	051b      	lsls	r3, r3, #20
 80026ba:	4333      	orrs	r3, r6
 80026bc:	07e4      	lsls	r4, r4, #31
 80026be:	4323      	orrs	r3, r4
 80026c0:	0028      	movs	r0, r5
 80026c2:	0019      	movs	r1, r3
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d114      	bne.n	80026f4 <__aeabi_f2d+0x5c>
 80026ca:	2d00      	cmp	r5, #0
 80026cc:	d01b      	beq.n	8002706 <__aeabi_f2d+0x6e>
 80026ce:	0028      	movs	r0, r5
 80026d0:	f000 f8b2 	bl	8002838 <__clzsi2>
 80026d4:	280a      	cmp	r0, #10
 80026d6:	dc1c      	bgt.n	8002712 <__aeabi_f2d+0x7a>
 80026d8:	230b      	movs	r3, #11
 80026da:	002e      	movs	r6, r5
 80026dc:	1a1b      	subs	r3, r3, r0
 80026de:	40de      	lsrs	r6, r3
 80026e0:	0003      	movs	r3, r0
 80026e2:	3315      	adds	r3, #21
 80026e4:	409d      	lsls	r5, r3
 80026e6:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <__aeabi_f2d+0x88>)
 80026e8:	0336      	lsls	r6, r6, #12
 80026ea:	1a12      	subs	r2, r2, r0
 80026ec:	0552      	lsls	r2, r2, #21
 80026ee:	0b36      	lsrs	r6, r6, #12
 80026f0:	0d53      	lsrs	r3, r2, #21
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_f2d+0x20>
 80026f4:	2d00      	cmp	r5, #0
 80026f6:	d009      	beq.n	800270c <__aeabi_f2d+0x74>
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	0b36      	lsrs	r6, r6, #12
 80026fc:	0312      	lsls	r2, r2, #12
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <__aeabi_f2d+0x8c>)
 8002700:	076d      	lsls	r5, r5, #29
 8002702:	4316      	orrs	r6, r2
 8002704:	e7d8      	b.n	80026b8 <__aeabi_f2d+0x20>
 8002706:	2300      	movs	r3, #0
 8002708:	2600      	movs	r6, #0
 800270a:	e7d5      	b.n	80026b8 <__aeabi_f2d+0x20>
 800270c:	2600      	movs	r6, #0
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <__aeabi_f2d+0x8c>)
 8002710:	e7d2      	b.n	80026b8 <__aeabi_f2d+0x20>
 8002712:	0003      	movs	r3, r0
 8002714:	3b0b      	subs	r3, #11
 8002716:	409d      	lsls	r5, r3
 8002718:	002e      	movs	r6, r5
 800271a:	2500      	movs	r5, #0
 800271c:	e7e3      	b.n	80026e6 <__aeabi_f2d+0x4e>
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	00000389 	.word	0x00000389
 8002724:	000007ff 	.word	0x000007ff

08002728 <__aeabi_d2f>:
 8002728:	0002      	movs	r2, r0
 800272a:	004b      	lsls	r3, r1, #1
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	0d5b      	lsrs	r3, r3, #21
 8002730:	030c      	lsls	r4, r1, #12
 8002732:	4e3d      	ldr	r6, [pc, #244]	; (8002828 <__aeabi_d2f+0x100>)
 8002734:	0a64      	lsrs	r4, r4, #9
 8002736:	0f40      	lsrs	r0, r0, #29
 8002738:	1c5f      	adds	r7, r3, #1
 800273a:	0fc9      	lsrs	r1, r1, #31
 800273c:	4304      	orrs	r4, r0
 800273e:	00d5      	lsls	r5, r2, #3
 8002740:	4237      	tst	r7, r6
 8002742:	d00a      	beq.n	800275a <__aeabi_d2f+0x32>
 8002744:	4839      	ldr	r0, [pc, #228]	; (800282c <__aeabi_d2f+0x104>)
 8002746:	181e      	adds	r6, r3, r0
 8002748:	2efe      	cmp	r6, #254	; 0xfe
 800274a:	dd16      	ble.n	800277a <__aeabi_d2f+0x52>
 800274c:	20ff      	movs	r0, #255	; 0xff
 800274e:	2400      	movs	r4, #0
 8002750:	05c0      	lsls	r0, r0, #23
 8002752:	4320      	orrs	r0, r4
 8002754:	07c9      	lsls	r1, r1, #31
 8002756:	4308      	orrs	r0, r1
 8002758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <__aeabi_d2f+0x44>
 800275e:	432c      	orrs	r4, r5
 8002760:	d026      	beq.n	80027b0 <__aeabi_d2f+0x88>
 8002762:	2205      	movs	r2, #5
 8002764:	0192      	lsls	r2, r2, #6
 8002766:	0a54      	lsrs	r4, r2, #9
 8002768:	b2d8      	uxtb	r0, r3
 800276a:	e7f1      	b.n	8002750 <__aeabi_d2f+0x28>
 800276c:	4325      	orrs	r5, r4
 800276e:	d0ed      	beq.n	800274c <__aeabi_d2f+0x24>
 8002770:	2080      	movs	r0, #128	; 0x80
 8002772:	03c0      	lsls	r0, r0, #15
 8002774:	4304      	orrs	r4, r0
 8002776:	20ff      	movs	r0, #255	; 0xff
 8002778:	e7ea      	b.n	8002750 <__aeabi_d2f+0x28>
 800277a:	2e00      	cmp	r6, #0
 800277c:	dd1b      	ble.n	80027b6 <__aeabi_d2f+0x8e>
 800277e:	0192      	lsls	r2, r2, #6
 8002780:	1e53      	subs	r3, r2, #1
 8002782:	419a      	sbcs	r2, r3
 8002784:	00e4      	lsls	r4, r4, #3
 8002786:	0f6d      	lsrs	r5, r5, #29
 8002788:	4322      	orrs	r2, r4
 800278a:	432a      	orrs	r2, r5
 800278c:	0753      	lsls	r3, r2, #29
 800278e:	d048      	beq.n	8002822 <__aeabi_d2f+0xfa>
 8002790:	230f      	movs	r3, #15
 8002792:	4013      	ands	r3, r2
 8002794:	2b04      	cmp	r3, #4
 8002796:	d000      	beq.n	800279a <__aeabi_d2f+0x72>
 8002798:	3204      	adds	r2, #4
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	04db      	lsls	r3, r3, #19
 800279e:	4013      	ands	r3, r2
 80027a0:	d03f      	beq.n	8002822 <__aeabi_d2f+0xfa>
 80027a2:	1c70      	adds	r0, r6, #1
 80027a4:	2efe      	cmp	r6, #254	; 0xfe
 80027a6:	d0d1      	beq.n	800274c <__aeabi_d2f+0x24>
 80027a8:	0192      	lsls	r2, r2, #6
 80027aa:	0a54      	lsrs	r4, r2, #9
 80027ac:	b2c0      	uxtb	r0, r0
 80027ae:	e7cf      	b.n	8002750 <__aeabi_d2f+0x28>
 80027b0:	2000      	movs	r0, #0
 80027b2:	2400      	movs	r4, #0
 80027b4:	e7cc      	b.n	8002750 <__aeabi_d2f+0x28>
 80027b6:	0032      	movs	r2, r6
 80027b8:	3217      	adds	r2, #23
 80027ba:	db22      	blt.n	8002802 <__aeabi_d2f+0xda>
 80027bc:	2080      	movs	r0, #128	; 0x80
 80027be:	0400      	lsls	r0, r0, #16
 80027c0:	4320      	orrs	r0, r4
 80027c2:	241e      	movs	r4, #30
 80027c4:	1ba4      	subs	r4, r4, r6
 80027c6:	2c1f      	cmp	r4, #31
 80027c8:	dd1d      	ble.n	8002806 <__aeabi_d2f+0xde>
 80027ca:	2202      	movs	r2, #2
 80027cc:	4252      	negs	r2, r2
 80027ce:	1b96      	subs	r6, r2, r6
 80027d0:	0002      	movs	r2, r0
 80027d2:	40f2      	lsrs	r2, r6
 80027d4:	0016      	movs	r6, r2
 80027d6:	2c20      	cmp	r4, #32
 80027d8:	d004      	beq.n	80027e4 <__aeabi_d2f+0xbc>
 80027da:	4a15      	ldr	r2, [pc, #84]	; (8002830 <__aeabi_d2f+0x108>)
 80027dc:	4694      	mov	ip, r2
 80027de:	4463      	add	r3, ip
 80027e0:	4098      	lsls	r0, r3
 80027e2:	4305      	orrs	r5, r0
 80027e4:	002a      	movs	r2, r5
 80027e6:	1e53      	subs	r3, r2, #1
 80027e8:	419a      	sbcs	r2, r3
 80027ea:	4332      	orrs	r2, r6
 80027ec:	2600      	movs	r6, #0
 80027ee:	0753      	lsls	r3, r2, #29
 80027f0:	d1ce      	bne.n	8002790 <__aeabi_d2f+0x68>
 80027f2:	2480      	movs	r4, #128	; 0x80
 80027f4:	0013      	movs	r3, r2
 80027f6:	04e4      	lsls	r4, r4, #19
 80027f8:	2001      	movs	r0, #1
 80027fa:	4023      	ands	r3, r4
 80027fc:	4222      	tst	r2, r4
 80027fe:	d1d3      	bne.n	80027a8 <__aeabi_d2f+0x80>
 8002800:	e7b0      	b.n	8002764 <__aeabi_d2f+0x3c>
 8002802:	2300      	movs	r3, #0
 8002804:	e7ad      	b.n	8002762 <__aeabi_d2f+0x3a>
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <__aeabi_d2f+0x10c>)
 8002808:	4694      	mov	ip, r2
 800280a:	002a      	movs	r2, r5
 800280c:	40e2      	lsrs	r2, r4
 800280e:	0014      	movs	r4, r2
 8002810:	002a      	movs	r2, r5
 8002812:	4463      	add	r3, ip
 8002814:	409a      	lsls	r2, r3
 8002816:	4098      	lsls	r0, r3
 8002818:	1e55      	subs	r5, r2, #1
 800281a:	41aa      	sbcs	r2, r5
 800281c:	4302      	orrs	r2, r0
 800281e:	4322      	orrs	r2, r4
 8002820:	e7e4      	b.n	80027ec <__aeabi_d2f+0xc4>
 8002822:	0033      	movs	r3, r6
 8002824:	e79e      	b.n	8002764 <__aeabi_d2f+0x3c>
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	000007fe 	.word	0x000007fe
 800282c:	fffffc80 	.word	0xfffffc80
 8002830:	fffffca2 	.word	0xfffffca2
 8002834:	fffffc82 	.word	0xfffffc82

08002838 <__clzsi2>:
 8002838:	211c      	movs	r1, #28
 800283a:	2301      	movs	r3, #1
 800283c:	041b      	lsls	r3, r3, #16
 800283e:	4298      	cmp	r0, r3
 8002840:	d301      	bcc.n	8002846 <__clzsi2+0xe>
 8002842:	0c00      	lsrs	r0, r0, #16
 8002844:	3910      	subs	r1, #16
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	4298      	cmp	r0, r3
 800284a:	d301      	bcc.n	8002850 <__clzsi2+0x18>
 800284c:	0a00      	lsrs	r0, r0, #8
 800284e:	3908      	subs	r1, #8
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	4298      	cmp	r0, r3
 8002854:	d301      	bcc.n	800285a <__clzsi2+0x22>
 8002856:	0900      	lsrs	r0, r0, #4
 8002858:	3904      	subs	r1, #4
 800285a:	a202      	add	r2, pc, #8	; (adr r2, 8002864 <__clzsi2+0x2c>)
 800285c:	5c10      	ldrb	r0, [r2, r0]
 800285e:	1840      	adds	r0, r0, r1
 8002860:	4770      	bx	lr
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	02020304 	.word	0x02020304
 8002868:	01010101 	.word	0x01010101
	...

08002874 <initialize_Sensors>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int initialize_Sensors()
{
 8002874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002876:	b08b      	sub	sp, #44	; 0x2c
 8002878:	af04      	add	r7, sp, #16
	int error_count = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	uint8_t buffer;

	//INITIALIZE GYROSCOPE
	ret = HAL_I2C_Mem_Read(&hi2c1, GYRO_DEVADDR, Gyro_WHO_AM_I, 1, &buffer, 1, 5); //This should return "0xd7" for the Gyroscope in the buffer[0]
 800287e:	2142      	movs	r1, #66	; 0x42
 8002880:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <initialize_Sensors+0x19c>)
 8002882:	881a      	ldrh	r2, [r3, #0]
 8002884:	2513      	movs	r5, #19
 8002886:	197c      	adds	r4, r7, r5
 8002888:	4862      	ldr	r0, [pc, #392]	; (8002a14 <initialize_Sensors+0x1a0>)
 800288a:	2305      	movs	r3, #5
 800288c:	9302      	str	r3, [sp, #8]
 800288e:	2301      	movs	r3, #1
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	2609      	movs	r6, #9
 8002894:	19bb      	adds	r3, r7, r6
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2301      	movs	r3, #1
 800289a:	f001 fab7 	bl	8003e0c <HAL_I2C_Mem_Read>
 800289e:	0003      	movs	r3, r0
 80028a0:	7023      	strb	r3, [r4, #0]
	//Bandwidth BW=4; Full Scale Range FSR= +-250mdps/LSB
	//This leads to a nominal sensitivity of 7.8125 mdps/LSB.
	error_count += (ret!=HAL_OK);
 80028a2:	0028      	movs	r0, r5
 80028a4:	183b      	adds	r3, r7, r0
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	4193      	sbcs	r3, r2
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	001a      	movs	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	189b      	adds	r3, r3, r2
 80028b4:	617b      	str	r3, [r7, #20]
	uint16_t CTRL_REG0 = 0x0D;
 80028b6:	2310      	movs	r3, #16
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	220d      	movs	r2, #13
 80028bc:	801a      	strh	r2, [r3, #0]
	uint8_t CTRL_REG0_input = 0b01000011;
 80028be:	2208      	movs	r2, #8
 80028c0:	18bb      	adds	r3, r7, r2
 80028c2:	2243      	movs	r2, #67	; 0x43
 80028c4:	701a      	strb	r2, [r3, #0]
	//ret = initialize_Sensor(GYRO_DEVADDR, Gyro_WHO_AM_I, CTRL_REG0, CTRL_REG0_input, output);
	ret = HAL_I2C_Mem_Write(&hi2c1, GYRO_DEVADDR, CTRL_REG0, 1, &CTRL_REG0_input, 1, 5);
 80028c6:	2142      	movs	r1, #66	; 0x42
 80028c8:	0005      	movs	r5, r0
 80028ca:	183c      	adds	r4, r7, r0
 80028cc:	2310      	movs	r3, #16
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	4850      	ldr	r0, [pc, #320]	; (8002a14 <initialize_Sensors+0x1a0>)
 80028d4:	2305      	movs	r3, #5
 80028d6:	9302      	str	r3, [sp, #8]
 80028d8:	2301      	movs	r3, #1
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	2308      	movs	r3, #8
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2301      	movs	r3, #1
 80028e4:	f001 f964 	bl	8003bb0 <HAL_I2C_Mem_Write>
 80028e8:	0003      	movs	r3, r0
 80028ea:	7023      	strb	r3, [r4, #0]
	error_count += (ret!=HAL_OK);
 80028ec:	0028      	movs	r0, r5
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	1e5a      	subs	r2, r3, #1
 80028f4:	4193      	sbcs	r3, r2
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	001a      	movs	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	189b      	adds	r3, r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
	//Output Data Rate ODR=12.5Hz; active=1; ready=0
	uint16_t CTRL_REG1 = 0x13;
 8002900:	230e      	movs	r3, #14
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2213      	movs	r2, #19
 8002906:	801a      	strh	r2, [r3, #0]
	uint8_t CTRL_REG1_input = 0b00011110;
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	221e      	movs	r2, #30
 800290c:	701a      	strb	r2, [r3, #0]
	//ret = initialize_Sensor(GYRO_DEVADDR, Gyro_WHO_AM_I, CTRL_REG1, CTRL_REG1_input, output);
	ret = HAL_I2C_Mem_Write(&hi2c1, GYRO_DEVADDR, CTRL_REG1, 1, &CTRL_REG1_input, 1, 5);
 800290e:	2142      	movs	r1, #66	; 0x42
 8002910:	0005      	movs	r5, r0
 8002912:	183c      	adds	r4, r7, r0
 8002914:	230e      	movs	r3, #14
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	881a      	ldrh	r2, [r3, #0]
 800291a:	483e      	ldr	r0, [pc, #248]	; (8002a14 <initialize_Sensors+0x1a0>)
 800291c:	2305      	movs	r3, #5
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	2301      	movs	r3, #1
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	1dfb      	adds	r3, r7, #7
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2301      	movs	r3, #1
 800292a:	f001 f941 	bl	8003bb0 <HAL_I2C_Mem_Write>
 800292e:	0003      	movs	r3, r0
 8002930:	7023      	strb	r3, [r4, #0]
	error_count += (ret!=HAL_OK);
 8002932:	0028      	movs	r0, r5
 8002934:	183b      	adds	r3, r7, r0
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	1e5a      	subs	r2, r3, #1
 800293a:	4193      	sbcs	r3, r2
 800293c:	b2db      	uxtb	r3, r3
 800293e:	001a      	movs	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	189b      	adds	r3, r3, r2
 8002944:	617b      	str	r3, [r7, #20]

	//INITIALIZE MAGNETOMETER
	ret = HAL_I2C_Mem_Read(&hi2c1, GYRO_DEVADDR, Gyro_WHO_AM_I, 1, &buffer, 1, 5); //This should return "0xc7" for the Magnetometer/Accelerometer in the buffer[0]
 8002946:	2142      	movs	r1, #66	; 0x42
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <initialize_Sensors+0x19c>)
 800294a:	881a      	ldrh	r2, [r3, #0]
 800294c:	0005      	movs	r5, r0
 800294e:	183c      	adds	r4, r7, r0
 8002950:	4830      	ldr	r0, [pc, #192]	; (8002a14 <initialize_Sensors+0x1a0>)
 8002952:	2305      	movs	r3, #5
 8002954:	9302      	str	r3, [sp, #8]
 8002956:	2301      	movs	r3, #1
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	19bb      	adds	r3, r7, r6
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	f001 fa54 	bl	8003e0c <HAL_I2C_Mem_Read>
 8002964:	0003      	movs	r3, r0
 8002966:	7023      	strb	r3, [r4, #0]
	error_count += (ret!=HAL_OK);
 8002968:	0028      	movs	r0, r5
 800296a:	183b      	adds	r3, r7, r0
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	1e5a      	subs	r2, r3, #1
 8002970:	4193      	sbcs	r3, r2
 8002972:	b2db      	uxtb	r3, r3
 8002974:	001a      	movs	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	189b      	adds	r3, r3, r2
 800297a:	617b      	str	r3, [r7, #20]
	//Output Data Rate ODR=12.5Hz; low_noise=1; active=1;
	uint16_t MA_CTRL_REG1 = 0x2A;
 800297c:	260c      	movs	r6, #12
 800297e:	19bb      	adds	r3, r7, r6
 8002980:	222a      	movs	r2, #42	; 0x2a
 8002982:	801a      	strh	r2, [r3, #0]
	uint8_t MA_CTRL_REG1_input = 0b00101101;
 8002984:	1dbb      	adds	r3, r7, #6
 8002986:	222d      	movs	r2, #45	; 0x2d
 8002988:	701a      	strb	r2, [r3, #0]
	//ret = initialize_Sensor(MAGACC_DEVADDR, MAGACC_WHO_AM_I, MA_CTRL_REG1, MA_CTRL_REG1_input, output);
	ret = HAL_I2C_Mem_Write(&hi2c1, MAGACC_DEVADDR, MA_CTRL_REG1, 1, &MA_CTRL_REG1_input, 1, 5);
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <initialize_Sensors+0x1a4>)
 800298c:	8819      	ldrh	r1, [r3, #0]
 800298e:	0005      	movs	r5, r0
 8002990:	183c      	adds	r4, r7, r0
 8002992:	19bb      	adds	r3, r7, r6
 8002994:	881a      	ldrh	r2, [r3, #0]
 8002996:	481f      	ldr	r0, [pc, #124]	; (8002a14 <initialize_Sensors+0x1a0>)
 8002998:	2305      	movs	r3, #5
 800299a:	9302      	str	r3, [sp, #8]
 800299c:	2301      	movs	r3, #1
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	1dbb      	adds	r3, r7, #6
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2301      	movs	r3, #1
 80029a6:	f001 f903 	bl	8003bb0 <HAL_I2C_Mem_Write>
 80029aa:	0003      	movs	r3, r0
 80029ac:	7023      	strb	r3, [r4, #0]
	error_count += (ret!=HAL_OK);
 80029ae:	0028      	movs	r0, r5
 80029b0:	183b      	adds	r3, r7, r0
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	1e5a      	subs	r2, r3, #1
 80029b6:	4193      	sbcs	r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	001a      	movs	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	617b      	str	r3, [r7, #20]
	//This sensor has a nominal sensitivity of 0.1 μT/LSB.
	//Auto-Calibration: disabled; Oversample Ratio OSR=7; Only Magnetometer is active
	uint16_t M_CTRL_REG1 = 0x5B;
 80029c2:	260a      	movs	r6, #10
 80029c4:	19bb      	adds	r3, r7, r6
 80029c6:	225b      	movs	r2, #91	; 0x5b
 80029c8:	801a      	strh	r2, [r3, #0]
	uint8_t M_CTRL_REG1_input = 0b00011101;
 80029ca:	1d7b      	adds	r3, r7, #5
 80029cc:	221d      	movs	r2, #29
 80029ce:	701a      	strb	r2, [r3, #0]
	//ret = initialize_Sensor(MAGACC_DEVADDR, MAGACC_WHO_AM_I, M_CTRL_REG1, M_CTRL_REG1_input, output);
	ret = HAL_I2C_Mem_Write(&hi2c1, MAGACC_DEVADDR, M_CTRL_REG1, 1, &M_CTRL_REG1_input, 1, 5);
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <initialize_Sensors+0x1a4>)
 80029d2:	8819      	ldrh	r1, [r3, #0]
 80029d4:	0005      	movs	r5, r0
 80029d6:	183c      	adds	r4, r7, r0
 80029d8:	19bb      	adds	r3, r7, r6
 80029da:	881a      	ldrh	r2, [r3, #0]
 80029dc:	480d      	ldr	r0, [pc, #52]	; (8002a14 <initialize_Sensors+0x1a0>)
 80029de:	2305      	movs	r3, #5
 80029e0:	9302      	str	r3, [sp, #8]
 80029e2:	2301      	movs	r3, #1
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	1d7b      	adds	r3, r7, #5
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2301      	movs	r3, #1
 80029ec:	f001 f8e0 	bl	8003bb0 <HAL_I2C_Mem_Write>
 80029f0:	0003      	movs	r3, r0
 80029f2:	7023      	strb	r3, [r4, #0]
	error_count += (ret!=HAL_OK);
 80029f4:	197b      	adds	r3, r7, r5
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	1e5a      	subs	r2, r3, #1
 80029fa:	4193      	sbcs	r3, r2
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	001a      	movs	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	189b      	adds	r3, r3, r2
 8002a04:	617b      	str	r3, [r7, #20]
	return error_count;
 8002a06:	697b      	ldr	r3, [r7, #20]
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b007      	add	sp, #28
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a10:	20000002 	.word	0x20000002
 8002a14:	20000208 	.word	0x20000208
 8002a18:	20000008 	.word	0x20000008

08002a1c <read_Sensor_data>:
	return ret;
}
*/

HAL_StatusTypeDef read_Sensor_data(int16_t *Data, uint16_t Sensor_address, uint16_t Start_register)
{
 8002a1c:	b5b0      	push	{r4, r5, r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af04      	add	r7, sp, #16
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	0008      	movs	r0, r1
 8002a26:	0011      	movs	r1, r2
 8002a28:	1cbb      	adds	r3, r7, #2
 8002a2a:	1c02      	adds	r2, r0, #0
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	003b      	movs	r3, r7
 8002a30:	1c0a      	adds	r2, r1, #0
 8002a32:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	uint8_t buffer[6];
	ret=HAL_I2C_Mem_Read(&hi2c1, Sensor_address, Start_register, 1, buffer, 6, 5);
 8002a34:	250f      	movs	r5, #15
 8002a36:	197c      	adds	r4, r7, r5
 8002a38:	003b      	movs	r3, r7
 8002a3a:	881a      	ldrh	r2, [r3, #0]
 8002a3c:	1cbb      	adds	r3, r7, #2
 8002a3e:	8819      	ldrh	r1, [r3, #0]
 8002a40:	481f      	ldr	r0, [pc, #124]	; (8002ac0 <read_Sensor_data+0xa4>)
 8002a42:	2305      	movs	r3, #5
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	2306      	movs	r3, #6
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2301      	movs	r3, #1
 8002a52:	f001 f9db 	bl	8003e0c <HAL_I2C_Mem_Read>
 8002a56:	0003      	movs	r3, r0
 8002a58:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(10);
		if (ret == HAL_ERROR){
 8002a5a:	197b      	adds	r3, r7, r5
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <read_Sensor_data+0x4c>
			return ret;}
 8002a62:	197b      	adds	r3, r7, r5
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	e026      	b.n	8002ab6 <read_Sensor_data+0x9a>
/*	Data[0] = ((uint16_t) buffer[1])<<8 | ((uint16_t) buffer[0]);
	Data[1] = ((uint16_t) buffer[3])<<8 | ((uint16_t) buffer[2]);
	Data[2] = ((uint16_t) buffer[5])<<8 | ((uint16_t) buffer[4]);*/

	Data[0] = ((uint16_t) buffer[0])<<8 | ((uint16_t) buffer[1]);
 8002a68:	2008      	movs	r0, #8
 8002a6a:	183b      	adds	r3, r7, r0
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	b21a      	sxth	r2, r3
 8002a72:	183b      	adds	r3, r7, r0
 8002a74:	785b      	ldrb	r3, [r3, #1]
 8002a76:	b21b      	sxth	r3, r3
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b21a      	sxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	801a      	strh	r2, [r3, #0]
	Data[1] = ((uint16_t) buffer[2])<<8 | ((uint16_t) buffer[3]);
 8002a80:	183b      	adds	r3, r7, r0
 8002a82:	789b      	ldrb	r3, [r3, #2]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b219      	sxth	r1, r3
 8002a88:	183b      	adds	r3, r7, r0
 8002a8a:	78db      	ldrb	r3, [r3, #3]
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3302      	adds	r3, #2
 8002a92:	430a      	orrs	r2, r1
 8002a94:	b212      	sxth	r2, r2
 8002a96:	801a      	strh	r2, [r3, #0]
	Data[2] = ((uint16_t) buffer[4])<<8 | ((uint16_t) buffer[5]);
 8002a98:	183b      	adds	r3, r7, r0
 8002a9a:	791b      	ldrb	r3, [r3, #4]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	b219      	sxth	r1, r3
 8002aa0:	183b      	adds	r3, r7, r0
 8002aa2:	795b      	ldrb	r3, [r3, #5]
 8002aa4:	b21a      	sxth	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	b212      	sxth	r2, r2
 8002aae:	801a      	strh	r2, [r3, #0]
	return ret;
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	781b      	ldrb	r3, [r3, #0]
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bdb0      	pop	{r4, r5, r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	20000208 	.word	0x20000208

08002ac4 <convert_Sensor_Data>:

void convert_Sensor_Data(int16_t *rawData, DATA_TypeDef *Data, float conv_factor)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	Data->x = rawData[0]*conv_factor;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7fd ffaa 	bl	8000a30 <__aeabi_i2f>
 8002adc:	1c03      	adds	r3, r0, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	1c18      	adds	r0, r3, #0
 8002ae2:	f7fd fe7f 	bl	80007e4 <__aeabi_fmul>
 8002ae6:	1c03      	adds	r3, r0, #0
 8002ae8:	1c1a      	adds	r2, r3, #0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	601a      	str	r2, [r3, #0]
	Data->y = rawData[1]*conv_factor;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3302      	adds	r3, #2
 8002af2:	2200      	movs	r2, #0
 8002af4:	5e9b      	ldrsh	r3, [r3, r2]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7fd ff9a 	bl	8000a30 <__aeabi_i2f>
 8002afc:	1c03      	adds	r3, r0, #0
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	1c18      	adds	r0, r3, #0
 8002b02:	f7fd fe6f 	bl	80007e4 <__aeabi_fmul>
 8002b06:	1c03      	adds	r3, r0, #0
 8002b08:	1c1a      	adds	r2, r3, #0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	605a      	str	r2, [r3, #4]
	Data->z = rawData[2]*conv_factor;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	5e9b      	ldrsh	r3, [r3, r2]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7fd ff8a 	bl	8000a30 <__aeabi_i2f>
 8002b1c:	1c03      	adds	r3, r0, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	1c18      	adds	r0, r3, #0
 8002b22:	f7fd fe5f 	bl	80007e4 <__aeabi_fmul>
 8002b26:	1c03      	adds	r3, r0, #0
 8002b28:	1c1a      	adds	r2, r3, #0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ // This interrupt handles the push of the blue button
 8002b38:	b5b0      	push	{r4, r5, r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	0002      	movs	r2, r0
 8002b40:	1dbb      	adds	r3, r7, #6
 8002b42:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef ret;
	static int16_t Mag_rawRefData[3];
	static DATA_TypeDef Mag_RefData;
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4a20      	ldr	r2, [pc, #128]	; (8002bcc <HAL_GPIO_EXTI_Callback+0x94>)
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	0010      	movs	r0, r2
 8002b4e:	f000 ff62 	bl	8003a16 <HAL_GPIO_TogglePin>
	//Set current Sensor values as Reference (Zero)
	ret=read_Sensor_data(Mag_rawRefData, MAGACC_DEVADDR, MAG_MSB_X);
 8002b52:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002b54:	8819      	ldrh	r1, [r3, #0]
 8002b56:	2233      	movs	r2, #51	; 0x33
 8002b58:	230f      	movs	r3, #15
 8002b5a:	18fc      	adds	r4, r7, r3
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7ff ff5c 	bl	8002a1c <read_Sensor_data>
 8002b64:	0003      	movs	r3, r0
 8002b66:	7023      	strb	r3, [r4, #0]
	convert_Sensor_Data(Mag_rawRefData, &Mag_RefData, Mag_conv_factor);
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	491b      	ldr	r1, [pc, #108]	; (8002bdc <HAL_GPIO_EXTI_Callback+0xa4>)
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002b70:	0018      	movs	r0, r3
 8002b72:	f7ff ffa7 	bl	8002ac4 <convert_Sensor_Data>
	nullangle = atan2(Mag_RefData.x, Mag_RefData.y)*180/M_PI;
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_GPIO_EXTI_Callback+0xa4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1c18      	adds	r0, r3, #0
 8002b7c:	f7ff fd8c 	bl	8002698 <__aeabi_f2d>
 8002b80:	0004      	movs	r4, r0
 8002b82:	000d      	movs	r5, r1
 8002b84:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_GPIO_EXTI_Callback+0xa4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	1c18      	adds	r0, r3, #0
 8002b8a:	f7ff fd85 	bl	8002698 <__aeabi_f2d>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	000b      	movs	r3, r1
 8002b92:	0020      	movs	r0, r4
 8002b94:	0029      	movs	r1, r5
 8002b96:	f006 fa61 	bl	800905c <atan2>
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b9e:	f7fe fed3 	bl	8001948 <__aeabi_dmul>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	000b      	movs	r3, r1
 8002ba6:	0010      	movs	r0, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <HAL_GPIO_EXTI_Callback+0xac>)
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002bae:	f7fe fac9 	bl	8001144 <__aeabi_ddiv>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	000b      	movs	r3, r1
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	f7ff fdb5 	bl	8002728 <__aeabi_d2f>
 8002bbe:	1c02      	adds	r2, r0, #0
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_GPIO_EXTI_Callback+0xb4>)
 8002bc2:	601a      	str	r2, [r3, #0]

}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b004      	add	sp, #16
 8002bca:	bdb0      	pop	{r4, r5, r7, pc}
 8002bcc:	48000800 	.word	0x48000800
 8002bd0:	20000008 	.word	0x20000008
 8002bd4:	200002a4 	.word	0x200002a4
 8002bd8:	2000000c 	.word	0x2000000c
 8002bdc:	200002ac 	.word	0x200002ac
 8002be0:	40668000 	.word	0x40668000
 8002be4:	54442d18 	.word	0x54442d18
 8002be8:	400921fb 	.word	0x400921fb
 8002bec:	2000029c 	.word	0x2000029c

08002bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf2:	b095      	sub	sp, #84	; 0x54
 8002bf4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bf6:	f000 fbed 	bl	80033d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bfa:	f000 f8a3 	bl	8002d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bfe:	f000 f99d 	bl	8002f3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c02:	f000 f901 	bl	8002e08 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002c06:	f000 f93f 	bl	8002e88 <MX_TIM1_Init>
  DATA_TypeDef Gyro_Data;
  DATA_TypeDef Mag_Data;
  HAL_StatusTypeDef ret;
  float debug_nullangle;
  float debug_currentangle;
  int init_errors = initialize_Sensors();
 8002c0a:	f7ff fe33 	bl	8002874 <initialize_Sensors>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  ret=read_Sensor_data(Gyro_rawData, GYRO_DEVADDR, Gyro_MSB_X);
 8002c12:	2142      	movs	r1, #66	; 0x42
 8002c14:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <main+0x12c>)
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	2533      	movs	r5, #51	; 0x33
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	18e8      	adds	r0, r5, r3
 8002c1e:	19c4      	adds	r4, r0, r7
 8002c20:	2620      	movs	r6, #32
 8002c22:	18f0      	adds	r0, r6, r3
 8002c24:	19c3      	adds	r3, r0, r7
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7ff fef8 	bl	8002a1c <read_Sensor_data>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	7023      	strb	r3, [r4, #0]
	  ret=read_Sensor_data(Mag_rawData, MAGACC_DEVADDR, MAG_MSB_X);
 8002c30:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <main+0x130>)
 8002c32:	8819      	ldrh	r1, [r3, #0]
 8002c34:	2233      	movs	r2, #51	; 0x33
 8002c36:	2308      	movs	r3, #8
 8002c38:	18e8      	adds	r0, r5, r3
 8002c3a:	19c4      	adds	r4, r0, r7
 8002c3c:	2518      	movs	r5, #24
 8002c3e:	18e8      	adds	r0, r5, r3
 8002c40:	19c3      	adds	r3, r0, r7
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff feea 	bl	8002a1c <read_Sensor_data>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	7023      	strb	r3, [r4, #0]
	  convert_Sensor_Data(Gyro_rawData, &Gyro_Data, Gyro_conv_factor);
 8002c4c:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <main+0x134>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	230c      	movs	r3, #12
 8002c52:	2408      	movs	r4, #8
 8002c54:	191b      	adds	r3, r3, r4
 8002c56:	19d9      	adds	r1, r3, r7
 8002c58:	1933      	adds	r3, r6, r4
 8002c5a:	19db      	adds	r3, r3, r7
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f7ff ff31 	bl	8002ac4 <convert_Sensor_Data>
	  convert_Sensor_Data(Mag_rawData, &Mag_Data, Mag_conv_factor*2);
 8002c62:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <main+0x138>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	1c19      	adds	r1, r3, #0
 8002c68:	1c18      	adds	r0, r3, #0
 8002c6a:	f7fd fc1d 	bl	80004a8 <__aeabi_fadd>
 8002c6e:	1c03      	adds	r3, r0, #0
 8002c70:	1c1a      	adds	r2, r3, #0
 8002c72:	0026      	movs	r6, r4
 8002c74:	19b9      	adds	r1, r7, r6
 8002c76:	19ab      	adds	r3, r5, r6
 8002c78:	19db      	adds	r3, r3, r7
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f7ff ff22 	bl	8002ac4 <convert_Sensor_Data>
	  currentangle = atan2(Mag_Data.y, Mag_Data.x)*180/M_PI;
 8002c80:	19bb      	adds	r3, r7, r6
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	1c18      	adds	r0, r3, #0
 8002c86:	f7ff fd07 	bl	8002698 <__aeabi_f2d>
 8002c8a:	0004      	movs	r4, r0
 8002c8c:	000d      	movs	r5, r1
 8002c8e:	19bb      	adds	r3, r7, r6
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	1c18      	adds	r0, r3, #0
 8002c94:	f7ff fd00 	bl	8002698 <__aeabi_f2d>
 8002c98:	0002      	movs	r2, r0
 8002c9a:	000b      	movs	r3, r1
 8002c9c:	0020      	movs	r0, r4
 8002c9e:	0029      	movs	r1, r5
 8002ca0:	f006 f9dc 	bl	800905c <atan2>
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <main+0x13c>)
 8002ca8:	f7fe fe4e 	bl	8001948 <__aeabi_dmul>
 8002cac:	0002      	movs	r2, r0
 8002cae:	000b      	movs	r3, r1
 8002cb0:	0010      	movs	r0, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <main+0x140>)
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <main+0x144>)
 8002cb8:	f7fe fa44 	bl	8001144 <__aeabi_ddiv>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	000b      	movs	r3, r1
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	f7ff fd30 	bl	8002728 <__aeabi_d2f>
 8002cc8:	1c02      	adds	r2, r0, #0
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <main+0x148>)
 8002ccc:	601a      	str	r2, [r3, #0]

	  debug_nullangle = nullangle;
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <main+0x14c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
	  debug_currentangle = currentangle;
 8002cd4:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <main+0x148>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30

	  printf("Current Magnetometer Values are: x = %f, y = %f, z = %f \n", Mag_Data.x, Mag_Data.y, Mag_Data.z);
 8002cda:	19bb      	adds	r3, r7, r6
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	1c18      	adds	r0, r3, #0
 8002ce0:	f7ff fcda 	bl	8002698 <__aeabi_f2d>
 8002ce4:	6038      	str	r0, [r7, #0]
 8002ce6:	6079      	str	r1, [r7, #4]
 8002ce8:	19bb      	adds	r3, r7, r6
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	1c18      	adds	r0, r3, #0
 8002cee:	f7ff fcd3 	bl	8002698 <__aeabi_f2d>
 8002cf2:	0004      	movs	r4, r0
 8002cf4:	000d      	movs	r5, r1
 8002cf6:	19bb      	adds	r3, r7, r6
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	1c18      	adds	r0, r3, #0
 8002cfc:	f7ff fccc 	bl	8002698 <__aeabi_f2d>
 8002d00:	0002      	movs	r2, r0
 8002d02:	000b      	movs	r3, r1
 8002d04:	490e      	ldr	r1, [pc, #56]	; (8002d40 <main+0x150>)
 8002d06:	9202      	str	r2, [sp, #8]
 8002d08:	9303      	str	r3, [sp, #12]
 8002d0a:	9400      	str	r4, [sp, #0]
 8002d0c:	9501      	str	r5, [sp, #4]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0008      	movs	r0, r1
 8002d14:	f004 f82a 	bl	8006d6c <iprintf>
	  ret=read_Sensor_data(Gyro_rawData, GYRO_DEVADDR, Gyro_MSB_X);
 8002d18:	e77b      	b.n	8002c12 <main+0x22>
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000008 	.word	0x20000008
 8002d24:	20000004 	.word	0x20000004
 8002d28:	2000000c 	.word	0x2000000c
 8002d2c:	40668000 	.word	0x40668000
 8002d30:	54442d18 	.word	0x54442d18
 8002d34:	400921fb 	.word	0x400921fb
 8002d38:	200002a0 	.word	0x200002a0
 8002d3c:	2000029c 	.word	0x2000029c
 8002d40:	080094e0 	.word	0x080094e0

08002d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b097      	sub	sp, #92	; 0x5c
 8002d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d4a:	2428      	movs	r4, #40	; 0x28
 8002d4c:	193b      	adds	r3, r7, r4
 8002d4e:	0018      	movs	r0, r3
 8002d50:	2330      	movs	r3, #48	; 0x30
 8002d52:	001a      	movs	r2, r3
 8002d54:	2100      	movs	r1, #0
 8002d56:	f003 fb93 	bl	8006480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d5a:	2318      	movs	r3, #24
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	0018      	movs	r0, r3
 8002d60:	2310      	movs	r3, #16
 8002d62:	001a      	movs	r2, r3
 8002d64:	2100      	movs	r1, #0
 8002d66:	f003 fb8b 	bl	8006480 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	2314      	movs	r3, #20
 8002d70:	001a      	movs	r2, r3
 8002d72:	2100      	movs	r1, #0
 8002d74:	f003 fb84 	bl	8006480 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d78:	0021      	movs	r1, r4
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	2201      	movs	r2, #1
 8002d84:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	2210      	movs	r2, #16
 8002d8a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	2202      	movs	r2, #2
 8002d90:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	2200      	movs	r2, #0
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	22a0      	movs	r2, #160	; 0xa0
 8002d9c:	0392      	lsls	r2, r2, #14
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	2200      	movs	r2, #0
 8002da4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da6:	187b      	adds	r3, r7, r1
 8002da8:	0018      	movs	r0, r3
 8002daa:	f002 fa2b 	bl	8005204 <HAL_RCC_OscConfig>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d001      	beq.n	8002db6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002db2:	f000 f935 	bl	8003020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db6:	2118      	movs	r1, #24
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	2207      	movs	r2, #7
 8002dbc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f002 fd2f 	bl	8005838 <HAL_RCC_ClockConfig>
 8002dda:	1e03      	subs	r3, r0, #0
 8002ddc:	d001      	beq.n	8002de2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002dde:	f000 f91f 	bl	8003020 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2220      	movs	r2, #32
 8002de6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	0018      	movs	r0, r3
 8002df2:	f002 fe53 	bl	8005a9c <HAL_RCCEx_PeriphCLKConfig>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d001      	beq.n	8002dfe <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002dfa:	f000 f911 	bl	8003020 <Error_Handler>
  }
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b017      	add	sp, #92	; 0x5c
 8002e04:	bd90      	pop	{r4, r7, pc}
	...

08002e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <MX_I2C1_Init+0x78>)
 8002e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e14:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <MX_I2C1_Init+0x7c>)
 8002e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 fe1d 	bl	8003a84 <HAL_I2C_Init>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e4e:	f000 f8e7 	bl	8003020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e54:	2100      	movs	r1, #0
 8002e56:	0018      	movs	r0, r3
 8002e58:	f002 f93c 	bl	80050d4 <HAL_I2CEx_ConfigAnalogFilter>
 8002e5c:	1e03      	subs	r3, r0, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e60:	f000 f8de 	bl	8003020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e66:	2100      	movs	r1, #0
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f002 f97f 	bl	800516c <HAL_I2CEx_ConfigDigitalFilter>
 8002e6e:	1e03      	subs	r3, r0, #0
 8002e70:	d001      	beq.n	8002e76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e72:	f000 f8d5 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000208 	.word	0x20000208
 8002e80:	40005400 	.word	0x40005400
 8002e84:	2000090e 	.word	0x2000090e

08002e88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e8e:	2308      	movs	r3, #8
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	0018      	movs	r0, r3
 8002e94:	2310      	movs	r3, #16
 8002e96:	001a      	movs	r2, r3
 8002e98:	2100      	movs	r1, #0
 8002e9a:	f003 faf1 	bl	8006480 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e9e:	003b      	movs	r3, r7
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	f003 faea 	bl	8006480 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002eac:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <MX_TIM1_Init+0xa4>)
 8002eae:	4a20      	ldr	r2, [pc, #128]	; (8002f30 <MX_TIM1_Init+0xa8>)
 8002eb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <MX_TIM1_Init+0xa4>)
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <MX_TIM1_Init+0xac>)
 8002eb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <MX_TIM1_Init+0xa4>)
 8002eba:	2210      	movs	r2, #16
 8002ebc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <MX_TIM1_Init+0xa4>)
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <MX_TIM1_Init+0xb0>)
 8002ec2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec4:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <MX_TIM1_Init+0xa4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002eca:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <MX_TIM1_Init+0xa4>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed0:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <MX_TIM1_Init+0xa4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <MX_TIM1_Init+0xa4>)
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f002 febd 	bl	8005c58 <HAL_TIM_Base_Init>
 8002ede:	1e03      	subs	r3, r0, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002ee2:	f000 f89d 	bl	8003020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee6:	2108      	movs	r1, #8
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	2280      	movs	r2, #128	; 0x80
 8002eec:	0152      	lsls	r2, r2, #5
 8002eee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ef0:	187a      	adds	r2, r7, r1
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <MX_TIM1_Init+0xa4>)
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f003 f814 	bl	8005f24 <HAL_TIM_ConfigClockSource>
 8002efc:	1e03      	subs	r3, r0, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002f00:	f000 f88e 	bl	8003020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f04:	003b      	movs	r3, r7
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f0a:	003b      	movs	r3, r7
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f10:	003a      	movs	r2, r7
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <MX_TIM1_Init+0xa4>)
 8002f14:	0011      	movs	r1, r2
 8002f16:	0018      	movs	r0, r3
 8002f18:	f003 fa1a 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002f20:	f000 f87e 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b006      	add	sp, #24
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000254 	.word	0x20000254
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	0000bb80 	.word	0x0000bb80
 8002f38:	00001388 	.word	0x00001388

08002f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f42:	240c      	movs	r4, #12
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	0018      	movs	r0, r3
 8002f48:	2314      	movs	r3, #20
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f003 fa97 	bl	8006480 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	4b31      	ldr	r3, [pc, #196]	; (8003018 <MX_GPIO_Init+0xdc>)
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	4b30      	ldr	r3, [pc, #192]	; (8003018 <MX_GPIO_Init+0xdc>)
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	0289      	lsls	r1, r1, #10
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	615a      	str	r2, [r3, #20]
 8002f60:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <MX_GPIO_Init+0xdc>)
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	029b      	lsls	r3, r3, #10
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <MX_GPIO_Init+0xdc>)
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <MX_GPIO_Init+0xdc>)
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	0309      	lsls	r1, r1, #12
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	615a      	str	r2, [r3, #20]
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <MX_GPIO_Init+0xdc>)
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	031b      	lsls	r3, r3, #12
 8002f84:	4013      	ands	r3, r2
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	4b23      	ldr	r3, [pc, #140]	; (8003018 <MX_GPIO_Init+0xdc>)
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	4b22      	ldr	r3, [pc, #136]	; (8003018 <MX_GPIO_Init+0xdc>)
 8002f90:	2180      	movs	r1, #128	; 0x80
 8002f92:	02c9      	lsls	r1, r1, #11
 8002f94:	430a      	orrs	r2, r1
 8002f96:	615a      	str	r2, [r3, #20]
 8002f98:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <MX_GPIO_Init+0xdc>)
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	02db      	lsls	r3, r3, #11
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002fa6:	23c0      	movs	r3, #192	; 0xc0
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	481c      	ldr	r0, [pc, #112]	; (800301c <MX_GPIO_Init+0xe0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	0019      	movs	r1, r3
 8002fb0:	f000 fd14 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fb4:	193b      	adds	r3, r7, r4
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fba:	193b      	adds	r3, r7, r4
 8002fbc:	2288      	movs	r2, #136	; 0x88
 8002fbe:	0352      	lsls	r2, r2, #13
 8002fc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fc8:	193a      	adds	r2, r7, r4
 8002fca:	2390      	movs	r3, #144	; 0x90
 8002fcc:	05db      	lsls	r3, r3, #23
 8002fce:	0011      	movs	r1, r2
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f000 fb93 	bl	80036fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002fd6:	0021      	movs	r1, r4
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	22c0      	movs	r2, #192	; 0xc0
 8002fdc:	0092      	lsls	r2, r2, #2
 8002fde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	4a09      	ldr	r2, [pc, #36]	; (800301c <MX_GPIO_Init+0xe0>)
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	0010      	movs	r0, r2
 8002ffa:	f000 fb7f 	bl	80036fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	2005      	movs	r0, #5
 8003004:	f000 faf6 	bl	80035f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003008:	2005      	movs	r0, #5
 800300a:	f000 fb08 	bl	800361e <HAL_NVIC_EnableIRQ>

}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	b009      	add	sp, #36	; 0x24
 8003014:	bd90      	pop	{r4, r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	40021000 	.word	0x40021000
 800301c:	48000800 	.word	0x48000800

08003020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003024:	b672      	cpsid	i
}
 8003026:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003028:	e7fe      	b.n	8003028 <Error_Handler+0x8>
	...

0800302c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_MspInit+0x44>)
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_MspInit+0x44>)
 8003038:	2101      	movs	r1, #1
 800303a:	430a      	orrs	r2, r1
 800303c:	619a      	str	r2, [r3, #24]
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_MspInit+0x44>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2201      	movs	r2, #1
 8003044:	4013      	ands	r3, r2
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_MspInit+0x44>)
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_MspInit+0x44>)
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	0549      	lsls	r1, r1, #21
 8003054:	430a      	orrs	r2, r1
 8003056:	61da      	str	r2, [r3, #28]
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_MspInit+0x44>)
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	055b      	lsls	r3, r3, #21
 8003060:	4013      	ands	r3, r2
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	40021000 	.word	0x40021000

08003074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b08b      	sub	sp, #44	; 0x2c
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	2414      	movs	r4, #20
 800307e:	193b      	adds	r3, r7, r4
 8003080:	0018      	movs	r0, r3
 8003082:	2314      	movs	r3, #20
 8003084:	001a      	movs	r2, r3
 8003086:	2100      	movs	r1, #0
 8003088:	f003 f9fa 	bl	8006480 <memset>
  if(hi2c->Instance==I2C1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a20      	ldr	r2, [pc, #128]	; (8003114 <HAL_I2C_MspInit+0xa0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d139      	bne.n	800310a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_I2C_MspInit+0xa4>)
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <HAL_I2C_MspInit+0xa4>)
 800309c:	2180      	movs	r1, #128	; 0x80
 800309e:	02c9      	lsls	r1, r1, #11
 80030a0:	430a      	orrs	r2, r1
 80030a2:	615a      	str	r2, [r3, #20]
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <HAL_I2C_MspInit+0xa4>)
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	02db      	lsls	r3, r3, #11
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030b2:	0021      	movs	r1, r4
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	22c0      	movs	r2, #192	; 0xc0
 80030b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2212      	movs	r2, #18
 80030be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030c6:	187b      	adds	r3, r7, r1
 80030c8:	2203      	movs	r2, #3
 80030ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	2201      	movs	r2, #1
 80030d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	4a11      	ldr	r2, [pc, #68]	; (800311c <HAL_I2C_MspInit+0xa8>)
 80030d6:	0019      	movs	r1, r3
 80030d8:	0010      	movs	r0, r2
 80030da:	f000 fb0f 	bl	80036fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <HAL_I2C_MspInit+0xa4>)
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <HAL_I2C_MspInit+0xa4>)
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	0389      	lsls	r1, r1, #14
 80030e8:	430a      	orrs	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_I2C_MspInit+0xa4>)
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	039b      	lsls	r3, r3, #14
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	2017      	movs	r0, #23
 8003100:	f000 fa78 	bl	80035f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003104:	2017      	movs	r0, #23
 8003106:	f000 fa8a 	bl	800361e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b00b      	add	sp, #44	; 0x2c
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	40005400 	.word	0x40005400
 8003118:	40021000 	.word	0x40021000
 800311c:	48000400 	.word	0x48000400

08003120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_TIM_Base_MspInit+0x48>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d115      	bne.n	800315e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_TIM_Base_MspInit+0x4c>)
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_TIM_Base_MspInit+0x4c>)
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	0109      	lsls	r1, r1, #4
 800313c:	430a      	orrs	r2, r1
 800313e:	619a      	str	r2, [r3, #24]
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_TIM_Base_MspInit+0x4c>)
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	4013      	ands	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	200d      	movs	r0, #13
 8003154:	f000 fa4e 	bl	80035f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003158:	200d      	movs	r0, #13
 800315a:	f000 fa60 	bl	800361e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	40012c00 	.word	0x40012c00
 800316c:	40021000 	.word	0x40021000

08003170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003174:	e7fe      	b.n	8003174 <NMI_Handler+0x4>

08003176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317a:	e7fe      	b.n	800317a <HardFault_Handler+0x4>

0800317c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003180:	46c0      	nop			; (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003194:	f000 f966 	bl	8003464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f000 fc52 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80031b6:	0018      	movs	r0, r3
 80031b8:	f002 fd9e 	bl	8005cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	20000254 	.word	0x20000254

080031c8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <I2C1_IRQHandler+0x2c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	23e0      	movs	r3, #224	; 0xe0
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4013      	ands	r3, r2
 80031d8:	d004      	beq.n	80031e4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <I2C1_IRQHandler+0x2c>)
 80031dc:	0018      	movs	r0, r3
 80031de:	f000 ff63 	bl	80040a8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80031e2:	e003      	b.n	80031ec <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <I2C1_IRQHandler+0x2c>)
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 ff44 	bl	8004074 <HAL_I2C_EV_IRQHandler>
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	20000208 	.word	0x20000208

080031f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	return 1;
 80031fc:	2301      	movs	r3, #1
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <_kill>:

int _kill(int pid, int sig)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800320e:	f003 f90d 	bl	800642c <__errno>
 8003212:	0003      	movs	r3, r0
 8003214:	2216      	movs	r2, #22
 8003216:	601a      	str	r2, [r3, #0]
	return -1;
 8003218:	2301      	movs	r3, #1
 800321a:	425b      	negs	r3, r3
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}

08003224 <_exit>:

void _exit (int status)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800322c:	2301      	movs	r3, #1
 800322e:	425a      	negs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0011      	movs	r1, r2
 8003234:	0018      	movs	r0, r3
 8003236:	f7ff ffe5 	bl	8003204 <_kill>
	while (1) {}		/* Make sure we hang here */
 800323a:	e7fe      	b.n	800323a <_exit+0x16>

0800323c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e00a      	b.n	8003264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800324e:	e000      	b.n	8003252 <_read+0x16>
 8003250:	bf00      	nop
 8003252:	0001      	movs	r1, r0
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	60ba      	str	r2, [r7, #8]
 800325a:	b2ca      	uxtb	r2, r1
 800325c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	dbf0      	blt.n	800324e <_read+0x12>
	}

return len;
 800326c:	687b      	ldr	r3, [r7, #4]
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b006      	add	sp, #24
 8003274:	bd80      	pop	{r7, pc}

08003276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e009      	b.n	800329c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	60ba      	str	r2, [r7, #8]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	0018      	movs	r0, r3
 8003292:	e000      	b.n	8003296 <_write+0x20>
 8003294:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	dbf1      	blt.n	8003288 <_write+0x12>
	}
	return len;
 80032a4:	687b      	ldr	r3, [r7, #4]
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b006      	add	sp, #24
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_close>:

int _close(int file)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
	return -1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	425b      	negs	r3, r3
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b002      	add	sp, #8
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	0192      	lsls	r2, r2, #6
 80032d2:	605a      	str	r2, [r3, #4]
	return 0;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b002      	add	sp, #8
 80032dc:	bd80      	pop	{r7, pc}

080032de <_isatty>:

int _isatty(int file)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
	return 1;
 80032e6:	2301      	movs	r3, #1
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b002      	add	sp, #8
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
	return 0;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b004      	add	sp, #16
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <_sbrk+0x5c>)
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <_sbrk+0x60>)
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <_sbrk+0x64>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <_sbrk+0x64>)
 8003326:	4a12      	ldr	r2, [pc, #72]	; (8003370 <_sbrk+0x68>)
 8003328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <_sbrk+0x64>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	18d3      	adds	r3, r2, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	429a      	cmp	r2, r3
 8003336:	d207      	bcs.n	8003348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003338:	f003 f878 	bl	800642c <__errno>
 800333c:	0003      	movs	r3, r0
 800333e:	220c      	movs	r2, #12
 8003340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003342:	2301      	movs	r3, #1
 8003344:	425b      	negs	r3, r3
 8003346:	e009      	b.n	800335c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <_sbrk+0x64>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <_sbrk+0x64>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	18d2      	adds	r2, r2, r3
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <_sbrk+0x64>)
 8003358:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b006      	add	sp, #24
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20002000 	.word	0x20002000
 8003368:	00000400 	.word	0x00000400
 800336c:	200002b8 	.word	0x200002b8
 8003370:	200002d0 	.word	0x200002d0

08003374 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003380:	480d      	ldr	r0, [pc, #52]	; (80033b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003382:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003384:	480d      	ldr	r0, [pc, #52]	; (80033bc <LoopForever+0x6>)
  ldr r1, =_edata
 8003386:	490e      	ldr	r1, [pc, #56]	; (80033c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003388:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <LoopForever+0xe>)
  movs r3, #0
 800338a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800338c:	e002      	b.n	8003394 <LoopCopyDataInit>

0800338e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800338e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003392:	3304      	adds	r3, #4

08003394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003398:	d3f9      	bcc.n	800338e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800339a:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800339c:	4c0b      	ldr	r4, [pc, #44]	; (80033cc <LoopForever+0x16>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a0:	e001      	b.n	80033a6 <LoopFillZerobss>

080033a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a4:	3204      	adds	r2, #4

080033a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a8:	d3fb      	bcc.n	80033a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80033aa:	f7ff ffe3 	bl	8003374 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80033ae:	f003 f843 	bl	8006438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033b2:	f7ff fc1d 	bl	8002bf0 <main>

080033b6 <LoopForever>:

LoopForever:
    b LoopForever
 80033b6:	e7fe      	b.n	80033b6 <LoopForever>
  ldr   r0, =_estack
 80033b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80033bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80033c4:	08009a60 	.word	0x08009a60
  ldr r2, =_sbss
 80033c8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80033cc:	200002d0 	.word	0x200002d0

080033d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033d0:	e7fe      	b.n	80033d0 <ADC1_COMP_IRQHandler>
	...

080033d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d8:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <HAL_Init+0x24>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_Init+0x24>)
 80033de:	2110      	movs	r1, #16
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80033e4:	2000      	movs	r0, #0
 80033e6:	f000 f809 	bl	80033fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033ea:	f7ff fe1f 	bl	800302c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	0018      	movs	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	40022000 	.word	0x40022000

080033fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_InitTick+0x5c>)
 8003406:	681c      	ldr	r4, [r3, #0]
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <HAL_InitTick+0x60>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	0019      	movs	r1, r3
 800340e:	23fa      	movs	r3, #250	; 0xfa
 8003410:	0098      	lsls	r0, r3, #2
 8003412:	f7fc fe95 	bl	8000140 <__udivsi3>
 8003416:	0003      	movs	r3, r0
 8003418:	0019      	movs	r1, r3
 800341a:	0020      	movs	r0, r4
 800341c:	f7fc fe90 	bl	8000140 <__udivsi3>
 8003420:	0003      	movs	r3, r0
 8003422:	0018      	movs	r0, r3
 8003424:	f000 f90b 	bl	800363e <HAL_SYSTICK_Config>
 8003428:	1e03      	subs	r3, r0, #0
 800342a:	d001      	beq.n	8003430 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e00f      	b.n	8003450 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d80b      	bhi.n	800344e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	2301      	movs	r3, #1
 800343a:	425b      	negs	r3, r3
 800343c:	2200      	movs	r2, #0
 800343e:	0018      	movs	r0, r3
 8003440:	f000 f8d8 	bl	80035f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_InitTick+0x64>)
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e000      	b.n	8003450 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b003      	add	sp, #12
 8003456:	bd90      	pop	{r4, r7, pc}
 8003458:	20000010 	.word	0x20000010
 800345c:	20000018 	.word	0x20000018
 8003460:	20000014 	.word	0x20000014

08003464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_IncTick+0x1c>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	001a      	movs	r2, r3
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_IncTick+0x20>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	18d2      	adds	r2, r2, r3
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_IncTick+0x20>)
 8003476:	601a      	str	r2, [r3, #0]
}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	20000018 	.word	0x20000018
 8003484:	200002bc 	.word	0x200002bc

08003488 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  return uwTick;
 800348c:	4b02      	ldr	r3, [pc, #8]	; (8003498 <HAL_GetTick+0x10>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	200002bc 	.word	0x200002bc

0800349c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	0002      	movs	r2, r0
 80034a4:	1dfb      	adds	r3, r7, #7
 80034a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034a8:	1dfb      	adds	r3, r7, #7
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b7f      	cmp	r3, #127	; 0x7f
 80034ae:	d809      	bhi.n	80034c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034b0:	1dfb      	adds	r3, r7, #7
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	001a      	movs	r2, r3
 80034b6:	231f      	movs	r3, #31
 80034b8:	401a      	ands	r2, r3
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <__NVIC_EnableIRQ+0x30>)
 80034bc:	2101      	movs	r1, #1
 80034be:	4091      	lsls	r1, r2
 80034c0:	000a      	movs	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
  }
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b002      	add	sp, #8
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	e000e100 	.word	0xe000e100

080034d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	0002      	movs	r2, r0
 80034d8:	6039      	str	r1, [r7, #0]
 80034da:	1dfb      	adds	r3, r7, #7
 80034dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034de:	1dfb      	adds	r3, r7, #7
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b7f      	cmp	r3, #127	; 0x7f
 80034e4:	d828      	bhi.n	8003538 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034e6:	4a2f      	ldr	r2, [pc, #188]	; (80035a4 <__NVIC_SetPriority+0xd4>)
 80034e8:	1dfb      	adds	r3, r7, #7
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	33c0      	adds	r3, #192	; 0xc0
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	589b      	ldr	r3, [r3, r2]
 80034f6:	1dfa      	adds	r2, r7, #7
 80034f8:	7812      	ldrb	r2, [r2, #0]
 80034fa:	0011      	movs	r1, r2
 80034fc:	2203      	movs	r2, #3
 80034fe:	400a      	ands	r2, r1
 8003500:	00d2      	lsls	r2, r2, #3
 8003502:	21ff      	movs	r1, #255	; 0xff
 8003504:	4091      	lsls	r1, r2
 8003506:	000a      	movs	r2, r1
 8003508:	43d2      	mvns	r2, r2
 800350a:	401a      	ands	r2, r3
 800350c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	019b      	lsls	r3, r3, #6
 8003512:	22ff      	movs	r2, #255	; 0xff
 8003514:	401a      	ands	r2, r3
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	0018      	movs	r0, r3
 800351c:	2303      	movs	r3, #3
 800351e:	4003      	ands	r3, r0
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003524:	481f      	ldr	r0, [pc, #124]	; (80035a4 <__NVIC_SetPriority+0xd4>)
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b25b      	sxtb	r3, r3
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	430a      	orrs	r2, r1
 8003530:	33c0      	adds	r3, #192	; 0xc0
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003536:	e031      	b.n	800359c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003538:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <__NVIC_SetPriority+0xd8>)
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	0019      	movs	r1, r3
 8003540:	230f      	movs	r3, #15
 8003542:	400b      	ands	r3, r1
 8003544:	3b08      	subs	r3, #8
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3306      	adds	r3, #6
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	18d3      	adds	r3, r2, r3
 800354e:	3304      	adds	r3, #4
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1dfa      	adds	r2, r7, #7
 8003554:	7812      	ldrb	r2, [r2, #0]
 8003556:	0011      	movs	r1, r2
 8003558:	2203      	movs	r2, #3
 800355a:	400a      	ands	r2, r1
 800355c:	00d2      	lsls	r2, r2, #3
 800355e:	21ff      	movs	r1, #255	; 0xff
 8003560:	4091      	lsls	r1, r2
 8003562:	000a      	movs	r2, r1
 8003564:	43d2      	mvns	r2, r2
 8003566:	401a      	ands	r2, r3
 8003568:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	019b      	lsls	r3, r3, #6
 800356e:	22ff      	movs	r2, #255	; 0xff
 8003570:	401a      	ands	r2, r3
 8003572:	1dfb      	adds	r3, r7, #7
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	0018      	movs	r0, r3
 8003578:	2303      	movs	r3, #3
 800357a:	4003      	ands	r3, r0
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003580:	4809      	ldr	r0, [pc, #36]	; (80035a8 <__NVIC_SetPriority+0xd8>)
 8003582:	1dfb      	adds	r3, r7, #7
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	001c      	movs	r4, r3
 8003588:	230f      	movs	r3, #15
 800358a:	4023      	ands	r3, r4
 800358c:	3b08      	subs	r3, #8
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	430a      	orrs	r2, r1
 8003592:	3306      	adds	r3, #6
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	18c3      	adds	r3, r0, r3
 8003598:	3304      	adds	r3, #4
 800359a:	601a      	str	r2, [r3, #0]
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b003      	add	sp, #12
 80035a2:	bd90      	pop	{r4, r7, pc}
 80035a4:	e000e100 	.word	0xe000e100
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	1e5a      	subs	r2, r3, #1
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	045b      	lsls	r3, r3, #17
 80035bc:	429a      	cmp	r2, r3
 80035be:	d301      	bcc.n	80035c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035c0:	2301      	movs	r3, #1
 80035c2:	e010      	b.n	80035e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <SysTick_Config+0x44>)
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	3a01      	subs	r2, #1
 80035ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035cc:	2301      	movs	r3, #1
 80035ce:	425b      	negs	r3, r3
 80035d0:	2103      	movs	r1, #3
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7ff ff7c 	bl	80034d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <SysTick_Config+0x44>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035de:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <SysTick_Config+0x44>)
 80035e0:	2207      	movs	r2, #7
 80035e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	e000e010 	.word	0xe000e010

080035f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	210f      	movs	r1, #15
 8003600:	187b      	adds	r3, r7, r1
 8003602:	1c02      	adds	r2, r0, #0
 8003604:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	187b      	adds	r3, r7, r1
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b25b      	sxtb	r3, r3
 800360e:	0011      	movs	r1, r2
 8003610:	0018      	movs	r0, r3
 8003612:	f7ff ff5d 	bl	80034d0 <__NVIC_SetPriority>
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	0002      	movs	r2, r0
 8003626:	1dfb      	adds	r3, r7, #7
 8003628:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362a:	1dfb      	adds	r3, r7, #7
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b25b      	sxtb	r3, r3
 8003630:	0018      	movs	r0, r3
 8003632:	f7ff ff33 	bl	800349c <__NVIC_EnableIRQ>
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b002      	add	sp, #8
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	0018      	movs	r0, r3
 800364a:	f7ff ffaf 	bl	80035ac <SysTick_Config>
 800364e:	0003      	movs	r3, r0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	210f      	movs	r1, #15
 8003662:	187b      	adds	r3, r7, r1
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2221      	movs	r2, #33	; 0x21
 800366c:	5c9b      	ldrb	r3, [r3, r2]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d006      	beq.n	8003682 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2204      	movs	r2, #4
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800367a:	187b      	adds	r3, r7, r1
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e028      	b.n	80036d4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	210e      	movs	r1, #14
 800368e:	438a      	bics	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2101      	movs	r1, #1
 800369e:	438a      	bics	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	2101      	movs	r1, #1
 80036ac:	4091      	lsls	r1, r2
 80036ae:	000a      	movs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2221      	movs	r2, #33	; 0x21
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	2100      	movs	r1, #0
 80036c0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	0010      	movs	r0, r2
 80036d2:	4798      	blx	r3
    } 
  }
  return status;
 80036d4:	230f      	movs	r3, #15
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	781b      	ldrb	r3, [r3, #0]
}
 80036da:	0018      	movs	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	b004      	add	sp, #16
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2221      	movs	r2, #33	; 0x21
 80036ee:	5c9b      	ldrb	r3, [r3, r2]
 80036f0:	b2db      	uxtb	r3, r3
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b002      	add	sp, #8
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370a:	e14f      	b.n	80039ac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4091      	lsls	r1, r2
 8003716:	000a      	movs	r2, r1
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d100      	bne.n	8003724 <HAL_GPIO_Init+0x28>
 8003722:	e140      	b.n	80039a6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2203      	movs	r2, #3
 800372a:	4013      	ands	r3, r2
 800372c:	2b01      	cmp	r3, #1
 800372e:	d005      	beq.n	800373c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2203      	movs	r2, #3
 8003736:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003738:	2b02      	cmp	r3, #2
 800373a:	d130      	bne.n	800379e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	409a      	lsls	r2, r3
 800374a:	0013      	movs	r3, r2
 800374c:	43da      	mvns	r2, r3
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	409a      	lsls	r2, r3
 800375e:	0013      	movs	r3, r2
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003772:	2201      	movs	r2, #1
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	409a      	lsls	r2, r3
 8003778:	0013      	movs	r3, r2
 800377a:	43da      	mvns	r2, r3
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	2201      	movs	r2, #1
 800378a:	401a      	ands	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	409a      	lsls	r2, r3
 8003790:	0013      	movs	r3, r2
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2203      	movs	r2, #3
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d017      	beq.n	80037da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	2203      	movs	r2, #3
 80037b6:	409a      	lsls	r2, r3
 80037b8:	0013      	movs	r3, r2
 80037ba:	43da      	mvns	r2, r3
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	409a      	lsls	r2, r3
 80037cc:	0013      	movs	r3, r2
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2203      	movs	r2, #3
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d123      	bne.n	800382e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	0092      	lsls	r2, r2, #2
 80037f0:	58d3      	ldr	r3, [r2, r3]
 80037f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2207      	movs	r2, #7
 80037f8:	4013      	ands	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	220f      	movs	r2, #15
 80037fe:	409a      	lsls	r2, r3
 8003800:	0013      	movs	r3, r2
 8003802:	43da      	mvns	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2107      	movs	r1, #7
 8003812:	400b      	ands	r3, r1
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	409a      	lsls	r2, r3
 8003818:	0013      	movs	r3, r2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	08da      	lsrs	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3208      	adds	r2, #8
 8003828:	0092      	lsls	r2, r2, #2
 800382a:	6939      	ldr	r1, [r7, #16]
 800382c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	2203      	movs	r2, #3
 800383a:	409a      	lsls	r2, r3
 800383c:	0013      	movs	r3, r2
 800383e:	43da      	mvns	r2, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2203      	movs	r2, #3
 800384c:	401a      	ands	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	409a      	lsls	r2, r3
 8003854:	0013      	movs	r3, r2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	23c0      	movs	r3, #192	; 0xc0
 8003868:	029b      	lsls	r3, r3, #10
 800386a:	4013      	ands	r3, r2
 800386c:	d100      	bne.n	8003870 <HAL_GPIO_Init+0x174>
 800386e:	e09a      	b.n	80039a6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003870:	4b54      	ldr	r3, [pc, #336]	; (80039c4 <HAL_GPIO_Init+0x2c8>)
 8003872:	699a      	ldr	r2, [r3, #24]
 8003874:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_GPIO_Init+0x2c8>)
 8003876:	2101      	movs	r1, #1
 8003878:	430a      	orrs	r2, r1
 800387a:	619a      	str	r2, [r3, #24]
 800387c:	4b51      	ldr	r3, [pc, #324]	; (80039c4 <HAL_GPIO_Init+0x2c8>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2201      	movs	r2, #1
 8003882:	4013      	ands	r3, r2
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003888:	4a4f      	ldr	r2, [pc, #316]	; (80039c8 <HAL_GPIO_Init+0x2cc>)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	3302      	adds	r3, #2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	589b      	ldr	r3, [r3, r2]
 8003894:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2203      	movs	r2, #3
 800389a:	4013      	ands	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	220f      	movs	r2, #15
 80038a0:	409a      	lsls	r2, r3
 80038a2:	0013      	movs	r3, r2
 80038a4:	43da      	mvns	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	2390      	movs	r3, #144	; 0x90
 80038b0:	05db      	lsls	r3, r3, #23
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d013      	beq.n	80038de <HAL_GPIO_Init+0x1e2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a44      	ldr	r2, [pc, #272]	; (80039cc <HAL_GPIO_Init+0x2d0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00d      	beq.n	80038da <HAL_GPIO_Init+0x1de>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a43      	ldr	r2, [pc, #268]	; (80039d0 <HAL_GPIO_Init+0x2d4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <HAL_GPIO_Init+0x1da>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a42      	ldr	r2, [pc, #264]	; (80039d4 <HAL_GPIO_Init+0x2d8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_GPIO_Init+0x1d6>
 80038ce:	2303      	movs	r3, #3
 80038d0:	e006      	b.n	80038e0 <HAL_GPIO_Init+0x1e4>
 80038d2:	2305      	movs	r3, #5
 80038d4:	e004      	b.n	80038e0 <HAL_GPIO_Init+0x1e4>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e002      	b.n	80038e0 <HAL_GPIO_Init+0x1e4>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <HAL_GPIO_Init+0x1e4>
 80038de:	2300      	movs	r3, #0
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	2103      	movs	r1, #3
 80038e4:	400a      	ands	r2, r1
 80038e6:	0092      	lsls	r2, r2, #2
 80038e8:	4093      	lsls	r3, r2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038f0:	4935      	ldr	r1, [pc, #212]	; (80039c8 <HAL_GPIO_Init+0x2cc>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038fe:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_GPIO_Init+0x2dc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43da      	mvns	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	4013      	ands	r3, r2
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003922:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_GPIO_Init+0x2dc>)
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003928:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_GPIO_Init+0x2dc>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	43da      	mvns	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	4013      	ands	r3, r2
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_GPIO_Init+0x2dc>)
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003952:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <HAL_GPIO_Init+0x2dc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	43da      	mvns	r2, r3
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4013      	ands	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	035b      	lsls	r3, r3, #13
 800396a:	4013      	ands	r3, r2
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_GPIO_Init+0x2dc>)
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800397c:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <HAL_GPIO_Init+0x2dc>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	43da      	mvns	r2, r3
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	039b      	lsls	r3, r3, #14
 8003994:	4013      	ands	r3, r2
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_GPIO_Init+0x2dc>)
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	3301      	adds	r3, #1
 80039aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	40da      	lsrs	r2, r3
 80039b4:	1e13      	subs	r3, r2, #0
 80039b6:	d000      	beq.n	80039ba <HAL_GPIO_Init+0x2be>
 80039b8:	e6a8      	b.n	800370c <HAL_GPIO_Init+0x10>
  } 
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b006      	add	sp, #24
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40010000 	.word	0x40010000
 80039cc:	48000400 	.word	0x48000400
 80039d0:	48000800 	.word	0x48000800
 80039d4:	48000c00 	.word	0x48000c00
 80039d8:	40010400 	.word	0x40010400

080039dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	0008      	movs	r0, r1
 80039e6:	0011      	movs	r1, r2
 80039e8:	1cbb      	adds	r3, r7, #2
 80039ea:	1c02      	adds	r2, r0, #0
 80039ec:	801a      	strh	r2, [r3, #0]
 80039ee:	1c7b      	adds	r3, r7, #1
 80039f0:	1c0a      	adds	r2, r1, #0
 80039f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039f4:	1c7b      	adds	r3, r7, #1
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039fc:	1cbb      	adds	r3, r7, #2
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a04:	e003      	b.n	8003a0e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a06:	1cbb      	adds	r3, r7, #2
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b002      	add	sp, #8
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	000a      	movs	r2, r1
 8003a20:	1cbb      	adds	r3, r7, #2
 8003a22:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a2a:	1cbb      	adds	r3, r7, #2
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4013      	ands	r3, r2
 8003a32:	041a      	lsls	r2, r3, #16
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	1cb9      	adds	r1, r7, #2
 8003a3a:	8809      	ldrh	r1, [r1, #0]
 8003a3c:	400b      	ands	r3, r1
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	619a      	str	r2, [r3, #24]
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	0002      	movs	r2, r0
 8003a54:	1dbb      	adds	r3, r7, #6
 8003a56:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	1dba      	adds	r2, r7, #6
 8003a5e:	8812      	ldrh	r2, [r2, #0]
 8003a60:	4013      	ands	r3, r2
 8003a62:	d008      	beq.n	8003a76 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003a66:	1dba      	adds	r2, r7, #6
 8003a68:	8812      	ldrh	r2, [r2, #0]
 8003a6a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a6c:	1dbb      	adds	r3, r7, #6
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7ff f861 	bl	8002b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b002      	add	sp, #8
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	40010400 	.word	0x40010400

08003a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e082      	b.n	8003b9c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2241      	movs	r2, #65	; 0x41
 8003a9a:	5c9b      	ldrb	r3, [r3, r2]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d107      	bne.n	8003ab2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2240      	movs	r2, #64	; 0x40
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7ff fae1 	bl	8003074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2241      	movs	r2, #65	; 0x41
 8003ab6:	2124      	movs	r1, #36	; 0x24
 8003ab8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	438a      	bics	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4934      	ldr	r1, [pc, #208]	; (8003ba4 <HAL_I2C_Init+0x120>)
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4931      	ldr	r1, [pc, #196]	; (8003ba8 <HAL_I2C_Init+0x124>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d108      	bne.n	8003b02 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0209      	lsls	r1, r1, #8
 8003afc:	430a      	orrs	r2, r1
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	e007      	b.n	8003b12 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2184      	movs	r1, #132	; 0x84
 8003b0c:	0209      	lsls	r1, r1, #8
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d104      	bne.n	8003b24 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	0112      	lsls	r2, r2, #4
 8003b22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	491f      	ldr	r1, [pc, #124]	; (8003bac <HAL_I2C_Init+0x128>)
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	491a      	ldr	r1, [pc, #104]	; (8003ba8 <HAL_I2C_Init+0x124>)
 8003b40:	400a      	ands	r2, r1
 8003b42:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69d9      	ldr	r1, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2241      	movs	r2, #65	; 0x41
 8003b88:	2120      	movs	r1, #32
 8003b8a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2242      	movs	r2, #66	; 0x42
 8003b96:	2100      	movs	r1, #0
 8003b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	f0ffffff 	.word	0xf0ffffff
 8003ba8:	ffff7fff 	.word	0xffff7fff
 8003bac:	02008000 	.word	0x02008000

08003bb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	000c      	movs	r4, r1
 8003bba:	0010      	movs	r0, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	230a      	movs	r3, #10
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	1c22      	adds	r2, r4, #0
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	1c02      	adds	r2, r0, #0
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	1dbb      	adds	r3, r7, #6
 8003bd0:	1c0a      	adds	r2, r1, #0
 8003bd2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2241      	movs	r2, #65	; 0x41
 8003bd8:	5c9b      	ldrb	r3, [r3, r2]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d000      	beq.n	8003be2 <HAL_I2C_Mem_Write+0x32>
 8003be0:	e10c      	b.n	8003dfc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <HAL_I2C_Mem_Write+0x42>
 8003be8:	232c      	movs	r3, #44	; 0x2c
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d105      	bne.n	8003bfe <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	0092      	lsls	r2, r2, #2
 8003bf8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e0ff      	b.n	8003dfe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2240      	movs	r2, #64	; 0x40
 8003c02:	5c9b      	ldrb	r3, [r3, r2]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_I2C_Mem_Write+0x5c>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e0f8      	b.n	8003dfe <HAL_I2C_Mem_Write+0x24e>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2240      	movs	r2, #64	; 0x40
 8003c10:	2101      	movs	r1, #1
 8003c12:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c14:	f7ff fc38 	bl	8003488 <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	0219      	lsls	r1, r3, #8
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2319      	movs	r3, #25
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f001 f885 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8003c2e:	1e03      	subs	r3, r0, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e0e3      	b.n	8003dfe <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2241      	movs	r2, #65	; 0x41
 8003c3a:	2121      	movs	r1, #33	; 0x21
 8003c3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2242      	movs	r2, #66	; 0x42
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	222c      	movs	r2, #44	; 0x2c
 8003c56:	18ba      	adds	r2, r7, r2
 8003c58:	8812      	ldrh	r2, [r2, #0]
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c62:	1dbb      	adds	r3, r7, #6
 8003c64:	881c      	ldrh	r4, [r3, #0]
 8003c66:	2308      	movs	r3, #8
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	881a      	ldrh	r2, [r3, #0]
 8003c6c:	230a      	movs	r3, #10
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	8819      	ldrh	r1, [r3, #0]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	0023      	movs	r3, r4
 8003c7e:	f000 fbc1 	bl	8004404 <I2C_RequestMemoryWrite>
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2240      	movs	r2, #64	; 0x40
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0b5      	b.n	8003dfe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2bff      	cmp	r3, #255	; 0xff
 8003c9a:	d911      	bls.n	8003cc0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	22ff      	movs	r2, #255	; 0xff
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	045c      	lsls	r4, r3, #17
 8003cac:	230a      	movs	r3, #10
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	8819      	ldrh	r1, [r3, #0]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	0023      	movs	r3, r4
 8003cba:	f001 f971 	bl	8004fa0 <I2C_TransferConfig>
 8003cbe:	e012      	b.n	8003ce6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	049c      	lsls	r4, r3, #18
 8003cd4:	230a      	movs	r3, #10
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	8819      	ldrh	r1, [r3, #0]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	0023      	movs	r3, r4
 8003ce2:	f001 f95d 	bl	8004fa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f001 f862 	bl	8004db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf2:	1e03      	subs	r3, r0, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e081      	b.n	8003dfe <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d03a      	beq.n	8003daa <HAL_I2C_Mem_Write+0x1fa>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d136      	bne.n	8003daa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	0013      	movs	r3, r2
 8003d46:	2200      	movs	r2, #0
 8003d48:	2180      	movs	r1, #128	; 0x80
 8003d4a:	f000 fff5 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8003d4e:	1e03      	subs	r3, r0, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e053      	b.n	8003dfe <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2bff      	cmp	r3, #255	; 0xff
 8003d5e:	d911      	bls.n	8003d84 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	22ff      	movs	r2, #255	; 0xff
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	045c      	lsls	r4, r3, #17
 8003d70:	230a      	movs	r3, #10
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	8819      	ldrh	r1, [r3, #0]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	0023      	movs	r3, r4
 8003d7e:	f001 f90f 	bl	8004fa0 <I2C_TransferConfig>
 8003d82:	e012      	b.n	8003daa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	049c      	lsls	r4, r3, #18
 8003d98:	230a      	movs	r3, #10
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	8819      	ldrh	r1, [r3, #0]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	2300      	movs	r3, #0
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	0023      	movs	r3, r4
 8003da6:	f001 f8fb 	bl	8004fa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d198      	bne.n	8003ce6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f001 f83a 	bl	8004e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dc0:	1e03      	subs	r3, r0, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e01a      	b.n	8003dfe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	490b      	ldr	r1, [pc, #44]	; (8003e08 <HAL_I2C_Mem_Write+0x258>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2241      	movs	r2, #65	; 0x41
 8003de4:	2120      	movs	r1, #32
 8003de6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2242      	movs	r2, #66	; 0x42
 8003dec:	2100      	movs	r1, #0
 8003dee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2240      	movs	r2, #64	; 0x40
 8003df4:	2100      	movs	r1, #0
 8003df6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b007      	add	sp, #28
 8003e04:	bd90      	pop	{r4, r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	fe00e800 	.word	0xfe00e800

08003e0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b089      	sub	sp, #36	; 0x24
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	000c      	movs	r4, r1
 8003e16:	0010      	movs	r0, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	230a      	movs	r3, #10
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	1c22      	adds	r2, r4, #0
 8003e20:	801a      	strh	r2, [r3, #0]
 8003e22:	2308      	movs	r3, #8
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	1c02      	adds	r2, r0, #0
 8003e28:	801a      	strh	r2, [r3, #0]
 8003e2a:	1dbb      	adds	r3, r7, #6
 8003e2c:	1c0a      	adds	r2, r1, #0
 8003e2e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2241      	movs	r2, #65	; 0x41
 8003e34:	5c9b      	ldrb	r3, [r3, r2]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d000      	beq.n	8003e3e <HAL_I2C_Mem_Read+0x32>
 8003e3c:	e110      	b.n	8004060 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_I2C_Mem_Read+0x42>
 8003e44:	232c      	movs	r3, #44	; 0x2c
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d105      	bne.n	8003e5a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2280      	movs	r2, #128	; 0x80
 8003e52:	0092      	lsls	r2, r2, #2
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e103      	b.n	8004062 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	5c9b      	ldrb	r3, [r3, r2]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_I2C_Mem_Read+0x5c>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e0fc      	b.n	8004062 <HAL_I2C_Mem_Read+0x256>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2240      	movs	r2, #64	; 0x40
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e70:	f7ff fb0a 	bl	8003488 <HAL_GetTick>
 8003e74:	0003      	movs	r3, r0
 8003e76:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	0219      	lsls	r1, r3, #8
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2319      	movs	r3, #25
 8003e84:	2201      	movs	r2, #1
 8003e86:	f000 ff57 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8003e8a:	1e03      	subs	r3, r0, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0e7      	b.n	8004062 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2241      	movs	r2, #65	; 0x41
 8003e96:	2122      	movs	r1, #34	; 0x22
 8003e98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2242      	movs	r2, #66	; 0x42
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	222c      	movs	r2, #44	; 0x2c
 8003eb2:	18ba      	adds	r2, r7, r2
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ebe:	1dbb      	adds	r3, r7, #6
 8003ec0:	881c      	ldrh	r4, [r3, #0]
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	230a      	movs	r3, #10
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	8819      	ldrh	r1, [r3, #0]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	0023      	movs	r3, r4
 8003eda:	f000 faf7 	bl	80044cc <I2C_RequestMemoryRead>
 8003ede:	1e03      	subs	r3, r0, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2240      	movs	r2, #64	; 0x40
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0b9      	b.n	8004062 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2bff      	cmp	r3, #255	; 0xff
 8003ef6:	d911      	bls.n	8003f1c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	22ff      	movs	r2, #255	; 0xff
 8003efc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	045c      	lsls	r4, r3, #17
 8003f08:	230a      	movs	r3, #10
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	8819      	ldrh	r1, [r3, #0]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	4b56      	ldr	r3, [pc, #344]	; (800406c <HAL_I2C_Mem_Read+0x260>)
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	0023      	movs	r3, r4
 8003f16:	f001 f843 	bl	8004fa0 <I2C_TransferConfig>
 8003f1a:	e012      	b.n	8003f42 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	049c      	lsls	r4, r3, #18
 8003f30:	230a      	movs	r3, #10
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	8819      	ldrh	r1, [r3, #0]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	4b4c      	ldr	r3, [pc, #304]	; (800406c <HAL_I2C_Mem_Read+0x260>)
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	0023      	movs	r3, r4
 8003f3e:	f001 f82f 	bl	8004fa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	0013      	movs	r3, r2
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2104      	movs	r1, #4
 8003f50:	f000 fef2 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8003f54:	1e03      	subs	r3, r0, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e082      	b.n	8004062 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d03a      	beq.n	800400e <HAL_I2C_Mem_Read+0x202>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d136      	bne.n	800400e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	0013      	movs	r3, r2
 8003faa:	2200      	movs	r2, #0
 8003fac:	2180      	movs	r1, #128	; 0x80
 8003fae:	f000 fec3 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	1e03      	subs	r3, r0, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e053      	b.n	8004062 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2bff      	cmp	r3, #255	; 0xff
 8003fc2:	d911      	bls.n	8003fe8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	22ff      	movs	r2, #255	; 0xff
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	045c      	lsls	r4, r3, #17
 8003fd4:	230a      	movs	r3, #10
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	8819      	ldrh	r1, [r3, #0]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	0023      	movs	r3, r4
 8003fe2:	f000 ffdd 	bl	8004fa0 <I2C_TransferConfig>
 8003fe6:	e012      	b.n	800400e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	049c      	lsls	r4, r3, #18
 8003ffc:	230a      	movs	r3, #10
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	8819      	ldrh	r1, [r3, #0]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	2300      	movs	r3, #0
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	0023      	movs	r3, r4
 800400a:	f000 ffc9 	bl	8004fa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d194      	bne.n	8003f42 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	0018      	movs	r0, r3
 8004020:	f000 ff08 	bl	8004e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004024:	1e03      	subs	r3, r0, #0
 8004026:	d001      	beq.n	800402c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e01a      	b.n	8004062 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2220      	movs	r2, #32
 8004032:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	490c      	ldr	r1, [pc, #48]	; (8004070 <HAL_I2C_Mem_Read+0x264>)
 8004040:	400a      	ands	r2, r1
 8004042:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2241      	movs	r2, #65	; 0x41
 8004048:	2120      	movs	r1, #32
 800404a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2242      	movs	r2, #66	; 0x42
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2240      	movs	r2, #64	; 0x40
 8004058:	2100      	movs	r1, #0
 800405a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b007      	add	sp, #28
 8004068:	bd90      	pop	{r4, r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	80002400 	.word	0x80002400
 8004070:	fe00e800 	.word	0xfe00e800

08004074 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	68f9      	ldr	r1, [r7, #12]
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
  }
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b004      	add	sp, #16
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	001a      	movs	r2, r3
 80040c6:	2301      	movs	r3, #1
 80040c8:	4013      	ands	r3, r2
 80040ca:	d010      	beq.n	80040ee <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	09db      	lsrs	r3, r3, #7
 80040d0:	001a      	movs	r2, r3
 80040d2:	2301      	movs	r3, #1
 80040d4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040d6:	d00a      	beq.n	80040ee <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	2201      	movs	r2, #1
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2280      	movs	r2, #128	; 0x80
 80040ea:	0052      	lsls	r2, r2, #1
 80040ec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	0a9b      	lsrs	r3, r3, #10
 80040f2:	001a      	movs	r2, r3
 80040f4:	2301      	movs	r3, #1
 80040f6:	4013      	ands	r3, r2
 80040f8:	d010      	beq.n	800411c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	09db      	lsrs	r3, r3, #7
 80040fe:	001a      	movs	r2, r3
 8004100:	2301      	movs	r3, #1
 8004102:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004104:	d00a      	beq.n	800411c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	2208      	movs	r2, #8
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2280      	movs	r2, #128	; 0x80
 8004118:	00d2      	lsls	r2, r2, #3
 800411a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	0a5b      	lsrs	r3, r3, #9
 8004120:	001a      	movs	r2, r3
 8004122:	2301      	movs	r3, #1
 8004124:	4013      	ands	r3, r2
 8004126:	d010      	beq.n	800414a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	09db      	lsrs	r3, r3, #7
 800412c:	001a      	movs	r2, r3
 800412e:	2301      	movs	r3, #1
 8004130:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004132:	d00a      	beq.n	800414a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004138:	2202      	movs	r2, #2
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2280      	movs	r2, #128	; 0x80
 8004146:	0092      	lsls	r2, r2, #2
 8004148:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	220b      	movs	r2, #11
 8004154:	4013      	ands	r3, r2
 8004156:	d005      	beq.n	8004164 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0011      	movs	r1, r2
 800415e:	0018      	movs	r0, r3
 8004160:	f000 fc9e 	bl	8004aa0 <I2C_ITError>
  }
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	b006      	add	sp, #24
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	b002      	add	sp, #8
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	0008      	movs	r0, r1
 8004196:	0011      	movs	r1, r2
 8004198:	1cfb      	adds	r3, r7, #3
 800419a:	1c02      	adds	r2, r0, #0
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	003b      	movs	r3, r7
 80041a0:	1c0a      	adds	r2, r1, #0
 80041a2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2240      	movs	r2, #64	; 0x40
 80041f6:	5c9b      	ldrb	r3, [r3, r2]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <I2C_Slave_ISR_IT+0x24>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e0fa      	b.n	80043f6 <I2C_Slave_ISR_IT+0x21a>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2240      	movs	r2, #64	; 0x40
 8004204:	2101      	movs	r1, #1
 8004206:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	001a      	movs	r2, r3
 800420e:	2301      	movs	r3, #1
 8004210:	4013      	ands	r3, r2
 8004212:	d00b      	beq.n	800422c <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	001a      	movs	r2, r3
 800421a:	2301      	movs	r3, #1
 800421c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800421e:	d005      	beq.n	800422c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	0011      	movs	r1, r2
 8004226:	0018      	movs	r0, r3
 8004228:	f000 fabc 	bl	80047a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	001a      	movs	r2, r3
 8004232:	2301      	movs	r3, #1
 8004234:	4013      	ands	r3, r2
 8004236:	d054      	beq.n	80042e2 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	001a      	movs	r2, r3
 800423e:	2301      	movs	r3, #1
 8004240:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004242:	d04e      	beq.n	80042e2 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d12d      	bne.n	80042aa <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2241      	movs	r2, #65	; 0x41
 8004252:	5c9b      	ldrb	r3, [r3, r2]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b28      	cmp	r3, #40	; 0x28
 8004258:	d10b      	bne.n	8004272 <I2C_Slave_ISR_IT+0x96>
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	049b      	lsls	r3, r3, #18
 8004260:	429a      	cmp	r2, r3
 8004262:	d106      	bne.n	8004272 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	0011      	movs	r1, r2
 800426a:	0018      	movs	r0, r3
 800426c:	f000 fbbe 	bl	80049ec <I2C_ITListenCplt>
 8004270:	e036      	b.n	80042e0 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2241      	movs	r2, #65	; 0x41
 8004276:	5c9b      	ldrb	r3, [r3, r2]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b29      	cmp	r3, #41	; 0x29
 800427c:	d110      	bne.n	80042a0 <I2C_Slave_ISR_IT+0xc4>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	4a5f      	ldr	r2, [pc, #380]	; (8004400 <I2C_Slave_ISR_IT+0x224>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00c      	beq.n	80042a0 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2210      	movs	r2, #16
 800428c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	0018      	movs	r0, r3
 8004292:	f000 fd10 	bl	8004cb6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	0018      	movs	r0, r3
 800429a:	f000 fa1d 	bl	80046d8 <I2C_ITSlaveSeqCplt>
 800429e:	e01f      	b.n	80042e0 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2210      	movs	r2, #16
 80042a6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80042a8:	e09d      	b.n	80043e6 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2210      	movs	r2, #16
 80042b0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	2204      	movs	r2, #4
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <I2C_Slave_ISR_IT+0xf4>
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	045b      	lsls	r3, r3, #17
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d000      	beq.n	80042d0 <I2C_Slave_ISR_IT+0xf4>
 80042ce:	e08a      	b.n	80043e6 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	0011      	movs	r1, r2
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 fbe1 	bl	8004aa0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042de:	e082      	b.n	80043e6 <I2C_Slave_ISR_IT+0x20a>
 80042e0:	e081      	b.n	80043e6 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	089b      	lsrs	r3, r3, #2
 80042e6:	001a      	movs	r2, r3
 80042e8:	2301      	movs	r3, #1
 80042ea:	4013      	ands	r3, r2
 80042ec:	d031      	beq.n	8004352 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	001a      	movs	r2, r3
 80042f4:	2301      	movs	r3, #1
 80042f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042f8:	d02b      	beq.n	8004352 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d018      	beq.n	8004336 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d154      	bne.n	80043ea <I2C_Slave_ISR_IT+0x20e>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	4a2f      	ldr	r2, [pc, #188]	; (8004400 <I2C_Slave_ISR_IT+0x224>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d050      	beq.n	80043ea <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	0018      	movs	r0, r3
 800434c:	f000 f9c4 	bl	80046d8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004350:	e04b      	b.n	80043ea <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	08db      	lsrs	r3, r3, #3
 8004356:	001a      	movs	r2, r3
 8004358:	2301      	movs	r3, #1
 800435a:	4013      	ands	r3, r2
 800435c:	d00c      	beq.n	8004378 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	08db      	lsrs	r3, r3, #3
 8004362:	001a      	movs	r2, r3
 8004364:	2301      	movs	r3, #1
 8004366:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004368:	d006      	beq.n	8004378 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	0011      	movs	r1, r2
 8004370:	0018      	movs	r0, r3
 8004372:	f000 f90d 	bl	8004590 <I2C_ITAddrCplt>
 8004376:	e039      	b.n	80043ec <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	001a      	movs	r2, r3
 800437e:	2301      	movs	r3, #1
 8004380:	4013      	ands	r3, r2
 8004382:	d033      	beq.n	80043ec <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	001a      	movs	r2, r3
 800438a:	2301      	movs	r3, #1
 800438c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800438e:	d02d      	beq.n	80043ec <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	851a      	strh	r2, [r3, #40]	; 0x28
 80043ca:	e00f      	b.n	80043ec <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	045b      	lsls	r3, r3, #17
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d002      	beq.n	80043dc <I2C_Slave_ISR_IT+0x200>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d107      	bne.n	80043ec <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 f97a 	bl	80046d8 <I2C_ITSlaveSeqCplt>
 80043e4:	e002      	b.n	80043ec <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	e000      	b.n	80043ec <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80043ea:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2240      	movs	r2, #64	; 0x40
 80043f0:	2100      	movs	r1, #0
 80043f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b006      	add	sp, #24
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	ffff0000 	.word	0xffff0000

08004404 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004404:	b5b0      	push	{r4, r5, r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	000c      	movs	r4, r1
 800440e:	0010      	movs	r0, r2
 8004410:	0019      	movs	r1, r3
 8004412:	250a      	movs	r5, #10
 8004414:	197b      	adds	r3, r7, r5
 8004416:	1c22      	adds	r2, r4, #0
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	2308      	movs	r3, #8
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	1c02      	adds	r2, r0, #0
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	1dbb      	adds	r3, r7, #6
 8004424:	1c0a      	adds	r2, r1, #0
 8004426:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004428:	1dbb      	adds	r3, r7, #6
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	045c      	lsls	r4, r3, #17
 8004432:	197b      	adds	r3, r7, r5
 8004434:	8819      	ldrh	r1, [r3, #0]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <I2C_RequestMemoryWrite+0xc4>)
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	0023      	movs	r3, r4
 800443e:	f000 fdaf 	bl	8004fa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004444:	6a39      	ldr	r1, [r7, #32]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	0018      	movs	r0, r3
 800444a:	f000 fcb4 	bl	8004db6 <I2C_WaitOnTXISFlagUntilTimeout>
 800444e:	1e03      	subs	r3, r0, #0
 8004450:	d001      	beq.n	8004456 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e033      	b.n	80044be <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004456:	1dbb      	adds	r3, r7, #6
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800445e:	2308      	movs	r3, #8
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	629a      	str	r2, [r3, #40]	; 0x28
 800446c:	e019      	b.n	80044a2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800446e:	2308      	movs	r3, #8
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	b29b      	uxth	r3, r3
 8004478:	b2da      	uxtb	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	6a39      	ldr	r1, [r7, #32]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	0018      	movs	r0, r3
 8004488:	f000 fc95 	bl	8004db6 <I2C_WaitOnTXISFlagUntilTimeout>
 800448c:	1e03      	subs	r3, r0, #0
 800448e:	d001      	beq.n	8004494 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e014      	b.n	80044be <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004494:	2308      	movs	r3, #8
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a3a      	ldr	r2, [r7, #32]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	0013      	movs	r3, r2
 80044ac:	2200      	movs	r2, #0
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	f000 fc42 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 80044b4:	1e03      	subs	r3, r0, #0
 80044b6:	d001      	beq.n	80044bc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	0018      	movs	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	b004      	add	sp, #16
 80044c4:	bdb0      	pop	{r4, r5, r7, pc}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	80002000 	.word	0x80002000

080044cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80044cc:	b5b0      	push	{r4, r5, r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	000c      	movs	r4, r1
 80044d6:	0010      	movs	r0, r2
 80044d8:	0019      	movs	r1, r3
 80044da:	250a      	movs	r5, #10
 80044dc:	197b      	adds	r3, r7, r5
 80044de:	1c22      	adds	r2, r4, #0
 80044e0:	801a      	strh	r2, [r3, #0]
 80044e2:	2308      	movs	r3, #8
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	1c02      	adds	r2, r0, #0
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	1dbb      	adds	r3, r7, #6
 80044ec:	1c0a      	adds	r2, r1, #0
 80044ee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044f0:	1dbb      	adds	r3, r7, #6
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	197b      	adds	r3, r7, r5
 80044f8:	8819      	ldrh	r1, [r3, #0]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	4b23      	ldr	r3, [pc, #140]	; (800458c <I2C_RequestMemoryRead+0xc0>)
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2300      	movs	r3, #0
 8004502:	f000 fd4d 	bl	8004fa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004508:	6a39      	ldr	r1, [r7, #32]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	0018      	movs	r0, r3
 800450e:	f000 fc52 	bl	8004db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004512:	1e03      	subs	r3, r0, #0
 8004514:	d001      	beq.n	800451a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e033      	b.n	8004582 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800451a:	1dbb      	adds	r3, r7, #6
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d107      	bne.n	8004532 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004522:	2308      	movs	r3, #8
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
 8004530:	e019      	b.n	8004566 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004532:	2308      	movs	r3, #8
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	0a1b      	lsrs	r3, r3, #8
 800453a:	b29b      	uxth	r3, r3
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004546:	6a39      	ldr	r1, [r7, #32]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	0018      	movs	r0, r3
 800454c:	f000 fc33 	bl	8004db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004550:	1e03      	subs	r3, r0, #0
 8004552:	d001      	beq.n	8004558 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e014      	b.n	8004582 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004558:	2308      	movs	r3, #8
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004566:	6a3a      	ldr	r2, [r7, #32]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	0013      	movs	r3, r2
 8004570:	2200      	movs	r2, #0
 8004572:	2140      	movs	r1, #64	; 0x40
 8004574:	f000 fbe0 	bl	8004d38 <I2C_WaitOnFlagUntilTimeout>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d001      	beq.n	8004580 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b004      	add	sp, #16
 8004588:	bdb0      	pop	{r4, r5, r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	80002000 	.word	0x80002000

08004590 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004590:	b5b0      	push	{r4, r5, r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2241      	movs	r2, #65	; 0x41
 800459e:	5c9b      	ldrb	r3, [r3, r2]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	001a      	movs	r2, r3
 80045a4:	2328      	movs	r3, #40	; 0x28
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b28      	cmp	r3, #40	; 0x28
 80045aa:	d000      	beq.n	80045ae <I2C_ITAddrCplt+0x1e>
 80045ac:	e088      	b.n	80046c0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	250f      	movs	r5, #15
 80045ba:	197b      	adds	r3, r7, r5
 80045bc:	2101      	movs	r1, #1
 80045be:	400a      	ands	r2, r1
 80045c0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	200c      	movs	r0, #12
 80045ce:	183b      	adds	r3, r7, r0
 80045d0:	21fe      	movs	r1, #254	; 0xfe
 80045d2:	400a      	ands	r2, r1
 80045d4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	240a      	movs	r4, #10
 80045e0:	193b      	adds	r3, r7, r4
 80045e2:	0592      	lsls	r2, r2, #22
 80045e4:	0d92      	lsrs	r2, r2, #22
 80045e6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	2308      	movs	r3, #8
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	21fe      	movs	r1, #254	; 0xfe
 80045f6:	400a      	ands	r2, r1
 80045f8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d148      	bne.n	8004694 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004602:	0021      	movs	r1, r4
 8004604:	187b      	adds	r3, r7, r1
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	09db      	lsrs	r3, r3, #7
 800460a:	b29a      	uxth	r2, r3
 800460c:	183b      	adds	r3, r7, r0
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	4053      	eors	r3, r2
 8004612:	b29b      	uxth	r3, r3
 8004614:	001a      	movs	r2, r3
 8004616:	2306      	movs	r3, #6
 8004618:	4013      	ands	r3, r2
 800461a:	d120      	bne.n	800465e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800461c:	183b      	adds	r3, r7, r0
 800461e:	187a      	adds	r2, r7, r1
 8004620:	8812      	ldrh	r2, [r2, #0]
 8004622:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004632:	2b02      	cmp	r3, #2
 8004634:	d14c      	bne.n	80046d0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2208      	movs	r2, #8
 8004642:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2240      	movs	r2, #64	; 0x40
 8004648:	2100      	movs	r1, #0
 800464a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800464c:	183b      	adds	r3, r7, r0
 800464e:	881a      	ldrh	r2, [r3, #0]
 8004650:	197b      	adds	r3, r7, r5
 8004652:	7819      	ldrb	r1, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	0018      	movs	r0, r3
 8004658:	f7ff fd98 	bl	800418c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800465c:	e038      	b.n	80046d0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800465e:	240c      	movs	r4, #12
 8004660:	193b      	adds	r3, r7, r4
 8004662:	2208      	movs	r2, #8
 8004664:	18ba      	adds	r2, r7, r2
 8004666:	8812      	ldrh	r2, [r2, #0]
 8004668:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0011      	movs	r1, r2
 8004672:	0018      	movs	r0, r3
 8004674:	f000 fcca 	bl	800500c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2240      	movs	r2, #64	; 0x40
 800467c:	2100      	movs	r1, #0
 800467e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004680:	193b      	adds	r3, r7, r4
 8004682:	881a      	ldrh	r2, [r3, #0]
 8004684:	230f      	movs	r3, #15
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	7819      	ldrb	r1, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f7ff fd7d 	bl	800418c <HAL_I2C_AddrCallback>
}
 8004692:	e01d      	b.n	80046d0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	021a      	lsls	r2, r3, #8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	0011      	movs	r1, r2
 800469c:	0018      	movs	r0, r3
 800469e:	f000 fcb5 	bl	800500c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	2100      	movs	r1, #0
 80046a8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046aa:	230c      	movs	r3, #12
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	881a      	ldrh	r2, [r3, #0]
 80046b0:	230f      	movs	r3, #15
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	7819      	ldrb	r1, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7ff fd67 	bl	800418c <HAL_I2C_AddrCallback>
}
 80046be:	e007      	b.n	80046d0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2208      	movs	r2, #8
 80046c6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2240      	movs	r2, #64	; 0x40
 80046cc:	2100      	movs	r1, #0
 80046ce:	5499      	strb	r1, [r3, r2]
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b004      	add	sp, #16
 80046d6:	bdb0      	pop	{r4, r5, r7, pc}

080046d8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2242      	movs	r2, #66	; 0x42
 80046ec:	2100      	movs	r1, #0
 80046ee:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	0b9b      	lsrs	r3, r3, #14
 80046f4:	001a      	movs	r2, r3
 80046f6:	2301      	movs	r3, #1
 80046f8:	4013      	ands	r3, r2
 80046fa:	d008      	beq.n	800470e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4925      	ldr	r1, [pc, #148]	; (800479c <I2C_ITSlaveSeqCplt+0xc4>)
 8004708:	400a      	ands	r2, r1
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e00d      	b.n	800472a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	0bdb      	lsrs	r3, r3, #15
 8004712:	001a      	movs	r2, r3
 8004714:	2301      	movs	r3, #1
 8004716:	4013      	ands	r3, r2
 8004718:	d007      	beq.n	800472a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	491e      	ldr	r1, [pc, #120]	; (80047a0 <I2C_ITSlaveSeqCplt+0xc8>)
 8004726:	400a      	ands	r2, r1
 8004728:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2241      	movs	r2, #65	; 0x41
 800472e:	5c9b      	ldrb	r3, [r3, r2]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b29      	cmp	r3, #41	; 0x29
 8004734:	d114      	bne.n	8004760 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2241      	movs	r2, #65	; 0x41
 800473a:	2128      	movs	r1, #40	; 0x28
 800473c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2221      	movs	r2, #33	; 0x21
 8004742:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2101      	movs	r1, #1
 8004748:	0018      	movs	r0, r3
 800474a:	f000 fc5f 	bl	800500c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2240      	movs	r2, #64	; 0x40
 8004752:	2100      	movs	r1, #0
 8004754:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f7ff fd07 	bl	800416c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800475e:	e019      	b.n	8004794 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2241      	movs	r2, #65	; 0x41
 8004764:	5c9b      	ldrb	r3, [r3, r2]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b2a      	cmp	r3, #42	; 0x2a
 800476a:	d113      	bne.n	8004794 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2241      	movs	r2, #65	; 0x41
 8004770:	2128      	movs	r1, #40	; 0x28
 8004772:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2222      	movs	r2, #34	; 0x22
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2102      	movs	r1, #2
 800477e:	0018      	movs	r0, r3
 8004780:	f000 fc44 	bl	800500c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2240      	movs	r2, #64	; 0x40
 8004788:	2100      	movs	r1, #0
 800478a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	0018      	movs	r0, r3
 8004790:	f7ff fcf4 	bl	800417c <HAL_I2C_SlaveRxCpltCallback>
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b004      	add	sp, #16
 800479a:	bd80      	pop	{r7, pc}
 800479c:	ffffbfff 	.word	0xffffbfff
 80047a0:	ffff7fff 	.word	0xffff7fff

080047a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80047ba:	200f      	movs	r0, #15
 80047bc:	183b      	adds	r3, r7, r0
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	2141      	movs	r1, #65	; 0x41
 80047c2:	5c52      	ldrb	r2, [r2, r1]
 80047c4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2220      	movs	r2, #32
 80047cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047ce:	183b      	adds	r3, r7, r0
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b21      	cmp	r3, #33	; 0x21
 80047d4:	d003      	beq.n	80047de <I2C_ITSlaveCplt+0x3a>
 80047d6:	183b      	adds	r3, r7, r0
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b29      	cmp	r3, #41	; 0x29
 80047dc:	d109      	bne.n	80047f2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80047de:	4a7d      	ldr	r2, [pc, #500]	; (80049d4 <I2C_ITSlaveCplt+0x230>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0011      	movs	r1, r2
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 fc11 	bl	800500c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2221      	movs	r2, #33	; 0x21
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
 80047f0:	e011      	b.n	8004816 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047f2:	220f      	movs	r2, #15
 80047f4:	18bb      	adds	r3, r7, r2
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b22      	cmp	r3, #34	; 0x22
 80047fa:	d003      	beq.n	8004804 <I2C_ITSlaveCplt+0x60>
 80047fc:	18bb      	adds	r3, r7, r2
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b2a      	cmp	r3, #42	; 0x2a
 8004802:	d108      	bne.n	8004816 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004804:	4a74      	ldr	r2, [pc, #464]	; (80049d8 <I2C_ITSlaveCplt+0x234>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0011      	movs	r1, r2
 800480a:	0018      	movs	r0, r3
 800480c:	f000 fbfe 	bl	800500c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2222      	movs	r2, #34	; 0x22
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2180      	movs	r1, #128	; 0x80
 8004822:	0209      	lsls	r1, r1, #8
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	496a      	ldr	r1, [pc, #424]	; (80049dc <I2C_ITSlaveCplt+0x238>)
 8004834:	400a      	ands	r2, r1
 8004836:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	0018      	movs	r0, r3
 800483c:	f000 fa3b 	bl	8004cb6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	0b9b      	lsrs	r3, r3, #14
 8004844:	001a      	movs	r2, r3
 8004846:	2301      	movs	r3, #1
 8004848:	4013      	ands	r3, r2
 800484a:	d013      	beq.n	8004874 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4962      	ldr	r1, [pc, #392]	; (80049e0 <I2C_ITSlaveCplt+0x23c>)
 8004858:	400a      	ands	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004872:	e018      	b.n	80048a6 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	0bdb      	lsrs	r3, r3, #15
 8004878:	001a      	movs	r2, r3
 800487a:	2301      	movs	r3, #1
 800487c:	4013      	ands	r3, r2
 800487e:	d012      	beq.n	80048a6 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4956      	ldr	r1, [pc, #344]	; (80049e4 <I2C_ITSlaveCplt+0x240>)
 800488c:	400a      	ands	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d006      	beq.n	80048a6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	001a      	movs	r2, r3
 80048ac:	2301      	movs	r3, #1
 80048ae:	4013      	ands	r3, r2
 80048b0:	d020      	beq.n	80048f4 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2204      	movs	r2, #4
 80048b6:	4393      	bics	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00c      	beq.n	80048f4 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	2204      	movs	r2, #4
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2242      	movs	r2, #66	; 0x42
 800490e:	2100      	movs	r1, #0
 8004910:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	2b00      	cmp	r3, #0
 800491e:	d013      	beq.n	8004948 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0011      	movs	r1, r2
 8004928:	0018      	movs	r0, r3
 800492a:	f000 f8b9 	bl	8004aa0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2241      	movs	r2, #65	; 0x41
 8004932:	5c9b      	ldrb	r3, [r3, r2]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b28      	cmp	r3, #40	; 0x28
 8004938:	d147      	bne.n	80049ca <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	0011      	movs	r1, r2
 8004940:	0018      	movs	r0, r3
 8004942:	f000 f853 	bl	80049ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004946:	e040      	b.n	80049ca <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <I2C_ITSlaveCplt+0x244>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d016      	beq.n	8004980 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f7ff febf 	bl	80046d8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <I2C_ITSlaveCplt+0x244>)
 800495e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2241      	movs	r2, #65	; 0x41
 8004964:	2120      	movs	r1, #32
 8004966:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2240      	movs	r2, #64	; 0x40
 8004972:	2100      	movs	r1, #0
 8004974:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f7ff fc17 	bl	80041ac <HAL_I2C_ListenCpltCallback>
}
 800497e:	e024      	b.n	80049ca <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2241      	movs	r2, #65	; 0x41
 8004984:	5c9b      	ldrb	r3, [r3, r2]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b22      	cmp	r3, #34	; 0x22
 800498a:	d10f      	bne.n	80049ac <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2241      	movs	r2, #65	; 0x41
 8004990:	2120      	movs	r1, #32
 8004992:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2240      	movs	r2, #64	; 0x40
 800499e:	2100      	movs	r1, #0
 80049a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7ff fbe9 	bl	800417c <HAL_I2C_SlaveRxCpltCallback>
}
 80049aa:	e00e      	b.n	80049ca <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2241      	movs	r2, #65	; 0x41
 80049b0:	2120      	movs	r1, #32
 80049b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2240      	movs	r2, #64	; 0x40
 80049be:	2100      	movs	r1, #0
 80049c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7ff fbd1 	bl	800416c <HAL_I2C_SlaveTxCpltCallback>
}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b006      	add	sp, #24
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	00008001 	.word	0x00008001
 80049d8:	00008002 	.word	0x00008002
 80049dc:	fe00e800 	.word	0xfe00e800
 80049e0:	ffffbfff 	.word	0xffffbfff
 80049e4:	ffff7fff 	.word	0xffff7fff
 80049e8:	ffff0000 	.word	0xffff0000

080049ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <I2C_ITListenCplt+0xac>)
 80049fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2241      	movs	r2, #65	; 0x41
 8004a06:	2120      	movs	r1, #32
 8004a08:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2242      	movs	r2, #66	; 0x42
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	089b      	lsrs	r3, r3, #2
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4013      	ands	r3, r2
 8004a22:	d022      	beq.n	8004a6a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d012      	beq.n	8004a6a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	2204      	movs	r2, #4
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a6a:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <I2C_ITListenCplt+0xb0>)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	0011      	movs	r1, r2
 8004a70:	0018      	movs	r0, r3
 8004a72:	f000 facb 	bl	800500c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	2100      	movs	r1, #0
 8004a84:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7ff fb8f 	bl	80041ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b002      	add	sp, #8
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	ffff0000 	.word	0xffff0000
 8004a9c:	00008003 	.word	0x00008003

08004aa0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004aaa:	200f      	movs	r0, #15
 8004aac:	183b      	adds	r3, r7, r0
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	2141      	movs	r1, #65	; 0x41
 8004ab2:	5c52      	ldrb	r2, [r2, r1]
 8004ab4:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2242      	movs	r2, #66	; 0x42
 8004aba:	2100      	movs	r1, #0
 8004abc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a62      	ldr	r2, [pc, #392]	; (8004c4c <I2C_ITError+0x1ac>)
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004ad6:	183b      	adds	r3, r7, r0
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b28      	cmp	r3, #40	; 0x28
 8004adc:	d007      	beq.n	8004aee <I2C_ITError+0x4e>
 8004ade:	183b      	adds	r3, r7, r0
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b29      	cmp	r3, #41	; 0x29
 8004ae4:	d003      	beq.n	8004aee <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ae6:	183b      	adds	r3, r7, r0
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b2a      	cmp	r3, #42	; 0x2a
 8004aec:	d10c      	bne.n	8004b08 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2103      	movs	r1, #3
 8004af2:	0018      	movs	r0, r3
 8004af4:	f000 fa8a 	bl	800500c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2241      	movs	r2, #65	; 0x41
 8004afc:	2128      	movs	r1, #40	; 0x28
 8004afe:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a53      	ldr	r2, [pc, #332]	; (8004c50 <I2C_ITError+0x1b0>)
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34
 8004b06:	e012      	b.n	8004b2e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b08:	4a52      	ldr	r2, [pc, #328]	; (8004c54 <I2C_ITError+0x1b4>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0011      	movs	r1, r2
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f000 fa7c 	bl	800500c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2241      	movs	r2, #65	; 0x41
 8004b18:	5c9b      	ldrb	r3, [r3, r2]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b60      	cmp	r3, #96	; 0x60
 8004b1e:	d003      	beq.n	8004b28 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2241      	movs	r2, #65	; 0x41
 8004b24:	2120      	movs	r1, #32
 8004b26:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d03b      	beq.n	8004bb4 <I2C_ITError+0x114>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b11      	cmp	r3, #17
 8004b40:	d002      	beq.n	8004b48 <I2C_ITError+0xa8>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b21      	cmp	r3, #33	; 0x21
 8004b46:	d135      	bne.n	8004bb4 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	01db      	lsls	r3, r3, #7
 8004b52:	401a      	ands	r2, r3
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	01db      	lsls	r3, r3, #7
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d107      	bne.n	8004b6c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	493c      	ldr	r1, [pc, #240]	; (8004c58 <I2C_ITError+0x1b8>)
 8004b68:	400a      	ands	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7fe fdb6 	bl	80036e2 <HAL_DMA_GetState>
 8004b76:	0003      	movs	r3, r0
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d016      	beq.n	8004baa <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	4a36      	ldr	r2, [pc, #216]	; (8004c5c <I2C_ITError+0x1bc>)
 8004b82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2240      	movs	r2, #64	; 0x40
 8004b88:	2100      	movs	r1, #0
 8004b8a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fe fd61 	bl	8003658 <HAL_DMA_Abort_IT>
 8004b96:	1e03      	subs	r3, r0, #0
 8004b98:	d051      	beq.n	8004c3e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ba8:	e049      	b.n	8004c3e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 f859 	bl	8004c64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bb2:	e044      	b.n	8004c3e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d03b      	beq.n	8004c34 <I2C_ITError+0x194>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b12      	cmp	r3, #18
 8004bc0:	d002      	beq.n	8004bc8 <I2C_ITError+0x128>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b22      	cmp	r3, #34	; 0x22
 8004bc6:	d135      	bne.n	8004c34 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d107      	bne.n	8004bec <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	491e      	ldr	r1, [pc, #120]	; (8004c60 <I2C_ITError+0x1c0>)
 8004be8:	400a      	ands	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f7fe fd76 	bl	80036e2 <HAL_DMA_GetState>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d016      	beq.n	8004c2a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	4a16      	ldr	r2, [pc, #88]	; (8004c5c <I2C_ITError+0x1bc>)
 8004c02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2240      	movs	r2, #64	; 0x40
 8004c08:	2100      	movs	r1, #0
 8004c0a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7fe fd21 	bl	8003658 <HAL_DMA_Abort_IT>
 8004c16:	1e03      	subs	r3, r0, #0
 8004c18:	d013      	beq.n	8004c42 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c24:	0018      	movs	r0, r3
 8004c26:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c28:	e00b      	b.n	8004c42 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f000 f819 	bl	8004c64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c32:	e006      	b.n	8004c42 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f000 f814 	bl	8004c64 <I2C_TreatErrorCallback>
  }
}
 8004c3c:	e002      	b.n	8004c44 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	e000      	b.n	8004c44 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c42:	46c0      	nop			; (mov r8, r8)
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b004      	add	sp, #16
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	ffff0000 	.word	0xffff0000
 8004c50:	080041dd 	.word	0x080041dd
 8004c54:	00008003 	.word	0x00008003
 8004c58:	ffffbfff 	.word	0xffffbfff
 8004c5c:	08004cfb 	.word	0x08004cfb
 8004c60:	ffff7fff 	.word	0xffff7fff

08004c64 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2241      	movs	r2, #65	; 0x41
 8004c70:	5c9b      	ldrb	r3, [r3, r2]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b60      	cmp	r3, #96	; 0x60
 8004c76:	d10f      	bne.n	8004c98 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2241      	movs	r2, #65	; 0x41
 8004c7c:	2120      	movs	r1, #32
 8004c7e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f7ff fa9b 	bl	80041cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c96:	e00a      	b.n	8004cae <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2240      	movs	r2, #64	; 0x40
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7ff fa87 	bl	80041bc <HAL_I2C_ErrorCallback>
}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	b002      	add	sp, #8
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d103      	bne.n	8004cd4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d007      	beq.n	8004cf2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	619a      	str	r2, [r3, #24]
  }
}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b002      	add	sp, #8
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	2200      	movs	r2, #0
 8004d16:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	2200      	movs	r2, #0
 8004d26:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f7ff ff9a 	bl	8004c64 <I2C_TreatErrorCallback>
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b004      	add	sp, #16
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	1dfb      	adds	r3, r7, #7
 8004d46:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d48:	e021      	b.n	8004d8e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	d01e      	beq.n	8004d8e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d50:	f7fe fb9a 	bl	8003488 <HAL_GetTick>
 8004d54:	0002      	movs	r2, r0
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d113      	bne.n	8004d8e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2241      	movs	r2, #65	; 0x41
 8004d76:	2120      	movs	r1, #32
 8004d78:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2242      	movs	r2, #66	; 0x42
 8004d7e:	2100      	movs	r1, #0
 8004d80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2240      	movs	r2, #64	; 0x40
 8004d86:	2100      	movs	r1, #0
 8004d88:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e00f      	b.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	4013      	ands	r3, r2
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	425a      	negs	r2, r3
 8004d9e:	4153      	adcs	r3, r2
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	001a      	movs	r2, r3
 8004da4:	1dfb      	adds	r3, r7, #7
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d0ce      	beq.n	8004d4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b004      	add	sp, #16
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dc2:	e02b      	b.n	8004e1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f000 f86e 	bl	8004eac <I2C_IsAcknowledgeFailed>
 8004dd0:	1e03      	subs	r3, r0, #0
 8004dd2:	d001      	beq.n	8004dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e029      	b.n	8004e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	d01e      	beq.n	8004e1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dde:	f7fe fb53 	bl	8003488 <HAL_GetTick>
 8004de2:	0002      	movs	r2, r0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d302      	bcc.n	8004df4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d113      	bne.n	8004e1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	2220      	movs	r2, #32
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2241      	movs	r2, #65	; 0x41
 8004e04:	2120      	movs	r1, #32
 8004e06:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2242      	movs	r2, #66	; 0x42
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2240      	movs	r2, #64	; 0x40
 8004e14:	2100      	movs	r1, #0
 8004e16:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e007      	b.n	8004e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	2202      	movs	r2, #2
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d1cc      	bne.n	8004dc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b004      	add	sp, #16
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e40:	e028      	b.n	8004e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f000 f82f 	bl	8004eac <I2C_IsAcknowledgeFailed>
 8004e4e:	1e03      	subs	r3, r0, #0
 8004e50:	d001      	beq.n	8004e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e026      	b.n	8004ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fe fb17 	bl	8003488 <HAL_GetTick>
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d113      	bne.n	8004e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	2220      	movs	r2, #32
 8004e72:	431a      	orrs	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2241      	movs	r2, #65	; 0x41
 8004e7c:	2120      	movs	r1, #32
 8004e7e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2242      	movs	r2, #66	; 0x42
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2240      	movs	r2, #64	; 0x40
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e007      	b.n	8004ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d1cf      	bne.n	8004e42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b004      	add	sp, #16
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2210      	movs	r2, #16
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d164      	bne.n	8004f90 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	049b      	lsls	r3, r3, #18
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	049b      	lsls	r3, r3, #18
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d02b      	beq.n	8004f32 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2180      	movs	r1, #128	; 0x80
 8004ee6:	01c9      	lsls	r1, r1, #7
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eec:	e021      	b.n	8004f32 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	d01e      	beq.n	8004f32 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef4:	f7fe fac8 	bl	8003488 <HAL_GetTick>
 8004ef8:	0002      	movs	r2, r0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d302      	bcc.n	8004f0a <I2C_IsAcknowledgeFailed+0x5e>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d113      	bne.n	8004f32 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	2220      	movs	r2, #32
 8004f10:	431a      	orrs	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2241      	movs	r2, #65	; 0x41
 8004f1a:	2120      	movs	r1, #32
 8004f1c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2242      	movs	r2, #66	; 0x42
 8004f22:	2100      	movs	r1, #0
 8004f24:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2240      	movs	r2, #64	; 0x40
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e02f      	b.n	8004f92 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d1d6      	bne.n	8004eee <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2210      	movs	r2, #16
 8004f46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	0018      	movs	r0, r3
 8004f54:	f7ff feaf 	bl	8004cb6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	490e      	ldr	r1, [pc, #56]	; (8004f9c <I2C_IsAcknowledgeFailed+0xf0>)
 8004f64:	400a      	ands	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2241      	movs	r2, #65	; 0x41
 8004f78:	2120      	movs	r1, #32
 8004f7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2242      	movs	r2, #66	; 0x42
 8004f80:	2100      	movs	r1, #0
 8004f82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2240      	movs	r2, #64	; 0x40
 8004f88:	2100      	movs	r1, #0
 8004f8a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	0018      	movs	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b004      	add	sp, #16
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	fe00e800 	.word	0xfe00e800

08004fa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	0008      	movs	r0, r1
 8004faa:	0011      	movs	r1, r2
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	240a      	movs	r4, #10
 8004fb0:	193b      	adds	r3, r7, r4
 8004fb2:	1c02      	adds	r2, r0, #0
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	2009      	movs	r0, #9
 8004fb8:	183b      	adds	r3, r7, r0
 8004fba:	1c0a      	adds	r2, r1, #0
 8004fbc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	6a3a      	ldr	r2, [r7, #32]
 8004fc6:	0d51      	lsrs	r1, r2, #21
 8004fc8:	2280      	movs	r2, #128	; 0x80
 8004fca:	00d2      	lsls	r2, r2, #3
 8004fcc:	400a      	ands	r2, r1
 8004fce:	490e      	ldr	r1, [pc, #56]	; (8005008 <I2C_TransferConfig+0x68>)
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	43d2      	mvns	r2, r2
 8004fd4:	401a      	ands	r2, r3
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	193b      	adds	r3, r7, r4
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	059b      	lsls	r3, r3, #22
 8004fde:	0d9a      	lsrs	r2, r3, #22
 8004fe0:	183b      	adds	r3, r7, r0
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	0418      	lsls	r0, r3, #16
 8004fe6:	23ff      	movs	r3, #255	; 0xff
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	4003      	ands	r3, r0
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	46bd      	mov	sp, r7
 8005002:	b005      	add	sp, #20
 8005004:	bd90      	pop	{r4, r7, pc}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	03ff63ff 	.word	0x03ff63ff

0800500c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	000a      	movs	r2, r1
 8005016:	1cbb      	adds	r3, r7, #2
 8005018:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800501e:	1cbb      	adds	r3, r7, #2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	2201      	movs	r2, #1
 8005024:	4013      	ands	r3, r2
 8005026:	d010      	beq.n	800504a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2242      	movs	r2, #66	; 0x42
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2241      	movs	r2, #65	; 0x41
 8005034:	5c9b      	ldrb	r3, [r3, r2]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	001a      	movs	r2, r3
 800503a:	2328      	movs	r3, #40	; 0x28
 800503c:	4013      	ands	r3, r2
 800503e:	2b28      	cmp	r3, #40	; 0x28
 8005040:	d003      	beq.n	800504a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	22b0      	movs	r2, #176	; 0xb0
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800504a:	1cbb      	adds	r3, r7, #2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	2202      	movs	r2, #2
 8005050:	4013      	ands	r3, r2
 8005052:	d010      	beq.n	8005076 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2244      	movs	r2, #68	; 0x44
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2241      	movs	r2, #65	; 0x41
 8005060:	5c9b      	ldrb	r3, [r3, r2]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	001a      	movs	r2, r3
 8005066:	2328      	movs	r3, #40	; 0x28
 8005068:	4013      	ands	r3, r2
 800506a:	2b28      	cmp	r3, #40	; 0x28
 800506c:	d003      	beq.n	8005076 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	22b0      	movs	r2, #176	; 0xb0
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005076:	1cbb      	adds	r3, r7, #2
 8005078:	2200      	movs	r2, #0
 800507a:	5e9b      	ldrsh	r3, [r3, r2]
 800507c:	2b00      	cmp	r3, #0
 800507e:	da03      	bge.n	8005088 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	22b8      	movs	r2, #184	; 0xb8
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005088:	1cbb      	adds	r3, r7, #2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	2b10      	cmp	r3, #16
 800508e:	d103      	bne.n	8005098 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2290      	movs	r2, #144	; 0x90
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005098:	1cbb      	adds	r3, r7, #2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	2b20      	cmp	r3, #32
 800509e:	d103      	bne.n	80050a8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80050a8:	1cbb      	adds	r3, r7, #2
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d103      	bne.n	80050b8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2240      	movs	r2, #64	; 0x40
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	43d9      	mvns	r1, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	400a      	ands	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b004      	add	sp, #16
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2241      	movs	r2, #65	; 0x41
 80050e2:	5c9b      	ldrb	r3, [r3, r2]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d138      	bne.n	800515c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2240      	movs	r2, #64	; 0x40
 80050ee:	5c9b      	ldrb	r3, [r3, r2]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e032      	b.n	800515e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2240      	movs	r2, #64	; 0x40
 80050fc:	2101      	movs	r1, #1
 80050fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2241      	movs	r2, #65	; 0x41
 8005104:	2124      	movs	r1, #36	; 0x24
 8005106:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2101      	movs	r1, #1
 8005114:	438a      	bics	r2, r1
 8005116:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4911      	ldr	r1, [pc, #68]	; (8005168 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005124:	400a      	ands	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6819      	ldr	r1, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2101      	movs	r1, #1
 8005144:	430a      	orrs	r2, r1
 8005146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2241      	movs	r2, #65	; 0x41
 800514c:	2120      	movs	r1, #32
 800514e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2240      	movs	r2, #64	; 0x40
 8005154:	2100      	movs	r1, #0
 8005156:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e000      	b.n	800515e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
  }
}
 800515e:	0018      	movs	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	b002      	add	sp, #8
 8005164:	bd80      	pop	{r7, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	ffffefff 	.word	0xffffefff

0800516c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2241      	movs	r2, #65	; 0x41
 800517a:	5c9b      	ldrb	r3, [r3, r2]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b20      	cmp	r3, #32
 8005180:	d139      	bne.n	80051f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2240      	movs	r2, #64	; 0x40
 8005186:	5c9b      	ldrb	r3, [r3, r2]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800518c:	2302      	movs	r3, #2
 800518e:	e033      	b.n	80051f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2240      	movs	r2, #64	; 0x40
 8005194:	2101      	movs	r1, #1
 8005196:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2241      	movs	r2, #65	; 0x41
 800519c:	2124      	movs	r1, #36	; 0x24
 800519e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2101      	movs	r1, #1
 80051ac:	438a      	bics	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a11      	ldr	r2, [pc, #68]	; (8005200 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80051bc:	4013      	ands	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2101      	movs	r1, #1
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2241      	movs	r2, #65	; 0x41
 80051e6:	2120      	movs	r1, #32
 80051e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2240      	movs	r2, #64	; 0x40
 80051ee:	2100      	movs	r1, #0
 80051f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e000      	b.n	80051f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051f6:	2302      	movs	r3, #2
  }
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b004      	add	sp, #16
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	fffff0ff 	.word	0xfffff0ff

08005204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e301      	b.n	800581a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2201      	movs	r2, #1
 800521c:	4013      	ands	r3, r2
 800521e:	d100      	bne.n	8005222 <HAL_RCC_OscConfig+0x1e>
 8005220:	e08d      	b.n	800533e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005222:	4bc3      	ldr	r3, [pc, #780]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	220c      	movs	r2, #12
 8005228:	4013      	ands	r3, r2
 800522a:	2b04      	cmp	r3, #4
 800522c:	d00e      	beq.n	800524c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800522e:	4bc0      	ldr	r3, [pc, #768]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	220c      	movs	r2, #12
 8005234:	4013      	ands	r3, r2
 8005236:	2b08      	cmp	r3, #8
 8005238:	d116      	bne.n	8005268 <HAL_RCC_OscConfig+0x64>
 800523a:	4bbd      	ldr	r3, [pc, #756]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	025b      	lsls	r3, r3, #9
 8005242:	401a      	ands	r2, r3
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	025b      	lsls	r3, r3, #9
 8005248:	429a      	cmp	r2, r3
 800524a:	d10d      	bne.n	8005268 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524c:	4bb8      	ldr	r3, [pc, #736]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	029b      	lsls	r3, r3, #10
 8005254:	4013      	ands	r3, r2
 8005256:	d100      	bne.n	800525a <HAL_RCC_OscConfig+0x56>
 8005258:	e070      	b.n	800533c <HAL_RCC_OscConfig+0x138>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d000      	beq.n	8005264 <HAL_RCC_OscConfig+0x60>
 8005262:	e06b      	b.n	800533c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e2d8      	b.n	800581a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d107      	bne.n	8005280 <HAL_RCC_OscConfig+0x7c>
 8005270:	4baf      	ldr	r3, [pc, #700]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	4bae      	ldr	r3, [pc, #696]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005276:	2180      	movs	r1, #128	; 0x80
 8005278:	0249      	lsls	r1, r1, #9
 800527a:	430a      	orrs	r2, r1
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e02f      	b.n	80052e0 <HAL_RCC_OscConfig+0xdc>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10c      	bne.n	80052a2 <HAL_RCC_OscConfig+0x9e>
 8005288:	4ba9      	ldr	r3, [pc, #676]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4ba8      	ldr	r3, [pc, #672]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 800528e:	49a9      	ldr	r1, [pc, #676]	; (8005534 <HAL_RCC_OscConfig+0x330>)
 8005290:	400a      	ands	r2, r1
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	4ba6      	ldr	r3, [pc, #664]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4ba5      	ldr	r3, [pc, #660]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 800529a:	49a7      	ldr	r1, [pc, #668]	; (8005538 <HAL_RCC_OscConfig+0x334>)
 800529c:	400a      	ands	r2, r1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e01e      	b.n	80052e0 <HAL_RCC_OscConfig+0xdc>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b05      	cmp	r3, #5
 80052a8:	d10e      	bne.n	80052c8 <HAL_RCC_OscConfig+0xc4>
 80052aa:	4ba1      	ldr	r3, [pc, #644]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4ba0      	ldr	r3, [pc, #640]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80052b0:	2180      	movs	r1, #128	; 0x80
 80052b2:	02c9      	lsls	r1, r1, #11
 80052b4:	430a      	orrs	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	4b9d      	ldr	r3, [pc, #628]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b9c      	ldr	r3, [pc, #624]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80052be:	2180      	movs	r1, #128	; 0x80
 80052c0:	0249      	lsls	r1, r1, #9
 80052c2:	430a      	orrs	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e00b      	b.n	80052e0 <HAL_RCC_OscConfig+0xdc>
 80052c8:	4b99      	ldr	r3, [pc, #612]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b98      	ldr	r3, [pc, #608]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80052ce:	4999      	ldr	r1, [pc, #612]	; (8005534 <HAL_RCC_OscConfig+0x330>)
 80052d0:	400a      	ands	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	4b96      	ldr	r3, [pc, #600]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b95      	ldr	r3, [pc, #596]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80052da:	4997      	ldr	r1, [pc, #604]	; (8005538 <HAL_RCC_OscConfig+0x334>)
 80052dc:	400a      	ands	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d014      	beq.n	8005312 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fe f8ce 	bl	8003488 <HAL_GetTick>
 80052ec:	0003      	movs	r3, r0
 80052ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f2:	f7fe f8c9 	bl	8003488 <HAL_GetTick>
 80052f6:	0002      	movs	r2, r0
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b64      	cmp	r3, #100	; 0x64
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e28a      	b.n	800581a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005304:	4b8a      	ldr	r3, [pc, #552]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	029b      	lsls	r3, r3, #10
 800530c:	4013      	ands	r3, r2
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0xee>
 8005310:	e015      	b.n	800533e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005312:	f7fe f8b9 	bl	8003488 <HAL_GetTick>
 8005316:	0003      	movs	r3, r0
 8005318:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800531c:	f7fe f8b4 	bl	8003488 <HAL_GetTick>
 8005320:	0002      	movs	r2, r0
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b64      	cmp	r3, #100	; 0x64
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e275      	b.n	800581a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532e:	4b80      	ldr	r3, [pc, #512]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	029b      	lsls	r3, r3, #10
 8005336:	4013      	ands	r3, r2
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x118>
 800533a:	e000      	b.n	800533e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800533c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2202      	movs	r2, #2
 8005344:	4013      	ands	r3, r2
 8005346:	d100      	bne.n	800534a <HAL_RCC_OscConfig+0x146>
 8005348:	e069      	b.n	800541e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800534a:	4b79      	ldr	r3, [pc, #484]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	220c      	movs	r2, #12
 8005350:	4013      	ands	r3, r2
 8005352:	d00b      	beq.n	800536c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005354:	4b76      	ldr	r3, [pc, #472]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	220c      	movs	r2, #12
 800535a:	4013      	ands	r3, r2
 800535c:	2b08      	cmp	r3, #8
 800535e:	d11c      	bne.n	800539a <HAL_RCC_OscConfig+0x196>
 8005360:	4b73      	ldr	r3, [pc, #460]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	025b      	lsls	r3, r3, #9
 8005368:	4013      	ands	r3, r2
 800536a:	d116      	bne.n	800539a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536c:	4b70      	ldr	r3, [pc, #448]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2202      	movs	r2, #2
 8005372:	4013      	ands	r3, r2
 8005374:	d005      	beq.n	8005382 <HAL_RCC_OscConfig+0x17e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d001      	beq.n	8005382 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e24b      	b.n	800581a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005382:	4b6b      	ldr	r3, [pc, #428]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	22f8      	movs	r2, #248	; 0xf8
 8005388:	4393      	bics	r3, r2
 800538a:	0019      	movs	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	00da      	lsls	r2, r3, #3
 8005392:	4b67      	ldr	r3, [pc, #412]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005394:	430a      	orrs	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005398:	e041      	b.n	800541e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d024      	beq.n	80053ec <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053a2:	4b63      	ldr	r3, [pc, #396]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b62      	ldr	r3, [pc, #392]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80053a8:	2101      	movs	r1, #1
 80053aa:	430a      	orrs	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ae:	f7fe f86b 	bl	8003488 <HAL_GetTick>
 80053b2:	0003      	movs	r3, r0
 80053b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053b8:	f7fe f866 	bl	8003488 <HAL_GetTick>
 80053bc:	0002      	movs	r2, r0
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e227      	b.n	800581a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ca:	4b59      	ldr	r3, [pc, #356]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2202      	movs	r2, #2
 80053d0:	4013      	ands	r3, r2
 80053d2:	d0f1      	beq.n	80053b8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d4:	4b56      	ldr	r3, [pc, #344]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	22f8      	movs	r2, #248	; 0xf8
 80053da:	4393      	bics	r3, r2
 80053dc:	0019      	movs	r1, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	00da      	lsls	r2, r3, #3
 80053e4:	4b52      	ldr	r3, [pc, #328]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80053e6:	430a      	orrs	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e018      	b.n	800541e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ec:	4b50      	ldr	r3, [pc, #320]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4b4f      	ldr	r3, [pc, #316]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80053f2:	2101      	movs	r1, #1
 80053f4:	438a      	bics	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f8:	f7fe f846 	bl	8003488 <HAL_GetTick>
 80053fc:	0003      	movs	r3, r0
 80053fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005402:	f7fe f841 	bl	8003488 <HAL_GetTick>
 8005406:	0002      	movs	r2, r0
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e202      	b.n	800581a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005414:	4b46      	ldr	r3, [pc, #280]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2202      	movs	r2, #2
 800541a:	4013      	ands	r3, r2
 800541c:	d1f1      	bne.n	8005402 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2208      	movs	r2, #8
 8005424:	4013      	ands	r3, r2
 8005426:	d036      	beq.n	8005496 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d019      	beq.n	8005464 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005430:	4b3f      	ldr	r3, [pc, #252]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005434:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005436:	2101      	movs	r1, #1
 8005438:	430a      	orrs	r2, r1
 800543a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543c:	f7fe f824 	bl	8003488 <HAL_GetTick>
 8005440:	0003      	movs	r3, r0
 8005442:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005446:	f7fe f81f 	bl	8003488 <HAL_GetTick>
 800544a:	0002      	movs	r2, r0
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e1e0      	b.n	800581a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005458:	4b35      	ldr	r3, [pc, #212]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	2202      	movs	r2, #2
 800545e:	4013      	ands	r3, r2
 8005460:	d0f1      	beq.n	8005446 <HAL_RCC_OscConfig+0x242>
 8005462:	e018      	b.n	8005496 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005464:	4b32      	ldr	r3, [pc, #200]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005468:	4b31      	ldr	r3, [pc, #196]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 800546a:	2101      	movs	r1, #1
 800546c:	438a      	bics	r2, r1
 800546e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005470:	f7fe f80a 	bl	8003488 <HAL_GetTick>
 8005474:	0003      	movs	r3, r0
 8005476:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800547a:	f7fe f805 	bl	8003488 <HAL_GetTick>
 800547e:	0002      	movs	r2, r0
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e1c6      	b.n	800581a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548c:	4b28      	ldr	r3, [pc, #160]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2202      	movs	r2, #2
 8005492:	4013      	ands	r3, r2
 8005494:	d1f1      	bne.n	800547a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2204      	movs	r2, #4
 800549c:	4013      	ands	r3, r2
 800549e:	d100      	bne.n	80054a2 <HAL_RCC_OscConfig+0x29e>
 80054a0:	e0b4      	b.n	800560c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a2:	201f      	movs	r0, #31
 80054a4:	183b      	adds	r3, r7, r0
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054aa:	4b21      	ldr	r3, [pc, #132]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	055b      	lsls	r3, r3, #21
 80054b2:	4013      	ands	r3, r2
 80054b4:	d110      	bne.n	80054d8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80054b8:	69da      	ldr	r2, [r3, #28]
 80054ba:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	0549      	lsls	r1, r1, #21
 80054c0:	430a      	orrs	r2, r1
 80054c2:	61da      	str	r2, [r3, #28]
 80054c4:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	055b      	lsls	r3, r3, #21
 80054cc:	4013      	ands	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054d2:	183b      	adds	r3, r7, r0
 80054d4:	2201      	movs	r2, #1
 80054d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d8:	4b18      	ldr	r3, [pc, #96]	; (800553c <HAL_RCC_OscConfig+0x338>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	4013      	ands	r3, r2
 80054e2:	d11a      	bne.n	800551a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e4:	4b15      	ldr	r3, [pc, #84]	; (800553c <HAL_RCC_OscConfig+0x338>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <HAL_RCC_OscConfig+0x338>)
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	0049      	lsls	r1, r1, #1
 80054ee:	430a      	orrs	r2, r1
 80054f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f2:	f7fd ffc9 	bl	8003488 <HAL_GetTick>
 80054f6:	0003      	movs	r3, r0
 80054f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fc:	f7fd ffc4 	bl	8003488 <HAL_GetTick>
 8005500:	0002      	movs	r2, r0
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b64      	cmp	r3, #100	; 0x64
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e185      	b.n	800581a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550e:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_OscConfig+0x338>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	4013      	ands	r3, r2
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d10e      	bne.n	8005540 <HAL_RCC_OscConfig+0x33c>
 8005522:	4b03      	ldr	r3, [pc, #12]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005524:	6a1a      	ldr	r2, [r3, #32]
 8005526:	4b02      	ldr	r3, [pc, #8]	; (8005530 <HAL_RCC_OscConfig+0x32c>)
 8005528:	2101      	movs	r1, #1
 800552a:	430a      	orrs	r2, r1
 800552c:	621a      	str	r2, [r3, #32]
 800552e:	e035      	b.n	800559c <HAL_RCC_OscConfig+0x398>
 8005530:	40021000 	.word	0x40021000
 8005534:	fffeffff 	.word	0xfffeffff
 8005538:	fffbffff 	.word	0xfffbffff
 800553c:	40007000 	.word	0x40007000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10c      	bne.n	8005562 <HAL_RCC_OscConfig+0x35e>
 8005548:	4bb6      	ldr	r3, [pc, #728]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800554a:	6a1a      	ldr	r2, [r3, #32]
 800554c:	4bb5      	ldr	r3, [pc, #724]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800554e:	2101      	movs	r1, #1
 8005550:	438a      	bics	r2, r1
 8005552:	621a      	str	r2, [r3, #32]
 8005554:	4bb3      	ldr	r3, [pc, #716]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005556:	6a1a      	ldr	r2, [r3, #32]
 8005558:	4bb2      	ldr	r3, [pc, #712]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800555a:	2104      	movs	r1, #4
 800555c:	438a      	bics	r2, r1
 800555e:	621a      	str	r2, [r3, #32]
 8005560:	e01c      	b.n	800559c <HAL_RCC_OscConfig+0x398>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b05      	cmp	r3, #5
 8005568:	d10c      	bne.n	8005584 <HAL_RCC_OscConfig+0x380>
 800556a:	4bae      	ldr	r3, [pc, #696]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	4bad      	ldr	r3, [pc, #692]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005570:	2104      	movs	r1, #4
 8005572:	430a      	orrs	r2, r1
 8005574:	621a      	str	r2, [r3, #32]
 8005576:	4bab      	ldr	r3, [pc, #684]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	4baa      	ldr	r3, [pc, #680]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800557c:	2101      	movs	r1, #1
 800557e:	430a      	orrs	r2, r1
 8005580:	621a      	str	r2, [r3, #32]
 8005582:	e00b      	b.n	800559c <HAL_RCC_OscConfig+0x398>
 8005584:	4ba7      	ldr	r3, [pc, #668]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005586:	6a1a      	ldr	r2, [r3, #32]
 8005588:	4ba6      	ldr	r3, [pc, #664]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800558a:	2101      	movs	r1, #1
 800558c:	438a      	bics	r2, r1
 800558e:	621a      	str	r2, [r3, #32]
 8005590:	4ba4      	ldr	r3, [pc, #656]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	4ba3      	ldr	r3, [pc, #652]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005596:	2104      	movs	r1, #4
 8005598:	438a      	bics	r2, r1
 800559a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d014      	beq.n	80055ce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a4:	f7fd ff70 	bl	8003488 <HAL_GetTick>
 80055a8:	0003      	movs	r3, r0
 80055aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ac:	e009      	b.n	80055c2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ae:	f7fd ff6b 	bl	8003488 <HAL_GetTick>
 80055b2:	0002      	movs	r2, r0
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	4a9b      	ldr	r2, [pc, #620]	; (8005828 <HAL_RCC_OscConfig+0x624>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e12b      	b.n	800581a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c2:	4b98      	ldr	r3, [pc, #608]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	2202      	movs	r2, #2
 80055c8:	4013      	ands	r3, r2
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x3aa>
 80055cc:	e013      	b.n	80055f6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ce:	f7fd ff5b 	bl	8003488 <HAL_GetTick>
 80055d2:	0003      	movs	r3, r0
 80055d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d6:	e009      	b.n	80055ec <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fd ff56 	bl	8003488 <HAL_GetTick>
 80055dc:	0002      	movs	r2, r0
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	4a91      	ldr	r2, [pc, #580]	; (8005828 <HAL_RCC_OscConfig+0x624>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e116      	b.n	800581a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ec:	4b8d      	ldr	r3, [pc, #564]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	2202      	movs	r2, #2
 80055f2:	4013      	ands	r3, r2
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055f6:	231f      	movs	r3, #31
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d105      	bne.n	800560c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005600:	4b88      	ldr	r3, [pc, #544]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	4b87      	ldr	r3, [pc, #540]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005606:	4989      	ldr	r1, [pc, #548]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005608:	400a      	ands	r2, r1
 800560a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2210      	movs	r2, #16
 8005612:	4013      	ands	r3, r2
 8005614:	d063      	beq.n	80056de <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d12a      	bne.n	8005674 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800561e:	4b81      	ldr	r3, [pc, #516]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005622:	4b80      	ldr	r3, [pc, #512]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005624:	2104      	movs	r1, #4
 8005626:	430a      	orrs	r2, r1
 8005628:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800562a:	4b7e      	ldr	r3, [pc, #504]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800562c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562e:	4b7d      	ldr	r3, [pc, #500]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005630:	2101      	movs	r1, #1
 8005632:	430a      	orrs	r2, r1
 8005634:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005636:	f7fd ff27 	bl	8003488 <HAL_GetTick>
 800563a:	0003      	movs	r3, r0
 800563c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005640:	f7fd ff22 	bl	8003488 <HAL_GetTick>
 8005644:	0002      	movs	r2, r0
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e0e3      	b.n	800581a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005652:	4b74      	ldr	r3, [pc, #464]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005656:	2202      	movs	r2, #2
 8005658:	4013      	ands	r3, r2
 800565a:	d0f1      	beq.n	8005640 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800565c:	4b71      	ldr	r3, [pc, #452]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	22f8      	movs	r2, #248	; 0xf8
 8005662:	4393      	bics	r3, r2
 8005664:	0019      	movs	r1, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	00da      	lsls	r2, r3, #3
 800566c:	4b6d      	ldr	r3, [pc, #436]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800566e:	430a      	orrs	r2, r1
 8005670:	635a      	str	r2, [r3, #52]	; 0x34
 8005672:	e034      	b.n	80056de <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	3305      	adds	r3, #5
 800567a:	d111      	bne.n	80056a0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800567c:	4b69      	ldr	r3, [pc, #420]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800567e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005680:	4b68      	ldr	r3, [pc, #416]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005682:	2104      	movs	r1, #4
 8005684:	438a      	bics	r2, r1
 8005686:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005688:	4b66      	ldr	r3, [pc, #408]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	22f8      	movs	r2, #248	; 0xf8
 800568e:	4393      	bics	r3, r2
 8005690:	0019      	movs	r1, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	00da      	lsls	r2, r3, #3
 8005698:	4b62      	ldr	r3, [pc, #392]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800569a:	430a      	orrs	r2, r1
 800569c:	635a      	str	r2, [r3, #52]	; 0x34
 800569e:	e01e      	b.n	80056de <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80056a0:	4b60      	ldr	r3, [pc, #384]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80056a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a4:	4b5f      	ldr	r3, [pc, #380]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80056a6:	2104      	movs	r1, #4
 80056a8:	430a      	orrs	r2, r1
 80056aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80056ac:	4b5d      	ldr	r3, [pc, #372]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80056ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b0:	4b5c      	ldr	r3, [pc, #368]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80056b2:	2101      	movs	r1, #1
 80056b4:	438a      	bics	r2, r1
 80056b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b8:	f7fd fee6 	bl	8003488 <HAL_GetTick>
 80056bc:	0003      	movs	r3, r0
 80056be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80056c2:	f7fd fee1 	bl	8003488 <HAL_GetTick>
 80056c6:	0002      	movs	r2, r0
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e0a2      	b.n	800581a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80056d4:	4b53      	ldr	r3, [pc, #332]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80056d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d8:	2202      	movs	r2, #2
 80056da:	4013      	ands	r3, r2
 80056dc:	d1f1      	bne.n	80056c2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d100      	bne.n	80056e8 <HAL_RCC_OscConfig+0x4e4>
 80056e6:	e097      	b.n	8005818 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056e8:	4b4e      	ldr	r3, [pc, #312]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	220c      	movs	r2, #12
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d100      	bne.n	80056f6 <HAL_RCC_OscConfig+0x4f2>
 80056f4:	e06b      	b.n	80057ce <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d14c      	bne.n	8005798 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fe:	4b49      	ldr	r3, [pc, #292]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b48      	ldr	r3, [pc, #288]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005704:	494a      	ldr	r1, [pc, #296]	; (8005830 <HAL_RCC_OscConfig+0x62c>)
 8005706:	400a      	ands	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570a:	f7fd febd 	bl	8003488 <HAL_GetTick>
 800570e:	0003      	movs	r3, r0
 8005710:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005714:	f7fd feb8 	bl	8003488 <HAL_GetTick>
 8005718:	0002      	movs	r2, r0
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e079      	b.n	800581a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005726:	4b3f      	ldr	r3, [pc, #252]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	2380      	movs	r3, #128	; 0x80
 800572c:	049b      	lsls	r3, r3, #18
 800572e:	4013      	ands	r3, r2
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005732:	4b3c      	ldr	r3, [pc, #240]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	220f      	movs	r2, #15
 8005738:	4393      	bics	r3, r2
 800573a:	0019      	movs	r1, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005740:	4b38      	ldr	r3, [pc, #224]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005742:	430a      	orrs	r2, r1
 8005744:	62da      	str	r2, [r3, #44]	; 0x2c
 8005746:	4b37      	ldr	r3, [pc, #220]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4a3a      	ldr	r2, [pc, #232]	; (8005834 <HAL_RCC_OscConfig+0x630>)
 800574c:	4013      	ands	r3, r2
 800574e:	0019      	movs	r1, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	431a      	orrs	r2, r3
 800575a:	4b32      	ldr	r3, [pc, #200]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005760:	4b30      	ldr	r3, [pc, #192]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	4b2f      	ldr	r3, [pc, #188]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 8005766:	2180      	movs	r1, #128	; 0x80
 8005768:	0449      	lsls	r1, r1, #17
 800576a:	430a      	orrs	r2, r1
 800576c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576e:	f7fd fe8b 	bl	8003488 <HAL_GetTick>
 8005772:	0003      	movs	r3, r0
 8005774:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005778:	f7fd fe86 	bl	8003488 <HAL_GetTick>
 800577c:	0002      	movs	r2, r0
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e047      	b.n	800581a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800578a:	4b26      	ldr	r3, [pc, #152]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	2380      	movs	r3, #128	; 0x80
 8005790:	049b      	lsls	r3, r3, #18
 8005792:	4013      	ands	r3, r2
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0x574>
 8005796:	e03f      	b.n	8005818 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005798:	4b22      	ldr	r3, [pc, #136]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b21      	ldr	r3, [pc, #132]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 800579e:	4924      	ldr	r1, [pc, #144]	; (8005830 <HAL_RCC_OscConfig+0x62c>)
 80057a0:	400a      	ands	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a4:	f7fd fe70 	bl	8003488 <HAL_GetTick>
 80057a8:	0003      	movs	r3, r0
 80057aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ae:	f7fd fe6b 	bl	8003488 <HAL_GetTick>
 80057b2:	0002      	movs	r2, r0
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e02c      	b.n	800581a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c0:	4b18      	ldr	r3, [pc, #96]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	049b      	lsls	r3, r3, #18
 80057c8:	4013      	ands	r3, r2
 80057ca:	d1f0      	bne.n	80057ae <HAL_RCC_OscConfig+0x5aa>
 80057cc:	e024      	b.n	8005818 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e01f      	b.n	800581a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80057da:	4b12      	ldr	r3, [pc, #72]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80057e0:	4b10      	ldr	r3, [pc, #64]	; (8005824 <HAL_RCC_OscConfig+0x620>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	025b      	lsls	r3, r3, #9
 80057ec:	401a      	ands	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d10e      	bne.n	8005814 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	220f      	movs	r2, #15
 80057fa:	401a      	ands	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005800:	429a      	cmp	r2, r3
 8005802:	d107      	bne.n	8005814 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	23f0      	movs	r3, #240	; 0xf0
 8005808:	039b      	lsls	r3, r3, #14
 800580a:	401a      	ands	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d001      	beq.n	8005818 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	0018      	movs	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	b008      	add	sp, #32
 8005820:	bd80      	pop	{r7, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	40021000 	.word	0x40021000
 8005828:	00001388 	.word	0x00001388
 800582c:	efffffff 	.word	0xefffffff
 8005830:	feffffff 	.word	0xfeffffff
 8005834:	ffc2ffff 	.word	0xffc2ffff

08005838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0b3      	b.n	80059b4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800584c:	4b5b      	ldr	r3, [pc, #364]	; (80059bc <HAL_RCC_ClockConfig+0x184>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2201      	movs	r2, #1
 8005852:	4013      	ands	r3, r2
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d911      	bls.n	800587e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585a:	4b58      	ldr	r3, [pc, #352]	; (80059bc <HAL_RCC_ClockConfig+0x184>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2201      	movs	r2, #1
 8005860:	4393      	bics	r3, r2
 8005862:	0019      	movs	r1, r3
 8005864:	4b55      	ldr	r3, [pc, #340]	; (80059bc <HAL_RCC_ClockConfig+0x184>)
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <HAL_RCC_ClockConfig+0x184>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	4013      	ands	r3, r2
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d001      	beq.n	800587e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e09a      	b.n	80059b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2202      	movs	r2, #2
 8005884:	4013      	ands	r3, r2
 8005886:	d015      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2204      	movs	r2, #4
 800588e:	4013      	ands	r3, r2
 8005890:	d006      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005892:	4b4b      	ldr	r3, [pc, #300]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	4b4a      	ldr	r3, [pc, #296]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 8005898:	21e0      	movs	r1, #224	; 0xe0
 800589a:	00c9      	lsls	r1, r1, #3
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a0:	4b47      	ldr	r3, [pc, #284]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	22f0      	movs	r2, #240	; 0xf0
 80058a6:	4393      	bics	r3, r2
 80058a8:	0019      	movs	r1, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	4b44      	ldr	r3, [pc, #272]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2201      	movs	r2, #1
 80058ba:	4013      	ands	r3, r2
 80058bc:	d040      	beq.n	8005940 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d107      	bne.n	80058d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c6:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	029b      	lsls	r3, r3, #10
 80058ce:	4013      	ands	r3, r2
 80058d0:	d114      	bne.n	80058fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e06e      	b.n	80059b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d107      	bne.n	80058ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058de:	4b38      	ldr	r3, [pc, #224]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	049b      	lsls	r3, r3, #18
 80058e6:	4013      	ands	r3, r2
 80058e8:	d108      	bne.n	80058fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e062      	b.n	80059b4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ee:	4b34      	ldr	r3, [pc, #208]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2202      	movs	r2, #2
 80058f4:	4013      	ands	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e05b      	b.n	80059b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058fc:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2203      	movs	r2, #3
 8005902:	4393      	bics	r3, r2
 8005904:	0019      	movs	r1, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 800590c:	430a      	orrs	r2, r1
 800590e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005910:	f7fd fdba 	bl	8003488 <HAL_GetTick>
 8005914:	0003      	movs	r3, r0
 8005916:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005918:	e009      	b.n	800592e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800591a:	f7fd fdb5 	bl	8003488 <HAL_GetTick>
 800591e:	0002      	movs	r2, r0
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	4a27      	ldr	r2, [pc, #156]	; (80059c4 <HAL_RCC_ClockConfig+0x18c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e042      	b.n	80059b4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592e:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	220c      	movs	r2, #12
 8005934:	401a      	ands	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	429a      	cmp	r2, r3
 800593e:	d1ec      	bne.n	800591a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005940:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <HAL_RCC_ClockConfig+0x184>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2201      	movs	r2, #1
 8005946:	4013      	ands	r3, r2
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d211      	bcs.n	8005972 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594e:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <HAL_RCC_ClockConfig+0x184>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2201      	movs	r2, #1
 8005954:	4393      	bics	r3, r2
 8005956:	0019      	movs	r1, r3
 8005958:	4b18      	ldr	r3, [pc, #96]	; (80059bc <HAL_RCC_ClockConfig+0x184>)
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005960:	4b16      	ldr	r3, [pc, #88]	; (80059bc <HAL_RCC_ClockConfig+0x184>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2201      	movs	r2, #1
 8005966:	4013      	ands	r3, r2
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d001      	beq.n	8005972 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e020      	b.n	80059b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2204      	movs	r2, #4
 8005978:	4013      	ands	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800597c:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4a11      	ldr	r2, [pc, #68]	; (80059c8 <HAL_RCC_ClockConfig+0x190>)
 8005982:	4013      	ands	r3, r2
 8005984:	0019      	movs	r1, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005990:	f000 f820 	bl	80059d4 <HAL_RCC_GetSysClockFreq>
 8005994:	0001      	movs	r1, r0
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <HAL_RCC_ClockConfig+0x188>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	220f      	movs	r2, #15
 800599e:	4013      	ands	r3, r2
 80059a0:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <HAL_RCC_ClockConfig+0x194>)
 80059a2:	5cd3      	ldrb	r3, [r2, r3]
 80059a4:	000a      	movs	r2, r1
 80059a6:	40da      	lsrs	r2, r3
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <HAL_RCC_ClockConfig+0x198>)
 80059aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80059ac:	2000      	movs	r0, #0
 80059ae:	f7fd fd25 	bl	80033fc <HAL_InitTick>
  
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	0018      	movs	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b004      	add	sp, #16
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40022000 	.word	0x40022000
 80059c0:	40021000 	.word	0x40021000
 80059c4:	00001388 	.word	0x00001388
 80059c8:	fffff8ff 	.word	0xfffff8ff
 80059cc:	080095fc 	.word	0x080095fc
 80059d0:	20000010 	.word	0x20000010

080059d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d4:	b590      	push	{r4, r7, lr}
 80059d6:	b08f      	sub	sp, #60	; 0x3c
 80059d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80059da:	2314      	movs	r3, #20
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	4a2b      	ldr	r2, [pc, #172]	; (8005a8c <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80059e2:	c313      	stmia	r3!, {r0, r1, r4}
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	4a29      	ldr	r2, [pc, #164]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80059ee:	c313      	stmia	r3!, {r0, r1, r4}
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f8:	2300      	movs	r3, #0
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80059fc:	2300      	movs	r3, #0
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005a00:	2300      	movs	r3, #0
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005a08:	4b22      	ldr	r3, [pc, #136]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	220c      	movs	r2, #12
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d002      	beq.n	8005a1e <HAL_RCC_GetSysClockFreq+0x4a>
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d003      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0x50>
 8005a1c:	e02d      	b.n	8005a7a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a1e:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a22:	e02d      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	0c9b      	lsrs	r3, r3, #18
 8005a28:	220f      	movs	r2, #15
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	2214      	movs	r2, #20
 8005a2e:	18ba      	adds	r2, r7, r2
 8005a30:	5cd3      	ldrb	r3, [r2, r3]
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005a34:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	220f      	movs	r2, #15
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	1d3a      	adds	r2, r7, #4
 8005a3e:	5cd3      	ldrb	r3, [r2, r3]
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	025b      	lsls	r3, r3, #9
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d009      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a4e:	4812      	ldr	r0, [pc, #72]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a50:	f7fa fb76 	bl	8000140 <__udivsi3>
 8005a54:	0003      	movs	r3, r0
 8005a56:	001a      	movs	r2, r3
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	4353      	muls	r3, r2
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5e:	e009      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a62:	000a      	movs	r2, r1
 8005a64:	0152      	lsls	r2, r2, #5
 8005a66:	1a52      	subs	r2, r2, r1
 8005a68:	0193      	lsls	r3, r2, #6
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	185b      	adds	r3, r3, r1
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a78:	e002      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a7a:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a7e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005a82:	0018      	movs	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	b00f      	add	sp, #60	; 0x3c
 8005a88:	bd90      	pop	{r4, r7, pc}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	0800951c 	.word	0x0800951c
 8005a90:	0800952c 	.word	0x0800952c
 8005a94:	40021000 	.word	0x40021000
 8005a98:	007a1200 	.word	0x007a1200

08005a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	025b      	lsls	r3, r3, #9
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d100      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005ab8:	e08e      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005aba:	2017      	movs	r0, #23
 8005abc:	183b      	adds	r3, r7, r0
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ac2:	4b5f      	ldr	r3, [pc, #380]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005ac4:	69da      	ldr	r2, [r3, #28]
 8005ac6:	2380      	movs	r3, #128	; 0x80
 8005ac8:	055b      	lsls	r3, r3, #21
 8005aca:	4013      	ands	r3, r2
 8005acc:	d110      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ace:	4b5c      	ldr	r3, [pc, #368]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005ad0:	69da      	ldr	r2, [r3, #28]
 8005ad2:	4b5b      	ldr	r3, [pc, #364]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005ad4:	2180      	movs	r1, #128	; 0x80
 8005ad6:	0549      	lsls	r1, r1, #21
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	61da      	str	r2, [r3, #28]
 8005adc:	4b58      	ldr	r3, [pc, #352]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	2380      	movs	r3, #128	; 0x80
 8005ae2:	055b      	lsls	r3, r3, #21
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aea:	183b      	adds	r3, r7, r0
 8005aec:	2201      	movs	r2, #1
 8005aee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af0:	4b54      	ldr	r3, [pc, #336]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	2380      	movs	r3, #128	; 0x80
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	4013      	ands	r3, r2
 8005afa:	d11a      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005afc:	4b51      	ldr	r3, [pc, #324]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4b50      	ldr	r3, [pc, #320]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005b02:	2180      	movs	r1, #128	; 0x80
 8005b04:	0049      	lsls	r1, r1, #1
 8005b06:	430a      	orrs	r2, r1
 8005b08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b0a:	f7fd fcbd 	bl	8003488 <HAL_GetTick>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b12:	e008      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b14:	f7fd fcb8 	bl	8003488 <HAL_GetTick>
 8005b18:	0002      	movs	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	; 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e087      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b26:	4b47      	ldr	r3, [pc, #284]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b32:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005b34:	6a1a      	ldr	r2, [r3, #32]
 8005b36:	23c0      	movs	r3, #192	; 0xc0
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d034      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	23c0      	movs	r3, #192	; 0xc0
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d02c      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b54:	4b3a      	ldr	r3, [pc, #232]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	4a3b      	ldr	r2, [pc, #236]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b5e:	4b38      	ldr	r3, [pc, #224]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005b60:	6a1a      	ldr	r2, [r3, #32]
 8005b62:	4b37      	ldr	r3, [pc, #220]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005b64:	2180      	movs	r1, #128	; 0x80
 8005b66:	0249      	lsls	r1, r1, #9
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b6c:	4b34      	ldr	r3, [pc, #208]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005b6e:	6a1a      	ldr	r2, [r3, #32]
 8005b70:	4b33      	ldr	r3, [pc, #204]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005b72:	4936      	ldr	r1, [pc, #216]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b74:	400a      	ands	r2, r1
 8005b76:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b78:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	4013      	ands	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b86:	f7fd fc7f 	bl	8003488 <HAL_GetTick>
 8005b8a:	0003      	movs	r3, r0
 8005b8c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8e:	e009      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b90:	f7fd fc7a 	bl	8003488 <HAL_GetTick>
 8005b94:	0002      	movs	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	4a2d      	ldr	r2, [pc, #180]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e048      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba4:	4b26      	ldr	r3, [pc, #152]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	4013      	ands	r3, r2
 8005bac:	d0f0      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bae:	4b24      	ldr	r3, [pc, #144]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bc2:	2317      	movs	r3, #23
 8005bc4:	18fb      	adds	r3, r7, r3
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d105      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bcc:	4b1c      	ldr	r3, [pc, #112]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bd2:	4920      	ldr	r1, [pc, #128]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bd4:	400a      	ands	r2, r1
 8005bd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	4013      	ands	r3, r2
 8005be0:	d009      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005be2:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	2203      	movs	r2, #3
 8005be8:	4393      	bics	r3, r2
 8005bea:	0019      	movs	r1, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d009      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	2210      	movs	r2, #16
 8005c06:	4393      	bics	r3, r2
 8005c08:	0019      	movs	r1, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c10:	430a      	orrs	r2, r1
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	2240      	movs	r2, #64	; 0x40
 8005c26:	4393      	bics	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c30:	430a      	orrs	r2, r1
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	0018      	movs	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b006      	add	sp, #24
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	40021000 	.word	0x40021000
 8005c44:	40007000 	.word	0x40007000
 8005c48:	fffffcff 	.word	0xfffffcff
 8005c4c:	fffeffff 	.word	0xfffeffff
 8005c50:	00001388 	.word	0x00001388
 8005c54:	efffffff 	.word	0xefffffff

08005c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e042      	b.n	8005cf0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	223d      	movs	r2, #61	; 0x3d
 8005c6e:	5c9b      	ldrb	r3, [r3, r2]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d107      	bne.n	8005c86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	223c      	movs	r2, #60	; 0x3c
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f7fd fa4d 	bl	8003120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	223d      	movs	r2, #61	; 0x3d
 8005c8a:	2102      	movs	r1, #2
 8005c8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3304      	adds	r3, #4
 8005c96:	0019      	movs	r1, r3
 8005c98:	0010      	movs	r0, r2
 8005c9a:	f000 fa3f 	bl	800611c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2246      	movs	r2, #70	; 0x46
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	223e      	movs	r2, #62	; 0x3e
 8005caa:	2101      	movs	r1, #1
 8005cac:	5499      	strb	r1, [r3, r2]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	223f      	movs	r2, #63	; 0x3f
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	5499      	strb	r1, [r3, r2]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2240      	movs	r2, #64	; 0x40
 8005cba:	2101      	movs	r1, #1
 8005cbc:	5499      	strb	r1, [r3, r2]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2241      	movs	r2, #65	; 0x41
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2242      	movs	r2, #66	; 0x42
 8005cca:	2101      	movs	r1, #1
 8005ccc:	5499      	strb	r1, [r3, r2]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2243      	movs	r2, #67	; 0x43
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	5499      	strb	r1, [r3, r2]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2244      	movs	r2, #68	; 0x44
 8005cda:	2101      	movs	r1, #1
 8005cdc:	5499      	strb	r1, [r3, r2]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2245      	movs	r2, #69	; 0x45
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	223d      	movs	r2, #61	; 0x3d
 8005cea:	2101      	movs	r1, #1
 8005cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b002      	add	sp, #8
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2202      	movs	r2, #2
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d124      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2202      	movs	r2, #2
 8005d16:	4013      	ands	r3, r2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d11d      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2203      	movs	r2, #3
 8005d22:	4252      	negs	r2, r2
 8005d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2203      	movs	r2, #3
 8005d34:	4013      	ands	r3, r2
 8005d36:	d004      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f000 f9d6 	bl	80060ec <HAL_TIM_IC_CaptureCallback>
 8005d40:	e007      	b.n	8005d52 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	0018      	movs	r0, r3
 8005d46:	f000 f9c9 	bl	80060dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 f9d5 	bl	80060fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2204      	movs	r2, #4
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d125      	bne.n	8005db2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d11e      	bne.n	8005db2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2205      	movs	r2, #5
 8005d7a:	4252      	negs	r2, r2
 8005d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	23c0      	movs	r3, #192	; 0xc0
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d004      	beq.n	8005d9c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 f9a9 	bl	80060ec <HAL_TIM_IC_CaptureCallback>
 8005d9a:	e007      	b.n	8005dac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f000 f99c 	bl	80060dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	0018      	movs	r0, r3
 8005da8:	f000 f9a8 	bl	80060fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2208      	movs	r2, #8
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d124      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d11d      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2209      	movs	r2, #9
 8005dd4:	4252      	negs	r2, r2
 8005dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	2203      	movs	r2, #3
 8005de6:	4013      	ands	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	0018      	movs	r0, r3
 8005dee:	f000 f97d 	bl	80060ec <HAL_TIM_IC_CaptureCallback>
 8005df2:	e007      	b.n	8005e04 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	0018      	movs	r0, r3
 8005df8:	f000 f970 	bl	80060dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f000 f97c 	bl	80060fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2210      	movs	r2, #16
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d125      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	2210      	movs	r2, #16
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b10      	cmp	r3, #16
 8005e24:	d11e      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2211      	movs	r2, #17
 8005e2c:	4252      	negs	r2, r2
 8005e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2208      	movs	r2, #8
 8005e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	23c0      	movs	r3, #192	; 0xc0
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4013      	ands	r3, r2
 8005e42:	d004      	beq.n	8005e4e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 f950 	bl	80060ec <HAL_TIM_IC_CaptureCallback>
 8005e4c:	e007      	b.n	8005e5e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	0018      	movs	r0, r3
 8005e52:	f000 f943 	bl	80060dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 f94f 	bl	80060fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d10f      	bne.n	8005e92 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d108      	bne.n	8005e92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2202      	movs	r2, #2
 8005e86:	4252      	negs	r2, r2
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f000 f91d 	bl	80060cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	2280      	movs	r2, #128	; 0x80
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b80      	cmp	r3, #128	; 0x80
 8005e9e:	d10f      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	2280      	movs	r2, #128	; 0x80
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d108      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2281      	movs	r2, #129	; 0x81
 8005eb4:	4252      	negs	r2, r2
 8005eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 faae 	bl	800641c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2240      	movs	r2, #64	; 0x40
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	d10f      	bne.n	8005eee <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	2240      	movs	r2, #64	; 0x40
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d108      	bne.n	8005eee <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2241      	movs	r2, #65	; 0x41
 8005ee2:	4252      	negs	r2, r2
 8005ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f000 f90f 	bl	800610c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d10f      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d108      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2221      	movs	r2, #33	; 0x21
 8005f10:	4252      	negs	r2, r2
 8005f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	0018      	movs	r0, r3
 8005f18:	f000 fa78 	bl	800640c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f1c:	46c0      	nop			; (mov r8, r8)
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b002      	add	sp, #8
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2e:	230f      	movs	r3, #15
 8005f30:	18fb      	adds	r3, r7, r3
 8005f32:	2200      	movs	r2, #0
 8005f34:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	223c      	movs	r2, #60	; 0x3c
 8005f3a:	5c9b      	ldrb	r3, [r3, r2]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIM_ConfigClockSource+0x20>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e0bc      	b.n	80060be <HAL_TIM_ConfigClockSource+0x19a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	223c      	movs	r2, #60	; 0x3c
 8005f48:	2101      	movs	r1, #1
 8005f4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	223d      	movs	r2, #61	; 0x3d
 8005f50:	2102      	movs	r1, #2
 8005f52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2277      	movs	r2, #119	; 0x77
 8005f60:	4393      	bics	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4a58      	ldr	r2, [pc, #352]	; (80060c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2280      	movs	r2, #128	; 0x80
 8005f7a:	0192      	lsls	r2, r2, #6
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d040      	beq.n	8006002 <HAL_TIM_ConfigClockSource+0xde>
 8005f80:	2280      	movs	r2, #128	; 0x80
 8005f82:	0192      	lsls	r2, r2, #6
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d900      	bls.n	8005f8a <HAL_TIM_ConfigClockSource+0x66>
 8005f88:	e088      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
 8005f8a:	2280      	movs	r2, #128	; 0x80
 8005f8c:	0152      	lsls	r2, r2, #5
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d100      	bne.n	8005f94 <HAL_TIM_ConfigClockSource+0x70>
 8005f92:	e088      	b.n	80060a6 <HAL_TIM_ConfigClockSource+0x182>
 8005f94:	2280      	movs	r2, #128	; 0x80
 8005f96:	0152      	lsls	r2, r2, #5
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d900      	bls.n	8005f9e <HAL_TIM_ConfigClockSource+0x7a>
 8005f9c:	e07e      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
 8005f9e:	2b70      	cmp	r3, #112	; 0x70
 8005fa0:	d018      	beq.n	8005fd4 <HAL_TIM_ConfigClockSource+0xb0>
 8005fa2:	d900      	bls.n	8005fa6 <HAL_TIM_ConfigClockSource+0x82>
 8005fa4:	e07a      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
 8005fa6:	2b60      	cmp	r3, #96	; 0x60
 8005fa8:	d04f      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x126>
 8005faa:	d900      	bls.n	8005fae <HAL_TIM_ConfigClockSource+0x8a>
 8005fac:	e076      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
 8005fae:	2b50      	cmp	r3, #80	; 0x50
 8005fb0:	d03b      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x106>
 8005fb2:	d900      	bls.n	8005fb6 <HAL_TIM_ConfigClockSource+0x92>
 8005fb4:	e072      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	d057      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x146>
 8005fba:	d900      	bls.n	8005fbe <HAL_TIM_ConfigClockSource+0x9a>
 8005fbc:	e06e      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
 8005fbe:	2b30      	cmp	r3, #48	; 0x30
 8005fc0:	d063      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x166>
 8005fc2:	d86b      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x178>
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d060      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x166>
 8005fc8:	d868      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x178>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d05d      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x166>
 8005fce:	2b10      	cmp	r3, #16
 8005fd0:	d05b      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x166>
 8005fd2:	e063      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	6899      	ldr	r1, [r3, #8]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f000 f994 	bl	8006310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2277      	movs	r2, #119	; 0x77
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	609a      	str	r2, [r3, #8]
      break;
 8006000:	e052      	b.n	80060a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	6899      	ldr	r1, [r3, #8]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f000 f97d 	bl	8006310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2180      	movs	r1, #128	; 0x80
 8006022:	01c9      	lsls	r1, r1, #7
 8006024:	430a      	orrs	r2, r1
 8006026:	609a      	str	r2, [r3, #8]
      break;
 8006028:	e03e      	b.n	80060a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	001a      	movs	r2, r3
 8006038:	f000 f8f0 	bl	800621c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2150      	movs	r1, #80	; 0x50
 8006042:	0018      	movs	r0, r3
 8006044:	f000 f94a 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 8006048:	e02e      	b.n	80060a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	001a      	movs	r2, r3
 8006058:	f000 f90e 	bl	8006278 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2160      	movs	r1, #96	; 0x60
 8006062:	0018      	movs	r0, r3
 8006064:	f000 f93a 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 8006068:	e01e      	b.n	80060a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	001a      	movs	r2, r3
 8006078:	f000 f8d0 	bl	800621c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2140      	movs	r1, #64	; 0x40
 8006082:	0018      	movs	r0, r3
 8006084:	f000 f92a 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 8006088:	e00e      	b.n	80060a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	0019      	movs	r1, r3
 8006094:	0010      	movs	r0, r2
 8006096:	f000 f921 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 800609a:	e005      	b.n	80060a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800609c:	230f      	movs	r3, #15
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	2201      	movs	r2, #1
 80060a2:	701a      	strb	r2, [r3, #0]
      break;
 80060a4:	e000      	b.n	80060a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80060a6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	223d      	movs	r2, #61	; 0x3d
 80060ac:	2101      	movs	r1, #1
 80060ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	223c      	movs	r2, #60	; 0x3c
 80060b4:	2100      	movs	r1, #0
 80060b6:	5499      	strb	r1, [r3, r2]

  return status;
 80060b8:	230f      	movs	r3, #15
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	781b      	ldrb	r3, [r3, #0]
}
 80060be:	0018      	movs	r0, r3
 80060c0:	46bd      	mov	sp, r7
 80060c2:	b004      	add	sp, #16
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	ffff00ff 	.word	0xffff00ff

080060cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060d4:	46c0      	nop			; (mov r8, r8)
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b002      	add	sp, #8
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e4:	46c0      	nop			; (mov r8, r8)
 80060e6:	46bd      	mov	sp, r7
 80060e8:	b002      	add	sp, #8
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b002      	add	sp, #8
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	46bd      	mov	sp, r7
 8006108:	b002      	add	sp, #8
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006114:	46c0      	nop			; (mov r8, r8)
 8006116:	46bd      	mov	sp, r7
 8006118:	b002      	add	sp, #8
 800611a:	bd80      	pop	{r7, pc}

0800611c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a34      	ldr	r2, [pc, #208]	; (8006200 <TIM_Base_SetConfig+0xe4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d008      	beq.n	8006146 <TIM_Base_SetConfig+0x2a>
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	2380      	movs	r3, #128	; 0x80
 8006138:	05db      	lsls	r3, r3, #23
 800613a:	429a      	cmp	r2, r3
 800613c:	d003      	beq.n	8006146 <TIM_Base_SetConfig+0x2a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a30      	ldr	r2, [pc, #192]	; (8006204 <TIM_Base_SetConfig+0xe8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d108      	bne.n	8006158 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2270      	movs	r2, #112	; 0x70
 800614a:	4393      	bics	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a29      	ldr	r2, [pc, #164]	; (8006200 <TIM_Base_SetConfig+0xe4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d018      	beq.n	8006192 <TIM_Base_SetConfig+0x76>
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	05db      	lsls	r3, r3, #23
 8006166:	429a      	cmp	r2, r3
 8006168:	d013      	beq.n	8006192 <TIM_Base_SetConfig+0x76>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a25      	ldr	r2, [pc, #148]	; (8006204 <TIM_Base_SetConfig+0xe8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00f      	beq.n	8006192 <TIM_Base_SetConfig+0x76>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a24      	ldr	r2, [pc, #144]	; (8006208 <TIM_Base_SetConfig+0xec>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00b      	beq.n	8006192 <TIM_Base_SetConfig+0x76>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a23      	ldr	r2, [pc, #140]	; (800620c <TIM_Base_SetConfig+0xf0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d007      	beq.n	8006192 <TIM_Base_SetConfig+0x76>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a22      	ldr	r2, [pc, #136]	; (8006210 <TIM_Base_SetConfig+0xf4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <TIM_Base_SetConfig+0x76>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a21      	ldr	r2, [pc, #132]	; (8006214 <TIM_Base_SetConfig+0xf8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d108      	bne.n	80061a4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a20      	ldr	r2, [pc, #128]	; (8006218 <TIM_Base_SetConfig+0xfc>)
 8006196:	4013      	ands	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2280      	movs	r2, #128	; 0x80
 80061a8:	4393      	bics	r3, r2
 80061aa:	001a      	movs	r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a0c      	ldr	r2, [pc, #48]	; (8006200 <TIM_Base_SetConfig+0xe4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00b      	beq.n	80061ea <TIM_Base_SetConfig+0xce>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a0d      	ldr	r2, [pc, #52]	; (800620c <TIM_Base_SetConfig+0xf0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d007      	beq.n	80061ea <TIM_Base_SetConfig+0xce>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a0c      	ldr	r2, [pc, #48]	; (8006210 <TIM_Base_SetConfig+0xf4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d003      	beq.n	80061ea <TIM_Base_SetConfig+0xce>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a0b      	ldr	r2, [pc, #44]	; (8006214 <TIM_Base_SetConfig+0xf8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d103      	bne.n	80061f2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	615a      	str	r2, [r3, #20]
}
 80061f8:	46c0      	nop			; (mov r8, r8)
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b004      	add	sp, #16
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40000400 	.word	0x40000400
 8006208:	40002000 	.word	0x40002000
 800620c:	40014000 	.word	0x40014000
 8006210:	40014400 	.word	0x40014400
 8006214:	40014800 	.word	0x40014800
 8006218:	fffffcff 	.word	0xfffffcff

0800621c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	2201      	movs	r2, #1
 8006234:	4393      	bics	r3, r2
 8006236:	001a      	movs	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	22f0      	movs	r2, #240	; 0xf0
 8006246:	4393      	bics	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	220a      	movs	r2, #10
 8006258:	4393      	bics	r3, r2
 800625a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	46bd      	mov	sp, r7
 8006274:	b006      	add	sp, #24
 8006276:	bd80      	pop	{r7, pc}

08006278 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	2210      	movs	r2, #16
 800628a:	4393      	bics	r3, r2
 800628c:	001a      	movs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	4a0d      	ldr	r2, [pc, #52]	; (80062d8 <TIM_TI2_ConfigInputStage+0x60>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	031b      	lsls	r3, r3, #12
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	22a0      	movs	r2, #160	; 0xa0
 80062b4:	4393      	bics	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b006      	add	sp, #24
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	ffff0fff 	.word	0xffff0fff

080062dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2270      	movs	r2, #112	; 0x70
 80062f0:	4393      	bics	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	2207      	movs	r2, #7
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	609a      	str	r2, [r3, #8]
}
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	46bd      	mov	sp, r7
 800630a:	b004      	add	sp, #16
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <TIM_ETR_SetConfig+0x3c>)
 8006328:	4013      	ands	r3, r2
 800632a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	021a      	lsls	r2, r3, #8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	431a      	orrs	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4313      	orrs	r3, r2
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	609a      	str	r2, [r3, #8]
}
 8006344:	46c0      	nop			; (mov r8, r8)
 8006346:	46bd      	mov	sp, r7
 8006348:	b006      	add	sp, #24
 800634a:	bd80      	pop	{r7, pc}
 800634c:	ffff00ff 	.word	0xffff00ff

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	223c      	movs	r2, #60	; 0x3c
 800635e:	5c9b      	ldrb	r3, [r3, r2]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e047      	b.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	223c      	movs	r2, #60	; 0x3c
 800636c:	2101      	movs	r1, #1
 800636e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	223d      	movs	r2, #61	; 0x3d
 8006374:	2102      	movs	r1, #2
 8006376:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2270      	movs	r2, #112	; 0x70
 800638c:	4393      	bics	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a16      	ldr	r2, [pc, #88]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00f      	beq.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	2380      	movs	r3, #128	; 0x80
 80063b2:	05db      	lsls	r3, r3, #23
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d009      	beq.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a11      	ldr	r2, [pc, #68]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a10      	ldr	r2, [pc, #64]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d10c      	bne.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2280      	movs	r2, #128	; 0x80
 80063d0:	4393      	bics	r3, r2
 80063d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	223d      	movs	r2, #61	; 0x3d
 80063ea:	2101      	movs	r1, #1
 80063ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	223c      	movs	r2, #60	; 0x3c
 80063f2:	2100      	movs	r1, #0
 80063f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	0018      	movs	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	b004      	add	sp, #16
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40000400 	.word	0x40000400
 8006408:	40014000 	.word	0x40014000

0800640c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006414:	46c0      	nop			; (mov r8, r8)
 8006416:	46bd      	mov	sp, r7
 8006418:	b002      	add	sp, #8
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006424:	46c0      	nop			; (mov r8, r8)
 8006426:	46bd      	mov	sp, r7
 8006428:	b002      	add	sp, #8
 800642a:	bd80      	pop	{r7, pc}

0800642c <__errno>:
 800642c:	4b01      	ldr	r3, [pc, #4]	; (8006434 <__errno+0x8>)
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	4770      	bx	lr
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	2000001c 	.word	0x2000001c

08006438 <__libc_init_array>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	2600      	movs	r6, #0
 800643c:	4d0c      	ldr	r5, [pc, #48]	; (8006470 <__libc_init_array+0x38>)
 800643e:	4c0d      	ldr	r4, [pc, #52]	; (8006474 <__libc_init_array+0x3c>)
 8006440:	1b64      	subs	r4, r4, r5
 8006442:	10a4      	asrs	r4, r4, #2
 8006444:	42a6      	cmp	r6, r4
 8006446:	d109      	bne.n	800645c <__libc_init_array+0x24>
 8006448:	2600      	movs	r6, #0
 800644a:	f003 f83b 	bl	80094c4 <_init>
 800644e:	4d0a      	ldr	r5, [pc, #40]	; (8006478 <__libc_init_array+0x40>)
 8006450:	4c0a      	ldr	r4, [pc, #40]	; (800647c <__libc_init_array+0x44>)
 8006452:	1b64      	subs	r4, r4, r5
 8006454:	10a4      	asrs	r4, r4, #2
 8006456:	42a6      	cmp	r6, r4
 8006458:	d105      	bne.n	8006466 <__libc_init_array+0x2e>
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	00b3      	lsls	r3, r6, #2
 800645e:	58eb      	ldr	r3, [r5, r3]
 8006460:	4798      	blx	r3
 8006462:	3601      	adds	r6, #1
 8006464:	e7ee      	b.n	8006444 <__libc_init_array+0xc>
 8006466:	00b3      	lsls	r3, r6, #2
 8006468:	58eb      	ldr	r3, [r5, r3]
 800646a:	4798      	blx	r3
 800646c:	3601      	adds	r6, #1
 800646e:	e7f2      	b.n	8006456 <__libc_init_array+0x1e>
 8006470:	08009a58 	.word	0x08009a58
 8006474:	08009a58 	.word	0x08009a58
 8006478:	08009a58 	.word	0x08009a58
 800647c:	08009a5c 	.word	0x08009a5c

08006480 <memset>:
 8006480:	0003      	movs	r3, r0
 8006482:	1882      	adds	r2, r0, r2
 8006484:	4293      	cmp	r3, r2
 8006486:	d100      	bne.n	800648a <memset+0xa>
 8006488:	4770      	bx	lr
 800648a:	7019      	strb	r1, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	e7f9      	b.n	8006484 <memset+0x4>

08006490 <__cvt>:
 8006490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006492:	001e      	movs	r6, r3
 8006494:	2300      	movs	r3, #0
 8006496:	0014      	movs	r4, r2
 8006498:	b08b      	sub	sp, #44	; 0x2c
 800649a:	429e      	cmp	r6, r3
 800649c:	da04      	bge.n	80064a8 <__cvt+0x18>
 800649e:	2180      	movs	r1, #128	; 0x80
 80064a0:	0609      	lsls	r1, r1, #24
 80064a2:	1873      	adds	r3, r6, r1
 80064a4:	001e      	movs	r6, r3
 80064a6:	232d      	movs	r3, #45	; 0x2d
 80064a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80064ac:	7013      	strb	r3, [r2, #0]
 80064ae:	2320      	movs	r3, #32
 80064b0:	2203      	movs	r2, #3
 80064b2:	439f      	bics	r7, r3
 80064b4:	2f46      	cmp	r7, #70	; 0x46
 80064b6:	d007      	beq.n	80064c8 <__cvt+0x38>
 80064b8:	003b      	movs	r3, r7
 80064ba:	3b45      	subs	r3, #69	; 0x45
 80064bc:	4259      	negs	r1, r3
 80064be:	414b      	adcs	r3, r1
 80064c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80064c2:	3a01      	subs	r2, #1
 80064c4:	18cb      	adds	r3, r1, r3
 80064c6:	9310      	str	r3, [sp, #64]	; 0x40
 80064c8:	ab09      	add	r3, sp, #36	; 0x24
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	ab08      	add	r3, sp, #32
 80064ce:	9303      	str	r3, [sp, #12]
 80064d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064d2:	9200      	str	r2, [sp, #0]
 80064d4:	9302      	str	r3, [sp, #8]
 80064d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064d8:	0022      	movs	r2, r4
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	0033      	movs	r3, r6
 80064de:	f000 fceb 	bl	8006eb8 <_dtoa_r>
 80064e2:	0005      	movs	r5, r0
 80064e4:	2f47      	cmp	r7, #71	; 0x47
 80064e6:	d102      	bne.n	80064ee <__cvt+0x5e>
 80064e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064ea:	07db      	lsls	r3, r3, #31
 80064ec:	d528      	bpl.n	8006540 <__cvt+0xb0>
 80064ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064f0:	18eb      	adds	r3, r5, r3
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	2f46      	cmp	r7, #70	; 0x46
 80064f6:	d114      	bne.n	8006522 <__cvt+0x92>
 80064f8:	782b      	ldrb	r3, [r5, #0]
 80064fa:	2b30      	cmp	r3, #48	; 0x30
 80064fc:	d10c      	bne.n	8006518 <__cvt+0x88>
 80064fe:	2200      	movs	r2, #0
 8006500:	2300      	movs	r3, #0
 8006502:	0020      	movs	r0, r4
 8006504:	0031      	movs	r1, r6
 8006506:	f7f9 ffa1 	bl	800044c <__aeabi_dcmpeq>
 800650a:	2800      	cmp	r0, #0
 800650c:	d104      	bne.n	8006518 <__cvt+0x88>
 800650e:	2301      	movs	r3, #1
 8006510:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006512:	1a9b      	subs	r3, r3, r2
 8006514:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800651a:	9a07      	ldr	r2, [sp, #28]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	18d3      	adds	r3, r2, r3
 8006520:	9307      	str	r3, [sp, #28]
 8006522:	2200      	movs	r2, #0
 8006524:	2300      	movs	r3, #0
 8006526:	0020      	movs	r0, r4
 8006528:	0031      	movs	r1, r6
 800652a:	f7f9 ff8f 	bl	800044c <__aeabi_dcmpeq>
 800652e:	2800      	cmp	r0, #0
 8006530:	d001      	beq.n	8006536 <__cvt+0xa6>
 8006532:	9b07      	ldr	r3, [sp, #28]
 8006534:	9309      	str	r3, [sp, #36]	; 0x24
 8006536:	2230      	movs	r2, #48	; 0x30
 8006538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653a:	9907      	ldr	r1, [sp, #28]
 800653c:	428b      	cmp	r3, r1
 800653e:	d306      	bcc.n	800654e <__cvt+0xbe>
 8006540:	0028      	movs	r0, r5
 8006542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006544:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006546:	1b5b      	subs	r3, r3, r5
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	b00b      	add	sp, #44	; 0x2c
 800654c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800654e:	1c59      	adds	r1, r3, #1
 8006550:	9109      	str	r1, [sp, #36]	; 0x24
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e7f0      	b.n	8006538 <__cvt+0xa8>

08006556 <__exponent>:
 8006556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006558:	1c83      	adds	r3, r0, #2
 800655a:	b087      	sub	sp, #28
 800655c:	9303      	str	r3, [sp, #12]
 800655e:	0005      	movs	r5, r0
 8006560:	000c      	movs	r4, r1
 8006562:	232b      	movs	r3, #43	; 0x2b
 8006564:	7002      	strb	r2, [r0, #0]
 8006566:	2900      	cmp	r1, #0
 8006568:	da01      	bge.n	800656e <__exponent+0x18>
 800656a:	424c      	negs	r4, r1
 800656c:	3302      	adds	r3, #2
 800656e:	706b      	strb	r3, [r5, #1]
 8006570:	2c09      	cmp	r4, #9
 8006572:	dd31      	ble.n	80065d8 <__exponent+0x82>
 8006574:	270a      	movs	r7, #10
 8006576:	ab04      	add	r3, sp, #16
 8006578:	1dde      	adds	r6, r3, #7
 800657a:	0020      	movs	r0, r4
 800657c:	0039      	movs	r1, r7
 800657e:	9601      	str	r6, [sp, #4]
 8006580:	f7f9 ff4e 	bl	8000420 <__aeabi_idivmod>
 8006584:	3e01      	subs	r6, #1
 8006586:	3130      	adds	r1, #48	; 0x30
 8006588:	0020      	movs	r0, r4
 800658a:	7031      	strb	r1, [r6, #0]
 800658c:	0039      	movs	r1, r7
 800658e:	9402      	str	r4, [sp, #8]
 8006590:	f7f9 fe60 	bl	8000254 <__divsi3>
 8006594:	9b02      	ldr	r3, [sp, #8]
 8006596:	0004      	movs	r4, r0
 8006598:	2b63      	cmp	r3, #99	; 0x63
 800659a:	dcee      	bgt.n	800657a <__exponent+0x24>
 800659c:	9b01      	ldr	r3, [sp, #4]
 800659e:	3430      	adds	r4, #48	; 0x30
 80065a0:	1e9a      	subs	r2, r3, #2
 80065a2:	0013      	movs	r3, r2
 80065a4:	9903      	ldr	r1, [sp, #12]
 80065a6:	7014      	strb	r4, [r2, #0]
 80065a8:	a804      	add	r0, sp, #16
 80065aa:	3007      	adds	r0, #7
 80065ac:	4298      	cmp	r0, r3
 80065ae:	d80e      	bhi.n	80065ce <__exponent+0x78>
 80065b0:	ab04      	add	r3, sp, #16
 80065b2:	3307      	adds	r3, #7
 80065b4:	2000      	movs	r0, #0
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d804      	bhi.n	80065c4 <__exponent+0x6e>
 80065ba:	ab04      	add	r3, sp, #16
 80065bc:	3009      	adds	r0, #9
 80065be:	18c0      	adds	r0, r0, r3
 80065c0:	9b01      	ldr	r3, [sp, #4]
 80065c2:	1ac0      	subs	r0, r0, r3
 80065c4:	9b03      	ldr	r3, [sp, #12]
 80065c6:	1818      	adds	r0, r3, r0
 80065c8:	1b40      	subs	r0, r0, r5
 80065ca:	b007      	add	sp, #28
 80065cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ce:	7818      	ldrb	r0, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	7008      	strb	r0, [r1, #0]
 80065d4:	3101      	adds	r1, #1
 80065d6:	e7e7      	b.n	80065a8 <__exponent+0x52>
 80065d8:	2330      	movs	r3, #48	; 0x30
 80065da:	18e4      	adds	r4, r4, r3
 80065dc:	70ab      	strb	r3, [r5, #2]
 80065de:	1d28      	adds	r0, r5, #4
 80065e0:	70ec      	strb	r4, [r5, #3]
 80065e2:	e7f1      	b.n	80065c8 <__exponent+0x72>

080065e4 <_printf_float>:
 80065e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e6:	b095      	sub	sp, #84	; 0x54
 80065e8:	000c      	movs	r4, r1
 80065ea:	9209      	str	r2, [sp, #36]	; 0x24
 80065ec:	001e      	movs	r6, r3
 80065ee:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80065f0:	0007      	movs	r7, r0
 80065f2:	f001 fb7d 	bl	8007cf0 <_localeconv_r>
 80065f6:	6803      	ldr	r3, [r0, #0]
 80065f8:	0018      	movs	r0, r3
 80065fa:	930c      	str	r3, [sp, #48]	; 0x30
 80065fc:	f7f9 fd84 	bl	8000108 <strlen>
 8006600:	2300      	movs	r3, #0
 8006602:	9312      	str	r3, [sp, #72]	; 0x48
 8006604:	7e23      	ldrb	r3, [r4, #24]
 8006606:	2207      	movs	r2, #7
 8006608:	930a      	str	r3, [sp, #40]	; 0x28
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	900e      	str	r0, [sp, #56]	; 0x38
 800660e:	930d      	str	r3, [sp, #52]	; 0x34
 8006610:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006612:	682b      	ldr	r3, [r5, #0]
 8006614:	05c9      	lsls	r1, r1, #23
 8006616:	d547      	bpl.n	80066a8 <_printf_float+0xc4>
 8006618:	189b      	adds	r3, r3, r2
 800661a:	4393      	bics	r3, r2
 800661c:	001a      	movs	r2, r3
 800661e:	3208      	adds	r2, #8
 8006620:	602a      	str	r2, [r5, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	64a2      	str	r2, [r4, #72]	; 0x48
 8006628:	64e3      	str	r3, [r4, #76]	; 0x4c
 800662a:	2201      	movs	r2, #1
 800662c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800662e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006630:	930b      	str	r3, [sp, #44]	; 0x2c
 8006632:	006b      	lsls	r3, r5, #1
 8006634:	085b      	lsrs	r3, r3, #1
 8006636:	930f      	str	r3, [sp, #60]	; 0x3c
 8006638:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800663a:	4ba7      	ldr	r3, [pc, #668]	; (80068d8 <_printf_float+0x2f4>)
 800663c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800663e:	4252      	negs	r2, r2
 8006640:	f7fb ff80 	bl	8002544 <__aeabi_dcmpun>
 8006644:	2800      	cmp	r0, #0
 8006646:	d131      	bne.n	80066ac <_printf_float+0xc8>
 8006648:	2201      	movs	r2, #1
 800664a:	4ba3      	ldr	r3, [pc, #652]	; (80068d8 <_printf_float+0x2f4>)
 800664c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800664e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006650:	4252      	negs	r2, r2
 8006652:	f7f9 ff0b 	bl	800046c <__aeabi_dcmple>
 8006656:	2800      	cmp	r0, #0
 8006658:	d128      	bne.n	80066ac <_printf_float+0xc8>
 800665a:	2200      	movs	r2, #0
 800665c:	2300      	movs	r3, #0
 800665e:	0029      	movs	r1, r5
 8006660:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006662:	f7f9 fef9 	bl	8000458 <__aeabi_dcmplt>
 8006666:	2800      	cmp	r0, #0
 8006668:	d003      	beq.n	8006672 <_printf_float+0x8e>
 800666a:	0023      	movs	r3, r4
 800666c:	222d      	movs	r2, #45	; 0x2d
 800666e:	3343      	adds	r3, #67	; 0x43
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006674:	4d99      	ldr	r5, [pc, #612]	; (80068dc <_printf_float+0x2f8>)
 8006676:	2b47      	cmp	r3, #71	; 0x47
 8006678:	d900      	bls.n	800667c <_printf_float+0x98>
 800667a:	4d99      	ldr	r5, [pc, #612]	; (80068e0 <_printf_float+0x2fc>)
 800667c:	2303      	movs	r3, #3
 800667e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006680:	6123      	str	r3, [r4, #16]
 8006682:	3301      	adds	r3, #1
 8006684:	439a      	bics	r2, r3
 8006686:	2300      	movs	r3, #0
 8006688:	6022      	str	r2, [r4, #0]
 800668a:	930b      	str	r3, [sp, #44]	; 0x2c
 800668c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668e:	0021      	movs	r1, r4
 8006690:	0038      	movs	r0, r7
 8006692:	9600      	str	r6, [sp, #0]
 8006694:	aa13      	add	r2, sp, #76	; 0x4c
 8006696:	f000 f9e7 	bl	8006a68 <_printf_common>
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	d000      	beq.n	80066a0 <_printf_float+0xbc>
 800669e:	e0a2      	b.n	80067e6 <_printf_float+0x202>
 80066a0:	2001      	movs	r0, #1
 80066a2:	4240      	negs	r0, r0
 80066a4:	b015      	add	sp, #84	; 0x54
 80066a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066a8:	3307      	adds	r3, #7
 80066aa:	e7b6      	b.n	800661a <_printf_float+0x36>
 80066ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066ae:	002b      	movs	r3, r5
 80066b0:	0010      	movs	r0, r2
 80066b2:	0029      	movs	r1, r5
 80066b4:	f7fb ff46 	bl	8002544 <__aeabi_dcmpun>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d00b      	beq.n	80066d4 <_printf_float+0xf0>
 80066bc:	2d00      	cmp	r5, #0
 80066be:	da03      	bge.n	80066c8 <_printf_float+0xe4>
 80066c0:	0023      	movs	r3, r4
 80066c2:	222d      	movs	r2, #45	; 0x2d
 80066c4:	3343      	adds	r3, #67	; 0x43
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ca:	4d86      	ldr	r5, [pc, #536]	; (80068e4 <_printf_float+0x300>)
 80066cc:	2b47      	cmp	r3, #71	; 0x47
 80066ce:	d9d5      	bls.n	800667c <_printf_float+0x98>
 80066d0:	4d85      	ldr	r5, [pc, #532]	; (80068e8 <_printf_float+0x304>)
 80066d2:	e7d3      	b.n	800667c <_printf_float+0x98>
 80066d4:	2220      	movs	r2, #32
 80066d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066d8:	6863      	ldr	r3, [r4, #4]
 80066da:	4391      	bics	r1, r2
 80066dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	d149      	bne.n	8006776 <_printf_float+0x192>
 80066e2:	3307      	adds	r3, #7
 80066e4:	6063      	str	r3, [r4, #4]
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	4313      	orrs	r3, r2
 80066ee:	2200      	movs	r2, #0
 80066f0:	9206      	str	r2, [sp, #24]
 80066f2:	aa12      	add	r2, sp, #72	; 0x48
 80066f4:	9205      	str	r2, [sp, #20]
 80066f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066f8:	a908      	add	r1, sp, #32
 80066fa:	9204      	str	r2, [sp, #16]
 80066fc:	aa11      	add	r2, sp, #68	; 0x44
 80066fe:	9203      	str	r2, [sp, #12]
 8006700:	2223      	movs	r2, #35	; 0x23
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	6863      	ldr	r3, [r4, #4]
 8006708:	1852      	adds	r2, r2, r1
 800670a:	9202      	str	r2, [sp, #8]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	0038      	movs	r0, r7
 8006710:	002b      	movs	r3, r5
 8006712:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006714:	f7ff febc 	bl	8006490 <__cvt>
 8006718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800671a:	0005      	movs	r5, r0
 800671c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800671e:	2b47      	cmp	r3, #71	; 0x47
 8006720:	d108      	bne.n	8006734 <_printf_float+0x150>
 8006722:	1ccb      	adds	r3, r1, #3
 8006724:	db02      	blt.n	800672c <_printf_float+0x148>
 8006726:	6863      	ldr	r3, [r4, #4]
 8006728:	4299      	cmp	r1, r3
 800672a:	dd48      	ble.n	80067be <_printf_float+0x1da>
 800672c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800672e:	3b02      	subs	r3, #2
 8006730:	b2db      	uxtb	r3, r3
 8006732:	930a      	str	r3, [sp, #40]	; 0x28
 8006734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006736:	2b65      	cmp	r3, #101	; 0x65
 8006738:	d824      	bhi.n	8006784 <_printf_float+0x1a0>
 800673a:	0020      	movs	r0, r4
 800673c:	001a      	movs	r2, r3
 800673e:	3901      	subs	r1, #1
 8006740:	3050      	adds	r0, #80	; 0x50
 8006742:	9111      	str	r1, [sp, #68]	; 0x44
 8006744:	f7ff ff07 	bl	8006556 <__exponent>
 8006748:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800674a:	900b      	str	r0, [sp, #44]	; 0x2c
 800674c:	1813      	adds	r3, r2, r0
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	2a01      	cmp	r2, #1
 8006752:	dc02      	bgt.n	800675a <_printf_float+0x176>
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	07d2      	lsls	r2, r2, #31
 8006758:	d501      	bpl.n	800675e <_printf_float+0x17a>
 800675a:	3301      	adds	r3, #1
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	2323      	movs	r3, #35	; 0x23
 8006760:	aa08      	add	r2, sp, #32
 8006762:	189b      	adds	r3, r3, r2
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d100      	bne.n	800676c <_printf_float+0x188>
 800676a:	e78f      	b.n	800668c <_printf_float+0xa8>
 800676c:	0023      	movs	r3, r4
 800676e:	222d      	movs	r2, #45	; 0x2d
 8006770:	3343      	adds	r3, #67	; 0x43
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	e78a      	b.n	800668c <_printf_float+0xa8>
 8006776:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006778:	2a47      	cmp	r2, #71	; 0x47
 800677a:	d1b4      	bne.n	80066e6 <_printf_float+0x102>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1b2      	bne.n	80066e6 <_printf_float+0x102>
 8006780:	3301      	adds	r3, #1
 8006782:	e7af      	b.n	80066e4 <_printf_float+0x100>
 8006784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006786:	2b66      	cmp	r3, #102	; 0x66
 8006788:	d11b      	bne.n	80067c2 <_printf_float+0x1de>
 800678a:	6863      	ldr	r3, [r4, #4]
 800678c:	2900      	cmp	r1, #0
 800678e:	dd0d      	ble.n	80067ac <_printf_float+0x1c8>
 8006790:	6121      	str	r1, [r4, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d102      	bne.n	800679c <_printf_float+0x1b8>
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	07d2      	lsls	r2, r2, #31
 800679a:	d502      	bpl.n	80067a2 <_printf_float+0x1be>
 800679c:	3301      	adds	r3, #1
 800679e:	1859      	adds	r1, r3, r1
 80067a0:	6121      	str	r1, [r4, #16]
 80067a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80067a6:	2300      	movs	r3, #0
 80067a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80067aa:	e7d8      	b.n	800675e <_printf_float+0x17a>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d103      	bne.n	80067b8 <_printf_float+0x1d4>
 80067b0:	2201      	movs	r2, #1
 80067b2:	6821      	ldr	r1, [r4, #0]
 80067b4:	4211      	tst	r1, r2
 80067b6:	d000      	beq.n	80067ba <_printf_float+0x1d6>
 80067b8:	1c9a      	adds	r2, r3, #2
 80067ba:	6122      	str	r2, [r4, #16]
 80067bc:	e7f1      	b.n	80067a2 <_printf_float+0x1be>
 80067be:	2367      	movs	r3, #103	; 0x67
 80067c0:	930a      	str	r3, [sp, #40]	; 0x28
 80067c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067c6:	4293      	cmp	r3, r2
 80067c8:	db06      	blt.n	80067d8 <_printf_float+0x1f4>
 80067ca:	6822      	ldr	r2, [r4, #0]
 80067cc:	6123      	str	r3, [r4, #16]
 80067ce:	07d2      	lsls	r2, r2, #31
 80067d0:	d5e7      	bpl.n	80067a2 <_printf_float+0x1be>
 80067d2:	3301      	adds	r3, #1
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	e7e4      	b.n	80067a2 <_printf_float+0x1be>
 80067d8:	2101      	movs	r1, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dc01      	bgt.n	80067e2 <_printf_float+0x1fe>
 80067de:	1849      	adds	r1, r1, r1
 80067e0:	1ac9      	subs	r1, r1, r3
 80067e2:	1852      	adds	r2, r2, r1
 80067e4:	e7e9      	b.n	80067ba <_printf_float+0x1d6>
 80067e6:	6822      	ldr	r2, [r4, #0]
 80067e8:	0553      	lsls	r3, r2, #21
 80067ea:	d407      	bmi.n	80067fc <_printf_float+0x218>
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	002a      	movs	r2, r5
 80067f0:	0038      	movs	r0, r7
 80067f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067f4:	47b0      	blx	r6
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d128      	bne.n	800684c <_printf_float+0x268>
 80067fa:	e751      	b.n	80066a0 <_printf_float+0xbc>
 80067fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067fe:	2b65      	cmp	r3, #101	; 0x65
 8006800:	d800      	bhi.n	8006804 <_printf_float+0x220>
 8006802:	e0e1      	b.n	80069c8 <_printf_float+0x3e4>
 8006804:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006806:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006808:	2200      	movs	r2, #0
 800680a:	2300      	movs	r3, #0
 800680c:	f7f9 fe1e 	bl	800044c <__aeabi_dcmpeq>
 8006810:	2800      	cmp	r0, #0
 8006812:	d031      	beq.n	8006878 <_printf_float+0x294>
 8006814:	2301      	movs	r3, #1
 8006816:	0038      	movs	r0, r7
 8006818:	4a34      	ldr	r2, [pc, #208]	; (80068ec <_printf_float+0x308>)
 800681a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800681c:	47b0      	blx	r6
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	d100      	bne.n	8006824 <_printf_float+0x240>
 8006822:	e73d      	b.n	80066a0 <_printf_float+0xbc>
 8006824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006826:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006828:	4293      	cmp	r3, r2
 800682a:	db02      	blt.n	8006832 <_printf_float+0x24e>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	07db      	lsls	r3, r3, #31
 8006830:	d50c      	bpl.n	800684c <_printf_float+0x268>
 8006832:	0038      	movs	r0, r7
 8006834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006836:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006838:	9909      	ldr	r1, [sp, #36]	; 0x24
 800683a:	47b0      	blx	r6
 800683c:	2500      	movs	r5, #0
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	d100      	bne.n	8006844 <_printf_float+0x260>
 8006842:	e72d      	b.n	80066a0 <_printf_float+0xbc>
 8006844:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006846:	3b01      	subs	r3, #1
 8006848:	42ab      	cmp	r3, r5
 800684a:	dc0a      	bgt.n	8006862 <_printf_float+0x27e>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	079b      	lsls	r3, r3, #30
 8006850:	d500      	bpl.n	8006854 <_printf_float+0x270>
 8006852:	e106      	b.n	8006a62 <_printf_float+0x47e>
 8006854:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006856:	68e0      	ldr	r0, [r4, #12]
 8006858:	4298      	cmp	r0, r3
 800685a:	db00      	blt.n	800685e <_printf_float+0x27a>
 800685c:	e722      	b.n	80066a4 <_printf_float+0xc0>
 800685e:	0018      	movs	r0, r3
 8006860:	e720      	b.n	80066a4 <_printf_float+0xc0>
 8006862:	0022      	movs	r2, r4
 8006864:	2301      	movs	r3, #1
 8006866:	0038      	movs	r0, r7
 8006868:	9909      	ldr	r1, [sp, #36]	; 0x24
 800686a:	321a      	adds	r2, #26
 800686c:	47b0      	blx	r6
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	d100      	bne.n	8006874 <_printf_float+0x290>
 8006872:	e715      	b.n	80066a0 <_printf_float+0xbc>
 8006874:	3501      	adds	r5, #1
 8006876:	e7e5      	b.n	8006844 <_printf_float+0x260>
 8006878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800687a:	2b00      	cmp	r3, #0
 800687c:	dc38      	bgt.n	80068f0 <_printf_float+0x30c>
 800687e:	2301      	movs	r3, #1
 8006880:	0038      	movs	r0, r7
 8006882:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <_printf_float+0x308>)
 8006884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006886:	47b0      	blx	r6
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d100      	bne.n	800688e <_printf_float+0x2aa>
 800688c:	e708      	b.n	80066a0 <_printf_float+0xbc>
 800688e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006890:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006892:	4313      	orrs	r3, r2
 8006894:	d102      	bne.n	800689c <_printf_float+0x2b8>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	07db      	lsls	r3, r3, #31
 800689a:	d5d7      	bpl.n	800684c <_printf_float+0x268>
 800689c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800689e:	0038      	movs	r0, r7
 80068a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068a4:	47b0      	blx	r6
 80068a6:	1c43      	adds	r3, r0, #1
 80068a8:	d100      	bne.n	80068ac <_printf_float+0x2c8>
 80068aa:	e6f9      	b.n	80066a0 <_printf_float+0xbc>
 80068ac:	2300      	movs	r3, #0
 80068ae:	930a      	str	r3, [sp, #40]	; 0x28
 80068b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b4:	425b      	negs	r3, r3
 80068b6:	4293      	cmp	r3, r2
 80068b8:	dc01      	bgt.n	80068be <_printf_float+0x2da>
 80068ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068bc:	e797      	b.n	80067ee <_printf_float+0x20a>
 80068be:	0022      	movs	r2, r4
 80068c0:	2301      	movs	r3, #1
 80068c2:	0038      	movs	r0, r7
 80068c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068c6:	321a      	adds	r2, #26
 80068c8:	47b0      	blx	r6
 80068ca:	1c43      	adds	r3, r0, #1
 80068cc:	d100      	bne.n	80068d0 <_printf_float+0x2ec>
 80068ce:	e6e7      	b.n	80066a0 <_printf_float+0xbc>
 80068d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d2:	3301      	adds	r3, #1
 80068d4:	e7eb      	b.n	80068ae <_printf_float+0x2ca>
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	7fefffff 	.word	0x7fefffff
 80068dc:	08009610 	.word	0x08009610
 80068e0:	08009614 	.word	0x08009614
 80068e4:	08009618 	.word	0x08009618
 80068e8:	0800961c 	.word	0x0800961c
 80068ec:	08009620 	.word	0x08009620
 80068f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068f4:	920a      	str	r2, [sp, #40]	; 0x28
 80068f6:	429a      	cmp	r2, r3
 80068f8:	dd00      	ble.n	80068fc <_printf_float+0x318>
 80068fa:	930a      	str	r3, [sp, #40]	; 0x28
 80068fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	dc3c      	bgt.n	800697c <_printf_float+0x398>
 8006902:	2300      	movs	r3, #0
 8006904:	930d      	str	r3, [sp, #52]	; 0x34
 8006906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006908:	43db      	mvns	r3, r3
 800690a:	17db      	asrs	r3, r3, #31
 800690c:	930f      	str	r3, [sp, #60]	; 0x3c
 800690e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006912:	930b      	str	r3, [sp, #44]	; 0x2c
 8006914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006916:	4013      	ands	r3, r2
 8006918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800691e:	4293      	cmp	r3, r2
 8006920:	dc34      	bgt.n	800698c <_printf_float+0x3a8>
 8006922:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006926:	4293      	cmp	r3, r2
 8006928:	db3d      	blt.n	80069a6 <_printf_float+0x3c2>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	07db      	lsls	r3, r3, #31
 800692e:	d43a      	bmi.n	80069a6 <_printf_float+0x3c2>
 8006930:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006934:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	1a52      	subs	r2, r2, r1
 800693a:	920a      	str	r2, [sp, #40]	; 0x28
 800693c:	429a      	cmp	r2, r3
 800693e:	dd00      	ble.n	8006942 <_printf_float+0x35e>
 8006940:	930a      	str	r3, [sp, #40]	; 0x28
 8006942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006944:	2b00      	cmp	r3, #0
 8006946:	dc36      	bgt.n	80069b6 <_printf_float+0x3d2>
 8006948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694a:	2500      	movs	r5, #0
 800694c:	43db      	mvns	r3, r3
 800694e:	17db      	asrs	r3, r3, #31
 8006950:	930b      	str	r3, [sp, #44]	; 0x2c
 8006952:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006956:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800695c:	400a      	ands	r2, r1
 800695e:	1a9b      	subs	r3, r3, r2
 8006960:	42ab      	cmp	r3, r5
 8006962:	dc00      	bgt.n	8006966 <_printf_float+0x382>
 8006964:	e772      	b.n	800684c <_printf_float+0x268>
 8006966:	0022      	movs	r2, r4
 8006968:	2301      	movs	r3, #1
 800696a:	0038      	movs	r0, r7
 800696c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800696e:	321a      	adds	r2, #26
 8006970:	47b0      	blx	r6
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d100      	bne.n	8006978 <_printf_float+0x394>
 8006976:	e693      	b.n	80066a0 <_printf_float+0xbc>
 8006978:	3501      	adds	r5, #1
 800697a:	e7ea      	b.n	8006952 <_printf_float+0x36e>
 800697c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800697e:	002a      	movs	r2, r5
 8006980:	0038      	movs	r0, r7
 8006982:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006984:	47b0      	blx	r6
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	d1bb      	bne.n	8006902 <_printf_float+0x31e>
 800698a:	e689      	b.n	80066a0 <_printf_float+0xbc>
 800698c:	0022      	movs	r2, r4
 800698e:	2301      	movs	r3, #1
 8006990:	0038      	movs	r0, r7
 8006992:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006994:	321a      	adds	r2, #26
 8006996:	47b0      	blx	r6
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d100      	bne.n	800699e <_printf_float+0x3ba>
 800699c:	e680      	b.n	80066a0 <_printf_float+0xbc>
 800699e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a0:	3301      	adds	r3, #1
 80069a2:	930d      	str	r3, [sp, #52]	; 0x34
 80069a4:	e7b3      	b.n	800690e <_printf_float+0x32a>
 80069a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069a8:	0038      	movs	r0, r7
 80069aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069ae:	47b0      	blx	r6
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d1bd      	bne.n	8006930 <_printf_float+0x34c>
 80069b4:	e674      	b.n	80066a0 <_printf_float+0xbc>
 80069b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b8:	0038      	movs	r0, r7
 80069ba:	18ea      	adds	r2, r5, r3
 80069bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c0:	47b0      	blx	r6
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	d1c0      	bne.n	8006948 <_printf_float+0x364>
 80069c6:	e66b      	b.n	80066a0 <_printf_float+0xbc>
 80069c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	dc02      	bgt.n	80069d4 <_printf_float+0x3f0>
 80069ce:	2301      	movs	r3, #1
 80069d0:	421a      	tst	r2, r3
 80069d2:	d034      	beq.n	8006a3e <_printf_float+0x45a>
 80069d4:	2301      	movs	r3, #1
 80069d6:	002a      	movs	r2, r5
 80069d8:	0038      	movs	r0, r7
 80069da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069dc:	47b0      	blx	r6
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	d100      	bne.n	80069e4 <_printf_float+0x400>
 80069e2:	e65d      	b.n	80066a0 <_printf_float+0xbc>
 80069e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069e6:	0038      	movs	r0, r7
 80069e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069ec:	47b0      	blx	r6
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	d100      	bne.n	80069f4 <_printf_float+0x410>
 80069f2:	e655      	b.n	80066a0 <_printf_float+0xbc>
 80069f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80069f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80069f8:	2200      	movs	r2, #0
 80069fa:	2300      	movs	r3, #0
 80069fc:	f7f9 fd26 	bl	800044c <__aeabi_dcmpeq>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d11a      	bne.n	8006a3a <_printf_float+0x456>
 8006a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a06:	1c6a      	adds	r2, r5, #1
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	0038      	movs	r0, r7
 8006a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a0e:	47b0      	blx	r6
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d10e      	bne.n	8006a32 <_printf_float+0x44e>
 8006a14:	e644      	b.n	80066a0 <_printf_float+0xbc>
 8006a16:	0022      	movs	r2, r4
 8006a18:	2301      	movs	r3, #1
 8006a1a:	0038      	movs	r0, r7
 8006a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a1e:	321a      	adds	r2, #26
 8006a20:	47b0      	blx	r6
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	d100      	bne.n	8006a28 <_printf_float+0x444>
 8006a26:	e63b      	b.n	80066a0 <_printf_float+0xbc>
 8006a28:	3501      	adds	r5, #1
 8006a2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	42ab      	cmp	r3, r5
 8006a30:	dcf1      	bgt.n	8006a16 <_printf_float+0x432>
 8006a32:	0022      	movs	r2, r4
 8006a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a36:	3250      	adds	r2, #80	; 0x50
 8006a38:	e6da      	b.n	80067f0 <_printf_float+0x20c>
 8006a3a:	2500      	movs	r5, #0
 8006a3c:	e7f5      	b.n	8006a2a <_printf_float+0x446>
 8006a3e:	002a      	movs	r2, r5
 8006a40:	e7e3      	b.n	8006a0a <_printf_float+0x426>
 8006a42:	0022      	movs	r2, r4
 8006a44:	2301      	movs	r3, #1
 8006a46:	0038      	movs	r0, r7
 8006a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a4a:	3219      	adds	r2, #25
 8006a4c:	47b0      	blx	r6
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d100      	bne.n	8006a54 <_printf_float+0x470>
 8006a52:	e625      	b.n	80066a0 <_printf_float+0xbc>
 8006a54:	3501      	adds	r5, #1
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a5a:	1a9b      	subs	r3, r3, r2
 8006a5c:	42ab      	cmp	r3, r5
 8006a5e:	dcf0      	bgt.n	8006a42 <_printf_float+0x45e>
 8006a60:	e6f8      	b.n	8006854 <_printf_float+0x270>
 8006a62:	2500      	movs	r5, #0
 8006a64:	e7f7      	b.n	8006a56 <_printf_float+0x472>
 8006a66:	46c0      	nop			; (mov r8, r8)

08006a68 <_printf_common>:
 8006a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a6a:	0015      	movs	r5, r2
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	688a      	ldr	r2, [r1, #8]
 8006a70:	690b      	ldr	r3, [r1, #16]
 8006a72:	000c      	movs	r4, r1
 8006a74:	9000      	str	r0, [sp, #0]
 8006a76:	4293      	cmp	r3, r2
 8006a78:	da00      	bge.n	8006a7c <_printf_common+0x14>
 8006a7a:	0013      	movs	r3, r2
 8006a7c:	0022      	movs	r2, r4
 8006a7e:	602b      	str	r3, [r5, #0]
 8006a80:	3243      	adds	r2, #67	; 0x43
 8006a82:	7812      	ldrb	r2, [r2, #0]
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	d001      	beq.n	8006a8c <_printf_common+0x24>
 8006a88:	3301      	adds	r3, #1
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	069b      	lsls	r3, r3, #26
 8006a90:	d502      	bpl.n	8006a98 <_printf_common+0x30>
 8006a92:	682b      	ldr	r3, [r5, #0]
 8006a94:	3302      	adds	r3, #2
 8006a96:	602b      	str	r3, [r5, #0]
 8006a98:	6822      	ldr	r2, [r4, #0]
 8006a9a:	2306      	movs	r3, #6
 8006a9c:	0017      	movs	r7, r2
 8006a9e:	401f      	ands	r7, r3
 8006aa0:	421a      	tst	r2, r3
 8006aa2:	d027      	beq.n	8006af4 <_printf_common+0x8c>
 8006aa4:	0023      	movs	r3, r4
 8006aa6:	3343      	adds	r3, #67	; 0x43
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	1e5a      	subs	r2, r3, #1
 8006aac:	4193      	sbcs	r3, r2
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	0692      	lsls	r2, r2, #26
 8006ab2:	d430      	bmi.n	8006b16 <_printf_common+0xae>
 8006ab4:	0022      	movs	r2, r4
 8006ab6:	9901      	ldr	r1, [sp, #4]
 8006ab8:	9800      	ldr	r0, [sp, #0]
 8006aba:	9e08      	ldr	r6, [sp, #32]
 8006abc:	3243      	adds	r2, #67	; 0x43
 8006abe:	47b0      	blx	r6
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d025      	beq.n	8006b10 <_printf_common+0xa8>
 8006ac4:	2306      	movs	r3, #6
 8006ac6:	6820      	ldr	r0, [r4, #0]
 8006ac8:	682a      	ldr	r2, [r5, #0]
 8006aca:	68e1      	ldr	r1, [r4, #12]
 8006acc:	2500      	movs	r5, #0
 8006ace:	4003      	ands	r3, r0
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d103      	bne.n	8006adc <_printf_common+0x74>
 8006ad4:	1a8d      	subs	r5, r1, r2
 8006ad6:	43eb      	mvns	r3, r5
 8006ad8:	17db      	asrs	r3, r3, #31
 8006ada:	401d      	ands	r5, r3
 8006adc:	68a3      	ldr	r3, [r4, #8]
 8006ade:	6922      	ldr	r2, [r4, #16]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	dd01      	ble.n	8006ae8 <_printf_common+0x80>
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	18ed      	adds	r5, r5, r3
 8006ae8:	2700      	movs	r7, #0
 8006aea:	42bd      	cmp	r5, r7
 8006aec:	d120      	bne.n	8006b30 <_printf_common+0xc8>
 8006aee:	2000      	movs	r0, #0
 8006af0:	e010      	b.n	8006b14 <_printf_common+0xac>
 8006af2:	3701      	adds	r7, #1
 8006af4:	68e3      	ldr	r3, [r4, #12]
 8006af6:	682a      	ldr	r2, [r5, #0]
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	42bb      	cmp	r3, r7
 8006afc:	ddd2      	ble.n	8006aa4 <_printf_common+0x3c>
 8006afe:	0022      	movs	r2, r4
 8006b00:	2301      	movs	r3, #1
 8006b02:	9901      	ldr	r1, [sp, #4]
 8006b04:	9800      	ldr	r0, [sp, #0]
 8006b06:	9e08      	ldr	r6, [sp, #32]
 8006b08:	3219      	adds	r2, #25
 8006b0a:	47b0      	blx	r6
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d1f0      	bne.n	8006af2 <_printf_common+0x8a>
 8006b10:	2001      	movs	r0, #1
 8006b12:	4240      	negs	r0, r0
 8006b14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b16:	2030      	movs	r0, #48	; 0x30
 8006b18:	18e1      	adds	r1, r4, r3
 8006b1a:	3143      	adds	r1, #67	; 0x43
 8006b1c:	7008      	strb	r0, [r1, #0]
 8006b1e:	0021      	movs	r1, r4
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	3145      	adds	r1, #69	; 0x45
 8006b24:	7809      	ldrb	r1, [r1, #0]
 8006b26:	18a2      	adds	r2, r4, r2
 8006b28:	3243      	adds	r2, #67	; 0x43
 8006b2a:	3302      	adds	r3, #2
 8006b2c:	7011      	strb	r1, [r2, #0]
 8006b2e:	e7c1      	b.n	8006ab4 <_printf_common+0x4c>
 8006b30:	0022      	movs	r2, r4
 8006b32:	2301      	movs	r3, #1
 8006b34:	9901      	ldr	r1, [sp, #4]
 8006b36:	9800      	ldr	r0, [sp, #0]
 8006b38:	9e08      	ldr	r6, [sp, #32]
 8006b3a:	321a      	adds	r2, #26
 8006b3c:	47b0      	blx	r6
 8006b3e:	1c43      	adds	r3, r0, #1
 8006b40:	d0e6      	beq.n	8006b10 <_printf_common+0xa8>
 8006b42:	3701      	adds	r7, #1
 8006b44:	e7d1      	b.n	8006aea <_printf_common+0x82>
	...

08006b48 <_printf_i>:
 8006b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4a:	b08b      	sub	sp, #44	; 0x2c
 8006b4c:	9206      	str	r2, [sp, #24]
 8006b4e:	000a      	movs	r2, r1
 8006b50:	3243      	adds	r2, #67	; 0x43
 8006b52:	9307      	str	r3, [sp, #28]
 8006b54:	9005      	str	r0, [sp, #20]
 8006b56:	9204      	str	r2, [sp, #16]
 8006b58:	7e0a      	ldrb	r2, [r1, #24]
 8006b5a:	000c      	movs	r4, r1
 8006b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b5e:	2a78      	cmp	r2, #120	; 0x78
 8006b60:	d807      	bhi.n	8006b72 <_printf_i+0x2a>
 8006b62:	2a62      	cmp	r2, #98	; 0x62
 8006b64:	d809      	bhi.n	8006b7a <_printf_i+0x32>
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	d100      	bne.n	8006b6c <_printf_i+0x24>
 8006b6a:	e0c1      	b.n	8006cf0 <_printf_i+0x1a8>
 8006b6c:	2a58      	cmp	r2, #88	; 0x58
 8006b6e:	d100      	bne.n	8006b72 <_printf_i+0x2a>
 8006b70:	e08c      	b.n	8006c8c <_printf_i+0x144>
 8006b72:	0026      	movs	r6, r4
 8006b74:	3642      	adds	r6, #66	; 0x42
 8006b76:	7032      	strb	r2, [r6, #0]
 8006b78:	e022      	b.n	8006bc0 <_printf_i+0x78>
 8006b7a:	0010      	movs	r0, r2
 8006b7c:	3863      	subs	r0, #99	; 0x63
 8006b7e:	2815      	cmp	r0, #21
 8006b80:	d8f7      	bhi.n	8006b72 <_printf_i+0x2a>
 8006b82:	f7f9 fad3 	bl	800012c <__gnu_thumb1_case_shi>
 8006b86:	0016      	.short	0x0016
 8006b88:	fff6001f 	.word	0xfff6001f
 8006b8c:	fff6fff6 	.word	0xfff6fff6
 8006b90:	001ffff6 	.word	0x001ffff6
 8006b94:	fff6fff6 	.word	0xfff6fff6
 8006b98:	fff6fff6 	.word	0xfff6fff6
 8006b9c:	003600a8 	.word	0x003600a8
 8006ba0:	fff6009a 	.word	0xfff6009a
 8006ba4:	00b9fff6 	.word	0x00b9fff6
 8006ba8:	0036fff6 	.word	0x0036fff6
 8006bac:	fff6fff6 	.word	0xfff6fff6
 8006bb0:	009e      	.short	0x009e
 8006bb2:	0026      	movs	r6, r4
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	3642      	adds	r6, #66	; 0x42
 8006bb8:	1d11      	adds	r1, r2, #4
 8006bba:	6019      	str	r1, [r3, #0]
 8006bbc:	6813      	ldr	r3, [r2, #0]
 8006bbe:	7033      	strb	r3, [r6, #0]
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0a7      	b.n	8006d14 <_printf_i+0x1cc>
 8006bc4:	6808      	ldr	r0, [r1, #0]
 8006bc6:	6819      	ldr	r1, [r3, #0]
 8006bc8:	1d0a      	adds	r2, r1, #4
 8006bca:	0605      	lsls	r5, r0, #24
 8006bcc:	d50b      	bpl.n	8006be6 <_printf_i+0x9e>
 8006bce:	680d      	ldr	r5, [r1, #0]
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	2d00      	cmp	r5, #0
 8006bd4:	da03      	bge.n	8006bde <_printf_i+0x96>
 8006bd6:	232d      	movs	r3, #45	; 0x2d
 8006bd8:	9a04      	ldr	r2, [sp, #16]
 8006bda:	426d      	negs	r5, r5
 8006bdc:	7013      	strb	r3, [r2, #0]
 8006bde:	4b61      	ldr	r3, [pc, #388]	; (8006d64 <_printf_i+0x21c>)
 8006be0:	270a      	movs	r7, #10
 8006be2:	9303      	str	r3, [sp, #12]
 8006be4:	e01b      	b.n	8006c1e <_printf_i+0xd6>
 8006be6:	680d      	ldr	r5, [r1, #0]
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	0641      	lsls	r1, r0, #25
 8006bec:	d5f1      	bpl.n	8006bd2 <_printf_i+0x8a>
 8006bee:	b22d      	sxth	r5, r5
 8006bf0:	e7ef      	b.n	8006bd2 <_printf_i+0x8a>
 8006bf2:	680d      	ldr	r5, [r1, #0]
 8006bf4:	6819      	ldr	r1, [r3, #0]
 8006bf6:	1d08      	adds	r0, r1, #4
 8006bf8:	6018      	str	r0, [r3, #0]
 8006bfa:	062e      	lsls	r6, r5, #24
 8006bfc:	d501      	bpl.n	8006c02 <_printf_i+0xba>
 8006bfe:	680d      	ldr	r5, [r1, #0]
 8006c00:	e003      	b.n	8006c0a <_printf_i+0xc2>
 8006c02:	066d      	lsls	r5, r5, #25
 8006c04:	d5fb      	bpl.n	8006bfe <_printf_i+0xb6>
 8006c06:	680d      	ldr	r5, [r1, #0]
 8006c08:	b2ad      	uxth	r5, r5
 8006c0a:	4b56      	ldr	r3, [pc, #344]	; (8006d64 <_printf_i+0x21c>)
 8006c0c:	2708      	movs	r7, #8
 8006c0e:	9303      	str	r3, [sp, #12]
 8006c10:	2a6f      	cmp	r2, #111	; 0x6f
 8006c12:	d000      	beq.n	8006c16 <_printf_i+0xce>
 8006c14:	3702      	adds	r7, #2
 8006c16:	0023      	movs	r3, r4
 8006c18:	2200      	movs	r2, #0
 8006c1a:	3343      	adds	r3, #67	; 0x43
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	6863      	ldr	r3, [r4, #4]
 8006c20:	60a3      	str	r3, [r4, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	db03      	blt.n	8006c2e <_printf_i+0xe6>
 8006c26:	2204      	movs	r2, #4
 8006c28:	6821      	ldr	r1, [r4, #0]
 8006c2a:	4391      	bics	r1, r2
 8006c2c:	6021      	str	r1, [r4, #0]
 8006c2e:	2d00      	cmp	r5, #0
 8006c30:	d102      	bne.n	8006c38 <_printf_i+0xf0>
 8006c32:	9e04      	ldr	r6, [sp, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00c      	beq.n	8006c52 <_printf_i+0x10a>
 8006c38:	9e04      	ldr	r6, [sp, #16]
 8006c3a:	0028      	movs	r0, r5
 8006c3c:	0039      	movs	r1, r7
 8006c3e:	f7f9 fb05 	bl	800024c <__aeabi_uidivmod>
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	3e01      	subs	r6, #1
 8006c46:	5c5b      	ldrb	r3, [r3, r1]
 8006c48:	7033      	strb	r3, [r6, #0]
 8006c4a:	002b      	movs	r3, r5
 8006c4c:	0005      	movs	r5, r0
 8006c4e:	429f      	cmp	r7, r3
 8006c50:	d9f3      	bls.n	8006c3a <_printf_i+0xf2>
 8006c52:	2f08      	cmp	r7, #8
 8006c54:	d109      	bne.n	8006c6a <_printf_i+0x122>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	07db      	lsls	r3, r3, #31
 8006c5a:	d506      	bpl.n	8006c6a <_printf_i+0x122>
 8006c5c:	6863      	ldr	r3, [r4, #4]
 8006c5e:	6922      	ldr	r2, [r4, #16]
 8006c60:	4293      	cmp	r3, r2
 8006c62:	dc02      	bgt.n	8006c6a <_printf_i+0x122>
 8006c64:	2330      	movs	r3, #48	; 0x30
 8006c66:	3e01      	subs	r6, #1
 8006c68:	7033      	strb	r3, [r6, #0]
 8006c6a:	9b04      	ldr	r3, [sp, #16]
 8006c6c:	1b9b      	subs	r3, r3, r6
 8006c6e:	6123      	str	r3, [r4, #16]
 8006c70:	9b07      	ldr	r3, [sp, #28]
 8006c72:	0021      	movs	r1, r4
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	9805      	ldr	r0, [sp, #20]
 8006c78:	9b06      	ldr	r3, [sp, #24]
 8006c7a:	aa09      	add	r2, sp, #36	; 0x24
 8006c7c:	f7ff fef4 	bl	8006a68 <_printf_common>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d14c      	bne.n	8006d1e <_printf_i+0x1d6>
 8006c84:	2001      	movs	r0, #1
 8006c86:	4240      	negs	r0, r0
 8006c88:	b00b      	add	sp, #44	; 0x2c
 8006c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c8c:	3145      	adds	r1, #69	; 0x45
 8006c8e:	700a      	strb	r2, [r1, #0]
 8006c90:	4a34      	ldr	r2, [pc, #208]	; (8006d64 <_printf_i+0x21c>)
 8006c92:	9203      	str	r2, [sp, #12]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	6821      	ldr	r1, [r4, #0]
 8006c98:	ca20      	ldmia	r2!, {r5}
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	0608      	lsls	r0, r1, #24
 8006c9e:	d516      	bpl.n	8006cce <_printf_i+0x186>
 8006ca0:	07cb      	lsls	r3, r1, #31
 8006ca2:	d502      	bpl.n	8006caa <_printf_i+0x162>
 8006ca4:	2320      	movs	r3, #32
 8006ca6:	4319      	orrs	r1, r3
 8006ca8:	6021      	str	r1, [r4, #0]
 8006caa:	2710      	movs	r7, #16
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	d1b2      	bne.n	8006c16 <_printf_i+0xce>
 8006cb0:	2320      	movs	r3, #32
 8006cb2:	6822      	ldr	r2, [r4, #0]
 8006cb4:	439a      	bics	r2, r3
 8006cb6:	6022      	str	r2, [r4, #0]
 8006cb8:	e7ad      	b.n	8006c16 <_printf_i+0xce>
 8006cba:	2220      	movs	r2, #32
 8006cbc:	6809      	ldr	r1, [r1, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	6022      	str	r2, [r4, #0]
 8006cc2:	0022      	movs	r2, r4
 8006cc4:	2178      	movs	r1, #120	; 0x78
 8006cc6:	3245      	adds	r2, #69	; 0x45
 8006cc8:	7011      	strb	r1, [r2, #0]
 8006cca:	4a27      	ldr	r2, [pc, #156]	; (8006d68 <_printf_i+0x220>)
 8006ccc:	e7e1      	b.n	8006c92 <_printf_i+0x14a>
 8006cce:	0648      	lsls	r0, r1, #25
 8006cd0:	d5e6      	bpl.n	8006ca0 <_printf_i+0x158>
 8006cd2:	b2ad      	uxth	r5, r5
 8006cd4:	e7e4      	b.n	8006ca0 <_printf_i+0x158>
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	680d      	ldr	r5, [r1, #0]
 8006cda:	1d10      	adds	r0, r2, #4
 8006cdc:	6949      	ldr	r1, [r1, #20]
 8006cde:	6018      	str	r0, [r3, #0]
 8006ce0:	6813      	ldr	r3, [r2, #0]
 8006ce2:	062e      	lsls	r6, r5, #24
 8006ce4:	d501      	bpl.n	8006cea <_printf_i+0x1a2>
 8006ce6:	6019      	str	r1, [r3, #0]
 8006ce8:	e002      	b.n	8006cf0 <_printf_i+0x1a8>
 8006cea:	066d      	lsls	r5, r5, #25
 8006cec:	d5fb      	bpl.n	8006ce6 <_printf_i+0x19e>
 8006cee:	8019      	strh	r1, [r3, #0]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9e04      	ldr	r6, [sp, #16]
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	e7bb      	b.n	8006c70 <_printf_i+0x128>
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	1d11      	adds	r1, r2, #4
 8006cfc:	6019      	str	r1, [r3, #0]
 8006cfe:	6816      	ldr	r6, [r2, #0]
 8006d00:	2100      	movs	r1, #0
 8006d02:	0030      	movs	r0, r6
 8006d04:	6862      	ldr	r2, [r4, #4]
 8006d06:	f001 f805 	bl	8007d14 <memchr>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d001      	beq.n	8006d12 <_printf_i+0x1ca>
 8006d0e:	1b80      	subs	r0, r0, r6
 8006d10:	6060      	str	r0, [r4, #4]
 8006d12:	6863      	ldr	r3, [r4, #4]
 8006d14:	6123      	str	r3, [r4, #16]
 8006d16:	2300      	movs	r3, #0
 8006d18:	9a04      	ldr	r2, [sp, #16]
 8006d1a:	7013      	strb	r3, [r2, #0]
 8006d1c:	e7a8      	b.n	8006c70 <_printf_i+0x128>
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	0032      	movs	r2, r6
 8006d22:	9906      	ldr	r1, [sp, #24]
 8006d24:	9805      	ldr	r0, [sp, #20]
 8006d26:	9d07      	ldr	r5, [sp, #28]
 8006d28:	47a8      	blx	r5
 8006d2a:	1c43      	adds	r3, r0, #1
 8006d2c:	d0aa      	beq.n	8006c84 <_printf_i+0x13c>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	079b      	lsls	r3, r3, #30
 8006d32:	d415      	bmi.n	8006d60 <_printf_i+0x218>
 8006d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d36:	68e0      	ldr	r0, [r4, #12]
 8006d38:	4298      	cmp	r0, r3
 8006d3a:	daa5      	bge.n	8006c88 <_printf_i+0x140>
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	e7a3      	b.n	8006c88 <_printf_i+0x140>
 8006d40:	0022      	movs	r2, r4
 8006d42:	2301      	movs	r3, #1
 8006d44:	9906      	ldr	r1, [sp, #24]
 8006d46:	9805      	ldr	r0, [sp, #20]
 8006d48:	9e07      	ldr	r6, [sp, #28]
 8006d4a:	3219      	adds	r2, #25
 8006d4c:	47b0      	blx	r6
 8006d4e:	1c43      	adds	r3, r0, #1
 8006d50:	d098      	beq.n	8006c84 <_printf_i+0x13c>
 8006d52:	3501      	adds	r5, #1
 8006d54:	68e3      	ldr	r3, [r4, #12]
 8006d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d58:	1a9b      	subs	r3, r3, r2
 8006d5a:	42ab      	cmp	r3, r5
 8006d5c:	dcf0      	bgt.n	8006d40 <_printf_i+0x1f8>
 8006d5e:	e7e9      	b.n	8006d34 <_printf_i+0x1ec>
 8006d60:	2500      	movs	r5, #0
 8006d62:	e7f7      	b.n	8006d54 <_printf_i+0x20c>
 8006d64:	08009622 	.word	0x08009622
 8006d68:	08009633 	.word	0x08009633

08006d6c <iprintf>:
 8006d6c:	b40f      	push	{r0, r1, r2, r3}
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <iprintf+0x30>)
 8006d70:	b513      	push	{r0, r1, r4, lr}
 8006d72:	681c      	ldr	r4, [r3, #0]
 8006d74:	2c00      	cmp	r4, #0
 8006d76:	d005      	beq.n	8006d84 <iprintf+0x18>
 8006d78:	69a3      	ldr	r3, [r4, #24]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <iprintf+0x18>
 8006d7e:	0020      	movs	r0, r4
 8006d80:	f000 ff16 	bl	8007bb0 <__sinit>
 8006d84:	ab05      	add	r3, sp, #20
 8006d86:	0020      	movs	r0, r4
 8006d88:	9a04      	ldr	r2, [sp, #16]
 8006d8a:	68a1      	ldr	r1, [r4, #8]
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	f001 fca7 	bl	80086e0 <_vfiprintf_r>
 8006d92:	bc16      	pop	{r1, r2, r4}
 8006d94:	bc08      	pop	{r3}
 8006d96:	b004      	add	sp, #16
 8006d98:	4718      	bx	r3
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	2000001c 	.word	0x2000001c

08006da0 <quorem>:
 8006da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da2:	0006      	movs	r6, r0
 8006da4:	690b      	ldr	r3, [r1, #16]
 8006da6:	6932      	ldr	r2, [r6, #16]
 8006da8:	b087      	sub	sp, #28
 8006daa:	2000      	movs	r0, #0
 8006dac:	9103      	str	r1, [sp, #12]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	db65      	blt.n	8006e7e <quorem+0xde>
 8006db2:	3b01      	subs	r3, #1
 8006db4:	009c      	lsls	r4, r3, #2
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	000b      	movs	r3, r1
 8006dba:	3314      	adds	r3, #20
 8006dbc:	9305      	str	r3, [sp, #20]
 8006dbe:	191b      	adds	r3, r3, r4
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	0033      	movs	r3, r6
 8006dc4:	3314      	adds	r3, #20
 8006dc6:	9302      	str	r3, [sp, #8]
 8006dc8:	191c      	adds	r4, r3, r4
 8006dca:	9b04      	ldr	r3, [sp, #16]
 8006dcc:	6827      	ldr	r7, [r4, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	0038      	movs	r0, r7
 8006dd2:	1c5d      	adds	r5, r3, #1
 8006dd4:	0029      	movs	r1, r5
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	f7f9 f9b2 	bl	8000140 <__udivsi3>
 8006ddc:	9001      	str	r0, [sp, #4]
 8006dde:	42af      	cmp	r7, r5
 8006de0:	d324      	bcc.n	8006e2c <quorem+0x8c>
 8006de2:	2500      	movs	r5, #0
 8006de4:	46ac      	mov	ip, r5
 8006de6:	9802      	ldr	r0, [sp, #8]
 8006de8:	9f05      	ldr	r7, [sp, #20]
 8006dea:	cf08      	ldmia	r7!, {r3}
 8006dec:	9a01      	ldr	r2, [sp, #4]
 8006dee:	b299      	uxth	r1, r3
 8006df0:	4351      	muls	r1, r2
 8006df2:	0c1b      	lsrs	r3, r3, #16
 8006df4:	4353      	muls	r3, r2
 8006df6:	1949      	adds	r1, r1, r5
 8006df8:	0c0a      	lsrs	r2, r1, #16
 8006dfa:	189b      	adds	r3, r3, r2
 8006dfc:	6802      	ldr	r2, [r0, #0]
 8006dfe:	b289      	uxth	r1, r1
 8006e00:	b292      	uxth	r2, r2
 8006e02:	4462      	add	r2, ip
 8006e04:	1a52      	subs	r2, r2, r1
 8006e06:	6801      	ldr	r1, [r0, #0]
 8006e08:	0c1d      	lsrs	r5, r3, #16
 8006e0a:	0c09      	lsrs	r1, r1, #16
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	1acb      	subs	r3, r1, r3
 8006e10:	1411      	asrs	r1, r2, #16
 8006e12:	185b      	adds	r3, r3, r1
 8006e14:	1419      	asrs	r1, r3, #16
 8006e16:	b292      	uxth	r2, r2
 8006e18:	041b      	lsls	r3, r3, #16
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	9b04      	ldr	r3, [sp, #16]
 8006e1e:	468c      	mov	ip, r1
 8006e20:	c004      	stmia	r0!, {r2}
 8006e22:	42bb      	cmp	r3, r7
 8006e24:	d2e1      	bcs.n	8006dea <quorem+0x4a>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d030      	beq.n	8006e8e <quorem+0xee>
 8006e2c:	0030      	movs	r0, r6
 8006e2e:	9903      	ldr	r1, [sp, #12]
 8006e30:	f001 fa08 	bl	8008244 <__mcmp>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	db21      	blt.n	8006e7c <quorem+0xdc>
 8006e38:	0030      	movs	r0, r6
 8006e3a:	2400      	movs	r4, #0
 8006e3c:	9b01      	ldr	r3, [sp, #4]
 8006e3e:	9903      	ldr	r1, [sp, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	3014      	adds	r0, #20
 8006e46:	3114      	adds	r1, #20
 8006e48:	6803      	ldr	r3, [r0, #0]
 8006e4a:	c920      	ldmia	r1!, {r5}
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	1914      	adds	r4, r2, r4
 8006e50:	b2aa      	uxth	r2, r5
 8006e52:	1aa2      	subs	r2, r4, r2
 8006e54:	0c1b      	lsrs	r3, r3, #16
 8006e56:	0c2d      	lsrs	r5, r5, #16
 8006e58:	1414      	asrs	r4, r2, #16
 8006e5a:	1b5b      	subs	r3, r3, r5
 8006e5c:	191b      	adds	r3, r3, r4
 8006e5e:	141c      	asrs	r4, r3, #16
 8006e60:	b292      	uxth	r2, r2
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	4313      	orrs	r3, r2
 8006e66:	c008      	stmia	r0!, {r3}
 8006e68:	9b04      	ldr	r3, [sp, #16]
 8006e6a:	428b      	cmp	r3, r1
 8006e6c:	d2ec      	bcs.n	8006e48 <quorem+0xa8>
 8006e6e:	9b00      	ldr	r3, [sp, #0]
 8006e70:	9a02      	ldr	r2, [sp, #8]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	18d3      	adds	r3, r2, r3
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	2a00      	cmp	r2, #0
 8006e7a:	d015      	beq.n	8006ea8 <quorem+0x108>
 8006e7c:	9801      	ldr	r0, [sp, #4]
 8006e7e:	b007      	add	sp, #28
 8006e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <quorem+0xf6>
 8006e88:	9b00      	ldr	r3, [sp, #0]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	9b02      	ldr	r3, [sp, #8]
 8006e90:	3c04      	subs	r4, #4
 8006e92:	42a3      	cmp	r3, r4
 8006e94:	d3f5      	bcc.n	8006e82 <quorem+0xe2>
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	6133      	str	r3, [r6, #16]
 8006e9a:	e7c7      	b.n	8006e2c <quorem+0x8c>
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	2a00      	cmp	r2, #0
 8006ea0:	d106      	bne.n	8006eb0 <quorem+0x110>
 8006ea2:	9a00      	ldr	r2, [sp, #0]
 8006ea4:	3a01      	subs	r2, #1
 8006ea6:	9200      	str	r2, [sp, #0]
 8006ea8:	9a02      	ldr	r2, [sp, #8]
 8006eaa:	3b04      	subs	r3, #4
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d3f5      	bcc.n	8006e9c <quorem+0xfc>
 8006eb0:	9b00      	ldr	r3, [sp, #0]
 8006eb2:	6133      	str	r3, [r6, #16]
 8006eb4:	e7e2      	b.n	8006e7c <quorem+0xdc>
	...

08006eb8 <_dtoa_r>:
 8006eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eba:	b09d      	sub	sp, #116	; 0x74
 8006ebc:	9202      	str	r2, [sp, #8]
 8006ebe:	9303      	str	r3, [sp, #12]
 8006ec0:	9b02      	ldr	r3, [sp, #8]
 8006ec2:	9c03      	ldr	r4, [sp, #12]
 8006ec4:	9308      	str	r3, [sp, #32]
 8006ec6:	9409      	str	r4, [sp, #36]	; 0x24
 8006ec8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006eca:	0007      	movs	r7, r0
 8006ecc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006ece:	2c00      	cmp	r4, #0
 8006ed0:	d10e      	bne.n	8006ef0 <_dtoa_r+0x38>
 8006ed2:	2010      	movs	r0, #16
 8006ed4:	f000 ff14 	bl	8007d00 <malloc>
 8006ed8:	1e02      	subs	r2, r0, #0
 8006eda:	6278      	str	r0, [r7, #36]	; 0x24
 8006edc:	d104      	bne.n	8006ee8 <_dtoa_r+0x30>
 8006ede:	21ea      	movs	r1, #234	; 0xea
 8006ee0:	4bc7      	ldr	r3, [pc, #796]	; (8007200 <_dtoa_r+0x348>)
 8006ee2:	48c8      	ldr	r0, [pc, #800]	; (8007204 <_dtoa_r+0x34c>)
 8006ee4:	f001 fe76 	bl	8008bd4 <__assert_func>
 8006ee8:	6044      	str	r4, [r0, #4]
 8006eea:	6084      	str	r4, [r0, #8]
 8006eec:	6004      	str	r4, [r0, #0]
 8006eee:	60c4      	str	r4, [r0, #12]
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	d00a      	beq.n	8006f0e <_dtoa_r+0x56>
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	2301      	movs	r3, #1
 8006efc:	4093      	lsls	r3, r2
 8006efe:	604a      	str	r2, [r1, #4]
 8006f00:	608b      	str	r3, [r1, #8]
 8006f02:	0038      	movs	r0, r7
 8006f04:	f000 ff5e 	bl	8007dc4 <_Bfree>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	da20      	bge.n	8006f56 <_dtoa_r+0x9e>
 8006f14:	2301      	movs	r3, #1
 8006f16:	602b      	str	r3, [r5, #0]
 8006f18:	9b03      	ldr	r3, [sp, #12]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f22:	4bb9      	ldr	r3, [pc, #740]	; (8007208 <_dtoa_r+0x350>)
 8006f24:	4ab8      	ldr	r2, [pc, #736]	; (8007208 <_dtoa_r+0x350>)
 8006f26:	402b      	ands	r3, r5
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d117      	bne.n	8006f5c <_dtoa_r+0xa4>
 8006f2c:	4bb7      	ldr	r3, [pc, #732]	; (800720c <_dtoa_r+0x354>)
 8006f2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f30:	0328      	lsls	r0, r5, #12
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	9b02      	ldr	r3, [sp, #8]
 8006f36:	0b00      	lsrs	r0, r0, #12
 8006f38:	4318      	orrs	r0, r3
 8006f3a:	d101      	bne.n	8006f40 <_dtoa_r+0x88>
 8006f3c:	f000 fdbf 	bl	8007abe <_dtoa_r+0xc06>
 8006f40:	48b3      	ldr	r0, [pc, #716]	; (8007210 <_dtoa_r+0x358>)
 8006f42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f44:	9006      	str	r0, [sp, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <_dtoa_r+0x98>
 8006f4a:	4bb2      	ldr	r3, [pc, #712]	; (8007214 <_dtoa_r+0x35c>)
 8006f4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	9806      	ldr	r0, [sp, #24]
 8006f52:	b01d      	add	sp, #116	; 0x74
 8006f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f56:	2300      	movs	r3, #0
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	e7e1      	b.n	8006f20 <_dtoa_r+0x68>
 8006f5c:	9b08      	ldr	r3, [sp, #32]
 8006f5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006f60:	9312      	str	r3, [sp, #72]	; 0x48
 8006f62:	9413      	str	r4, [sp, #76]	; 0x4c
 8006f64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f7f9 fa6e 	bl	800044c <__aeabi_dcmpeq>
 8006f70:	1e04      	subs	r4, r0, #0
 8006f72:	d009      	beq.n	8006f88 <_dtoa_r+0xd0>
 8006f74:	2301      	movs	r3, #1
 8006f76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	4ba7      	ldr	r3, [pc, #668]	; (8007218 <_dtoa_r+0x360>)
 8006f7c:	9306      	str	r3, [sp, #24]
 8006f7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0e5      	beq.n	8006f50 <_dtoa_r+0x98>
 8006f84:	4ba5      	ldr	r3, [pc, #660]	; (800721c <_dtoa_r+0x364>)
 8006f86:	e7e1      	b.n	8006f4c <_dtoa_r+0x94>
 8006f88:	ab1a      	add	r3, sp, #104	; 0x68
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	ab1b      	add	r3, sp, #108	; 0x6c
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	0038      	movs	r0, r7
 8006f92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f96:	f001 fa09 	bl	80083ac <__d2b>
 8006f9a:	006e      	lsls	r6, r5, #1
 8006f9c:	9005      	str	r0, [sp, #20]
 8006f9e:	0d76      	lsrs	r6, r6, #21
 8006fa0:	d100      	bne.n	8006fa4 <_dtoa_r+0xec>
 8006fa2:	e07c      	b.n	800709e <_dtoa_r+0x1e6>
 8006fa4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006fa6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006faa:	4a9d      	ldr	r2, [pc, #628]	; (8007220 <_dtoa_r+0x368>)
 8006fac:	031b      	lsls	r3, r3, #12
 8006fae:	0b1b      	lsrs	r3, r3, #12
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	0011      	movs	r1, r2
 8006fb4:	4b9b      	ldr	r3, [pc, #620]	; (8007224 <_dtoa_r+0x36c>)
 8006fb6:	9418      	str	r4, [sp, #96]	; 0x60
 8006fb8:	18f6      	adds	r6, r6, r3
 8006fba:	2200      	movs	r2, #0
 8006fbc:	4b9a      	ldr	r3, [pc, #616]	; (8007228 <_dtoa_r+0x370>)
 8006fbe:	f7fa ff2f 	bl	8001e20 <__aeabi_dsub>
 8006fc2:	4a9a      	ldr	r2, [pc, #616]	; (800722c <_dtoa_r+0x374>)
 8006fc4:	4b9a      	ldr	r3, [pc, #616]	; (8007230 <_dtoa_r+0x378>)
 8006fc6:	f7fa fcbf 	bl	8001948 <__aeabi_dmul>
 8006fca:	4a9a      	ldr	r2, [pc, #616]	; (8007234 <_dtoa_r+0x37c>)
 8006fcc:	4b9a      	ldr	r3, [pc, #616]	; (8007238 <_dtoa_r+0x380>)
 8006fce:	f7f9 fd7d 	bl	8000acc <__aeabi_dadd>
 8006fd2:	0004      	movs	r4, r0
 8006fd4:	0030      	movs	r0, r6
 8006fd6:	000d      	movs	r5, r1
 8006fd8:	f7fb fb08 	bl	80025ec <__aeabi_i2d>
 8006fdc:	4a97      	ldr	r2, [pc, #604]	; (800723c <_dtoa_r+0x384>)
 8006fde:	4b98      	ldr	r3, [pc, #608]	; (8007240 <_dtoa_r+0x388>)
 8006fe0:	f7fa fcb2 	bl	8001948 <__aeabi_dmul>
 8006fe4:	0002      	movs	r2, r0
 8006fe6:	000b      	movs	r3, r1
 8006fe8:	0020      	movs	r0, r4
 8006fea:	0029      	movs	r1, r5
 8006fec:	f7f9 fd6e 	bl	8000acc <__aeabi_dadd>
 8006ff0:	0004      	movs	r4, r0
 8006ff2:	000d      	movs	r5, r1
 8006ff4:	f7fb fac4 	bl	8002580 <__aeabi_d2iz>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	9002      	str	r0, [sp, #8]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	0020      	movs	r0, r4
 8007000:	0029      	movs	r1, r5
 8007002:	f7f9 fa29 	bl	8000458 <__aeabi_dcmplt>
 8007006:	2800      	cmp	r0, #0
 8007008:	d00b      	beq.n	8007022 <_dtoa_r+0x16a>
 800700a:	9802      	ldr	r0, [sp, #8]
 800700c:	f7fb faee 	bl	80025ec <__aeabi_i2d>
 8007010:	002b      	movs	r3, r5
 8007012:	0022      	movs	r2, r4
 8007014:	f7f9 fa1a 	bl	800044c <__aeabi_dcmpeq>
 8007018:	4243      	negs	r3, r0
 800701a:	4158      	adcs	r0, r3
 800701c:	9b02      	ldr	r3, [sp, #8]
 800701e:	1a1b      	subs	r3, r3, r0
 8007020:	9302      	str	r3, [sp, #8]
 8007022:	2301      	movs	r3, #1
 8007024:	9316      	str	r3, [sp, #88]	; 0x58
 8007026:	9b02      	ldr	r3, [sp, #8]
 8007028:	2b16      	cmp	r3, #22
 800702a:	d80f      	bhi.n	800704c <_dtoa_r+0x194>
 800702c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800702e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007030:	00da      	lsls	r2, r3, #3
 8007032:	4b84      	ldr	r3, [pc, #528]	; (8007244 <_dtoa_r+0x38c>)
 8007034:	189b      	adds	r3, r3, r2
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f7f9 fa0d 	bl	8000458 <__aeabi_dcmplt>
 800703e:	2800      	cmp	r0, #0
 8007040:	d049      	beq.n	80070d6 <_dtoa_r+0x21e>
 8007042:	9b02      	ldr	r3, [sp, #8]
 8007044:	3b01      	subs	r3, #1
 8007046:	9302      	str	r3, [sp, #8]
 8007048:	2300      	movs	r3, #0
 800704a:	9316      	str	r3, [sp, #88]	; 0x58
 800704c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800704e:	1b9e      	subs	r6, r3, r6
 8007050:	2300      	movs	r3, #0
 8007052:	930a      	str	r3, [sp, #40]	; 0x28
 8007054:	0033      	movs	r3, r6
 8007056:	3b01      	subs	r3, #1
 8007058:	930d      	str	r3, [sp, #52]	; 0x34
 800705a:	d504      	bpl.n	8007066 <_dtoa_r+0x1ae>
 800705c:	2301      	movs	r3, #1
 800705e:	1b9b      	subs	r3, r3, r6
 8007060:	930a      	str	r3, [sp, #40]	; 0x28
 8007062:	2300      	movs	r3, #0
 8007064:	930d      	str	r3, [sp, #52]	; 0x34
 8007066:	9b02      	ldr	r3, [sp, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	db36      	blt.n	80070da <_dtoa_r+0x222>
 800706c:	9a02      	ldr	r2, [sp, #8]
 800706e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007070:	4694      	mov	ip, r2
 8007072:	4463      	add	r3, ip
 8007074:	930d      	str	r3, [sp, #52]	; 0x34
 8007076:	2300      	movs	r3, #0
 8007078:	9215      	str	r2, [sp, #84]	; 0x54
 800707a:	930e      	str	r3, [sp, #56]	; 0x38
 800707c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800707e:	2401      	movs	r4, #1
 8007080:	2b09      	cmp	r3, #9
 8007082:	d864      	bhi.n	800714e <_dtoa_r+0x296>
 8007084:	2b05      	cmp	r3, #5
 8007086:	dd02      	ble.n	800708e <_dtoa_r+0x1d6>
 8007088:	2400      	movs	r4, #0
 800708a:	3b04      	subs	r3, #4
 800708c:	9322      	str	r3, [sp, #136]	; 0x88
 800708e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007090:	1e98      	subs	r0, r3, #2
 8007092:	2803      	cmp	r0, #3
 8007094:	d864      	bhi.n	8007160 <_dtoa_r+0x2a8>
 8007096:	f7f9 f83f 	bl	8000118 <__gnu_thumb1_case_uqi>
 800709a:	3829      	.short	0x3829
 800709c:	5836      	.short	0x5836
 800709e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80070a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80070a2:	189e      	adds	r6, r3, r2
 80070a4:	4b68      	ldr	r3, [pc, #416]	; (8007248 <_dtoa_r+0x390>)
 80070a6:	18f2      	adds	r2, r6, r3
 80070a8:	2a20      	cmp	r2, #32
 80070aa:	dd0f      	ble.n	80070cc <_dtoa_r+0x214>
 80070ac:	2340      	movs	r3, #64	; 0x40
 80070ae:	1a9b      	subs	r3, r3, r2
 80070b0:	409d      	lsls	r5, r3
 80070b2:	4b66      	ldr	r3, [pc, #408]	; (800724c <_dtoa_r+0x394>)
 80070b4:	9802      	ldr	r0, [sp, #8]
 80070b6:	18f3      	adds	r3, r6, r3
 80070b8:	40d8      	lsrs	r0, r3
 80070ba:	4328      	orrs	r0, r5
 80070bc:	f7fb fac6 	bl	800264c <__aeabi_ui2d>
 80070c0:	2301      	movs	r3, #1
 80070c2:	4c63      	ldr	r4, [pc, #396]	; (8007250 <_dtoa_r+0x398>)
 80070c4:	3e01      	subs	r6, #1
 80070c6:	1909      	adds	r1, r1, r4
 80070c8:	9318      	str	r3, [sp, #96]	; 0x60
 80070ca:	e776      	b.n	8006fba <_dtoa_r+0x102>
 80070cc:	2320      	movs	r3, #32
 80070ce:	9802      	ldr	r0, [sp, #8]
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	4098      	lsls	r0, r3
 80070d4:	e7f2      	b.n	80070bc <_dtoa_r+0x204>
 80070d6:	9016      	str	r0, [sp, #88]	; 0x58
 80070d8:	e7b8      	b.n	800704c <_dtoa_r+0x194>
 80070da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070dc:	9a02      	ldr	r2, [sp, #8]
 80070de:	1a9b      	subs	r3, r3, r2
 80070e0:	930a      	str	r3, [sp, #40]	; 0x28
 80070e2:	4253      	negs	r3, r2
 80070e4:	930e      	str	r3, [sp, #56]	; 0x38
 80070e6:	2300      	movs	r3, #0
 80070e8:	9315      	str	r3, [sp, #84]	; 0x54
 80070ea:	e7c7      	b.n	800707c <_dtoa_r+0x1c4>
 80070ec:	2300      	movs	r3, #0
 80070ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80070f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070f2:	930c      	str	r3, [sp, #48]	; 0x30
 80070f4:	9307      	str	r3, [sp, #28]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	dc13      	bgt.n	8007122 <_dtoa_r+0x26a>
 80070fa:	2301      	movs	r3, #1
 80070fc:	001a      	movs	r2, r3
 80070fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007100:	9307      	str	r3, [sp, #28]
 8007102:	9223      	str	r2, [sp, #140]	; 0x8c
 8007104:	e00d      	b.n	8007122 <_dtoa_r+0x26a>
 8007106:	2301      	movs	r3, #1
 8007108:	e7f1      	b.n	80070ee <_dtoa_r+0x236>
 800710a:	2300      	movs	r3, #0
 800710c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800710e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007110:	4694      	mov	ip, r2
 8007112:	9b02      	ldr	r3, [sp, #8]
 8007114:	4463      	add	r3, ip
 8007116:	930c      	str	r3, [sp, #48]	; 0x30
 8007118:	3301      	adds	r3, #1
 800711a:	9307      	str	r3, [sp, #28]
 800711c:	2b00      	cmp	r3, #0
 800711e:	dc00      	bgt.n	8007122 <_dtoa_r+0x26a>
 8007120:	2301      	movs	r3, #1
 8007122:	2200      	movs	r2, #0
 8007124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007126:	6042      	str	r2, [r0, #4]
 8007128:	3204      	adds	r2, #4
 800712a:	0015      	movs	r5, r2
 800712c:	3514      	adds	r5, #20
 800712e:	6841      	ldr	r1, [r0, #4]
 8007130:	429d      	cmp	r5, r3
 8007132:	d919      	bls.n	8007168 <_dtoa_r+0x2b0>
 8007134:	0038      	movs	r0, r7
 8007136:	f000 fe01 	bl	8007d3c <_Balloc>
 800713a:	9006      	str	r0, [sp, #24]
 800713c:	2800      	cmp	r0, #0
 800713e:	d117      	bne.n	8007170 <_dtoa_r+0x2b8>
 8007140:	21d5      	movs	r1, #213	; 0xd5
 8007142:	0002      	movs	r2, r0
 8007144:	4b43      	ldr	r3, [pc, #268]	; (8007254 <_dtoa_r+0x39c>)
 8007146:	0049      	lsls	r1, r1, #1
 8007148:	e6cb      	b.n	8006ee2 <_dtoa_r+0x2a>
 800714a:	2301      	movs	r3, #1
 800714c:	e7de      	b.n	800710c <_dtoa_r+0x254>
 800714e:	2300      	movs	r3, #0
 8007150:	940f      	str	r4, [sp, #60]	; 0x3c
 8007152:	9322      	str	r3, [sp, #136]	; 0x88
 8007154:	3b01      	subs	r3, #1
 8007156:	930c      	str	r3, [sp, #48]	; 0x30
 8007158:	9307      	str	r3, [sp, #28]
 800715a:	2200      	movs	r2, #0
 800715c:	3313      	adds	r3, #19
 800715e:	e7d0      	b.n	8007102 <_dtoa_r+0x24a>
 8007160:	2301      	movs	r3, #1
 8007162:	930f      	str	r3, [sp, #60]	; 0x3c
 8007164:	3b02      	subs	r3, #2
 8007166:	e7f6      	b.n	8007156 <_dtoa_r+0x29e>
 8007168:	3101      	adds	r1, #1
 800716a:	6041      	str	r1, [r0, #4]
 800716c:	0052      	lsls	r2, r2, #1
 800716e:	e7dc      	b.n	800712a <_dtoa_r+0x272>
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	9a06      	ldr	r2, [sp, #24]
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	9b07      	ldr	r3, [sp, #28]
 8007178:	2b0e      	cmp	r3, #14
 800717a:	d900      	bls.n	800717e <_dtoa_r+0x2c6>
 800717c:	e0eb      	b.n	8007356 <_dtoa_r+0x49e>
 800717e:	2c00      	cmp	r4, #0
 8007180:	d100      	bne.n	8007184 <_dtoa_r+0x2cc>
 8007182:	e0e8      	b.n	8007356 <_dtoa_r+0x49e>
 8007184:	9b02      	ldr	r3, [sp, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	dd68      	ble.n	800725c <_dtoa_r+0x3a4>
 800718a:	001a      	movs	r2, r3
 800718c:	210f      	movs	r1, #15
 800718e:	4b2d      	ldr	r3, [pc, #180]	; (8007244 <_dtoa_r+0x38c>)
 8007190:	400a      	ands	r2, r1
 8007192:	00d2      	lsls	r2, r2, #3
 8007194:	189b      	adds	r3, r3, r2
 8007196:	681d      	ldr	r5, [r3, #0]
 8007198:	685e      	ldr	r6, [r3, #4]
 800719a:	9b02      	ldr	r3, [sp, #8]
 800719c:	111c      	asrs	r4, r3, #4
 800719e:	2302      	movs	r3, #2
 80071a0:	9310      	str	r3, [sp, #64]	; 0x40
 80071a2:	9b02      	ldr	r3, [sp, #8]
 80071a4:	05db      	lsls	r3, r3, #23
 80071a6:	d50b      	bpl.n	80071c0 <_dtoa_r+0x308>
 80071a8:	4b2b      	ldr	r3, [pc, #172]	; (8007258 <_dtoa_r+0x3a0>)
 80071aa:	400c      	ands	r4, r1
 80071ac:	6a1a      	ldr	r2, [r3, #32]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80071b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80071b4:	f7f9 ffc6 	bl	8001144 <__aeabi_ddiv>
 80071b8:	2303      	movs	r3, #3
 80071ba:	9008      	str	r0, [sp, #32]
 80071bc:	9109      	str	r1, [sp, #36]	; 0x24
 80071be:	9310      	str	r3, [sp, #64]	; 0x40
 80071c0:	4b25      	ldr	r3, [pc, #148]	; (8007258 <_dtoa_r+0x3a0>)
 80071c2:	9314      	str	r3, [sp, #80]	; 0x50
 80071c4:	2c00      	cmp	r4, #0
 80071c6:	d108      	bne.n	80071da <_dtoa_r+0x322>
 80071c8:	9808      	ldr	r0, [sp, #32]
 80071ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071cc:	002a      	movs	r2, r5
 80071ce:	0033      	movs	r3, r6
 80071d0:	f7f9 ffb8 	bl	8001144 <__aeabi_ddiv>
 80071d4:	9008      	str	r0, [sp, #32]
 80071d6:	9109      	str	r1, [sp, #36]	; 0x24
 80071d8:	e05c      	b.n	8007294 <_dtoa_r+0x3dc>
 80071da:	2301      	movs	r3, #1
 80071dc:	421c      	tst	r4, r3
 80071de:	d00b      	beq.n	80071f8 <_dtoa_r+0x340>
 80071e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071e2:	0028      	movs	r0, r5
 80071e4:	3301      	adds	r3, #1
 80071e6:	9310      	str	r3, [sp, #64]	; 0x40
 80071e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071ea:	0031      	movs	r1, r6
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f7fa fbaa 	bl	8001948 <__aeabi_dmul>
 80071f4:	0005      	movs	r5, r0
 80071f6:	000e      	movs	r6, r1
 80071f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071fa:	1064      	asrs	r4, r4, #1
 80071fc:	3308      	adds	r3, #8
 80071fe:	e7e0      	b.n	80071c2 <_dtoa_r+0x30a>
 8007200:	08009651 	.word	0x08009651
 8007204:	08009668 	.word	0x08009668
 8007208:	7ff00000 	.word	0x7ff00000
 800720c:	0000270f 	.word	0x0000270f
 8007210:	0800964d 	.word	0x0800964d
 8007214:	08009650 	.word	0x08009650
 8007218:	08009620 	.word	0x08009620
 800721c:	08009621 	.word	0x08009621
 8007220:	3ff00000 	.word	0x3ff00000
 8007224:	fffffc01 	.word	0xfffffc01
 8007228:	3ff80000 	.word	0x3ff80000
 800722c:	636f4361 	.word	0x636f4361
 8007230:	3fd287a7 	.word	0x3fd287a7
 8007234:	8b60c8b3 	.word	0x8b60c8b3
 8007238:	3fc68a28 	.word	0x3fc68a28
 800723c:	509f79fb 	.word	0x509f79fb
 8007240:	3fd34413 	.word	0x3fd34413
 8007244:	080097b8 	.word	0x080097b8
 8007248:	00000432 	.word	0x00000432
 800724c:	00000412 	.word	0x00000412
 8007250:	fe100000 	.word	0xfe100000
 8007254:	080096c3 	.word	0x080096c3
 8007258:	08009790 	.word	0x08009790
 800725c:	2302      	movs	r3, #2
 800725e:	9310      	str	r3, [sp, #64]	; 0x40
 8007260:	9b02      	ldr	r3, [sp, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d016      	beq.n	8007294 <_dtoa_r+0x3dc>
 8007266:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007268:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800726a:	425c      	negs	r4, r3
 800726c:	230f      	movs	r3, #15
 800726e:	4ab6      	ldr	r2, [pc, #728]	; (8007548 <_dtoa_r+0x690>)
 8007270:	4023      	ands	r3, r4
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	18d3      	adds	r3, r2, r3
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f7fa fb65 	bl	8001948 <__aeabi_dmul>
 800727e:	2601      	movs	r6, #1
 8007280:	2300      	movs	r3, #0
 8007282:	9008      	str	r0, [sp, #32]
 8007284:	9109      	str	r1, [sp, #36]	; 0x24
 8007286:	4db1      	ldr	r5, [pc, #708]	; (800754c <_dtoa_r+0x694>)
 8007288:	1124      	asrs	r4, r4, #4
 800728a:	2c00      	cmp	r4, #0
 800728c:	d000      	beq.n	8007290 <_dtoa_r+0x3d8>
 800728e:	e094      	b.n	80073ba <_dtoa_r+0x502>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d19f      	bne.n	80071d4 <_dtoa_r+0x31c>
 8007294:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007296:	2b00      	cmp	r3, #0
 8007298:	d100      	bne.n	800729c <_dtoa_r+0x3e4>
 800729a:	e09b      	b.n	80073d4 <_dtoa_r+0x51c>
 800729c:	9c08      	ldr	r4, [sp, #32]
 800729e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072a0:	2200      	movs	r2, #0
 80072a2:	0020      	movs	r0, r4
 80072a4:	0029      	movs	r1, r5
 80072a6:	4baa      	ldr	r3, [pc, #680]	; (8007550 <_dtoa_r+0x698>)
 80072a8:	f7f9 f8d6 	bl	8000458 <__aeabi_dcmplt>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d100      	bne.n	80072b2 <_dtoa_r+0x3fa>
 80072b0:	e090      	b.n	80073d4 <_dtoa_r+0x51c>
 80072b2:	9b07      	ldr	r3, [sp, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d100      	bne.n	80072ba <_dtoa_r+0x402>
 80072b8:	e08c      	b.n	80073d4 <_dtoa_r+0x51c>
 80072ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dd46      	ble.n	800734e <_dtoa_r+0x496>
 80072c0:	9b02      	ldr	r3, [sp, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	0020      	movs	r0, r4
 80072c6:	0029      	movs	r1, r5
 80072c8:	1e5e      	subs	r6, r3, #1
 80072ca:	4ba2      	ldr	r3, [pc, #648]	; (8007554 <_dtoa_r+0x69c>)
 80072cc:	f7fa fb3c 	bl	8001948 <__aeabi_dmul>
 80072d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072d2:	9008      	str	r0, [sp, #32]
 80072d4:	9109      	str	r1, [sp, #36]	; 0x24
 80072d6:	3301      	adds	r3, #1
 80072d8:	9310      	str	r3, [sp, #64]	; 0x40
 80072da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80072de:	9c08      	ldr	r4, [sp, #32]
 80072e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072e2:	9314      	str	r3, [sp, #80]	; 0x50
 80072e4:	f7fb f982 	bl	80025ec <__aeabi_i2d>
 80072e8:	0022      	movs	r2, r4
 80072ea:	002b      	movs	r3, r5
 80072ec:	f7fa fb2c 	bl	8001948 <__aeabi_dmul>
 80072f0:	2200      	movs	r2, #0
 80072f2:	4b99      	ldr	r3, [pc, #612]	; (8007558 <_dtoa_r+0x6a0>)
 80072f4:	f7f9 fbea 	bl	8000acc <__aeabi_dadd>
 80072f8:	9010      	str	r0, [sp, #64]	; 0x40
 80072fa:	9111      	str	r1, [sp, #68]	; 0x44
 80072fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007300:	9208      	str	r2, [sp, #32]
 8007302:	9309      	str	r3, [sp, #36]	; 0x24
 8007304:	4a95      	ldr	r2, [pc, #596]	; (800755c <_dtoa_r+0x6a4>)
 8007306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007308:	4694      	mov	ip, r2
 800730a:	4463      	add	r3, ip
 800730c:	9317      	str	r3, [sp, #92]	; 0x5c
 800730e:	9309      	str	r3, [sp, #36]	; 0x24
 8007310:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007312:	2b00      	cmp	r3, #0
 8007314:	d161      	bne.n	80073da <_dtoa_r+0x522>
 8007316:	2200      	movs	r2, #0
 8007318:	0020      	movs	r0, r4
 800731a:	0029      	movs	r1, r5
 800731c:	4b90      	ldr	r3, [pc, #576]	; (8007560 <_dtoa_r+0x6a8>)
 800731e:	f7fa fd7f 	bl	8001e20 <__aeabi_dsub>
 8007322:	9a08      	ldr	r2, [sp, #32]
 8007324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007326:	0004      	movs	r4, r0
 8007328:	000d      	movs	r5, r1
 800732a:	f7f9 f8a9 	bl	8000480 <__aeabi_dcmpgt>
 800732e:	2800      	cmp	r0, #0
 8007330:	d000      	beq.n	8007334 <_dtoa_r+0x47c>
 8007332:	e2af      	b.n	8007894 <_dtoa_r+0x9dc>
 8007334:	488b      	ldr	r0, [pc, #556]	; (8007564 <_dtoa_r+0x6ac>)
 8007336:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007338:	4684      	mov	ip, r0
 800733a:	4461      	add	r1, ip
 800733c:	000b      	movs	r3, r1
 800733e:	0020      	movs	r0, r4
 8007340:	0029      	movs	r1, r5
 8007342:	9a08      	ldr	r2, [sp, #32]
 8007344:	f7f9 f888 	bl	8000458 <__aeabi_dcmplt>
 8007348:	2800      	cmp	r0, #0
 800734a:	d000      	beq.n	800734e <_dtoa_r+0x496>
 800734c:	e29f      	b.n	800788e <_dtoa_r+0x9d6>
 800734e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007350:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007352:	9308      	str	r3, [sp, #32]
 8007354:	9409      	str	r4, [sp, #36]	; 0x24
 8007356:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007358:	2b00      	cmp	r3, #0
 800735a:	da00      	bge.n	800735e <_dtoa_r+0x4a6>
 800735c:	e172      	b.n	8007644 <_dtoa_r+0x78c>
 800735e:	9a02      	ldr	r2, [sp, #8]
 8007360:	2a0e      	cmp	r2, #14
 8007362:	dd00      	ble.n	8007366 <_dtoa_r+0x4ae>
 8007364:	e16e      	b.n	8007644 <_dtoa_r+0x78c>
 8007366:	4b78      	ldr	r3, [pc, #480]	; (8007548 <_dtoa_r+0x690>)
 8007368:	00d2      	lsls	r2, r2, #3
 800736a:	189b      	adds	r3, r3, r2
 800736c:	685c      	ldr	r4, [r3, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	930a      	str	r3, [sp, #40]	; 0x28
 8007372:	940b      	str	r4, [sp, #44]	; 0x2c
 8007374:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007376:	2b00      	cmp	r3, #0
 8007378:	db00      	blt.n	800737c <_dtoa_r+0x4c4>
 800737a:	e0f7      	b.n	800756c <_dtoa_r+0x6b4>
 800737c:	9b07      	ldr	r3, [sp, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	dd00      	ble.n	8007384 <_dtoa_r+0x4cc>
 8007382:	e0f3      	b.n	800756c <_dtoa_r+0x6b4>
 8007384:	d000      	beq.n	8007388 <_dtoa_r+0x4d0>
 8007386:	e282      	b.n	800788e <_dtoa_r+0x9d6>
 8007388:	980a      	ldr	r0, [sp, #40]	; 0x28
 800738a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800738c:	2200      	movs	r2, #0
 800738e:	4b74      	ldr	r3, [pc, #464]	; (8007560 <_dtoa_r+0x6a8>)
 8007390:	f7fa fada 	bl	8001948 <__aeabi_dmul>
 8007394:	9a08      	ldr	r2, [sp, #32]
 8007396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007398:	f7f9 f87c 	bl	8000494 <__aeabi_dcmpge>
 800739c:	9e07      	ldr	r6, [sp, #28]
 800739e:	0035      	movs	r5, r6
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d000      	beq.n	80073a6 <_dtoa_r+0x4ee>
 80073a4:	e259      	b.n	800785a <_dtoa_r+0x9a2>
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	9a06      	ldr	r2, [sp, #24]
 80073aa:	3301      	adds	r3, #1
 80073ac:	9308      	str	r3, [sp, #32]
 80073ae:	2331      	movs	r3, #49	; 0x31
 80073b0:	7013      	strb	r3, [r2, #0]
 80073b2:	9b02      	ldr	r3, [sp, #8]
 80073b4:	3301      	adds	r3, #1
 80073b6:	9302      	str	r3, [sp, #8]
 80073b8:	e254      	b.n	8007864 <_dtoa_r+0x9ac>
 80073ba:	4234      	tst	r4, r6
 80073bc:	d007      	beq.n	80073ce <_dtoa_r+0x516>
 80073be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073c0:	3301      	adds	r3, #1
 80073c2:	9310      	str	r3, [sp, #64]	; 0x40
 80073c4:	682a      	ldr	r2, [r5, #0]
 80073c6:	686b      	ldr	r3, [r5, #4]
 80073c8:	f7fa fabe 	bl	8001948 <__aeabi_dmul>
 80073cc:	0033      	movs	r3, r6
 80073ce:	1064      	asrs	r4, r4, #1
 80073d0:	3508      	adds	r5, #8
 80073d2:	e75a      	b.n	800728a <_dtoa_r+0x3d2>
 80073d4:	9e02      	ldr	r6, [sp, #8]
 80073d6:	9b07      	ldr	r3, [sp, #28]
 80073d8:	e780      	b.n	80072dc <_dtoa_r+0x424>
 80073da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073de:	1e5a      	subs	r2, r3, #1
 80073e0:	4b59      	ldr	r3, [pc, #356]	; (8007548 <_dtoa_r+0x690>)
 80073e2:	00d2      	lsls	r2, r2, #3
 80073e4:	189b      	adds	r3, r3, r2
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2900      	cmp	r1, #0
 80073ec:	d051      	beq.n	8007492 <_dtoa_r+0x5da>
 80073ee:	2000      	movs	r0, #0
 80073f0:	495d      	ldr	r1, [pc, #372]	; (8007568 <_dtoa_r+0x6b0>)
 80073f2:	f7f9 fea7 	bl	8001144 <__aeabi_ddiv>
 80073f6:	9a08      	ldr	r2, [sp, #32]
 80073f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fa:	f7fa fd11 	bl	8001e20 <__aeabi_dsub>
 80073fe:	9a06      	ldr	r2, [sp, #24]
 8007400:	9b06      	ldr	r3, [sp, #24]
 8007402:	4694      	mov	ip, r2
 8007404:	9317      	str	r3, [sp, #92]	; 0x5c
 8007406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007408:	9010      	str	r0, [sp, #64]	; 0x40
 800740a:	9111      	str	r1, [sp, #68]	; 0x44
 800740c:	4463      	add	r3, ip
 800740e:	9319      	str	r3, [sp, #100]	; 0x64
 8007410:	0029      	movs	r1, r5
 8007412:	0020      	movs	r0, r4
 8007414:	f7fb f8b4 	bl	8002580 <__aeabi_d2iz>
 8007418:	9014      	str	r0, [sp, #80]	; 0x50
 800741a:	f7fb f8e7 	bl	80025ec <__aeabi_i2d>
 800741e:	0002      	movs	r2, r0
 8007420:	000b      	movs	r3, r1
 8007422:	0020      	movs	r0, r4
 8007424:	0029      	movs	r1, r5
 8007426:	f7fa fcfb 	bl	8001e20 <__aeabi_dsub>
 800742a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800742c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800742e:	3301      	adds	r3, #1
 8007430:	9308      	str	r3, [sp, #32]
 8007432:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007434:	0004      	movs	r4, r0
 8007436:	3330      	adds	r3, #48	; 0x30
 8007438:	7013      	strb	r3, [r2, #0]
 800743a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800743c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800743e:	000d      	movs	r5, r1
 8007440:	f7f9 f80a 	bl	8000458 <__aeabi_dcmplt>
 8007444:	2800      	cmp	r0, #0
 8007446:	d175      	bne.n	8007534 <_dtoa_r+0x67c>
 8007448:	0022      	movs	r2, r4
 800744a:	002b      	movs	r3, r5
 800744c:	2000      	movs	r0, #0
 800744e:	4940      	ldr	r1, [pc, #256]	; (8007550 <_dtoa_r+0x698>)
 8007450:	f7fa fce6 	bl	8001e20 <__aeabi_dsub>
 8007454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007458:	f7f8 fffe 	bl	8000458 <__aeabi_dcmplt>
 800745c:	2800      	cmp	r0, #0
 800745e:	d000      	beq.n	8007462 <_dtoa_r+0x5aa>
 8007460:	e0d2      	b.n	8007608 <_dtoa_r+0x750>
 8007462:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007464:	9a08      	ldr	r2, [sp, #32]
 8007466:	4293      	cmp	r3, r2
 8007468:	d100      	bne.n	800746c <_dtoa_r+0x5b4>
 800746a:	e770      	b.n	800734e <_dtoa_r+0x496>
 800746c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800746e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007470:	2200      	movs	r2, #0
 8007472:	4b38      	ldr	r3, [pc, #224]	; (8007554 <_dtoa_r+0x69c>)
 8007474:	f7fa fa68 	bl	8001948 <__aeabi_dmul>
 8007478:	4b36      	ldr	r3, [pc, #216]	; (8007554 <_dtoa_r+0x69c>)
 800747a:	9010      	str	r0, [sp, #64]	; 0x40
 800747c:	9111      	str	r1, [sp, #68]	; 0x44
 800747e:	2200      	movs	r2, #0
 8007480:	0020      	movs	r0, r4
 8007482:	0029      	movs	r1, r5
 8007484:	f7fa fa60 	bl	8001948 <__aeabi_dmul>
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	0004      	movs	r4, r0
 800748c:	000d      	movs	r5, r1
 800748e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007490:	e7be      	b.n	8007410 <_dtoa_r+0x558>
 8007492:	9808      	ldr	r0, [sp, #32]
 8007494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007496:	f7fa fa57 	bl	8001948 <__aeabi_dmul>
 800749a:	9a06      	ldr	r2, [sp, #24]
 800749c:	9b06      	ldr	r3, [sp, #24]
 800749e:	4694      	mov	ip, r2
 80074a0:	9308      	str	r3, [sp, #32]
 80074a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074a4:	9010      	str	r0, [sp, #64]	; 0x40
 80074a6:	9111      	str	r1, [sp, #68]	; 0x44
 80074a8:	4463      	add	r3, ip
 80074aa:	9319      	str	r3, [sp, #100]	; 0x64
 80074ac:	0029      	movs	r1, r5
 80074ae:	0020      	movs	r0, r4
 80074b0:	f7fb f866 	bl	8002580 <__aeabi_d2iz>
 80074b4:	9017      	str	r0, [sp, #92]	; 0x5c
 80074b6:	f7fb f899 	bl	80025ec <__aeabi_i2d>
 80074ba:	0002      	movs	r2, r0
 80074bc:	000b      	movs	r3, r1
 80074be:	0020      	movs	r0, r4
 80074c0:	0029      	movs	r1, r5
 80074c2:	f7fa fcad 	bl	8001e20 <__aeabi_dsub>
 80074c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074c8:	9a08      	ldr	r2, [sp, #32]
 80074ca:	3330      	adds	r3, #48	; 0x30
 80074cc:	7013      	strb	r3, [r2, #0]
 80074ce:	0013      	movs	r3, r2
 80074d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074d2:	3301      	adds	r3, #1
 80074d4:	0004      	movs	r4, r0
 80074d6:	000d      	movs	r5, r1
 80074d8:	9308      	str	r3, [sp, #32]
 80074da:	4293      	cmp	r3, r2
 80074dc:	d12c      	bne.n	8007538 <_dtoa_r+0x680>
 80074de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80074e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074e2:	9a06      	ldr	r2, [sp, #24]
 80074e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074e6:	4694      	mov	ip, r2
 80074e8:	4463      	add	r3, ip
 80074ea:	2200      	movs	r2, #0
 80074ec:	9308      	str	r3, [sp, #32]
 80074ee:	4b1e      	ldr	r3, [pc, #120]	; (8007568 <_dtoa_r+0x6b0>)
 80074f0:	f7f9 faec 	bl	8000acc <__aeabi_dadd>
 80074f4:	0002      	movs	r2, r0
 80074f6:	000b      	movs	r3, r1
 80074f8:	0020      	movs	r0, r4
 80074fa:	0029      	movs	r1, r5
 80074fc:	f7f8 ffc0 	bl	8000480 <__aeabi_dcmpgt>
 8007500:	2800      	cmp	r0, #0
 8007502:	d000      	beq.n	8007506 <_dtoa_r+0x64e>
 8007504:	e080      	b.n	8007608 <_dtoa_r+0x750>
 8007506:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007508:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800750a:	2000      	movs	r0, #0
 800750c:	4916      	ldr	r1, [pc, #88]	; (8007568 <_dtoa_r+0x6b0>)
 800750e:	f7fa fc87 	bl	8001e20 <__aeabi_dsub>
 8007512:	0002      	movs	r2, r0
 8007514:	000b      	movs	r3, r1
 8007516:	0020      	movs	r0, r4
 8007518:	0029      	movs	r1, r5
 800751a:	f7f8 ff9d 	bl	8000458 <__aeabi_dcmplt>
 800751e:	2800      	cmp	r0, #0
 8007520:	d100      	bne.n	8007524 <_dtoa_r+0x66c>
 8007522:	e714      	b.n	800734e <_dtoa_r+0x496>
 8007524:	9b08      	ldr	r3, [sp, #32]
 8007526:	001a      	movs	r2, r3
 8007528:	3a01      	subs	r2, #1
 800752a:	9208      	str	r2, [sp, #32]
 800752c:	7812      	ldrb	r2, [r2, #0]
 800752e:	2a30      	cmp	r2, #48	; 0x30
 8007530:	d0f8      	beq.n	8007524 <_dtoa_r+0x66c>
 8007532:	9308      	str	r3, [sp, #32]
 8007534:	9602      	str	r6, [sp, #8]
 8007536:	e055      	b.n	80075e4 <_dtoa_r+0x72c>
 8007538:	2200      	movs	r2, #0
 800753a:	4b06      	ldr	r3, [pc, #24]	; (8007554 <_dtoa_r+0x69c>)
 800753c:	f7fa fa04 	bl	8001948 <__aeabi_dmul>
 8007540:	0004      	movs	r4, r0
 8007542:	000d      	movs	r5, r1
 8007544:	e7b2      	b.n	80074ac <_dtoa_r+0x5f4>
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	080097b8 	.word	0x080097b8
 800754c:	08009790 	.word	0x08009790
 8007550:	3ff00000 	.word	0x3ff00000
 8007554:	40240000 	.word	0x40240000
 8007558:	401c0000 	.word	0x401c0000
 800755c:	fcc00000 	.word	0xfcc00000
 8007560:	40140000 	.word	0x40140000
 8007564:	7cc00000 	.word	0x7cc00000
 8007568:	3fe00000 	.word	0x3fe00000
 800756c:	9b07      	ldr	r3, [sp, #28]
 800756e:	9e06      	ldr	r6, [sp, #24]
 8007570:	3b01      	subs	r3, #1
 8007572:	199b      	adds	r3, r3, r6
 8007574:	930c      	str	r3, [sp, #48]	; 0x30
 8007576:	9c08      	ldr	r4, [sp, #32]
 8007578:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800757a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800757c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800757e:	0020      	movs	r0, r4
 8007580:	0029      	movs	r1, r5
 8007582:	f7f9 fddf 	bl	8001144 <__aeabi_ddiv>
 8007586:	f7fa fffb 	bl	8002580 <__aeabi_d2iz>
 800758a:	9007      	str	r0, [sp, #28]
 800758c:	f7fb f82e 	bl	80025ec <__aeabi_i2d>
 8007590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007594:	f7fa f9d8 	bl	8001948 <__aeabi_dmul>
 8007598:	0002      	movs	r2, r0
 800759a:	000b      	movs	r3, r1
 800759c:	0020      	movs	r0, r4
 800759e:	0029      	movs	r1, r5
 80075a0:	f7fa fc3e 	bl	8001e20 <__aeabi_dsub>
 80075a4:	0033      	movs	r3, r6
 80075a6:	9a07      	ldr	r2, [sp, #28]
 80075a8:	3601      	adds	r6, #1
 80075aa:	3230      	adds	r2, #48	; 0x30
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075b0:	9608      	str	r6, [sp, #32]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d139      	bne.n	800762a <_dtoa_r+0x772>
 80075b6:	0002      	movs	r2, r0
 80075b8:	000b      	movs	r3, r1
 80075ba:	f7f9 fa87 	bl	8000acc <__aeabi_dadd>
 80075be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c2:	0004      	movs	r4, r0
 80075c4:	000d      	movs	r5, r1
 80075c6:	f7f8 ff5b 	bl	8000480 <__aeabi_dcmpgt>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d11b      	bne.n	8007606 <_dtoa_r+0x74e>
 80075ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d2:	0020      	movs	r0, r4
 80075d4:	0029      	movs	r1, r5
 80075d6:	f7f8 ff39 	bl	800044c <__aeabi_dcmpeq>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d002      	beq.n	80075e4 <_dtoa_r+0x72c>
 80075de:	9b07      	ldr	r3, [sp, #28]
 80075e0:	07db      	lsls	r3, r3, #31
 80075e2:	d410      	bmi.n	8007606 <_dtoa_r+0x74e>
 80075e4:	0038      	movs	r0, r7
 80075e6:	9905      	ldr	r1, [sp, #20]
 80075e8:	f000 fbec 	bl	8007dc4 <_Bfree>
 80075ec:	2300      	movs	r3, #0
 80075ee:	9a08      	ldr	r2, [sp, #32]
 80075f0:	9802      	ldr	r0, [sp, #8]
 80075f2:	7013      	strb	r3, [r2, #0]
 80075f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075f6:	3001      	adds	r0, #1
 80075f8:	6018      	str	r0, [r3, #0]
 80075fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d100      	bne.n	8007602 <_dtoa_r+0x74a>
 8007600:	e4a6      	b.n	8006f50 <_dtoa_r+0x98>
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	e4a4      	b.n	8006f50 <_dtoa_r+0x98>
 8007606:	9e02      	ldr	r6, [sp, #8]
 8007608:	9b08      	ldr	r3, [sp, #32]
 800760a:	9308      	str	r3, [sp, #32]
 800760c:	3b01      	subs	r3, #1
 800760e:	781a      	ldrb	r2, [r3, #0]
 8007610:	2a39      	cmp	r2, #57	; 0x39
 8007612:	d106      	bne.n	8007622 <_dtoa_r+0x76a>
 8007614:	9a06      	ldr	r2, [sp, #24]
 8007616:	429a      	cmp	r2, r3
 8007618:	d1f7      	bne.n	800760a <_dtoa_r+0x752>
 800761a:	2230      	movs	r2, #48	; 0x30
 800761c:	9906      	ldr	r1, [sp, #24]
 800761e:	3601      	adds	r6, #1
 8007620:	700a      	strb	r2, [r1, #0]
 8007622:	781a      	ldrb	r2, [r3, #0]
 8007624:	3201      	adds	r2, #1
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	e784      	b.n	8007534 <_dtoa_r+0x67c>
 800762a:	2200      	movs	r2, #0
 800762c:	4baa      	ldr	r3, [pc, #680]	; (80078d8 <_dtoa_r+0xa20>)
 800762e:	f7fa f98b 	bl	8001948 <__aeabi_dmul>
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	0004      	movs	r4, r0
 8007638:	000d      	movs	r5, r1
 800763a:	f7f8 ff07 	bl	800044c <__aeabi_dcmpeq>
 800763e:	2800      	cmp	r0, #0
 8007640:	d09b      	beq.n	800757a <_dtoa_r+0x6c2>
 8007642:	e7cf      	b.n	80075e4 <_dtoa_r+0x72c>
 8007644:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007646:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007648:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800764a:	2d00      	cmp	r5, #0
 800764c:	d012      	beq.n	8007674 <_dtoa_r+0x7bc>
 800764e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007650:	2a01      	cmp	r2, #1
 8007652:	dc66      	bgt.n	8007722 <_dtoa_r+0x86a>
 8007654:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007656:	2a00      	cmp	r2, #0
 8007658:	d05d      	beq.n	8007716 <_dtoa_r+0x85e>
 800765a:	4aa0      	ldr	r2, [pc, #640]	; (80078dc <_dtoa_r+0xa24>)
 800765c:	189b      	adds	r3, r3, r2
 800765e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007660:	2101      	movs	r1, #1
 8007662:	18d2      	adds	r2, r2, r3
 8007664:	920a      	str	r2, [sp, #40]	; 0x28
 8007666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007668:	0038      	movs	r0, r7
 800766a:	18d3      	adds	r3, r2, r3
 800766c:	930d      	str	r3, [sp, #52]	; 0x34
 800766e:	f000 fc59 	bl	8007f24 <__i2b>
 8007672:	0005      	movs	r5, r0
 8007674:	2c00      	cmp	r4, #0
 8007676:	dd0e      	ble.n	8007696 <_dtoa_r+0x7de>
 8007678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800767a:	2b00      	cmp	r3, #0
 800767c:	dd0b      	ble.n	8007696 <_dtoa_r+0x7de>
 800767e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007680:	0023      	movs	r3, r4
 8007682:	4294      	cmp	r4, r2
 8007684:	dd00      	ble.n	8007688 <_dtoa_r+0x7d0>
 8007686:	0013      	movs	r3, r2
 8007688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800768a:	1ae4      	subs	r4, r4, r3
 800768c:	1ad2      	subs	r2, r2, r3
 800768e:	920a      	str	r2, [sp, #40]	; 0x28
 8007690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	930d      	str	r3, [sp, #52]	; 0x34
 8007696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01f      	beq.n	80076dc <_dtoa_r+0x824>
 800769c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d054      	beq.n	800774c <_dtoa_r+0x894>
 80076a2:	2e00      	cmp	r6, #0
 80076a4:	dd11      	ble.n	80076ca <_dtoa_r+0x812>
 80076a6:	0029      	movs	r1, r5
 80076a8:	0032      	movs	r2, r6
 80076aa:	0038      	movs	r0, r7
 80076ac:	f000 fd00 	bl	80080b0 <__pow5mult>
 80076b0:	9a05      	ldr	r2, [sp, #20]
 80076b2:	0001      	movs	r1, r0
 80076b4:	0005      	movs	r5, r0
 80076b6:	0038      	movs	r0, r7
 80076b8:	f000 fc4a 	bl	8007f50 <__multiply>
 80076bc:	9905      	ldr	r1, [sp, #20]
 80076be:	9014      	str	r0, [sp, #80]	; 0x50
 80076c0:	0038      	movs	r0, r7
 80076c2:	f000 fb7f 	bl	8007dc4 <_Bfree>
 80076c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076cc:	1b9a      	subs	r2, r3, r6
 80076ce:	42b3      	cmp	r3, r6
 80076d0:	d004      	beq.n	80076dc <_dtoa_r+0x824>
 80076d2:	0038      	movs	r0, r7
 80076d4:	9905      	ldr	r1, [sp, #20]
 80076d6:	f000 fceb 	bl	80080b0 <__pow5mult>
 80076da:	9005      	str	r0, [sp, #20]
 80076dc:	2101      	movs	r1, #1
 80076de:	0038      	movs	r0, r7
 80076e0:	f000 fc20 	bl	8007f24 <__i2b>
 80076e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076e6:	0006      	movs	r6, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dd31      	ble.n	8007750 <_dtoa_r+0x898>
 80076ec:	001a      	movs	r2, r3
 80076ee:	0001      	movs	r1, r0
 80076f0:	0038      	movs	r0, r7
 80076f2:	f000 fcdd 	bl	80080b0 <__pow5mult>
 80076f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076f8:	0006      	movs	r6, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	dd2d      	ble.n	800775a <_dtoa_r+0x8a2>
 80076fe:	2300      	movs	r3, #0
 8007700:	930e      	str	r3, [sp, #56]	; 0x38
 8007702:	6933      	ldr	r3, [r6, #16]
 8007704:	3303      	adds	r3, #3
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	18f3      	adds	r3, r6, r3
 800770a:	6858      	ldr	r0, [r3, #4]
 800770c:	f000 fbc2 	bl	8007e94 <__hi0bits>
 8007710:	2320      	movs	r3, #32
 8007712:	1a18      	subs	r0, r3, r0
 8007714:	e039      	b.n	800778a <_dtoa_r+0x8d2>
 8007716:	2336      	movs	r3, #54	; 0x36
 8007718:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800771a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800771c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800771e:	1a9b      	subs	r3, r3, r2
 8007720:	e79d      	b.n	800765e <_dtoa_r+0x7a6>
 8007722:	9b07      	ldr	r3, [sp, #28]
 8007724:	1e5e      	subs	r6, r3, #1
 8007726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007728:	42b3      	cmp	r3, r6
 800772a:	db07      	blt.n	800773c <_dtoa_r+0x884>
 800772c:	1b9e      	subs	r6, r3, r6
 800772e:	9b07      	ldr	r3, [sp, #28]
 8007730:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007732:	2b00      	cmp	r3, #0
 8007734:	da93      	bge.n	800765e <_dtoa_r+0x7a6>
 8007736:	1ae4      	subs	r4, r4, r3
 8007738:	2300      	movs	r3, #0
 800773a:	e790      	b.n	800765e <_dtoa_r+0x7a6>
 800773c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800773e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007740:	1af3      	subs	r3, r6, r3
 8007742:	18d3      	adds	r3, r2, r3
 8007744:	960e      	str	r6, [sp, #56]	; 0x38
 8007746:	9315      	str	r3, [sp, #84]	; 0x54
 8007748:	2600      	movs	r6, #0
 800774a:	e7f0      	b.n	800772e <_dtoa_r+0x876>
 800774c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800774e:	e7c0      	b.n	80076d2 <_dtoa_r+0x81a>
 8007750:	2300      	movs	r3, #0
 8007752:	930e      	str	r3, [sp, #56]	; 0x38
 8007754:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007756:	2b01      	cmp	r3, #1
 8007758:	dc13      	bgt.n	8007782 <_dtoa_r+0x8ca>
 800775a:	2300      	movs	r3, #0
 800775c:	930e      	str	r3, [sp, #56]	; 0x38
 800775e:	9b08      	ldr	r3, [sp, #32]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10e      	bne.n	8007782 <_dtoa_r+0x8ca>
 8007764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007766:	031b      	lsls	r3, r3, #12
 8007768:	d10b      	bne.n	8007782 <_dtoa_r+0x8ca>
 800776a:	4b5d      	ldr	r3, [pc, #372]	; (80078e0 <_dtoa_r+0xa28>)
 800776c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800776e:	4213      	tst	r3, r2
 8007770:	d007      	beq.n	8007782 <_dtoa_r+0x8ca>
 8007772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007774:	3301      	adds	r3, #1
 8007776:	930a      	str	r3, [sp, #40]	; 0x28
 8007778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800777a:	3301      	adds	r3, #1
 800777c:	930d      	str	r3, [sp, #52]	; 0x34
 800777e:	2301      	movs	r3, #1
 8007780:	930e      	str	r3, [sp, #56]	; 0x38
 8007782:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007784:	2001      	movs	r0, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1bb      	bne.n	8007702 <_dtoa_r+0x84a>
 800778a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800778c:	221f      	movs	r2, #31
 800778e:	1818      	adds	r0, r3, r0
 8007790:	0003      	movs	r3, r0
 8007792:	4013      	ands	r3, r2
 8007794:	4210      	tst	r0, r2
 8007796:	d046      	beq.n	8007826 <_dtoa_r+0x96e>
 8007798:	3201      	adds	r2, #1
 800779a:	1ad2      	subs	r2, r2, r3
 800779c:	2a04      	cmp	r2, #4
 800779e:	dd3f      	ble.n	8007820 <_dtoa_r+0x968>
 80077a0:	221c      	movs	r2, #28
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077a6:	18e4      	adds	r4, r4, r3
 80077a8:	18d2      	adds	r2, r2, r3
 80077aa:	920a      	str	r2, [sp, #40]	; 0x28
 80077ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077ae:	18d3      	adds	r3, r2, r3
 80077b0:	930d      	str	r3, [sp, #52]	; 0x34
 80077b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd05      	ble.n	80077c4 <_dtoa_r+0x90c>
 80077b8:	001a      	movs	r2, r3
 80077ba:	0038      	movs	r0, r7
 80077bc:	9905      	ldr	r1, [sp, #20]
 80077be:	f000 fcd3 	bl	8008168 <__lshift>
 80077c2:	9005      	str	r0, [sp, #20]
 80077c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	dd05      	ble.n	80077d6 <_dtoa_r+0x91e>
 80077ca:	0031      	movs	r1, r6
 80077cc:	001a      	movs	r2, r3
 80077ce:	0038      	movs	r0, r7
 80077d0:	f000 fcca 	bl	8008168 <__lshift>
 80077d4:	0006      	movs	r6, r0
 80077d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d026      	beq.n	800782a <_dtoa_r+0x972>
 80077dc:	0031      	movs	r1, r6
 80077de:	9805      	ldr	r0, [sp, #20]
 80077e0:	f000 fd30 	bl	8008244 <__mcmp>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	da20      	bge.n	800782a <_dtoa_r+0x972>
 80077e8:	9b02      	ldr	r3, [sp, #8]
 80077ea:	220a      	movs	r2, #10
 80077ec:	3b01      	subs	r3, #1
 80077ee:	9302      	str	r3, [sp, #8]
 80077f0:	0038      	movs	r0, r7
 80077f2:	2300      	movs	r3, #0
 80077f4:	9905      	ldr	r1, [sp, #20]
 80077f6:	f000 fb09 	bl	8007e0c <__multadd>
 80077fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077fc:	9005      	str	r0, [sp, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d100      	bne.n	8007804 <_dtoa_r+0x94c>
 8007802:	e166      	b.n	8007ad2 <_dtoa_r+0xc1a>
 8007804:	2300      	movs	r3, #0
 8007806:	0029      	movs	r1, r5
 8007808:	220a      	movs	r2, #10
 800780a:	0038      	movs	r0, r7
 800780c:	f000 fafe 	bl	8007e0c <__multadd>
 8007810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007812:	0005      	movs	r5, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	dc47      	bgt.n	80078a8 <_dtoa_r+0x9f0>
 8007818:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800781a:	2b02      	cmp	r3, #2
 800781c:	dc0d      	bgt.n	800783a <_dtoa_r+0x982>
 800781e:	e043      	b.n	80078a8 <_dtoa_r+0x9f0>
 8007820:	2a04      	cmp	r2, #4
 8007822:	d0c6      	beq.n	80077b2 <_dtoa_r+0x8fa>
 8007824:	0013      	movs	r3, r2
 8007826:	331c      	adds	r3, #28
 8007828:	e7bc      	b.n	80077a4 <_dtoa_r+0x8ec>
 800782a:	9b07      	ldr	r3, [sp, #28]
 800782c:	2b00      	cmp	r3, #0
 800782e:	dc35      	bgt.n	800789c <_dtoa_r+0x9e4>
 8007830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007832:	2b02      	cmp	r3, #2
 8007834:	dd32      	ble.n	800789c <_dtoa_r+0x9e4>
 8007836:	9b07      	ldr	r3, [sp, #28]
 8007838:	930c      	str	r3, [sp, #48]	; 0x30
 800783a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10c      	bne.n	800785a <_dtoa_r+0x9a2>
 8007840:	0031      	movs	r1, r6
 8007842:	2205      	movs	r2, #5
 8007844:	0038      	movs	r0, r7
 8007846:	f000 fae1 	bl	8007e0c <__multadd>
 800784a:	0006      	movs	r6, r0
 800784c:	0001      	movs	r1, r0
 800784e:	9805      	ldr	r0, [sp, #20]
 8007850:	f000 fcf8 	bl	8008244 <__mcmp>
 8007854:	2800      	cmp	r0, #0
 8007856:	dd00      	ble.n	800785a <_dtoa_r+0x9a2>
 8007858:	e5a5      	b.n	80073a6 <_dtoa_r+0x4ee>
 800785a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800785c:	43db      	mvns	r3, r3
 800785e:	9302      	str	r3, [sp, #8]
 8007860:	9b06      	ldr	r3, [sp, #24]
 8007862:	9308      	str	r3, [sp, #32]
 8007864:	2400      	movs	r4, #0
 8007866:	0031      	movs	r1, r6
 8007868:	0038      	movs	r0, r7
 800786a:	f000 faab 	bl	8007dc4 <_Bfree>
 800786e:	2d00      	cmp	r5, #0
 8007870:	d100      	bne.n	8007874 <_dtoa_r+0x9bc>
 8007872:	e6b7      	b.n	80075e4 <_dtoa_r+0x72c>
 8007874:	2c00      	cmp	r4, #0
 8007876:	d005      	beq.n	8007884 <_dtoa_r+0x9cc>
 8007878:	42ac      	cmp	r4, r5
 800787a:	d003      	beq.n	8007884 <_dtoa_r+0x9cc>
 800787c:	0021      	movs	r1, r4
 800787e:	0038      	movs	r0, r7
 8007880:	f000 faa0 	bl	8007dc4 <_Bfree>
 8007884:	0029      	movs	r1, r5
 8007886:	0038      	movs	r0, r7
 8007888:	f000 fa9c 	bl	8007dc4 <_Bfree>
 800788c:	e6aa      	b.n	80075e4 <_dtoa_r+0x72c>
 800788e:	2600      	movs	r6, #0
 8007890:	0035      	movs	r5, r6
 8007892:	e7e2      	b.n	800785a <_dtoa_r+0x9a2>
 8007894:	9602      	str	r6, [sp, #8]
 8007896:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007898:	0035      	movs	r5, r6
 800789a:	e584      	b.n	80073a6 <_dtoa_r+0x4ee>
 800789c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d100      	bne.n	80078a4 <_dtoa_r+0x9ec>
 80078a2:	e0ce      	b.n	8007a42 <_dtoa_r+0xb8a>
 80078a4:	9b07      	ldr	r3, [sp, #28]
 80078a6:	930c      	str	r3, [sp, #48]	; 0x30
 80078a8:	2c00      	cmp	r4, #0
 80078aa:	dd05      	ble.n	80078b8 <_dtoa_r+0xa00>
 80078ac:	0029      	movs	r1, r5
 80078ae:	0022      	movs	r2, r4
 80078b0:	0038      	movs	r0, r7
 80078b2:	f000 fc59 	bl	8008168 <__lshift>
 80078b6:	0005      	movs	r5, r0
 80078b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ba:	0028      	movs	r0, r5
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d022      	beq.n	8007906 <_dtoa_r+0xa4e>
 80078c0:	0038      	movs	r0, r7
 80078c2:	6869      	ldr	r1, [r5, #4]
 80078c4:	f000 fa3a 	bl	8007d3c <_Balloc>
 80078c8:	1e04      	subs	r4, r0, #0
 80078ca:	d10f      	bne.n	80078ec <_dtoa_r+0xa34>
 80078cc:	0002      	movs	r2, r0
 80078ce:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <_dtoa_r+0xa2c>)
 80078d0:	4905      	ldr	r1, [pc, #20]	; (80078e8 <_dtoa_r+0xa30>)
 80078d2:	f7ff fb06 	bl	8006ee2 <_dtoa_r+0x2a>
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	40240000 	.word	0x40240000
 80078dc:	00000433 	.word	0x00000433
 80078e0:	7ff00000 	.word	0x7ff00000
 80078e4:	080096c3 	.word	0x080096c3
 80078e8:	000002ea 	.word	0x000002ea
 80078ec:	0029      	movs	r1, r5
 80078ee:	692b      	ldr	r3, [r5, #16]
 80078f0:	310c      	adds	r1, #12
 80078f2:	1c9a      	adds	r2, r3, #2
 80078f4:	0092      	lsls	r2, r2, #2
 80078f6:	300c      	adds	r0, #12
 80078f8:	f000 fa17 	bl	8007d2a <memcpy>
 80078fc:	2201      	movs	r2, #1
 80078fe:	0021      	movs	r1, r4
 8007900:	0038      	movs	r0, r7
 8007902:	f000 fc31 	bl	8008168 <__lshift>
 8007906:	9b06      	ldr	r3, [sp, #24]
 8007908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800790a:	930a      	str	r3, [sp, #40]	; 0x28
 800790c:	3b01      	subs	r3, #1
 800790e:	189b      	adds	r3, r3, r2
 8007910:	2201      	movs	r2, #1
 8007912:	002c      	movs	r4, r5
 8007914:	0005      	movs	r5, r0
 8007916:	9314      	str	r3, [sp, #80]	; 0x50
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	4013      	ands	r3, r2
 800791c:	930f      	str	r3, [sp, #60]	; 0x3c
 800791e:	0031      	movs	r1, r6
 8007920:	9805      	ldr	r0, [sp, #20]
 8007922:	f7ff fa3d 	bl	8006da0 <quorem>
 8007926:	0003      	movs	r3, r0
 8007928:	0021      	movs	r1, r4
 800792a:	3330      	adds	r3, #48	; 0x30
 800792c:	900d      	str	r0, [sp, #52]	; 0x34
 800792e:	9805      	ldr	r0, [sp, #20]
 8007930:	9307      	str	r3, [sp, #28]
 8007932:	f000 fc87 	bl	8008244 <__mcmp>
 8007936:	002a      	movs	r2, r5
 8007938:	900e      	str	r0, [sp, #56]	; 0x38
 800793a:	0031      	movs	r1, r6
 800793c:	0038      	movs	r0, r7
 800793e:	f000 fc9d 	bl	800827c <__mdiff>
 8007942:	68c3      	ldr	r3, [r0, #12]
 8007944:	9008      	str	r0, [sp, #32]
 8007946:	9310      	str	r3, [sp, #64]	; 0x40
 8007948:	2301      	movs	r3, #1
 800794a:	930c      	str	r3, [sp, #48]	; 0x30
 800794c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d104      	bne.n	800795c <_dtoa_r+0xaa4>
 8007952:	0001      	movs	r1, r0
 8007954:	9805      	ldr	r0, [sp, #20]
 8007956:	f000 fc75 	bl	8008244 <__mcmp>
 800795a:	900c      	str	r0, [sp, #48]	; 0x30
 800795c:	0038      	movs	r0, r7
 800795e:	9908      	ldr	r1, [sp, #32]
 8007960:	f000 fa30 	bl	8007dc4 <_Bfree>
 8007964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007968:	3301      	adds	r3, #1
 800796a:	9308      	str	r3, [sp, #32]
 800796c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800796e:	4313      	orrs	r3, r2
 8007970:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007972:	4313      	orrs	r3, r2
 8007974:	d10c      	bne.n	8007990 <_dtoa_r+0xad8>
 8007976:	9b07      	ldr	r3, [sp, #28]
 8007978:	2b39      	cmp	r3, #57	; 0x39
 800797a:	d026      	beq.n	80079ca <_dtoa_r+0xb12>
 800797c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800797e:	2b00      	cmp	r3, #0
 8007980:	dd02      	ble.n	8007988 <_dtoa_r+0xad0>
 8007982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007984:	3331      	adds	r3, #49	; 0x31
 8007986:	9307      	str	r3, [sp, #28]
 8007988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798a:	9a07      	ldr	r2, [sp, #28]
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	e76a      	b.n	8007866 <_dtoa_r+0x9ae>
 8007990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007992:	2b00      	cmp	r3, #0
 8007994:	db04      	blt.n	80079a0 <_dtoa_r+0xae8>
 8007996:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007998:	4313      	orrs	r3, r2
 800799a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800799c:	4313      	orrs	r3, r2
 800799e:	d11f      	bne.n	80079e0 <_dtoa_r+0xb28>
 80079a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	ddf0      	ble.n	8007988 <_dtoa_r+0xad0>
 80079a6:	9905      	ldr	r1, [sp, #20]
 80079a8:	2201      	movs	r2, #1
 80079aa:	0038      	movs	r0, r7
 80079ac:	f000 fbdc 	bl	8008168 <__lshift>
 80079b0:	0031      	movs	r1, r6
 80079b2:	9005      	str	r0, [sp, #20]
 80079b4:	f000 fc46 	bl	8008244 <__mcmp>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	dc03      	bgt.n	80079c4 <_dtoa_r+0xb0c>
 80079bc:	d1e4      	bne.n	8007988 <_dtoa_r+0xad0>
 80079be:	9b07      	ldr	r3, [sp, #28]
 80079c0:	07db      	lsls	r3, r3, #31
 80079c2:	d5e1      	bpl.n	8007988 <_dtoa_r+0xad0>
 80079c4:	9b07      	ldr	r3, [sp, #28]
 80079c6:	2b39      	cmp	r3, #57	; 0x39
 80079c8:	d1db      	bne.n	8007982 <_dtoa_r+0xaca>
 80079ca:	2339      	movs	r3, #57	; 0x39
 80079cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ce:	7013      	strb	r3, [r2, #0]
 80079d0:	9b08      	ldr	r3, [sp, #32]
 80079d2:	9308      	str	r3, [sp, #32]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	2a39      	cmp	r2, #57	; 0x39
 80079da:	d068      	beq.n	8007aae <_dtoa_r+0xbf6>
 80079dc:	3201      	adds	r2, #1
 80079de:	e7d5      	b.n	800798c <_dtoa_r+0xad4>
 80079e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	dd07      	ble.n	80079f6 <_dtoa_r+0xb3e>
 80079e6:	9b07      	ldr	r3, [sp, #28]
 80079e8:	2b39      	cmp	r3, #57	; 0x39
 80079ea:	d0ee      	beq.n	80079ca <_dtoa_r+0xb12>
 80079ec:	9b07      	ldr	r3, [sp, #28]
 80079ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f0:	3301      	adds	r3, #1
 80079f2:	7013      	strb	r3, [r2, #0]
 80079f4:	e737      	b.n	8007866 <_dtoa_r+0x9ae>
 80079f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f8:	9a07      	ldr	r2, [sp, #28]
 80079fa:	701a      	strb	r2, [r3, #0]
 80079fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d03e      	beq.n	8007a82 <_dtoa_r+0xbca>
 8007a04:	2300      	movs	r3, #0
 8007a06:	220a      	movs	r2, #10
 8007a08:	9905      	ldr	r1, [sp, #20]
 8007a0a:	0038      	movs	r0, r7
 8007a0c:	f000 f9fe 	bl	8007e0c <__multadd>
 8007a10:	2300      	movs	r3, #0
 8007a12:	9005      	str	r0, [sp, #20]
 8007a14:	220a      	movs	r2, #10
 8007a16:	0021      	movs	r1, r4
 8007a18:	0038      	movs	r0, r7
 8007a1a:	42ac      	cmp	r4, r5
 8007a1c:	d106      	bne.n	8007a2c <_dtoa_r+0xb74>
 8007a1e:	f000 f9f5 	bl	8007e0c <__multadd>
 8007a22:	0004      	movs	r4, r0
 8007a24:	0005      	movs	r5, r0
 8007a26:	9b08      	ldr	r3, [sp, #32]
 8007a28:	930a      	str	r3, [sp, #40]	; 0x28
 8007a2a:	e778      	b.n	800791e <_dtoa_r+0xa66>
 8007a2c:	f000 f9ee 	bl	8007e0c <__multadd>
 8007a30:	0029      	movs	r1, r5
 8007a32:	0004      	movs	r4, r0
 8007a34:	2300      	movs	r3, #0
 8007a36:	220a      	movs	r2, #10
 8007a38:	0038      	movs	r0, r7
 8007a3a:	f000 f9e7 	bl	8007e0c <__multadd>
 8007a3e:	0005      	movs	r5, r0
 8007a40:	e7f1      	b.n	8007a26 <_dtoa_r+0xb6e>
 8007a42:	9b07      	ldr	r3, [sp, #28]
 8007a44:	930c      	str	r3, [sp, #48]	; 0x30
 8007a46:	2400      	movs	r4, #0
 8007a48:	0031      	movs	r1, r6
 8007a4a:	9805      	ldr	r0, [sp, #20]
 8007a4c:	f7ff f9a8 	bl	8006da0 <quorem>
 8007a50:	9b06      	ldr	r3, [sp, #24]
 8007a52:	3030      	adds	r0, #48	; 0x30
 8007a54:	5518      	strb	r0, [r3, r4]
 8007a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a58:	3401      	adds	r4, #1
 8007a5a:	9007      	str	r0, [sp, #28]
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	dd07      	ble.n	8007a70 <_dtoa_r+0xbb8>
 8007a60:	2300      	movs	r3, #0
 8007a62:	220a      	movs	r2, #10
 8007a64:	0038      	movs	r0, r7
 8007a66:	9905      	ldr	r1, [sp, #20]
 8007a68:	f000 f9d0 	bl	8007e0c <__multadd>
 8007a6c:	9005      	str	r0, [sp, #20]
 8007a6e:	e7eb      	b.n	8007a48 <_dtoa_r+0xb90>
 8007a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a72:	2001      	movs	r0, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd00      	ble.n	8007a7a <_dtoa_r+0xbc2>
 8007a78:	0018      	movs	r0, r3
 8007a7a:	2400      	movs	r4, #0
 8007a7c:	9b06      	ldr	r3, [sp, #24]
 8007a7e:	181b      	adds	r3, r3, r0
 8007a80:	9308      	str	r3, [sp, #32]
 8007a82:	9905      	ldr	r1, [sp, #20]
 8007a84:	2201      	movs	r2, #1
 8007a86:	0038      	movs	r0, r7
 8007a88:	f000 fb6e 	bl	8008168 <__lshift>
 8007a8c:	0031      	movs	r1, r6
 8007a8e:	9005      	str	r0, [sp, #20]
 8007a90:	f000 fbd8 	bl	8008244 <__mcmp>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	dc9b      	bgt.n	80079d0 <_dtoa_r+0xb18>
 8007a98:	d102      	bne.n	8007aa0 <_dtoa_r+0xbe8>
 8007a9a:	9b07      	ldr	r3, [sp, #28]
 8007a9c:	07db      	lsls	r3, r3, #31
 8007a9e:	d497      	bmi.n	80079d0 <_dtoa_r+0xb18>
 8007aa0:	9b08      	ldr	r3, [sp, #32]
 8007aa2:	9308      	str	r3, [sp, #32]
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	781a      	ldrb	r2, [r3, #0]
 8007aa8:	2a30      	cmp	r2, #48	; 0x30
 8007aaa:	d0fa      	beq.n	8007aa2 <_dtoa_r+0xbea>
 8007aac:	e6db      	b.n	8007866 <_dtoa_r+0x9ae>
 8007aae:	9a06      	ldr	r2, [sp, #24]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d18e      	bne.n	80079d2 <_dtoa_r+0xb1a>
 8007ab4:	9b02      	ldr	r3, [sp, #8]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	9302      	str	r3, [sp, #8]
 8007aba:	2331      	movs	r3, #49	; 0x31
 8007abc:	e799      	b.n	80079f2 <_dtoa_r+0xb3a>
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <_dtoa_r+0xc2c>)
 8007ac0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007ac2:	9306      	str	r3, [sp, #24]
 8007ac4:	4b08      	ldr	r3, [pc, #32]	; (8007ae8 <_dtoa_r+0xc30>)
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	d001      	beq.n	8007ace <_dtoa_r+0xc16>
 8007aca:	f7ff fa3f 	bl	8006f4c <_dtoa_r+0x94>
 8007ace:	f7ff fa3f 	bl	8006f50 <_dtoa_r+0x98>
 8007ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dcb6      	bgt.n	8007a46 <_dtoa_r+0xb8e>
 8007ad8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	dd00      	ble.n	8007ae0 <_dtoa_r+0xc28>
 8007ade:	e6ac      	b.n	800783a <_dtoa_r+0x982>
 8007ae0:	e7b1      	b.n	8007a46 <_dtoa_r+0xb8e>
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	08009644 	.word	0x08009644
 8007ae8:	0800964c 	.word	0x0800964c

08007aec <std>:
 8007aec:	2300      	movs	r3, #0
 8007aee:	b510      	push	{r4, lr}
 8007af0:	0004      	movs	r4, r0
 8007af2:	6003      	str	r3, [r0, #0]
 8007af4:	6043      	str	r3, [r0, #4]
 8007af6:	6083      	str	r3, [r0, #8]
 8007af8:	8181      	strh	r1, [r0, #12]
 8007afa:	6643      	str	r3, [r0, #100]	; 0x64
 8007afc:	0019      	movs	r1, r3
 8007afe:	81c2      	strh	r2, [r0, #14]
 8007b00:	6103      	str	r3, [r0, #16]
 8007b02:	6143      	str	r3, [r0, #20]
 8007b04:	6183      	str	r3, [r0, #24]
 8007b06:	2208      	movs	r2, #8
 8007b08:	305c      	adds	r0, #92	; 0x5c
 8007b0a:	f7fe fcb9 	bl	8006480 <memset>
 8007b0e:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <std+0x38>)
 8007b10:	6224      	str	r4, [r4, #32]
 8007b12:	6263      	str	r3, [r4, #36]	; 0x24
 8007b14:	4b04      	ldr	r3, [pc, #16]	; (8007b28 <std+0x3c>)
 8007b16:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <std+0x40>)
 8007b1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <std+0x44>)
 8007b1e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b20:	bd10      	pop	{r4, pc}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	08008979 	.word	0x08008979
 8007b28:	080089a1 	.word	0x080089a1
 8007b2c:	080089d9 	.word	0x080089d9
 8007b30:	08008a05 	.word	0x08008a05

08007b34 <_cleanup_r>:
 8007b34:	b510      	push	{r4, lr}
 8007b36:	4902      	ldr	r1, [pc, #8]	; (8007b40 <_cleanup_r+0xc>)
 8007b38:	f000 f8ba 	bl	8007cb0 <_fwalk_reent>
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	08008d4d 	.word	0x08008d4d

08007b44 <__sfmoreglue>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	2568      	movs	r5, #104	; 0x68
 8007b48:	1e4a      	subs	r2, r1, #1
 8007b4a:	4355      	muls	r5, r2
 8007b4c:	000e      	movs	r6, r1
 8007b4e:	0029      	movs	r1, r5
 8007b50:	3174      	adds	r1, #116	; 0x74
 8007b52:	f000 fd27 	bl	80085a4 <_malloc_r>
 8007b56:	1e04      	subs	r4, r0, #0
 8007b58:	d008      	beq.n	8007b6c <__sfmoreglue+0x28>
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	002a      	movs	r2, r5
 8007b5e:	6001      	str	r1, [r0, #0]
 8007b60:	6046      	str	r6, [r0, #4]
 8007b62:	300c      	adds	r0, #12
 8007b64:	60a0      	str	r0, [r4, #8]
 8007b66:	3268      	adds	r2, #104	; 0x68
 8007b68:	f7fe fc8a 	bl	8006480 <memset>
 8007b6c:	0020      	movs	r0, r4
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}

08007b70 <__sfp_lock_acquire>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	4802      	ldr	r0, [pc, #8]	; (8007b7c <__sfp_lock_acquire+0xc>)
 8007b74:	f000 f8c1 	bl	8007cfa <__retarget_lock_acquire_recursive>
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	200002c1 	.word	0x200002c1

08007b80 <__sfp_lock_release>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	4802      	ldr	r0, [pc, #8]	; (8007b8c <__sfp_lock_release+0xc>)
 8007b84:	f000 f8ba 	bl	8007cfc <__retarget_lock_release_recursive>
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	200002c1 	.word	0x200002c1

08007b90 <__sinit_lock_acquire>:
 8007b90:	b510      	push	{r4, lr}
 8007b92:	4802      	ldr	r0, [pc, #8]	; (8007b9c <__sinit_lock_acquire+0xc>)
 8007b94:	f000 f8b1 	bl	8007cfa <__retarget_lock_acquire_recursive>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	200002c2 	.word	0x200002c2

08007ba0 <__sinit_lock_release>:
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	4802      	ldr	r0, [pc, #8]	; (8007bac <__sinit_lock_release+0xc>)
 8007ba4:	f000 f8aa 	bl	8007cfc <__retarget_lock_release_recursive>
 8007ba8:	bd10      	pop	{r4, pc}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	200002c2 	.word	0x200002c2

08007bb0 <__sinit>:
 8007bb0:	b513      	push	{r0, r1, r4, lr}
 8007bb2:	0004      	movs	r4, r0
 8007bb4:	f7ff ffec 	bl	8007b90 <__sinit_lock_acquire>
 8007bb8:	69a3      	ldr	r3, [r4, #24]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <__sinit+0x14>
 8007bbe:	f7ff ffef 	bl	8007ba0 <__sinit_lock_release>
 8007bc2:	bd13      	pop	{r0, r1, r4, pc}
 8007bc4:	64a3      	str	r3, [r4, #72]	; 0x48
 8007bc6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8007bca:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <__sinit+0x68>)
 8007bcc:	4a13      	ldr	r2, [pc, #76]	; (8007c1c <__sinit+0x6c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	d101      	bne.n	8007bdc <__sinit+0x2c>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	61a3      	str	r3, [r4, #24]
 8007bdc:	0020      	movs	r0, r4
 8007bde:	f000 f81f 	bl	8007c20 <__sfp>
 8007be2:	6060      	str	r0, [r4, #4]
 8007be4:	0020      	movs	r0, r4
 8007be6:	f000 f81b 	bl	8007c20 <__sfp>
 8007bea:	60a0      	str	r0, [r4, #8]
 8007bec:	0020      	movs	r0, r4
 8007bee:	f000 f817 	bl	8007c20 <__sfp>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2104      	movs	r1, #4
 8007bf6:	60e0      	str	r0, [r4, #12]
 8007bf8:	6860      	ldr	r0, [r4, #4]
 8007bfa:	f7ff ff77 	bl	8007aec <std>
 8007bfe:	2201      	movs	r2, #1
 8007c00:	2109      	movs	r1, #9
 8007c02:	68a0      	ldr	r0, [r4, #8]
 8007c04:	f7ff ff72 	bl	8007aec <std>
 8007c08:	2202      	movs	r2, #2
 8007c0a:	2112      	movs	r1, #18
 8007c0c:	68e0      	ldr	r0, [r4, #12]
 8007c0e:	f7ff ff6d 	bl	8007aec <std>
 8007c12:	2301      	movs	r3, #1
 8007c14:	61a3      	str	r3, [r4, #24]
 8007c16:	e7d2      	b.n	8007bbe <__sinit+0xe>
 8007c18:	0800960c 	.word	0x0800960c
 8007c1c:	08007b35 	.word	0x08007b35

08007c20 <__sfp>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	0007      	movs	r7, r0
 8007c24:	f7ff ffa4 	bl	8007b70 <__sfp_lock_acquire>
 8007c28:	4b1f      	ldr	r3, [pc, #124]	; (8007ca8 <__sfp+0x88>)
 8007c2a:	681e      	ldr	r6, [r3, #0]
 8007c2c:	69b3      	ldr	r3, [r6, #24]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d102      	bne.n	8007c38 <__sfp+0x18>
 8007c32:	0030      	movs	r0, r6
 8007c34:	f7ff ffbc 	bl	8007bb0 <__sinit>
 8007c38:	3648      	adds	r6, #72	; 0x48
 8007c3a:	68b4      	ldr	r4, [r6, #8]
 8007c3c:	6873      	ldr	r3, [r6, #4]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	d504      	bpl.n	8007c4c <__sfp+0x2c>
 8007c42:	6833      	ldr	r3, [r6, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d022      	beq.n	8007c8e <__sfp+0x6e>
 8007c48:	6836      	ldr	r6, [r6, #0]
 8007c4a:	e7f6      	b.n	8007c3a <__sfp+0x1a>
 8007c4c:	220c      	movs	r2, #12
 8007c4e:	5ea5      	ldrsh	r5, [r4, r2]
 8007c50:	2d00      	cmp	r5, #0
 8007c52:	d11a      	bne.n	8007c8a <__sfp+0x6a>
 8007c54:	0020      	movs	r0, r4
 8007c56:	4b15      	ldr	r3, [pc, #84]	; (8007cac <__sfp+0x8c>)
 8007c58:	3058      	adds	r0, #88	; 0x58
 8007c5a:	60e3      	str	r3, [r4, #12]
 8007c5c:	6665      	str	r5, [r4, #100]	; 0x64
 8007c5e:	f000 f84b 	bl	8007cf8 <__retarget_lock_init_recursive>
 8007c62:	f7ff ff8d 	bl	8007b80 <__sfp_lock_release>
 8007c66:	0020      	movs	r0, r4
 8007c68:	2208      	movs	r2, #8
 8007c6a:	0029      	movs	r1, r5
 8007c6c:	6025      	str	r5, [r4, #0]
 8007c6e:	60a5      	str	r5, [r4, #8]
 8007c70:	6065      	str	r5, [r4, #4]
 8007c72:	6125      	str	r5, [r4, #16]
 8007c74:	6165      	str	r5, [r4, #20]
 8007c76:	61a5      	str	r5, [r4, #24]
 8007c78:	305c      	adds	r0, #92	; 0x5c
 8007c7a:	f7fe fc01 	bl	8006480 <memset>
 8007c7e:	6365      	str	r5, [r4, #52]	; 0x34
 8007c80:	63a5      	str	r5, [r4, #56]	; 0x38
 8007c82:	64a5      	str	r5, [r4, #72]	; 0x48
 8007c84:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007c86:	0020      	movs	r0, r4
 8007c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c8a:	3468      	adds	r4, #104	; 0x68
 8007c8c:	e7d7      	b.n	8007c3e <__sfp+0x1e>
 8007c8e:	2104      	movs	r1, #4
 8007c90:	0038      	movs	r0, r7
 8007c92:	f7ff ff57 	bl	8007b44 <__sfmoreglue>
 8007c96:	1e04      	subs	r4, r0, #0
 8007c98:	6030      	str	r0, [r6, #0]
 8007c9a:	d1d5      	bne.n	8007c48 <__sfp+0x28>
 8007c9c:	f7ff ff70 	bl	8007b80 <__sfp_lock_release>
 8007ca0:	230c      	movs	r3, #12
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	e7ef      	b.n	8007c86 <__sfp+0x66>
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	0800960c 	.word	0x0800960c
 8007cac:	ffff0001 	.word	0xffff0001

08007cb0 <_fwalk_reent>:
 8007cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cb2:	0004      	movs	r4, r0
 8007cb4:	0006      	movs	r6, r0
 8007cb6:	2700      	movs	r7, #0
 8007cb8:	9101      	str	r1, [sp, #4]
 8007cba:	3448      	adds	r4, #72	; 0x48
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	68a5      	ldr	r5, [r4, #8]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	9b00      	ldr	r3, [sp, #0]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	d504      	bpl.n	8007cd4 <_fwalk_reent+0x24>
 8007cca:	6824      	ldr	r4, [r4, #0]
 8007ccc:	2c00      	cmp	r4, #0
 8007cce:	d1f5      	bne.n	8007cbc <_fwalk_reent+0xc>
 8007cd0:	0038      	movs	r0, r7
 8007cd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007cd4:	89ab      	ldrh	r3, [r5, #12]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d908      	bls.n	8007cec <_fwalk_reent+0x3c>
 8007cda:	220e      	movs	r2, #14
 8007cdc:	5eab      	ldrsh	r3, [r5, r2]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	d004      	beq.n	8007cec <_fwalk_reent+0x3c>
 8007ce2:	0029      	movs	r1, r5
 8007ce4:	0030      	movs	r0, r6
 8007ce6:	9b01      	ldr	r3, [sp, #4]
 8007ce8:	4798      	blx	r3
 8007cea:	4307      	orrs	r7, r0
 8007cec:	3568      	adds	r5, #104	; 0x68
 8007cee:	e7e8      	b.n	8007cc2 <_fwalk_reent+0x12>

08007cf0 <_localeconv_r>:
 8007cf0:	4800      	ldr	r0, [pc, #0]	; (8007cf4 <_localeconv_r+0x4>)
 8007cf2:	4770      	bx	lr
 8007cf4:	20000170 	.word	0x20000170

08007cf8 <__retarget_lock_init_recursive>:
 8007cf8:	4770      	bx	lr

08007cfa <__retarget_lock_acquire_recursive>:
 8007cfa:	4770      	bx	lr

08007cfc <__retarget_lock_release_recursive>:
 8007cfc:	4770      	bx	lr
	...

08007d00 <malloc>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	4b03      	ldr	r3, [pc, #12]	; (8007d10 <malloc+0x10>)
 8007d04:	0001      	movs	r1, r0
 8007d06:	6818      	ldr	r0, [r3, #0]
 8007d08:	f000 fc4c 	bl	80085a4 <_malloc_r>
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	2000001c 	.word	0x2000001c

08007d14 <memchr>:
 8007d14:	b2c9      	uxtb	r1, r1
 8007d16:	1882      	adds	r2, r0, r2
 8007d18:	4290      	cmp	r0, r2
 8007d1a:	d101      	bne.n	8007d20 <memchr+0xc>
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	4770      	bx	lr
 8007d20:	7803      	ldrb	r3, [r0, #0]
 8007d22:	428b      	cmp	r3, r1
 8007d24:	d0fb      	beq.n	8007d1e <memchr+0xa>
 8007d26:	3001      	adds	r0, #1
 8007d28:	e7f6      	b.n	8007d18 <memchr+0x4>

08007d2a <memcpy>:
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d100      	bne.n	8007d34 <memcpy+0xa>
 8007d32:	bd10      	pop	{r4, pc}
 8007d34:	5ccc      	ldrb	r4, [r1, r3]
 8007d36:	54c4      	strb	r4, [r0, r3]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	e7f8      	b.n	8007d2e <memcpy+0x4>

08007d3c <_Balloc>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d40:	0006      	movs	r6, r0
 8007d42:	000c      	movs	r4, r1
 8007d44:	2d00      	cmp	r5, #0
 8007d46:	d10e      	bne.n	8007d66 <_Balloc+0x2a>
 8007d48:	2010      	movs	r0, #16
 8007d4a:	f7ff ffd9 	bl	8007d00 <malloc>
 8007d4e:	1e02      	subs	r2, r0, #0
 8007d50:	6270      	str	r0, [r6, #36]	; 0x24
 8007d52:	d104      	bne.n	8007d5e <_Balloc+0x22>
 8007d54:	2166      	movs	r1, #102	; 0x66
 8007d56:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <_Balloc+0x80>)
 8007d58:	4819      	ldr	r0, [pc, #100]	; (8007dc0 <_Balloc+0x84>)
 8007d5a:	f000 ff3b 	bl	8008bd4 <__assert_func>
 8007d5e:	6045      	str	r5, [r0, #4]
 8007d60:	6085      	str	r5, [r0, #8]
 8007d62:	6005      	str	r5, [r0, #0]
 8007d64:	60c5      	str	r5, [r0, #12]
 8007d66:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007d68:	68eb      	ldr	r3, [r5, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d013      	beq.n	8007d96 <_Balloc+0x5a>
 8007d6e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d70:	00a2      	lsls	r2, r4, #2
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	189b      	adds	r3, r3, r2
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d118      	bne.n	8007dae <_Balloc+0x72>
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	000d      	movs	r5, r1
 8007d80:	40a5      	lsls	r5, r4
 8007d82:	1d6a      	adds	r2, r5, #5
 8007d84:	0030      	movs	r0, r6
 8007d86:	0092      	lsls	r2, r2, #2
 8007d88:	f000 fb74 	bl	8008474 <_calloc_r>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d00c      	beq.n	8007daa <_Balloc+0x6e>
 8007d90:	6044      	str	r4, [r0, #4]
 8007d92:	6085      	str	r5, [r0, #8]
 8007d94:	e00d      	b.n	8007db2 <_Balloc+0x76>
 8007d96:	2221      	movs	r2, #33	; 0x21
 8007d98:	2104      	movs	r1, #4
 8007d9a:	0030      	movs	r0, r6
 8007d9c:	f000 fb6a 	bl	8008474 <_calloc_r>
 8007da0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007da2:	60e8      	str	r0, [r5, #12]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e1      	bne.n	8007d6e <_Balloc+0x32>
 8007daa:	2000      	movs	r0, #0
 8007dac:	bd70      	pop	{r4, r5, r6, pc}
 8007dae:	6802      	ldr	r2, [r0, #0]
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	2300      	movs	r3, #0
 8007db4:	6103      	str	r3, [r0, #16]
 8007db6:	60c3      	str	r3, [r0, #12]
 8007db8:	e7f8      	b.n	8007dac <_Balloc+0x70>
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	08009651 	.word	0x08009651
 8007dc0:	08009734 	.word	0x08009734

08007dc4 <_Bfree>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007dc8:	0005      	movs	r5, r0
 8007dca:	000c      	movs	r4, r1
 8007dcc:	2e00      	cmp	r6, #0
 8007dce:	d10e      	bne.n	8007dee <_Bfree+0x2a>
 8007dd0:	2010      	movs	r0, #16
 8007dd2:	f7ff ff95 	bl	8007d00 <malloc>
 8007dd6:	1e02      	subs	r2, r0, #0
 8007dd8:	6268      	str	r0, [r5, #36]	; 0x24
 8007dda:	d104      	bne.n	8007de6 <_Bfree+0x22>
 8007ddc:	218a      	movs	r1, #138	; 0x8a
 8007dde:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <_Bfree+0x40>)
 8007de0:	4809      	ldr	r0, [pc, #36]	; (8007e08 <_Bfree+0x44>)
 8007de2:	f000 fef7 	bl	8008bd4 <__assert_func>
 8007de6:	6046      	str	r6, [r0, #4]
 8007de8:	6086      	str	r6, [r0, #8]
 8007dea:	6006      	str	r6, [r0, #0]
 8007dec:	60c6      	str	r6, [r0, #12]
 8007dee:	2c00      	cmp	r4, #0
 8007df0:	d007      	beq.n	8007e02 <_Bfree+0x3e>
 8007df2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007df4:	6862      	ldr	r2, [r4, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	0092      	lsls	r2, r2, #2
 8007dfa:	189b      	adds	r3, r3, r2
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	6022      	str	r2, [r4, #0]
 8007e00:	601c      	str	r4, [r3, #0]
 8007e02:	bd70      	pop	{r4, r5, r6, pc}
 8007e04:	08009651 	.word	0x08009651
 8007e08:	08009734 	.word	0x08009734

08007e0c <__multadd>:
 8007e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e0e:	000e      	movs	r6, r1
 8007e10:	9001      	str	r0, [sp, #4]
 8007e12:	000c      	movs	r4, r1
 8007e14:	001d      	movs	r5, r3
 8007e16:	2000      	movs	r0, #0
 8007e18:	690f      	ldr	r7, [r1, #16]
 8007e1a:	3614      	adds	r6, #20
 8007e1c:	6833      	ldr	r3, [r6, #0]
 8007e1e:	3001      	adds	r0, #1
 8007e20:	b299      	uxth	r1, r3
 8007e22:	4351      	muls	r1, r2
 8007e24:	0c1b      	lsrs	r3, r3, #16
 8007e26:	4353      	muls	r3, r2
 8007e28:	1949      	adds	r1, r1, r5
 8007e2a:	0c0d      	lsrs	r5, r1, #16
 8007e2c:	195b      	adds	r3, r3, r5
 8007e2e:	0c1d      	lsrs	r5, r3, #16
 8007e30:	b289      	uxth	r1, r1
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	185b      	adds	r3, r3, r1
 8007e36:	c608      	stmia	r6!, {r3}
 8007e38:	4287      	cmp	r7, r0
 8007e3a:	dcef      	bgt.n	8007e1c <__multadd+0x10>
 8007e3c:	2d00      	cmp	r5, #0
 8007e3e:	d022      	beq.n	8007e86 <__multadd+0x7a>
 8007e40:	68a3      	ldr	r3, [r4, #8]
 8007e42:	42bb      	cmp	r3, r7
 8007e44:	dc19      	bgt.n	8007e7a <__multadd+0x6e>
 8007e46:	6863      	ldr	r3, [r4, #4]
 8007e48:	9801      	ldr	r0, [sp, #4]
 8007e4a:	1c59      	adds	r1, r3, #1
 8007e4c:	f7ff ff76 	bl	8007d3c <_Balloc>
 8007e50:	1e06      	subs	r6, r0, #0
 8007e52:	d105      	bne.n	8007e60 <__multadd+0x54>
 8007e54:	0002      	movs	r2, r0
 8007e56:	21b5      	movs	r1, #181	; 0xb5
 8007e58:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <__multadd+0x80>)
 8007e5a:	480d      	ldr	r0, [pc, #52]	; (8007e90 <__multadd+0x84>)
 8007e5c:	f000 feba 	bl	8008bd4 <__assert_func>
 8007e60:	0021      	movs	r1, r4
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	310c      	adds	r1, #12
 8007e66:	1c9a      	adds	r2, r3, #2
 8007e68:	0092      	lsls	r2, r2, #2
 8007e6a:	300c      	adds	r0, #12
 8007e6c:	f7ff ff5d 	bl	8007d2a <memcpy>
 8007e70:	0021      	movs	r1, r4
 8007e72:	9801      	ldr	r0, [sp, #4]
 8007e74:	f7ff ffa6 	bl	8007dc4 <_Bfree>
 8007e78:	0034      	movs	r4, r6
 8007e7a:	1d3b      	adds	r3, r7, #4
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	18e3      	adds	r3, r4, r3
 8007e80:	605d      	str	r5, [r3, #4]
 8007e82:	1c7b      	adds	r3, r7, #1
 8007e84:	6123      	str	r3, [r4, #16]
 8007e86:	0020      	movs	r0, r4
 8007e88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	080096c3 	.word	0x080096c3
 8007e90:	08009734 	.word	0x08009734

08007e94 <__hi0bits>:
 8007e94:	0003      	movs	r3, r0
 8007e96:	0c02      	lsrs	r2, r0, #16
 8007e98:	2000      	movs	r0, #0
 8007e9a:	4282      	cmp	r2, r0
 8007e9c:	d101      	bne.n	8007ea2 <__hi0bits+0xe>
 8007e9e:	041b      	lsls	r3, r3, #16
 8007ea0:	3010      	adds	r0, #16
 8007ea2:	0e1a      	lsrs	r2, r3, #24
 8007ea4:	d101      	bne.n	8007eaa <__hi0bits+0x16>
 8007ea6:	3008      	adds	r0, #8
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	0f1a      	lsrs	r2, r3, #28
 8007eac:	d101      	bne.n	8007eb2 <__hi0bits+0x1e>
 8007eae:	3004      	adds	r0, #4
 8007eb0:	011b      	lsls	r3, r3, #4
 8007eb2:	0f9a      	lsrs	r2, r3, #30
 8007eb4:	d101      	bne.n	8007eba <__hi0bits+0x26>
 8007eb6:	3002      	adds	r0, #2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	db03      	blt.n	8007ec6 <__hi0bits+0x32>
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	d400      	bmi.n	8007ec6 <__hi0bits+0x32>
 8007ec4:	2020      	movs	r0, #32
 8007ec6:	4770      	bx	lr

08007ec8 <__lo0bits>:
 8007ec8:	6803      	ldr	r3, [r0, #0]
 8007eca:	0002      	movs	r2, r0
 8007ecc:	2107      	movs	r1, #7
 8007ece:	0018      	movs	r0, r3
 8007ed0:	4008      	ands	r0, r1
 8007ed2:	420b      	tst	r3, r1
 8007ed4:	d00d      	beq.n	8007ef2 <__lo0bits+0x2a>
 8007ed6:	3906      	subs	r1, #6
 8007ed8:	2000      	movs	r0, #0
 8007eda:	420b      	tst	r3, r1
 8007edc:	d105      	bne.n	8007eea <__lo0bits+0x22>
 8007ede:	3002      	adds	r0, #2
 8007ee0:	4203      	tst	r3, r0
 8007ee2:	d003      	beq.n	8007eec <__lo0bits+0x24>
 8007ee4:	40cb      	lsrs	r3, r1
 8007ee6:	0008      	movs	r0, r1
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	4770      	bx	lr
 8007eec:	089b      	lsrs	r3, r3, #2
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	e7fb      	b.n	8007eea <__lo0bits+0x22>
 8007ef2:	b299      	uxth	r1, r3
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	d101      	bne.n	8007efc <__lo0bits+0x34>
 8007ef8:	2010      	movs	r0, #16
 8007efa:	0c1b      	lsrs	r3, r3, #16
 8007efc:	b2d9      	uxtb	r1, r3
 8007efe:	2900      	cmp	r1, #0
 8007f00:	d101      	bne.n	8007f06 <__lo0bits+0x3e>
 8007f02:	3008      	adds	r0, #8
 8007f04:	0a1b      	lsrs	r3, r3, #8
 8007f06:	0719      	lsls	r1, r3, #28
 8007f08:	d101      	bne.n	8007f0e <__lo0bits+0x46>
 8007f0a:	3004      	adds	r0, #4
 8007f0c:	091b      	lsrs	r3, r3, #4
 8007f0e:	0799      	lsls	r1, r3, #30
 8007f10:	d101      	bne.n	8007f16 <__lo0bits+0x4e>
 8007f12:	3002      	adds	r0, #2
 8007f14:	089b      	lsrs	r3, r3, #2
 8007f16:	07d9      	lsls	r1, r3, #31
 8007f18:	d4e9      	bmi.n	8007eee <__lo0bits+0x26>
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	085b      	lsrs	r3, r3, #1
 8007f1e:	d1e6      	bne.n	8007eee <__lo0bits+0x26>
 8007f20:	2020      	movs	r0, #32
 8007f22:	e7e2      	b.n	8007eea <__lo0bits+0x22>

08007f24 <__i2b>:
 8007f24:	b510      	push	{r4, lr}
 8007f26:	000c      	movs	r4, r1
 8007f28:	2101      	movs	r1, #1
 8007f2a:	f7ff ff07 	bl	8007d3c <_Balloc>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d106      	bne.n	8007f40 <__i2b+0x1c>
 8007f32:	21a0      	movs	r1, #160	; 0xa0
 8007f34:	0002      	movs	r2, r0
 8007f36:	4b04      	ldr	r3, [pc, #16]	; (8007f48 <__i2b+0x24>)
 8007f38:	4804      	ldr	r0, [pc, #16]	; (8007f4c <__i2b+0x28>)
 8007f3a:	0049      	lsls	r1, r1, #1
 8007f3c:	f000 fe4a 	bl	8008bd4 <__assert_func>
 8007f40:	2301      	movs	r3, #1
 8007f42:	6144      	str	r4, [r0, #20]
 8007f44:	6103      	str	r3, [r0, #16]
 8007f46:	bd10      	pop	{r4, pc}
 8007f48:	080096c3 	.word	0x080096c3
 8007f4c:	08009734 	.word	0x08009734

08007f50 <__multiply>:
 8007f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f52:	690b      	ldr	r3, [r1, #16]
 8007f54:	0014      	movs	r4, r2
 8007f56:	6912      	ldr	r2, [r2, #16]
 8007f58:	000d      	movs	r5, r1
 8007f5a:	b089      	sub	sp, #36	; 0x24
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	da01      	bge.n	8007f64 <__multiply+0x14>
 8007f60:	0025      	movs	r5, r4
 8007f62:	000c      	movs	r4, r1
 8007f64:	692f      	ldr	r7, [r5, #16]
 8007f66:	6926      	ldr	r6, [r4, #16]
 8007f68:	6869      	ldr	r1, [r5, #4]
 8007f6a:	19bb      	adds	r3, r7, r6
 8007f6c:	9302      	str	r3, [sp, #8]
 8007f6e:	68ab      	ldr	r3, [r5, #8]
 8007f70:	19ba      	adds	r2, r7, r6
 8007f72:	4293      	cmp	r3, r2
 8007f74:	da00      	bge.n	8007f78 <__multiply+0x28>
 8007f76:	3101      	adds	r1, #1
 8007f78:	f7ff fee0 	bl	8007d3c <_Balloc>
 8007f7c:	9001      	str	r0, [sp, #4]
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d106      	bne.n	8007f90 <__multiply+0x40>
 8007f82:	215e      	movs	r1, #94	; 0x5e
 8007f84:	0002      	movs	r2, r0
 8007f86:	4b48      	ldr	r3, [pc, #288]	; (80080a8 <__multiply+0x158>)
 8007f88:	4848      	ldr	r0, [pc, #288]	; (80080ac <__multiply+0x15c>)
 8007f8a:	31ff      	adds	r1, #255	; 0xff
 8007f8c:	f000 fe22 	bl	8008bd4 <__assert_func>
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	3314      	adds	r3, #20
 8007f96:	469c      	mov	ip, r3
 8007f98:	19bb      	adds	r3, r7, r6
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4463      	add	r3, ip
 8007f9e:	9303      	str	r3, [sp, #12]
 8007fa0:	4663      	mov	r3, ip
 8007fa2:	9903      	ldr	r1, [sp, #12]
 8007fa4:	428b      	cmp	r3, r1
 8007fa6:	d32c      	bcc.n	8008002 <__multiply+0xb2>
 8007fa8:	002b      	movs	r3, r5
 8007faa:	0022      	movs	r2, r4
 8007fac:	3314      	adds	r3, #20
 8007fae:	00bf      	lsls	r7, r7, #2
 8007fb0:	3214      	adds	r2, #20
 8007fb2:	9306      	str	r3, [sp, #24]
 8007fb4:	00b6      	lsls	r6, r6, #2
 8007fb6:	19db      	adds	r3, r3, r7
 8007fb8:	9304      	str	r3, [sp, #16]
 8007fba:	1993      	adds	r3, r2, r6
 8007fbc:	9307      	str	r3, [sp, #28]
 8007fbe:	2304      	movs	r3, #4
 8007fc0:	9305      	str	r3, [sp, #20]
 8007fc2:	002b      	movs	r3, r5
 8007fc4:	9904      	ldr	r1, [sp, #16]
 8007fc6:	3315      	adds	r3, #21
 8007fc8:	9200      	str	r2, [sp, #0]
 8007fca:	4299      	cmp	r1, r3
 8007fcc:	d305      	bcc.n	8007fda <__multiply+0x8a>
 8007fce:	1b4b      	subs	r3, r1, r5
 8007fd0:	3b15      	subs	r3, #21
 8007fd2:	089b      	lsrs	r3, r3, #2
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	9305      	str	r3, [sp, #20]
 8007fda:	9b07      	ldr	r3, [sp, #28]
 8007fdc:	9a00      	ldr	r2, [sp, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d311      	bcc.n	8008006 <__multiply+0xb6>
 8007fe2:	9b02      	ldr	r3, [sp, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dd06      	ble.n	8007ff6 <__multiply+0xa6>
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	3b04      	subs	r3, #4
 8007fec:	9303      	str	r3, [sp, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d053      	beq.n	800809e <__multiply+0x14e>
 8007ff6:	9b01      	ldr	r3, [sp, #4]
 8007ff8:	9a02      	ldr	r2, [sp, #8]
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	611a      	str	r2, [r3, #16]
 8007ffe:	b009      	add	sp, #36	; 0x24
 8008000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008002:	c304      	stmia	r3!, {r2}
 8008004:	e7cd      	b.n	8007fa2 <__multiply+0x52>
 8008006:	9b00      	ldr	r3, [sp, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	b298      	uxth	r0, r3
 800800c:	2800      	cmp	r0, #0
 800800e:	d01b      	beq.n	8008048 <__multiply+0xf8>
 8008010:	4667      	mov	r7, ip
 8008012:	2400      	movs	r4, #0
 8008014:	9e06      	ldr	r6, [sp, #24]
 8008016:	ce02      	ldmia	r6!, {r1}
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	b28b      	uxth	r3, r1
 800801c:	4343      	muls	r3, r0
 800801e:	b292      	uxth	r2, r2
 8008020:	189b      	adds	r3, r3, r2
 8008022:	191b      	adds	r3, r3, r4
 8008024:	0c0c      	lsrs	r4, r1, #16
 8008026:	4344      	muls	r4, r0
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	0c11      	lsrs	r1, r2, #16
 800802c:	1861      	adds	r1, r4, r1
 800802e:	0c1c      	lsrs	r4, r3, #16
 8008030:	1909      	adds	r1, r1, r4
 8008032:	0c0c      	lsrs	r4, r1, #16
 8008034:	b29b      	uxth	r3, r3
 8008036:	0409      	lsls	r1, r1, #16
 8008038:	430b      	orrs	r3, r1
 800803a:	c708      	stmia	r7!, {r3}
 800803c:	9b04      	ldr	r3, [sp, #16]
 800803e:	42b3      	cmp	r3, r6
 8008040:	d8e9      	bhi.n	8008016 <__multiply+0xc6>
 8008042:	4663      	mov	r3, ip
 8008044:	9a05      	ldr	r2, [sp, #20]
 8008046:	509c      	str	r4, [r3, r2]
 8008048:	9b00      	ldr	r3, [sp, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	0c1e      	lsrs	r6, r3, #16
 800804e:	d020      	beq.n	8008092 <__multiply+0x142>
 8008050:	4663      	mov	r3, ip
 8008052:	002c      	movs	r4, r5
 8008054:	4660      	mov	r0, ip
 8008056:	2700      	movs	r7, #0
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3414      	adds	r4, #20
 800805c:	6822      	ldr	r2, [r4, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	b291      	uxth	r1, r2
 8008062:	4371      	muls	r1, r6
 8008064:	6802      	ldr	r2, [r0, #0]
 8008066:	0c12      	lsrs	r2, r2, #16
 8008068:	1889      	adds	r1, r1, r2
 800806a:	19cf      	adds	r7, r1, r7
 800806c:	0439      	lsls	r1, r7, #16
 800806e:	430b      	orrs	r3, r1
 8008070:	6003      	str	r3, [r0, #0]
 8008072:	cc02      	ldmia	r4!, {r1}
 8008074:	6843      	ldr	r3, [r0, #4]
 8008076:	0c09      	lsrs	r1, r1, #16
 8008078:	4371      	muls	r1, r6
 800807a:	b29b      	uxth	r3, r3
 800807c:	0c3f      	lsrs	r7, r7, #16
 800807e:	18cb      	adds	r3, r1, r3
 8008080:	9a04      	ldr	r2, [sp, #16]
 8008082:	19db      	adds	r3, r3, r7
 8008084:	0c1f      	lsrs	r7, r3, #16
 8008086:	3004      	adds	r0, #4
 8008088:	42a2      	cmp	r2, r4
 800808a:	d8e7      	bhi.n	800805c <__multiply+0x10c>
 800808c:	4662      	mov	r2, ip
 800808e:	9905      	ldr	r1, [sp, #20]
 8008090:	5053      	str	r3, [r2, r1]
 8008092:	9b00      	ldr	r3, [sp, #0]
 8008094:	3304      	adds	r3, #4
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	2304      	movs	r3, #4
 800809a:	449c      	add	ip, r3
 800809c:	e79d      	b.n	8007fda <__multiply+0x8a>
 800809e:	9b02      	ldr	r3, [sp, #8]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	9302      	str	r3, [sp, #8]
 80080a4:	e79d      	b.n	8007fe2 <__multiply+0x92>
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	080096c3 	.word	0x080096c3
 80080ac:	08009734 	.word	0x08009734

080080b0 <__pow5mult>:
 80080b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080b2:	2303      	movs	r3, #3
 80080b4:	0015      	movs	r5, r2
 80080b6:	0007      	movs	r7, r0
 80080b8:	000e      	movs	r6, r1
 80080ba:	401a      	ands	r2, r3
 80080bc:	421d      	tst	r5, r3
 80080be:	d008      	beq.n	80080d2 <__pow5mult+0x22>
 80080c0:	4925      	ldr	r1, [pc, #148]	; (8008158 <__pow5mult+0xa8>)
 80080c2:	3a01      	subs	r2, #1
 80080c4:	0092      	lsls	r2, r2, #2
 80080c6:	5852      	ldr	r2, [r2, r1]
 80080c8:	2300      	movs	r3, #0
 80080ca:	0031      	movs	r1, r6
 80080cc:	f7ff fe9e 	bl	8007e0c <__multadd>
 80080d0:	0006      	movs	r6, r0
 80080d2:	10ad      	asrs	r5, r5, #2
 80080d4:	d03d      	beq.n	8008152 <__pow5mult+0xa2>
 80080d6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80080d8:	2c00      	cmp	r4, #0
 80080da:	d10f      	bne.n	80080fc <__pow5mult+0x4c>
 80080dc:	2010      	movs	r0, #16
 80080de:	f7ff fe0f 	bl	8007d00 <malloc>
 80080e2:	1e02      	subs	r2, r0, #0
 80080e4:	6278      	str	r0, [r7, #36]	; 0x24
 80080e6:	d105      	bne.n	80080f4 <__pow5mult+0x44>
 80080e8:	21d7      	movs	r1, #215	; 0xd7
 80080ea:	4b1c      	ldr	r3, [pc, #112]	; (800815c <__pow5mult+0xac>)
 80080ec:	481c      	ldr	r0, [pc, #112]	; (8008160 <__pow5mult+0xb0>)
 80080ee:	0049      	lsls	r1, r1, #1
 80080f0:	f000 fd70 	bl	8008bd4 <__assert_func>
 80080f4:	6044      	str	r4, [r0, #4]
 80080f6:	6084      	str	r4, [r0, #8]
 80080f8:	6004      	str	r4, [r0, #0]
 80080fa:	60c4      	str	r4, [r0, #12]
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	689c      	ldr	r4, [r3, #8]
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	2c00      	cmp	r4, #0
 8008104:	d108      	bne.n	8008118 <__pow5mult+0x68>
 8008106:	0038      	movs	r0, r7
 8008108:	4916      	ldr	r1, [pc, #88]	; (8008164 <__pow5mult+0xb4>)
 800810a:	f7ff ff0b 	bl	8007f24 <__i2b>
 800810e:	9b01      	ldr	r3, [sp, #4]
 8008110:	0004      	movs	r4, r0
 8008112:	6098      	str	r0, [r3, #8]
 8008114:	2300      	movs	r3, #0
 8008116:	6003      	str	r3, [r0, #0]
 8008118:	2301      	movs	r3, #1
 800811a:	421d      	tst	r5, r3
 800811c:	d00a      	beq.n	8008134 <__pow5mult+0x84>
 800811e:	0031      	movs	r1, r6
 8008120:	0022      	movs	r2, r4
 8008122:	0038      	movs	r0, r7
 8008124:	f7ff ff14 	bl	8007f50 <__multiply>
 8008128:	0031      	movs	r1, r6
 800812a:	9001      	str	r0, [sp, #4]
 800812c:	0038      	movs	r0, r7
 800812e:	f7ff fe49 	bl	8007dc4 <_Bfree>
 8008132:	9e01      	ldr	r6, [sp, #4]
 8008134:	106d      	asrs	r5, r5, #1
 8008136:	d00c      	beq.n	8008152 <__pow5mult+0xa2>
 8008138:	6820      	ldr	r0, [r4, #0]
 800813a:	2800      	cmp	r0, #0
 800813c:	d107      	bne.n	800814e <__pow5mult+0x9e>
 800813e:	0022      	movs	r2, r4
 8008140:	0021      	movs	r1, r4
 8008142:	0038      	movs	r0, r7
 8008144:	f7ff ff04 	bl	8007f50 <__multiply>
 8008148:	2300      	movs	r3, #0
 800814a:	6020      	str	r0, [r4, #0]
 800814c:	6003      	str	r3, [r0, #0]
 800814e:	0004      	movs	r4, r0
 8008150:	e7e2      	b.n	8008118 <__pow5mult+0x68>
 8008152:	0030      	movs	r0, r6
 8008154:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	08009880 	.word	0x08009880
 800815c:	08009651 	.word	0x08009651
 8008160:	08009734 	.word	0x08009734
 8008164:	00000271 	.word	0x00000271

08008168 <__lshift>:
 8008168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816a:	000c      	movs	r4, r1
 800816c:	0017      	movs	r7, r2
 800816e:	6923      	ldr	r3, [r4, #16]
 8008170:	1155      	asrs	r5, r2, #5
 8008172:	b087      	sub	sp, #28
 8008174:	18eb      	adds	r3, r5, r3
 8008176:	9302      	str	r3, [sp, #8]
 8008178:	3301      	adds	r3, #1
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	6849      	ldr	r1, [r1, #4]
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	9004      	str	r0, [sp, #16]
 8008182:	9a01      	ldr	r2, [sp, #4]
 8008184:	4293      	cmp	r3, r2
 8008186:	db10      	blt.n	80081aa <__lshift+0x42>
 8008188:	9804      	ldr	r0, [sp, #16]
 800818a:	f7ff fdd7 	bl	8007d3c <_Balloc>
 800818e:	2300      	movs	r3, #0
 8008190:	0002      	movs	r2, r0
 8008192:	0006      	movs	r6, r0
 8008194:	0019      	movs	r1, r3
 8008196:	3214      	adds	r2, #20
 8008198:	4298      	cmp	r0, r3
 800819a:	d10c      	bne.n	80081b6 <__lshift+0x4e>
 800819c:	21da      	movs	r1, #218	; 0xda
 800819e:	0002      	movs	r2, r0
 80081a0:	4b26      	ldr	r3, [pc, #152]	; (800823c <__lshift+0xd4>)
 80081a2:	4827      	ldr	r0, [pc, #156]	; (8008240 <__lshift+0xd8>)
 80081a4:	31ff      	adds	r1, #255	; 0xff
 80081a6:	f000 fd15 	bl	8008bd4 <__assert_func>
 80081aa:	3101      	adds	r1, #1
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	e7e8      	b.n	8008182 <__lshift+0x1a>
 80081b0:	0098      	lsls	r0, r3, #2
 80081b2:	5011      	str	r1, [r2, r0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	42ab      	cmp	r3, r5
 80081b8:	dbfa      	blt.n	80081b0 <__lshift+0x48>
 80081ba:	43eb      	mvns	r3, r5
 80081bc:	17db      	asrs	r3, r3, #31
 80081be:	401d      	ands	r5, r3
 80081c0:	211f      	movs	r1, #31
 80081c2:	0023      	movs	r3, r4
 80081c4:	0038      	movs	r0, r7
 80081c6:	00ad      	lsls	r5, r5, #2
 80081c8:	1955      	adds	r5, r2, r5
 80081ca:	6922      	ldr	r2, [r4, #16]
 80081cc:	3314      	adds	r3, #20
 80081ce:	0092      	lsls	r2, r2, #2
 80081d0:	4008      	ands	r0, r1
 80081d2:	4684      	mov	ip, r0
 80081d4:	189a      	adds	r2, r3, r2
 80081d6:	420f      	tst	r7, r1
 80081d8:	d02a      	beq.n	8008230 <__lshift+0xc8>
 80081da:	3101      	adds	r1, #1
 80081dc:	1a09      	subs	r1, r1, r0
 80081de:	9105      	str	r1, [sp, #20]
 80081e0:	2100      	movs	r1, #0
 80081e2:	9503      	str	r5, [sp, #12]
 80081e4:	4667      	mov	r7, ip
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	40b8      	lsls	r0, r7
 80081ea:	4301      	orrs	r1, r0
 80081ec:	9803      	ldr	r0, [sp, #12]
 80081ee:	c002      	stmia	r0!, {r1}
 80081f0:	cb02      	ldmia	r3!, {r1}
 80081f2:	9003      	str	r0, [sp, #12]
 80081f4:	9805      	ldr	r0, [sp, #20]
 80081f6:	40c1      	lsrs	r1, r0
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d8f3      	bhi.n	80081e4 <__lshift+0x7c>
 80081fc:	0020      	movs	r0, r4
 80081fe:	3015      	adds	r0, #21
 8008200:	2304      	movs	r3, #4
 8008202:	4282      	cmp	r2, r0
 8008204:	d304      	bcc.n	8008210 <__lshift+0xa8>
 8008206:	1b13      	subs	r3, r2, r4
 8008208:	3b15      	subs	r3, #21
 800820a:	089b      	lsrs	r3, r3, #2
 800820c:	3301      	adds	r3, #1
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	50e9      	str	r1, [r5, r3]
 8008212:	2900      	cmp	r1, #0
 8008214:	d002      	beq.n	800821c <__lshift+0xb4>
 8008216:	9b02      	ldr	r3, [sp, #8]
 8008218:	3302      	adds	r3, #2
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	9b01      	ldr	r3, [sp, #4]
 800821e:	9804      	ldr	r0, [sp, #16]
 8008220:	3b01      	subs	r3, #1
 8008222:	0021      	movs	r1, r4
 8008224:	6133      	str	r3, [r6, #16]
 8008226:	f7ff fdcd 	bl	8007dc4 <_Bfree>
 800822a:	0030      	movs	r0, r6
 800822c:	b007      	add	sp, #28
 800822e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008230:	cb02      	ldmia	r3!, {r1}
 8008232:	c502      	stmia	r5!, {r1}
 8008234:	429a      	cmp	r2, r3
 8008236:	d8fb      	bhi.n	8008230 <__lshift+0xc8>
 8008238:	e7f0      	b.n	800821c <__lshift+0xb4>
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	080096c3 	.word	0x080096c3
 8008240:	08009734 	.word	0x08009734

08008244 <__mcmp>:
 8008244:	6902      	ldr	r2, [r0, #16]
 8008246:	690b      	ldr	r3, [r1, #16]
 8008248:	b530      	push	{r4, r5, lr}
 800824a:	0004      	movs	r4, r0
 800824c:	1ad0      	subs	r0, r2, r3
 800824e:	429a      	cmp	r2, r3
 8008250:	d10d      	bne.n	800826e <__mcmp+0x2a>
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	3414      	adds	r4, #20
 8008256:	3114      	adds	r1, #20
 8008258:	18e2      	adds	r2, r4, r3
 800825a:	18c9      	adds	r1, r1, r3
 800825c:	3a04      	subs	r2, #4
 800825e:	3904      	subs	r1, #4
 8008260:	6815      	ldr	r5, [r2, #0]
 8008262:	680b      	ldr	r3, [r1, #0]
 8008264:	429d      	cmp	r5, r3
 8008266:	d003      	beq.n	8008270 <__mcmp+0x2c>
 8008268:	2001      	movs	r0, #1
 800826a:	429d      	cmp	r5, r3
 800826c:	d303      	bcc.n	8008276 <__mcmp+0x32>
 800826e:	bd30      	pop	{r4, r5, pc}
 8008270:	4294      	cmp	r4, r2
 8008272:	d3f3      	bcc.n	800825c <__mcmp+0x18>
 8008274:	e7fb      	b.n	800826e <__mcmp+0x2a>
 8008276:	4240      	negs	r0, r0
 8008278:	e7f9      	b.n	800826e <__mcmp+0x2a>
	...

0800827c <__mdiff>:
 800827c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800827e:	000e      	movs	r6, r1
 8008280:	0007      	movs	r7, r0
 8008282:	0011      	movs	r1, r2
 8008284:	0030      	movs	r0, r6
 8008286:	b087      	sub	sp, #28
 8008288:	0014      	movs	r4, r2
 800828a:	f7ff ffdb 	bl	8008244 <__mcmp>
 800828e:	1e05      	subs	r5, r0, #0
 8008290:	d110      	bne.n	80082b4 <__mdiff+0x38>
 8008292:	0001      	movs	r1, r0
 8008294:	0038      	movs	r0, r7
 8008296:	f7ff fd51 	bl	8007d3c <_Balloc>
 800829a:	1e02      	subs	r2, r0, #0
 800829c:	d104      	bne.n	80082a8 <__mdiff+0x2c>
 800829e:	4b40      	ldr	r3, [pc, #256]	; (80083a0 <__mdiff+0x124>)
 80082a0:	4940      	ldr	r1, [pc, #256]	; (80083a4 <__mdiff+0x128>)
 80082a2:	4841      	ldr	r0, [pc, #260]	; (80083a8 <__mdiff+0x12c>)
 80082a4:	f000 fc96 	bl	8008bd4 <__assert_func>
 80082a8:	2301      	movs	r3, #1
 80082aa:	6145      	str	r5, [r0, #20]
 80082ac:	6103      	str	r3, [r0, #16]
 80082ae:	0010      	movs	r0, r2
 80082b0:	b007      	add	sp, #28
 80082b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b4:	2301      	movs	r3, #1
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	2800      	cmp	r0, #0
 80082ba:	db04      	blt.n	80082c6 <__mdiff+0x4a>
 80082bc:	0023      	movs	r3, r4
 80082be:	0034      	movs	r4, r6
 80082c0:	001e      	movs	r6, r3
 80082c2:	2300      	movs	r3, #0
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	0038      	movs	r0, r7
 80082c8:	6861      	ldr	r1, [r4, #4]
 80082ca:	f7ff fd37 	bl	8007d3c <_Balloc>
 80082ce:	1e02      	subs	r2, r0, #0
 80082d0:	d103      	bne.n	80082da <__mdiff+0x5e>
 80082d2:	2190      	movs	r1, #144	; 0x90
 80082d4:	4b32      	ldr	r3, [pc, #200]	; (80083a0 <__mdiff+0x124>)
 80082d6:	0089      	lsls	r1, r1, #2
 80082d8:	e7e3      	b.n	80082a2 <__mdiff+0x26>
 80082da:	9b01      	ldr	r3, [sp, #4]
 80082dc:	2700      	movs	r7, #0
 80082de:	60c3      	str	r3, [r0, #12]
 80082e0:	6920      	ldr	r0, [r4, #16]
 80082e2:	3414      	adds	r4, #20
 80082e4:	9401      	str	r4, [sp, #4]
 80082e6:	9b01      	ldr	r3, [sp, #4]
 80082e8:	0084      	lsls	r4, r0, #2
 80082ea:	191b      	adds	r3, r3, r4
 80082ec:	0034      	movs	r4, r6
 80082ee:	9302      	str	r3, [sp, #8]
 80082f0:	6933      	ldr	r3, [r6, #16]
 80082f2:	3414      	adds	r4, #20
 80082f4:	0099      	lsls	r1, r3, #2
 80082f6:	1863      	adds	r3, r4, r1
 80082f8:	9303      	str	r3, [sp, #12]
 80082fa:	0013      	movs	r3, r2
 80082fc:	3314      	adds	r3, #20
 80082fe:	469c      	mov	ip, r3
 8008300:	9305      	str	r3, [sp, #20]
 8008302:	9b01      	ldr	r3, [sp, #4]
 8008304:	9304      	str	r3, [sp, #16]
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	cc02      	ldmia	r4!, {r1}
 800830a:	cb20      	ldmia	r3!, {r5}
 800830c:	9304      	str	r3, [sp, #16]
 800830e:	b2ab      	uxth	r3, r5
 8008310:	19df      	adds	r7, r3, r7
 8008312:	b28b      	uxth	r3, r1
 8008314:	1afb      	subs	r3, r7, r3
 8008316:	0c09      	lsrs	r1, r1, #16
 8008318:	0c2d      	lsrs	r5, r5, #16
 800831a:	1a6d      	subs	r5, r5, r1
 800831c:	1419      	asrs	r1, r3, #16
 800831e:	186d      	adds	r5, r5, r1
 8008320:	4661      	mov	r1, ip
 8008322:	142f      	asrs	r7, r5, #16
 8008324:	b29b      	uxth	r3, r3
 8008326:	042d      	lsls	r5, r5, #16
 8008328:	432b      	orrs	r3, r5
 800832a:	c108      	stmia	r1!, {r3}
 800832c:	9b03      	ldr	r3, [sp, #12]
 800832e:	468c      	mov	ip, r1
 8008330:	42a3      	cmp	r3, r4
 8008332:	d8e8      	bhi.n	8008306 <__mdiff+0x8a>
 8008334:	0031      	movs	r1, r6
 8008336:	9c03      	ldr	r4, [sp, #12]
 8008338:	3115      	adds	r1, #21
 800833a:	2304      	movs	r3, #4
 800833c:	428c      	cmp	r4, r1
 800833e:	d304      	bcc.n	800834a <__mdiff+0xce>
 8008340:	1ba3      	subs	r3, r4, r6
 8008342:	3b15      	subs	r3, #21
 8008344:	089b      	lsrs	r3, r3, #2
 8008346:	3301      	adds	r3, #1
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	9901      	ldr	r1, [sp, #4]
 800834c:	18cc      	adds	r4, r1, r3
 800834e:	9905      	ldr	r1, [sp, #20]
 8008350:	0026      	movs	r6, r4
 8008352:	18cb      	adds	r3, r1, r3
 8008354:	469c      	mov	ip, r3
 8008356:	9902      	ldr	r1, [sp, #8]
 8008358:	428e      	cmp	r6, r1
 800835a:	d310      	bcc.n	800837e <__mdiff+0x102>
 800835c:	9e02      	ldr	r6, [sp, #8]
 800835e:	1ee1      	subs	r1, r4, #3
 8008360:	2500      	movs	r5, #0
 8008362:	428e      	cmp	r6, r1
 8008364:	d304      	bcc.n	8008370 <__mdiff+0xf4>
 8008366:	0031      	movs	r1, r6
 8008368:	3103      	adds	r1, #3
 800836a:	1b0c      	subs	r4, r1, r4
 800836c:	08a4      	lsrs	r4, r4, #2
 800836e:	00a5      	lsls	r5, r4, #2
 8008370:	195b      	adds	r3, r3, r5
 8008372:	3b04      	subs	r3, #4
 8008374:	6819      	ldr	r1, [r3, #0]
 8008376:	2900      	cmp	r1, #0
 8008378:	d00f      	beq.n	800839a <__mdiff+0x11e>
 800837a:	6110      	str	r0, [r2, #16]
 800837c:	e797      	b.n	80082ae <__mdiff+0x32>
 800837e:	ce02      	ldmia	r6!, {r1}
 8008380:	b28d      	uxth	r5, r1
 8008382:	19ed      	adds	r5, r5, r7
 8008384:	0c0f      	lsrs	r7, r1, #16
 8008386:	1429      	asrs	r1, r5, #16
 8008388:	1879      	adds	r1, r7, r1
 800838a:	140f      	asrs	r7, r1, #16
 800838c:	b2ad      	uxth	r5, r5
 800838e:	0409      	lsls	r1, r1, #16
 8008390:	430d      	orrs	r5, r1
 8008392:	4661      	mov	r1, ip
 8008394:	c120      	stmia	r1!, {r5}
 8008396:	468c      	mov	ip, r1
 8008398:	e7dd      	b.n	8008356 <__mdiff+0xda>
 800839a:	3801      	subs	r0, #1
 800839c:	e7e9      	b.n	8008372 <__mdiff+0xf6>
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	080096c3 	.word	0x080096c3
 80083a4:	00000232 	.word	0x00000232
 80083a8:	08009734 	.word	0x08009734

080083ac <__d2b>:
 80083ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ae:	2101      	movs	r1, #1
 80083b0:	0014      	movs	r4, r2
 80083b2:	001e      	movs	r6, r3
 80083b4:	9f08      	ldr	r7, [sp, #32]
 80083b6:	f7ff fcc1 	bl	8007d3c <_Balloc>
 80083ba:	1e05      	subs	r5, r0, #0
 80083bc:	d105      	bne.n	80083ca <__d2b+0x1e>
 80083be:	0002      	movs	r2, r0
 80083c0:	4b26      	ldr	r3, [pc, #152]	; (800845c <__d2b+0xb0>)
 80083c2:	4927      	ldr	r1, [pc, #156]	; (8008460 <__d2b+0xb4>)
 80083c4:	4827      	ldr	r0, [pc, #156]	; (8008464 <__d2b+0xb8>)
 80083c6:	f000 fc05 	bl	8008bd4 <__assert_func>
 80083ca:	0333      	lsls	r3, r6, #12
 80083cc:	0076      	lsls	r6, r6, #1
 80083ce:	0b1b      	lsrs	r3, r3, #12
 80083d0:	0d76      	lsrs	r6, r6, #21
 80083d2:	d124      	bne.n	800841e <__d2b+0x72>
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	2c00      	cmp	r4, #0
 80083d8:	d027      	beq.n	800842a <__d2b+0x7e>
 80083da:	4668      	mov	r0, sp
 80083dc:	9400      	str	r4, [sp, #0]
 80083de:	f7ff fd73 	bl	8007ec8 <__lo0bits>
 80083e2:	9c00      	ldr	r4, [sp, #0]
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d01e      	beq.n	8008426 <__d2b+0x7a>
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	2120      	movs	r1, #32
 80083ec:	001a      	movs	r2, r3
 80083ee:	1a09      	subs	r1, r1, r0
 80083f0:	408a      	lsls	r2, r1
 80083f2:	40c3      	lsrs	r3, r0
 80083f4:	4322      	orrs	r2, r4
 80083f6:	616a      	str	r2, [r5, #20]
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	9c01      	ldr	r4, [sp, #4]
 80083fc:	61ac      	str	r4, [r5, #24]
 80083fe:	1e63      	subs	r3, r4, #1
 8008400:	419c      	sbcs	r4, r3
 8008402:	3401      	adds	r4, #1
 8008404:	612c      	str	r4, [r5, #16]
 8008406:	2e00      	cmp	r6, #0
 8008408:	d018      	beq.n	800843c <__d2b+0x90>
 800840a:	4b17      	ldr	r3, [pc, #92]	; (8008468 <__d2b+0xbc>)
 800840c:	18f6      	adds	r6, r6, r3
 800840e:	2335      	movs	r3, #53	; 0x35
 8008410:	1836      	adds	r6, r6, r0
 8008412:	1a18      	subs	r0, r3, r0
 8008414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008416:	603e      	str	r6, [r7, #0]
 8008418:	6018      	str	r0, [r3, #0]
 800841a:	0028      	movs	r0, r5
 800841c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800841e:	2280      	movs	r2, #128	; 0x80
 8008420:	0352      	lsls	r2, r2, #13
 8008422:	4313      	orrs	r3, r2
 8008424:	e7d6      	b.n	80083d4 <__d2b+0x28>
 8008426:	616c      	str	r4, [r5, #20]
 8008428:	e7e7      	b.n	80083fa <__d2b+0x4e>
 800842a:	a801      	add	r0, sp, #4
 800842c:	f7ff fd4c 	bl	8007ec8 <__lo0bits>
 8008430:	2401      	movs	r4, #1
 8008432:	9b01      	ldr	r3, [sp, #4]
 8008434:	612c      	str	r4, [r5, #16]
 8008436:	616b      	str	r3, [r5, #20]
 8008438:	3020      	adds	r0, #32
 800843a:	e7e4      	b.n	8008406 <__d2b+0x5a>
 800843c:	4b0b      	ldr	r3, [pc, #44]	; (800846c <__d2b+0xc0>)
 800843e:	18c0      	adds	r0, r0, r3
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <__d2b+0xc4>)
 8008442:	6038      	str	r0, [r7, #0]
 8008444:	18e3      	adds	r3, r4, r3
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	18eb      	adds	r3, r5, r3
 800844a:	6958      	ldr	r0, [r3, #20]
 800844c:	f7ff fd22 	bl	8007e94 <__hi0bits>
 8008450:	0164      	lsls	r4, r4, #5
 8008452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008454:	1a24      	subs	r4, r4, r0
 8008456:	601c      	str	r4, [r3, #0]
 8008458:	e7df      	b.n	800841a <__d2b+0x6e>
 800845a:	46c0      	nop			; (mov r8, r8)
 800845c:	080096c3 	.word	0x080096c3
 8008460:	0000030a 	.word	0x0000030a
 8008464:	08009734 	.word	0x08009734
 8008468:	fffffbcd 	.word	0xfffffbcd
 800846c:	fffffbce 	.word	0xfffffbce
 8008470:	3fffffff 	.word	0x3fffffff

08008474 <_calloc_r>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	0c13      	lsrs	r3, r2, #16
 8008478:	0c0d      	lsrs	r5, r1, #16
 800847a:	d11e      	bne.n	80084ba <_calloc_r+0x46>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10c      	bne.n	800849a <_calloc_r+0x26>
 8008480:	b289      	uxth	r1, r1
 8008482:	b294      	uxth	r4, r2
 8008484:	434c      	muls	r4, r1
 8008486:	0021      	movs	r1, r4
 8008488:	f000 f88c 	bl	80085a4 <_malloc_r>
 800848c:	1e05      	subs	r5, r0, #0
 800848e:	d01b      	beq.n	80084c8 <_calloc_r+0x54>
 8008490:	0022      	movs	r2, r4
 8008492:	2100      	movs	r1, #0
 8008494:	f7fd fff4 	bl	8006480 <memset>
 8008498:	e016      	b.n	80084c8 <_calloc_r+0x54>
 800849a:	1c1d      	adds	r5, r3, #0
 800849c:	1c0b      	adds	r3, r1, #0
 800849e:	b292      	uxth	r2, r2
 80084a0:	b289      	uxth	r1, r1
 80084a2:	b29c      	uxth	r4, r3
 80084a4:	4351      	muls	r1, r2
 80084a6:	b2ab      	uxth	r3, r5
 80084a8:	4363      	muls	r3, r4
 80084aa:	0c0c      	lsrs	r4, r1, #16
 80084ac:	191c      	adds	r4, r3, r4
 80084ae:	0c22      	lsrs	r2, r4, #16
 80084b0:	d107      	bne.n	80084c2 <_calloc_r+0x4e>
 80084b2:	0424      	lsls	r4, r4, #16
 80084b4:	b289      	uxth	r1, r1
 80084b6:	430c      	orrs	r4, r1
 80084b8:	e7e5      	b.n	8008486 <_calloc_r+0x12>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <_calloc_r+0x4e>
 80084be:	1c13      	adds	r3, r2, #0
 80084c0:	e7ed      	b.n	800849e <_calloc_r+0x2a>
 80084c2:	230c      	movs	r3, #12
 80084c4:	2500      	movs	r5, #0
 80084c6:	6003      	str	r3, [r0, #0]
 80084c8:	0028      	movs	r0, r5
 80084ca:	bd70      	pop	{r4, r5, r6, pc}

080084cc <_free_r>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	0005      	movs	r5, r0
 80084d0:	2900      	cmp	r1, #0
 80084d2:	d010      	beq.n	80084f6 <_free_r+0x2a>
 80084d4:	1f0c      	subs	r4, r1, #4
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	da00      	bge.n	80084de <_free_r+0x12>
 80084dc:	18e4      	adds	r4, r4, r3
 80084de:	0028      	movs	r0, r5
 80084e0:	f000 fd16 	bl	8008f10 <__malloc_lock>
 80084e4:	4a1d      	ldr	r2, [pc, #116]	; (800855c <_free_r+0x90>)
 80084e6:	6813      	ldr	r3, [r2, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d105      	bne.n	80084f8 <_free_r+0x2c>
 80084ec:	6063      	str	r3, [r4, #4]
 80084ee:	6014      	str	r4, [r2, #0]
 80084f0:	0028      	movs	r0, r5
 80084f2:	f000 fd15 	bl	8008f20 <__malloc_unlock>
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	d908      	bls.n	800850e <_free_r+0x42>
 80084fc:	6821      	ldr	r1, [r4, #0]
 80084fe:	1860      	adds	r0, r4, r1
 8008500:	4283      	cmp	r3, r0
 8008502:	d1f3      	bne.n	80084ec <_free_r+0x20>
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	1841      	adds	r1, r0, r1
 800850a:	6021      	str	r1, [r4, #0]
 800850c:	e7ee      	b.n	80084ec <_free_r+0x20>
 800850e:	001a      	movs	r2, r3
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <_free_r+0x4e>
 8008516:	42a3      	cmp	r3, r4
 8008518:	d9f9      	bls.n	800850e <_free_r+0x42>
 800851a:	6811      	ldr	r1, [r2, #0]
 800851c:	1850      	adds	r0, r2, r1
 800851e:	42a0      	cmp	r0, r4
 8008520:	d10b      	bne.n	800853a <_free_r+0x6e>
 8008522:	6820      	ldr	r0, [r4, #0]
 8008524:	1809      	adds	r1, r1, r0
 8008526:	1850      	adds	r0, r2, r1
 8008528:	6011      	str	r1, [r2, #0]
 800852a:	4283      	cmp	r3, r0
 800852c:	d1e0      	bne.n	80084f0 <_free_r+0x24>
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	1841      	adds	r1, r0, r1
 8008534:	6011      	str	r1, [r2, #0]
 8008536:	6053      	str	r3, [r2, #4]
 8008538:	e7da      	b.n	80084f0 <_free_r+0x24>
 800853a:	42a0      	cmp	r0, r4
 800853c:	d902      	bls.n	8008544 <_free_r+0x78>
 800853e:	230c      	movs	r3, #12
 8008540:	602b      	str	r3, [r5, #0]
 8008542:	e7d5      	b.n	80084f0 <_free_r+0x24>
 8008544:	6821      	ldr	r1, [r4, #0]
 8008546:	1860      	adds	r0, r4, r1
 8008548:	4283      	cmp	r3, r0
 800854a:	d103      	bne.n	8008554 <_free_r+0x88>
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	1841      	adds	r1, r0, r1
 8008552:	6021      	str	r1, [r4, #0]
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	6054      	str	r4, [r2, #4]
 8008558:	e7ca      	b.n	80084f0 <_free_r+0x24>
 800855a:	46c0      	nop			; (mov r8, r8)
 800855c:	200002c4 	.word	0x200002c4

08008560 <sbrk_aligned>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	4e0f      	ldr	r6, [pc, #60]	; (80085a0 <sbrk_aligned+0x40>)
 8008564:	000d      	movs	r5, r1
 8008566:	6831      	ldr	r1, [r6, #0]
 8008568:	0004      	movs	r4, r0
 800856a:	2900      	cmp	r1, #0
 800856c:	d102      	bne.n	8008574 <sbrk_aligned+0x14>
 800856e:	f000 f9f1 	bl	8008954 <_sbrk_r>
 8008572:	6030      	str	r0, [r6, #0]
 8008574:	0029      	movs	r1, r5
 8008576:	0020      	movs	r0, r4
 8008578:	f000 f9ec 	bl	8008954 <_sbrk_r>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d00a      	beq.n	8008596 <sbrk_aligned+0x36>
 8008580:	2303      	movs	r3, #3
 8008582:	1cc5      	adds	r5, r0, #3
 8008584:	439d      	bics	r5, r3
 8008586:	42a8      	cmp	r0, r5
 8008588:	d007      	beq.n	800859a <sbrk_aligned+0x3a>
 800858a:	1a29      	subs	r1, r5, r0
 800858c:	0020      	movs	r0, r4
 800858e:	f000 f9e1 	bl	8008954 <_sbrk_r>
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	d101      	bne.n	800859a <sbrk_aligned+0x3a>
 8008596:	2501      	movs	r5, #1
 8008598:	426d      	negs	r5, r5
 800859a:	0028      	movs	r0, r5
 800859c:	bd70      	pop	{r4, r5, r6, pc}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	200002c8 	.word	0x200002c8

080085a4 <_malloc_r>:
 80085a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085a6:	2203      	movs	r2, #3
 80085a8:	1ccb      	adds	r3, r1, #3
 80085aa:	4393      	bics	r3, r2
 80085ac:	3308      	adds	r3, #8
 80085ae:	0006      	movs	r6, r0
 80085b0:	001f      	movs	r7, r3
 80085b2:	2b0c      	cmp	r3, #12
 80085b4:	d232      	bcs.n	800861c <_malloc_r+0x78>
 80085b6:	270c      	movs	r7, #12
 80085b8:	42b9      	cmp	r1, r7
 80085ba:	d831      	bhi.n	8008620 <_malloc_r+0x7c>
 80085bc:	0030      	movs	r0, r6
 80085be:	f000 fca7 	bl	8008f10 <__malloc_lock>
 80085c2:	4d32      	ldr	r5, [pc, #200]	; (800868c <_malloc_r+0xe8>)
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	001c      	movs	r4, r3
 80085c8:	2c00      	cmp	r4, #0
 80085ca:	d12e      	bne.n	800862a <_malloc_r+0x86>
 80085cc:	0039      	movs	r1, r7
 80085ce:	0030      	movs	r0, r6
 80085d0:	f7ff ffc6 	bl	8008560 <sbrk_aligned>
 80085d4:	0004      	movs	r4, r0
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d11e      	bne.n	8008618 <_malloc_r+0x74>
 80085da:	682c      	ldr	r4, [r5, #0]
 80085dc:	0025      	movs	r5, r4
 80085de:	2d00      	cmp	r5, #0
 80085e0:	d14a      	bne.n	8008678 <_malloc_r+0xd4>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	0029      	movs	r1, r5
 80085e6:	18e3      	adds	r3, r4, r3
 80085e8:	0030      	movs	r0, r6
 80085ea:	9301      	str	r3, [sp, #4]
 80085ec:	f000 f9b2 	bl	8008954 <_sbrk_r>
 80085f0:	9b01      	ldr	r3, [sp, #4]
 80085f2:	4283      	cmp	r3, r0
 80085f4:	d143      	bne.n	800867e <_malloc_r+0xda>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	3703      	adds	r7, #3
 80085fa:	1aff      	subs	r7, r7, r3
 80085fc:	2303      	movs	r3, #3
 80085fe:	439f      	bics	r7, r3
 8008600:	3708      	adds	r7, #8
 8008602:	2f0c      	cmp	r7, #12
 8008604:	d200      	bcs.n	8008608 <_malloc_r+0x64>
 8008606:	270c      	movs	r7, #12
 8008608:	0039      	movs	r1, r7
 800860a:	0030      	movs	r0, r6
 800860c:	f7ff ffa8 	bl	8008560 <sbrk_aligned>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d034      	beq.n	800867e <_malloc_r+0xda>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	19df      	adds	r7, r3, r7
 8008618:	6027      	str	r7, [r4, #0]
 800861a:	e013      	b.n	8008644 <_malloc_r+0xa0>
 800861c:	2b00      	cmp	r3, #0
 800861e:	dacb      	bge.n	80085b8 <_malloc_r+0x14>
 8008620:	230c      	movs	r3, #12
 8008622:	2500      	movs	r5, #0
 8008624:	6033      	str	r3, [r6, #0]
 8008626:	0028      	movs	r0, r5
 8008628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	1bd1      	subs	r1, r2, r7
 800862e:	d420      	bmi.n	8008672 <_malloc_r+0xce>
 8008630:	290b      	cmp	r1, #11
 8008632:	d917      	bls.n	8008664 <_malloc_r+0xc0>
 8008634:	19e2      	adds	r2, r4, r7
 8008636:	6027      	str	r7, [r4, #0]
 8008638:	42a3      	cmp	r3, r4
 800863a:	d111      	bne.n	8008660 <_malloc_r+0xbc>
 800863c:	602a      	str	r2, [r5, #0]
 800863e:	6863      	ldr	r3, [r4, #4]
 8008640:	6011      	str	r1, [r2, #0]
 8008642:	6053      	str	r3, [r2, #4]
 8008644:	0030      	movs	r0, r6
 8008646:	0025      	movs	r5, r4
 8008648:	f000 fc6a 	bl	8008f20 <__malloc_unlock>
 800864c:	2207      	movs	r2, #7
 800864e:	350b      	adds	r5, #11
 8008650:	1d23      	adds	r3, r4, #4
 8008652:	4395      	bics	r5, r2
 8008654:	1aea      	subs	r2, r5, r3
 8008656:	429d      	cmp	r5, r3
 8008658:	d0e5      	beq.n	8008626 <_malloc_r+0x82>
 800865a:	1b5b      	subs	r3, r3, r5
 800865c:	50a3      	str	r3, [r4, r2]
 800865e:	e7e2      	b.n	8008626 <_malloc_r+0x82>
 8008660:	605a      	str	r2, [r3, #4]
 8008662:	e7ec      	b.n	800863e <_malloc_r+0x9a>
 8008664:	6862      	ldr	r2, [r4, #4]
 8008666:	42a3      	cmp	r3, r4
 8008668:	d101      	bne.n	800866e <_malloc_r+0xca>
 800866a:	602a      	str	r2, [r5, #0]
 800866c:	e7ea      	b.n	8008644 <_malloc_r+0xa0>
 800866e:	605a      	str	r2, [r3, #4]
 8008670:	e7e8      	b.n	8008644 <_malloc_r+0xa0>
 8008672:	0023      	movs	r3, r4
 8008674:	6864      	ldr	r4, [r4, #4]
 8008676:	e7a7      	b.n	80085c8 <_malloc_r+0x24>
 8008678:	002c      	movs	r4, r5
 800867a:	686d      	ldr	r5, [r5, #4]
 800867c:	e7af      	b.n	80085de <_malloc_r+0x3a>
 800867e:	230c      	movs	r3, #12
 8008680:	0030      	movs	r0, r6
 8008682:	6033      	str	r3, [r6, #0]
 8008684:	f000 fc4c 	bl	8008f20 <__malloc_unlock>
 8008688:	e7cd      	b.n	8008626 <_malloc_r+0x82>
 800868a:	46c0      	nop			; (mov r8, r8)
 800868c:	200002c4 	.word	0x200002c4

08008690 <__sfputc_r>:
 8008690:	6893      	ldr	r3, [r2, #8]
 8008692:	b510      	push	{r4, lr}
 8008694:	3b01      	subs	r3, #1
 8008696:	6093      	str	r3, [r2, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	da04      	bge.n	80086a6 <__sfputc_r+0x16>
 800869c:	6994      	ldr	r4, [r2, #24]
 800869e:	42a3      	cmp	r3, r4
 80086a0:	db07      	blt.n	80086b2 <__sfputc_r+0x22>
 80086a2:	290a      	cmp	r1, #10
 80086a4:	d005      	beq.n	80086b2 <__sfputc_r+0x22>
 80086a6:	6813      	ldr	r3, [r2, #0]
 80086a8:	1c58      	adds	r0, r3, #1
 80086aa:	6010      	str	r0, [r2, #0]
 80086ac:	7019      	strb	r1, [r3, #0]
 80086ae:	0008      	movs	r0, r1
 80086b0:	bd10      	pop	{r4, pc}
 80086b2:	f000 f9ad 	bl	8008a10 <__swbuf_r>
 80086b6:	0001      	movs	r1, r0
 80086b8:	e7f9      	b.n	80086ae <__sfputc_r+0x1e>

080086ba <__sfputs_r>:
 80086ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086bc:	0006      	movs	r6, r0
 80086be:	000f      	movs	r7, r1
 80086c0:	0014      	movs	r4, r2
 80086c2:	18d5      	adds	r5, r2, r3
 80086c4:	42ac      	cmp	r4, r5
 80086c6:	d101      	bne.n	80086cc <__sfputs_r+0x12>
 80086c8:	2000      	movs	r0, #0
 80086ca:	e007      	b.n	80086dc <__sfputs_r+0x22>
 80086cc:	7821      	ldrb	r1, [r4, #0]
 80086ce:	003a      	movs	r2, r7
 80086d0:	0030      	movs	r0, r6
 80086d2:	f7ff ffdd 	bl	8008690 <__sfputc_r>
 80086d6:	3401      	adds	r4, #1
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d1f3      	bne.n	80086c4 <__sfputs_r+0xa>
 80086dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086e0 <_vfiprintf_r>:
 80086e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e2:	b0a1      	sub	sp, #132	; 0x84
 80086e4:	0006      	movs	r6, r0
 80086e6:	000c      	movs	r4, r1
 80086e8:	001f      	movs	r7, r3
 80086ea:	9203      	str	r2, [sp, #12]
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d004      	beq.n	80086fa <_vfiprintf_r+0x1a>
 80086f0:	6983      	ldr	r3, [r0, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <_vfiprintf_r+0x1a>
 80086f6:	f7ff fa5b 	bl	8007bb0 <__sinit>
 80086fa:	4b8e      	ldr	r3, [pc, #568]	; (8008934 <_vfiprintf_r+0x254>)
 80086fc:	429c      	cmp	r4, r3
 80086fe:	d11c      	bne.n	800873a <_vfiprintf_r+0x5a>
 8008700:	6874      	ldr	r4, [r6, #4]
 8008702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008704:	07db      	lsls	r3, r3, #31
 8008706:	d405      	bmi.n	8008714 <_vfiprintf_r+0x34>
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	059b      	lsls	r3, r3, #22
 800870c:	d402      	bmi.n	8008714 <_vfiprintf_r+0x34>
 800870e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008710:	f7ff faf3 	bl	8007cfa <__retarget_lock_acquire_recursive>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	071b      	lsls	r3, r3, #28
 8008718:	d502      	bpl.n	8008720 <_vfiprintf_r+0x40>
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d11d      	bne.n	800875c <_vfiprintf_r+0x7c>
 8008720:	0021      	movs	r1, r4
 8008722:	0030      	movs	r0, r6
 8008724:	f000 f9de 	bl	8008ae4 <__swsetup_r>
 8008728:	2800      	cmp	r0, #0
 800872a:	d017      	beq.n	800875c <_vfiprintf_r+0x7c>
 800872c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800872e:	07db      	lsls	r3, r3, #31
 8008730:	d50d      	bpl.n	800874e <_vfiprintf_r+0x6e>
 8008732:	2001      	movs	r0, #1
 8008734:	4240      	negs	r0, r0
 8008736:	b021      	add	sp, #132	; 0x84
 8008738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800873a:	4b7f      	ldr	r3, [pc, #508]	; (8008938 <_vfiprintf_r+0x258>)
 800873c:	429c      	cmp	r4, r3
 800873e:	d101      	bne.n	8008744 <_vfiprintf_r+0x64>
 8008740:	68b4      	ldr	r4, [r6, #8]
 8008742:	e7de      	b.n	8008702 <_vfiprintf_r+0x22>
 8008744:	4b7d      	ldr	r3, [pc, #500]	; (800893c <_vfiprintf_r+0x25c>)
 8008746:	429c      	cmp	r4, r3
 8008748:	d1db      	bne.n	8008702 <_vfiprintf_r+0x22>
 800874a:	68f4      	ldr	r4, [r6, #12]
 800874c:	e7d9      	b.n	8008702 <_vfiprintf_r+0x22>
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	059b      	lsls	r3, r3, #22
 8008752:	d4ee      	bmi.n	8008732 <_vfiprintf_r+0x52>
 8008754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008756:	f7ff fad1 	bl	8007cfc <__retarget_lock_release_recursive>
 800875a:	e7ea      	b.n	8008732 <_vfiprintf_r+0x52>
 800875c:	2300      	movs	r3, #0
 800875e:	ad08      	add	r5, sp, #32
 8008760:	616b      	str	r3, [r5, #20]
 8008762:	3320      	adds	r3, #32
 8008764:	766b      	strb	r3, [r5, #25]
 8008766:	3310      	adds	r3, #16
 8008768:	76ab      	strb	r3, [r5, #26]
 800876a:	9707      	str	r7, [sp, #28]
 800876c:	9f03      	ldr	r7, [sp, #12]
 800876e:	783b      	ldrb	r3, [r7, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <_vfiprintf_r+0x98>
 8008774:	2b25      	cmp	r3, #37	; 0x25
 8008776:	d14e      	bne.n	8008816 <_vfiprintf_r+0x136>
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	1afb      	subs	r3, r7, r3
 800877c:	9305      	str	r3, [sp, #20]
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	429f      	cmp	r7, r3
 8008782:	d00d      	beq.n	80087a0 <_vfiprintf_r+0xc0>
 8008784:	9b05      	ldr	r3, [sp, #20]
 8008786:	0021      	movs	r1, r4
 8008788:	0030      	movs	r0, r6
 800878a:	9a03      	ldr	r2, [sp, #12]
 800878c:	f7ff ff95 	bl	80086ba <__sfputs_r>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d100      	bne.n	8008796 <_vfiprintf_r+0xb6>
 8008794:	e0b5      	b.n	8008902 <_vfiprintf_r+0x222>
 8008796:	696a      	ldr	r2, [r5, #20]
 8008798:	9b05      	ldr	r3, [sp, #20]
 800879a:	4694      	mov	ip, r2
 800879c:	4463      	add	r3, ip
 800879e:	616b      	str	r3, [r5, #20]
 80087a0:	783b      	ldrb	r3, [r7, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d100      	bne.n	80087a8 <_vfiprintf_r+0xc8>
 80087a6:	e0ac      	b.n	8008902 <_vfiprintf_r+0x222>
 80087a8:	2201      	movs	r2, #1
 80087aa:	1c7b      	adds	r3, r7, #1
 80087ac:	9303      	str	r3, [sp, #12]
 80087ae:	2300      	movs	r3, #0
 80087b0:	4252      	negs	r2, r2
 80087b2:	606a      	str	r2, [r5, #4]
 80087b4:	a904      	add	r1, sp, #16
 80087b6:	3254      	adds	r2, #84	; 0x54
 80087b8:	1852      	adds	r2, r2, r1
 80087ba:	602b      	str	r3, [r5, #0]
 80087bc:	60eb      	str	r3, [r5, #12]
 80087be:	60ab      	str	r3, [r5, #8]
 80087c0:	7013      	strb	r3, [r2, #0]
 80087c2:	65ab      	str	r3, [r5, #88]	; 0x58
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	2205      	movs	r2, #5
 80087c8:	7819      	ldrb	r1, [r3, #0]
 80087ca:	485d      	ldr	r0, [pc, #372]	; (8008940 <_vfiprintf_r+0x260>)
 80087cc:	f7ff faa2 	bl	8007d14 <memchr>
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	1c5f      	adds	r7, r3, #1
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d120      	bne.n	800881a <_vfiprintf_r+0x13a>
 80087d8:	682a      	ldr	r2, [r5, #0]
 80087da:	06d3      	lsls	r3, r2, #27
 80087dc:	d504      	bpl.n	80087e8 <_vfiprintf_r+0x108>
 80087de:	2353      	movs	r3, #83	; 0x53
 80087e0:	a904      	add	r1, sp, #16
 80087e2:	185b      	adds	r3, r3, r1
 80087e4:	2120      	movs	r1, #32
 80087e6:	7019      	strb	r1, [r3, #0]
 80087e8:	0713      	lsls	r3, r2, #28
 80087ea:	d504      	bpl.n	80087f6 <_vfiprintf_r+0x116>
 80087ec:	2353      	movs	r3, #83	; 0x53
 80087ee:	a904      	add	r1, sp, #16
 80087f0:	185b      	adds	r3, r3, r1
 80087f2:	212b      	movs	r1, #43	; 0x2b
 80087f4:	7019      	strb	r1, [r3, #0]
 80087f6:	9b03      	ldr	r3, [sp, #12]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b2a      	cmp	r3, #42	; 0x2a
 80087fc:	d016      	beq.n	800882c <_vfiprintf_r+0x14c>
 80087fe:	2100      	movs	r1, #0
 8008800:	68eb      	ldr	r3, [r5, #12]
 8008802:	9f03      	ldr	r7, [sp, #12]
 8008804:	783a      	ldrb	r2, [r7, #0]
 8008806:	1c78      	adds	r0, r7, #1
 8008808:	3a30      	subs	r2, #48	; 0x30
 800880a:	4684      	mov	ip, r0
 800880c:	2a09      	cmp	r2, #9
 800880e:	d94f      	bls.n	80088b0 <_vfiprintf_r+0x1d0>
 8008810:	2900      	cmp	r1, #0
 8008812:	d111      	bne.n	8008838 <_vfiprintf_r+0x158>
 8008814:	e017      	b.n	8008846 <_vfiprintf_r+0x166>
 8008816:	3701      	adds	r7, #1
 8008818:	e7a9      	b.n	800876e <_vfiprintf_r+0x8e>
 800881a:	4b49      	ldr	r3, [pc, #292]	; (8008940 <_vfiprintf_r+0x260>)
 800881c:	682a      	ldr	r2, [r5, #0]
 800881e:	1ac0      	subs	r0, r0, r3
 8008820:	2301      	movs	r3, #1
 8008822:	4083      	lsls	r3, r0
 8008824:	4313      	orrs	r3, r2
 8008826:	602b      	str	r3, [r5, #0]
 8008828:	9703      	str	r7, [sp, #12]
 800882a:	e7cb      	b.n	80087c4 <_vfiprintf_r+0xe4>
 800882c:	9b07      	ldr	r3, [sp, #28]
 800882e:	1d19      	adds	r1, r3, #4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	9107      	str	r1, [sp, #28]
 8008834:	2b00      	cmp	r3, #0
 8008836:	db01      	blt.n	800883c <_vfiprintf_r+0x15c>
 8008838:	930b      	str	r3, [sp, #44]	; 0x2c
 800883a:	e004      	b.n	8008846 <_vfiprintf_r+0x166>
 800883c:	425b      	negs	r3, r3
 800883e:	60eb      	str	r3, [r5, #12]
 8008840:	2302      	movs	r3, #2
 8008842:	4313      	orrs	r3, r2
 8008844:	602b      	str	r3, [r5, #0]
 8008846:	783b      	ldrb	r3, [r7, #0]
 8008848:	2b2e      	cmp	r3, #46	; 0x2e
 800884a:	d10a      	bne.n	8008862 <_vfiprintf_r+0x182>
 800884c:	787b      	ldrb	r3, [r7, #1]
 800884e:	2b2a      	cmp	r3, #42	; 0x2a
 8008850:	d137      	bne.n	80088c2 <_vfiprintf_r+0x1e2>
 8008852:	9b07      	ldr	r3, [sp, #28]
 8008854:	3702      	adds	r7, #2
 8008856:	1d1a      	adds	r2, r3, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	9207      	str	r2, [sp, #28]
 800885c:	2b00      	cmp	r3, #0
 800885e:	db2d      	blt.n	80088bc <_vfiprintf_r+0x1dc>
 8008860:	9309      	str	r3, [sp, #36]	; 0x24
 8008862:	2203      	movs	r2, #3
 8008864:	7839      	ldrb	r1, [r7, #0]
 8008866:	4837      	ldr	r0, [pc, #220]	; (8008944 <_vfiprintf_r+0x264>)
 8008868:	f7ff fa54 	bl	8007d14 <memchr>
 800886c:	2800      	cmp	r0, #0
 800886e:	d007      	beq.n	8008880 <_vfiprintf_r+0x1a0>
 8008870:	4b34      	ldr	r3, [pc, #208]	; (8008944 <_vfiprintf_r+0x264>)
 8008872:	682a      	ldr	r2, [r5, #0]
 8008874:	1ac0      	subs	r0, r0, r3
 8008876:	2340      	movs	r3, #64	; 0x40
 8008878:	4083      	lsls	r3, r0
 800887a:	4313      	orrs	r3, r2
 800887c:	3701      	adds	r7, #1
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	7839      	ldrb	r1, [r7, #0]
 8008882:	1c7b      	adds	r3, r7, #1
 8008884:	2206      	movs	r2, #6
 8008886:	4830      	ldr	r0, [pc, #192]	; (8008948 <_vfiprintf_r+0x268>)
 8008888:	9303      	str	r3, [sp, #12]
 800888a:	7629      	strb	r1, [r5, #24]
 800888c:	f7ff fa42 	bl	8007d14 <memchr>
 8008890:	2800      	cmp	r0, #0
 8008892:	d045      	beq.n	8008920 <_vfiprintf_r+0x240>
 8008894:	4b2d      	ldr	r3, [pc, #180]	; (800894c <_vfiprintf_r+0x26c>)
 8008896:	2b00      	cmp	r3, #0
 8008898:	d127      	bne.n	80088ea <_vfiprintf_r+0x20a>
 800889a:	2207      	movs	r2, #7
 800889c:	9b07      	ldr	r3, [sp, #28]
 800889e:	3307      	adds	r3, #7
 80088a0:	4393      	bics	r3, r2
 80088a2:	3308      	adds	r3, #8
 80088a4:	9307      	str	r3, [sp, #28]
 80088a6:	696b      	ldr	r3, [r5, #20]
 80088a8:	9a04      	ldr	r2, [sp, #16]
 80088aa:	189b      	adds	r3, r3, r2
 80088ac:	616b      	str	r3, [r5, #20]
 80088ae:	e75d      	b.n	800876c <_vfiprintf_r+0x8c>
 80088b0:	210a      	movs	r1, #10
 80088b2:	434b      	muls	r3, r1
 80088b4:	4667      	mov	r7, ip
 80088b6:	189b      	adds	r3, r3, r2
 80088b8:	3909      	subs	r1, #9
 80088ba:	e7a3      	b.n	8008804 <_vfiprintf_r+0x124>
 80088bc:	2301      	movs	r3, #1
 80088be:	425b      	negs	r3, r3
 80088c0:	e7ce      	b.n	8008860 <_vfiprintf_r+0x180>
 80088c2:	2300      	movs	r3, #0
 80088c4:	001a      	movs	r2, r3
 80088c6:	3701      	adds	r7, #1
 80088c8:	606b      	str	r3, [r5, #4]
 80088ca:	7839      	ldrb	r1, [r7, #0]
 80088cc:	1c78      	adds	r0, r7, #1
 80088ce:	3930      	subs	r1, #48	; 0x30
 80088d0:	4684      	mov	ip, r0
 80088d2:	2909      	cmp	r1, #9
 80088d4:	d903      	bls.n	80088de <_vfiprintf_r+0x1fe>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0c3      	beq.n	8008862 <_vfiprintf_r+0x182>
 80088da:	9209      	str	r2, [sp, #36]	; 0x24
 80088dc:	e7c1      	b.n	8008862 <_vfiprintf_r+0x182>
 80088de:	230a      	movs	r3, #10
 80088e0:	435a      	muls	r2, r3
 80088e2:	4667      	mov	r7, ip
 80088e4:	1852      	adds	r2, r2, r1
 80088e6:	3b09      	subs	r3, #9
 80088e8:	e7ef      	b.n	80088ca <_vfiprintf_r+0x1ea>
 80088ea:	ab07      	add	r3, sp, #28
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	0022      	movs	r2, r4
 80088f0:	0029      	movs	r1, r5
 80088f2:	0030      	movs	r0, r6
 80088f4:	4b16      	ldr	r3, [pc, #88]	; (8008950 <_vfiprintf_r+0x270>)
 80088f6:	f7fd fe75 	bl	80065e4 <_printf_float>
 80088fa:	9004      	str	r0, [sp, #16]
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	3301      	adds	r3, #1
 8008900:	d1d1      	bne.n	80088a6 <_vfiprintf_r+0x1c6>
 8008902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008904:	07db      	lsls	r3, r3, #31
 8008906:	d405      	bmi.n	8008914 <_vfiprintf_r+0x234>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	059b      	lsls	r3, r3, #22
 800890c:	d402      	bmi.n	8008914 <_vfiprintf_r+0x234>
 800890e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008910:	f7ff f9f4 	bl	8007cfc <__retarget_lock_release_recursive>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	065b      	lsls	r3, r3, #25
 8008918:	d500      	bpl.n	800891c <_vfiprintf_r+0x23c>
 800891a:	e70a      	b.n	8008732 <_vfiprintf_r+0x52>
 800891c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800891e:	e70a      	b.n	8008736 <_vfiprintf_r+0x56>
 8008920:	ab07      	add	r3, sp, #28
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	0022      	movs	r2, r4
 8008926:	0029      	movs	r1, r5
 8008928:	0030      	movs	r0, r6
 800892a:	4b09      	ldr	r3, [pc, #36]	; (8008950 <_vfiprintf_r+0x270>)
 800892c:	f7fe f90c 	bl	8006b48 <_printf_i>
 8008930:	e7e3      	b.n	80088fa <_vfiprintf_r+0x21a>
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	080096f4 	.word	0x080096f4
 8008938:	08009714 	.word	0x08009714
 800893c:	080096d4 	.word	0x080096d4
 8008940:	0800988c 	.word	0x0800988c
 8008944:	08009892 	.word	0x08009892
 8008948:	08009896 	.word	0x08009896
 800894c:	080065e5 	.word	0x080065e5
 8008950:	080086bb 	.word	0x080086bb

08008954 <_sbrk_r>:
 8008954:	2300      	movs	r3, #0
 8008956:	b570      	push	{r4, r5, r6, lr}
 8008958:	4d06      	ldr	r5, [pc, #24]	; (8008974 <_sbrk_r+0x20>)
 800895a:	0004      	movs	r4, r0
 800895c:	0008      	movs	r0, r1
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	f7fa fcd2 	bl	8003308 <_sbrk>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d103      	bne.n	8008970 <_sbrk_r+0x1c>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d000      	beq.n	8008970 <_sbrk_r+0x1c>
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	bd70      	pop	{r4, r5, r6, pc}
 8008972:	46c0      	nop			; (mov r8, r8)
 8008974:	200002cc 	.word	0x200002cc

08008978 <__sread>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	000c      	movs	r4, r1
 800897c:	250e      	movs	r5, #14
 800897e:	5f49      	ldrsh	r1, [r1, r5]
 8008980:	f000 fad6 	bl	8008f30 <_read_r>
 8008984:	2800      	cmp	r0, #0
 8008986:	db03      	blt.n	8008990 <__sread+0x18>
 8008988:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800898a:	181b      	adds	r3, r3, r0
 800898c:	6563      	str	r3, [r4, #84]	; 0x54
 800898e:	bd70      	pop	{r4, r5, r6, pc}
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	4a02      	ldr	r2, [pc, #8]	; (800899c <__sread+0x24>)
 8008994:	4013      	ands	r3, r2
 8008996:	81a3      	strh	r3, [r4, #12]
 8008998:	e7f9      	b.n	800898e <__sread+0x16>
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	ffffefff 	.word	0xffffefff

080089a0 <__swrite>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	001f      	movs	r7, r3
 80089a4:	898b      	ldrh	r3, [r1, #12]
 80089a6:	0005      	movs	r5, r0
 80089a8:	000c      	movs	r4, r1
 80089aa:	0016      	movs	r6, r2
 80089ac:	05db      	lsls	r3, r3, #23
 80089ae:	d505      	bpl.n	80089bc <__swrite+0x1c>
 80089b0:	230e      	movs	r3, #14
 80089b2:	5ec9      	ldrsh	r1, [r1, r3]
 80089b4:	2200      	movs	r2, #0
 80089b6:	2302      	movs	r3, #2
 80089b8:	f000 fa18 	bl	8008dec <_lseek_r>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	4a05      	ldr	r2, [pc, #20]	; (80089d4 <__swrite+0x34>)
 80089c0:	0028      	movs	r0, r5
 80089c2:	4013      	ands	r3, r2
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	0032      	movs	r2, r6
 80089c8:	230e      	movs	r3, #14
 80089ca:	5ee1      	ldrsh	r1, [r4, r3]
 80089cc:	003b      	movs	r3, r7
 80089ce:	f000 f875 	bl	8008abc <_write_r>
 80089d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d4:	ffffefff 	.word	0xffffefff

080089d8 <__sseek>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	000c      	movs	r4, r1
 80089dc:	250e      	movs	r5, #14
 80089de:	5f49      	ldrsh	r1, [r1, r5]
 80089e0:	f000 fa04 	bl	8008dec <_lseek_r>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	1c42      	adds	r2, r0, #1
 80089e8:	d103      	bne.n	80089f2 <__sseek+0x1a>
 80089ea:	4a05      	ldr	r2, [pc, #20]	; (8008a00 <__sseek+0x28>)
 80089ec:	4013      	ands	r3, r2
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	bd70      	pop	{r4, r5, r6, pc}
 80089f2:	2280      	movs	r2, #128	; 0x80
 80089f4:	0152      	lsls	r2, r2, #5
 80089f6:	4313      	orrs	r3, r2
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	6560      	str	r0, [r4, #84]	; 0x54
 80089fc:	e7f8      	b.n	80089f0 <__sseek+0x18>
 80089fe:	46c0      	nop			; (mov r8, r8)
 8008a00:	ffffefff 	.word	0xffffefff

08008a04 <__sclose>:
 8008a04:	b510      	push	{r4, lr}
 8008a06:	230e      	movs	r3, #14
 8008a08:	5ec9      	ldrsh	r1, [r1, r3]
 8008a0a:	f000 f901 	bl	8008c10 <_close_r>
 8008a0e:	bd10      	pop	{r4, pc}

08008a10 <__swbuf_r>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	0005      	movs	r5, r0
 8008a14:	000e      	movs	r6, r1
 8008a16:	0014      	movs	r4, r2
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d004      	beq.n	8008a26 <__swbuf_r+0x16>
 8008a1c:	6983      	ldr	r3, [r0, #24]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <__swbuf_r+0x16>
 8008a22:	f7ff f8c5 	bl	8007bb0 <__sinit>
 8008a26:	4b22      	ldr	r3, [pc, #136]	; (8008ab0 <__swbuf_r+0xa0>)
 8008a28:	429c      	cmp	r4, r3
 8008a2a:	d12e      	bne.n	8008a8a <__swbuf_r+0x7a>
 8008a2c:	686c      	ldr	r4, [r5, #4]
 8008a2e:	69a3      	ldr	r3, [r4, #24]
 8008a30:	60a3      	str	r3, [r4, #8]
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	071b      	lsls	r3, r3, #28
 8008a36:	d532      	bpl.n	8008a9e <__swbuf_r+0x8e>
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d02f      	beq.n	8008a9e <__swbuf_r+0x8e>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	6922      	ldr	r2, [r4, #16]
 8008a42:	b2f7      	uxtb	r7, r6
 8008a44:	1a98      	subs	r0, r3, r2
 8008a46:	6963      	ldr	r3, [r4, #20]
 8008a48:	b2f6      	uxtb	r6, r6
 8008a4a:	4283      	cmp	r3, r0
 8008a4c:	dc05      	bgt.n	8008a5a <__swbuf_r+0x4a>
 8008a4e:	0021      	movs	r1, r4
 8008a50:	0028      	movs	r0, r5
 8008a52:	f000 f97b 	bl	8008d4c <_fflush_r>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d127      	bne.n	8008aaa <__swbuf_r+0x9a>
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	60a3      	str	r3, [r4, #8]
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	1c5a      	adds	r2, r3, #1
 8008a66:	6022      	str	r2, [r4, #0]
 8008a68:	701f      	strb	r7, [r3, #0]
 8008a6a:	6963      	ldr	r3, [r4, #20]
 8008a6c:	4283      	cmp	r3, r0
 8008a6e:	d004      	beq.n	8008a7a <__swbuf_r+0x6a>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	07db      	lsls	r3, r3, #31
 8008a74:	d507      	bpl.n	8008a86 <__swbuf_r+0x76>
 8008a76:	2e0a      	cmp	r6, #10
 8008a78:	d105      	bne.n	8008a86 <__swbuf_r+0x76>
 8008a7a:	0021      	movs	r1, r4
 8008a7c:	0028      	movs	r0, r5
 8008a7e:	f000 f965 	bl	8008d4c <_fflush_r>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d111      	bne.n	8008aaa <__swbuf_r+0x9a>
 8008a86:	0030      	movs	r0, r6
 8008a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a8a:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <__swbuf_r+0xa4>)
 8008a8c:	429c      	cmp	r4, r3
 8008a8e:	d101      	bne.n	8008a94 <__swbuf_r+0x84>
 8008a90:	68ac      	ldr	r4, [r5, #8]
 8008a92:	e7cc      	b.n	8008a2e <__swbuf_r+0x1e>
 8008a94:	4b08      	ldr	r3, [pc, #32]	; (8008ab8 <__swbuf_r+0xa8>)
 8008a96:	429c      	cmp	r4, r3
 8008a98:	d1c9      	bne.n	8008a2e <__swbuf_r+0x1e>
 8008a9a:	68ec      	ldr	r4, [r5, #12]
 8008a9c:	e7c7      	b.n	8008a2e <__swbuf_r+0x1e>
 8008a9e:	0021      	movs	r1, r4
 8008aa0:	0028      	movs	r0, r5
 8008aa2:	f000 f81f 	bl	8008ae4 <__swsetup_r>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d0c9      	beq.n	8008a3e <__swbuf_r+0x2e>
 8008aaa:	2601      	movs	r6, #1
 8008aac:	4276      	negs	r6, r6
 8008aae:	e7ea      	b.n	8008a86 <__swbuf_r+0x76>
 8008ab0:	080096f4 	.word	0x080096f4
 8008ab4:	08009714 	.word	0x08009714
 8008ab8:	080096d4 	.word	0x080096d4

08008abc <_write_r>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	0004      	movs	r4, r0
 8008ac0:	0008      	movs	r0, r1
 8008ac2:	0011      	movs	r1, r2
 8008ac4:	001a      	movs	r2, r3
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	4d05      	ldr	r5, [pc, #20]	; (8008ae0 <_write_r+0x24>)
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7fa fbd3 	bl	8003276 <_write>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d103      	bne.n	8008adc <_write_r+0x20>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d000      	beq.n	8008adc <_write_r+0x20>
 8008ada:	6023      	str	r3, [r4, #0]
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
 8008ade:	46c0      	nop			; (mov r8, r8)
 8008ae0:	200002cc 	.word	0x200002cc

08008ae4 <__swsetup_r>:
 8008ae4:	4b37      	ldr	r3, [pc, #220]	; (8008bc4 <__swsetup_r+0xe0>)
 8008ae6:	b570      	push	{r4, r5, r6, lr}
 8008ae8:	681d      	ldr	r5, [r3, #0]
 8008aea:	0006      	movs	r6, r0
 8008aec:	000c      	movs	r4, r1
 8008aee:	2d00      	cmp	r5, #0
 8008af0:	d005      	beq.n	8008afe <__swsetup_r+0x1a>
 8008af2:	69ab      	ldr	r3, [r5, #24]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d102      	bne.n	8008afe <__swsetup_r+0x1a>
 8008af8:	0028      	movs	r0, r5
 8008afa:	f7ff f859 	bl	8007bb0 <__sinit>
 8008afe:	4b32      	ldr	r3, [pc, #200]	; (8008bc8 <__swsetup_r+0xe4>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	d10f      	bne.n	8008b24 <__swsetup_r+0x40>
 8008b04:	686c      	ldr	r4, [r5, #4]
 8008b06:	230c      	movs	r3, #12
 8008b08:	5ee2      	ldrsh	r2, [r4, r3]
 8008b0a:	b293      	uxth	r3, r2
 8008b0c:	0711      	lsls	r1, r2, #28
 8008b0e:	d42d      	bmi.n	8008b6c <__swsetup_r+0x88>
 8008b10:	06d9      	lsls	r1, r3, #27
 8008b12:	d411      	bmi.n	8008b38 <__swsetup_r+0x54>
 8008b14:	2309      	movs	r3, #9
 8008b16:	2001      	movs	r0, #1
 8008b18:	6033      	str	r3, [r6, #0]
 8008b1a:	3337      	adds	r3, #55	; 0x37
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	4240      	negs	r0, r0
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	4b29      	ldr	r3, [pc, #164]	; (8008bcc <__swsetup_r+0xe8>)
 8008b26:	429c      	cmp	r4, r3
 8008b28:	d101      	bne.n	8008b2e <__swsetup_r+0x4a>
 8008b2a:	68ac      	ldr	r4, [r5, #8]
 8008b2c:	e7eb      	b.n	8008b06 <__swsetup_r+0x22>
 8008b2e:	4b28      	ldr	r3, [pc, #160]	; (8008bd0 <__swsetup_r+0xec>)
 8008b30:	429c      	cmp	r4, r3
 8008b32:	d1e8      	bne.n	8008b06 <__swsetup_r+0x22>
 8008b34:	68ec      	ldr	r4, [r5, #12]
 8008b36:	e7e6      	b.n	8008b06 <__swsetup_r+0x22>
 8008b38:	075b      	lsls	r3, r3, #29
 8008b3a:	d513      	bpl.n	8008b64 <__swsetup_r+0x80>
 8008b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	d008      	beq.n	8008b54 <__swsetup_r+0x70>
 8008b42:	0023      	movs	r3, r4
 8008b44:	3344      	adds	r3, #68	; 0x44
 8008b46:	4299      	cmp	r1, r3
 8008b48:	d002      	beq.n	8008b50 <__swsetup_r+0x6c>
 8008b4a:	0030      	movs	r0, r6
 8008b4c:	f7ff fcbe 	bl	80084cc <_free_r>
 8008b50:	2300      	movs	r3, #0
 8008b52:	6363      	str	r3, [r4, #52]	; 0x34
 8008b54:	2224      	movs	r2, #36	; 0x24
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	4393      	bics	r3, r2
 8008b5a:	81a3      	strh	r3, [r4, #12]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	6063      	str	r3, [r4, #4]
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	6023      	str	r3, [r4, #0]
 8008b64:	2308      	movs	r3, #8
 8008b66:	89a2      	ldrh	r2, [r4, #12]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10b      	bne.n	8008b8a <__swsetup_r+0xa6>
 8008b72:	21a0      	movs	r1, #160	; 0xa0
 8008b74:	2280      	movs	r2, #128	; 0x80
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	0089      	lsls	r1, r1, #2
 8008b7a:	0092      	lsls	r2, r2, #2
 8008b7c:	400b      	ands	r3, r1
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d003      	beq.n	8008b8a <__swsetup_r+0xa6>
 8008b82:	0021      	movs	r1, r4
 8008b84:	0030      	movs	r0, r6
 8008b86:	f000 f96d 	bl	8008e64 <__smakebuf_r>
 8008b8a:	220c      	movs	r2, #12
 8008b8c:	5ea3      	ldrsh	r3, [r4, r2]
 8008b8e:	2001      	movs	r0, #1
 8008b90:	001a      	movs	r2, r3
 8008b92:	b299      	uxth	r1, r3
 8008b94:	4002      	ands	r2, r0
 8008b96:	4203      	tst	r3, r0
 8008b98:	d00f      	beq.n	8008bba <__swsetup_r+0xd6>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	60a2      	str	r2, [r4, #8]
 8008b9e:	6962      	ldr	r2, [r4, #20]
 8008ba0:	4252      	negs	r2, r2
 8008ba2:	61a2      	str	r2, [r4, #24]
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	6922      	ldr	r2, [r4, #16]
 8008ba8:	4282      	cmp	r2, r0
 8008baa:	d1ba      	bne.n	8008b22 <__swsetup_r+0x3e>
 8008bac:	060a      	lsls	r2, r1, #24
 8008bae:	d5b8      	bpl.n	8008b22 <__swsetup_r+0x3e>
 8008bb0:	2240      	movs	r2, #64	; 0x40
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	3801      	subs	r0, #1
 8008bb8:	e7b3      	b.n	8008b22 <__swsetup_r+0x3e>
 8008bba:	0788      	lsls	r0, r1, #30
 8008bbc:	d400      	bmi.n	8008bc0 <__swsetup_r+0xdc>
 8008bbe:	6962      	ldr	r2, [r4, #20]
 8008bc0:	60a2      	str	r2, [r4, #8]
 8008bc2:	e7ef      	b.n	8008ba4 <__swsetup_r+0xc0>
 8008bc4:	2000001c 	.word	0x2000001c
 8008bc8:	080096f4 	.word	0x080096f4
 8008bcc:	08009714 	.word	0x08009714
 8008bd0:	080096d4 	.word	0x080096d4

08008bd4 <__assert_func>:
 8008bd4:	b530      	push	{r4, r5, lr}
 8008bd6:	0014      	movs	r4, r2
 8008bd8:	001a      	movs	r2, r3
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <__assert_func+0x2c>)
 8008bdc:	0005      	movs	r5, r0
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	b085      	sub	sp, #20
 8008be2:	68d8      	ldr	r0, [r3, #12]
 8008be4:	4b07      	ldr	r3, [pc, #28]	; (8008c04 <__assert_func+0x30>)
 8008be6:	2c00      	cmp	r4, #0
 8008be8:	d101      	bne.n	8008bee <__assert_func+0x1a>
 8008bea:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <__assert_func+0x34>)
 8008bec:	001c      	movs	r4, r3
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	9100      	str	r1, [sp, #0]
 8008bf2:	002b      	movs	r3, r5
 8008bf4:	4905      	ldr	r1, [pc, #20]	; (8008c0c <__assert_func+0x38>)
 8008bf6:	9402      	str	r4, [sp, #8]
 8008bf8:	f000 f8e8 	bl	8008dcc <fiprintf>
 8008bfc:	f000 f9b9 	bl	8008f72 <abort>
 8008c00:	2000001c 	.word	0x2000001c
 8008c04:	0800989d 	.word	0x0800989d
 8008c08:	080098d8 	.word	0x080098d8
 8008c0c:	080098aa 	.word	0x080098aa

08008c10 <_close_r>:
 8008c10:	2300      	movs	r3, #0
 8008c12:	b570      	push	{r4, r5, r6, lr}
 8008c14:	4d06      	ldr	r5, [pc, #24]	; (8008c30 <_close_r+0x20>)
 8008c16:	0004      	movs	r4, r0
 8008c18:	0008      	movs	r0, r1
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	f7fa fb47 	bl	80032ae <_close>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d103      	bne.n	8008c2c <_close_r+0x1c>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d000      	beq.n	8008c2c <_close_r+0x1c>
 8008c2a:	6023      	str	r3, [r4, #0]
 8008c2c:	bd70      	pop	{r4, r5, r6, pc}
 8008c2e:	46c0      	nop			; (mov r8, r8)
 8008c30:	200002cc 	.word	0x200002cc

08008c34 <__sflush_r>:
 8008c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c36:	898b      	ldrh	r3, [r1, #12]
 8008c38:	0005      	movs	r5, r0
 8008c3a:	000c      	movs	r4, r1
 8008c3c:	071a      	lsls	r2, r3, #28
 8008c3e:	d45f      	bmi.n	8008d00 <__sflush_r+0xcc>
 8008c40:	684a      	ldr	r2, [r1, #4]
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	dc04      	bgt.n	8008c50 <__sflush_r+0x1c>
 8008c46:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008c48:	2a00      	cmp	r2, #0
 8008c4a:	dc01      	bgt.n	8008c50 <__sflush_r+0x1c>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008c52:	2f00      	cmp	r7, #0
 8008c54:	d0fa      	beq.n	8008c4c <__sflush_r+0x18>
 8008c56:	2200      	movs	r2, #0
 8008c58:	2180      	movs	r1, #128	; 0x80
 8008c5a:	682e      	ldr	r6, [r5, #0]
 8008c5c:	602a      	str	r2, [r5, #0]
 8008c5e:	001a      	movs	r2, r3
 8008c60:	0149      	lsls	r1, r1, #5
 8008c62:	400a      	ands	r2, r1
 8008c64:	420b      	tst	r3, r1
 8008c66:	d034      	beq.n	8008cd2 <__sflush_r+0x9e>
 8008c68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	075b      	lsls	r3, r3, #29
 8008c6e:	d506      	bpl.n	8008c7e <__sflush_r+0x4a>
 8008c70:	6863      	ldr	r3, [r4, #4]
 8008c72:	1ac0      	subs	r0, r0, r3
 8008c74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <__sflush_r+0x4a>
 8008c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c7c:	1ac0      	subs	r0, r0, r3
 8008c7e:	0002      	movs	r2, r0
 8008c80:	6a21      	ldr	r1, [r4, #32]
 8008c82:	2300      	movs	r3, #0
 8008c84:	0028      	movs	r0, r5
 8008c86:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008c88:	47b8      	blx	r7
 8008c8a:	89a1      	ldrh	r1, [r4, #12]
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d106      	bne.n	8008c9e <__sflush_r+0x6a>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	2b1d      	cmp	r3, #29
 8008c94:	d831      	bhi.n	8008cfa <__sflush_r+0xc6>
 8008c96:	4a2c      	ldr	r2, [pc, #176]	; (8008d48 <__sflush_r+0x114>)
 8008c98:	40da      	lsrs	r2, r3
 8008c9a:	07d3      	lsls	r3, r2, #31
 8008c9c:	d52d      	bpl.n	8008cfa <__sflush_r+0xc6>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	6063      	str	r3, [r4, #4]
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	04cb      	lsls	r3, r1, #19
 8008ca8:	d505      	bpl.n	8008cb6 <__sflush_r+0x82>
 8008caa:	1c43      	adds	r3, r0, #1
 8008cac:	d102      	bne.n	8008cb4 <__sflush_r+0x80>
 8008cae:	682b      	ldr	r3, [r5, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d100      	bne.n	8008cb6 <__sflush_r+0x82>
 8008cb4:	6560      	str	r0, [r4, #84]	; 0x54
 8008cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cb8:	602e      	str	r6, [r5, #0]
 8008cba:	2900      	cmp	r1, #0
 8008cbc:	d0c6      	beq.n	8008c4c <__sflush_r+0x18>
 8008cbe:	0023      	movs	r3, r4
 8008cc0:	3344      	adds	r3, #68	; 0x44
 8008cc2:	4299      	cmp	r1, r3
 8008cc4:	d002      	beq.n	8008ccc <__sflush_r+0x98>
 8008cc6:	0028      	movs	r0, r5
 8008cc8:	f7ff fc00 	bl	80084cc <_free_r>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	6360      	str	r0, [r4, #52]	; 0x34
 8008cd0:	e7bd      	b.n	8008c4e <__sflush_r+0x1a>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	0028      	movs	r0, r5
 8008cd6:	6a21      	ldr	r1, [r4, #32]
 8008cd8:	47b8      	blx	r7
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d1c5      	bne.n	8008c6a <__sflush_r+0x36>
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0c2      	beq.n	8008c6a <__sflush_r+0x36>
 8008ce4:	2b1d      	cmp	r3, #29
 8008ce6:	d001      	beq.n	8008cec <__sflush_r+0xb8>
 8008ce8:	2b16      	cmp	r3, #22
 8008cea:	d101      	bne.n	8008cf0 <__sflush_r+0xbc>
 8008cec:	602e      	str	r6, [r5, #0]
 8008cee:	e7ad      	b.n	8008c4c <__sflush_r+0x18>
 8008cf0:	2340      	movs	r3, #64	; 0x40
 8008cf2:	89a2      	ldrh	r2, [r4, #12]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	81a3      	strh	r3, [r4, #12]
 8008cf8:	e7a9      	b.n	8008c4e <__sflush_r+0x1a>
 8008cfa:	2340      	movs	r3, #64	; 0x40
 8008cfc:	430b      	orrs	r3, r1
 8008cfe:	e7fa      	b.n	8008cf6 <__sflush_r+0xc2>
 8008d00:	690f      	ldr	r7, [r1, #16]
 8008d02:	2f00      	cmp	r7, #0
 8008d04:	d0a2      	beq.n	8008c4c <__sflush_r+0x18>
 8008d06:	680a      	ldr	r2, [r1, #0]
 8008d08:	600f      	str	r7, [r1, #0]
 8008d0a:	1bd2      	subs	r2, r2, r7
 8008d0c:	9201      	str	r2, [sp, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	079b      	lsls	r3, r3, #30
 8008d12:	d100      	bne.n	8008d16 <__sflush_r+0xe2>
 8008d14:	694a      	ldr	r2, [r1, #20]
 8008d16:	60a2      	str	r2, [r4, #8]
 8008d18:	9b01      	ldr	r3, [sp, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	dc00      	bgt.n	8008d20 <__sflush_r+0xec>
 8008d1e:	e795      	b.n	8008c4c <__sflush_r+0x18>
 8008d20:	003a      	movs	r2, r7
 8008d22:	0028      	movs	r0, r5
 8008d24:	9b01      	ldr	r3, [sp, #4]
 8008d26:	6a21      	ldr	r1, [r4, #32]
 8008d28:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d2a:	47b0      	blx	r6
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	dc06      	bgt.n	8008d3e <__sflush_r+0x10a>
 8008d30:	2340      	movs	r3, #64	; 0x40
 8008d32:	2001      	movs	r0, #1
 8008d34:	89a2      	ldrh	r2, [r4, #12]
 8008d36:	4240      	negs	r0, r0
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	e787      	b.n	8008c4e <__sflush_r+0x1a>
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	183f      	adds	r7, r7, r0
 8008d42:	1a1b      	subs	r3, r3, r0
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	e7e7      	b.n	8008d18 <__sflush_r+0xe4>
 8008d48:	20400001 	.word	0x20400001

08008d4c <_fflush_r>:
 8008d4c:	690b      	ldr	r3, [r1, #16]
 8008d4e:	b570      	push	{r4, r5, r6, lr}
 8008d50:	0005      	movs	r5, r0
 8008d52:	000c      	movs	r4, r1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d102      	bne.n	8008d5e <_fflush_r+0x12>
 8008d58:	2500      	movs	r5, #0
 8008d5a:	0028      	movs	r0, r5
 8008d5c:	bd70      	pop	{r4, r5, r6, pc}
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d004      	beq.n	8008d6c <_fflush_r+0x20>
 8008d62:	6983      	ldr	r3, [r0, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <_fflush_r+0x20>
 8008d68:	f7fe ff22 	bl	8007bb0 <__sinit>
 8008d6c:	4b14      	ldr	r3, [pc, #80]	; (8008dc0 <_fflush_r+0x74>)
 8008d6e:	429c      	cmp	r4, r3
 8008d70:	d11b      	bne.n	8008daa <_fflush_r+0x5e>
 8008d72:	686c      	ldr	r4, [r5, #4]
 8008d74:	220c      	movs	r2, #12
 8008d76:	5ea3      	ldrsh	r3, [r4, r2]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d0ed      	beq.n	8008d58 <_fflush_r+0xc>
 8008d7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d7e:	07d2      	lsls	r2, r2, #31
 8008d80:	d404      	bmi.n	8008d8c <_fflush_r+0x40>
 8008d82:	059b      	lsls	r3, r3, #22
 8008d84:	d402      	bmi.n	8008d8c <_fflush_r+0x40>
 8008d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d88:	f7fe ffb7 	bl	8007cfa <__retarget_lock_acquire_recursive>
 8008d8c:	0028      	movs	r0, r5
 8008d8e:	0021      	movs	r1, r4
 8008d90:	f7ff ff50 	bl	8008c34 <__sflush_r>
 8008d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d96:	0005      	movs	r5, r0
 8008d98:	07db      	lsls	r3, r3, #31
 8008d9a:	d4de      	bmi.n	8008d5a <_fflush_r+0xe>
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	059b      	lsls	r3, r3, #22
 8008da0:	d4db      	bmi.n	8008d5a <_fflush_r+0xe>
 8008da2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008da4:	f7fe ffaa 	bl	8007cfc <__retarget_lock_release_recursive>
 8008da8:	e7d7      	b.n	8008d5a <_fflush_r+0xe>
 8008daa:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <_fflush_r+0x78>)
 8008dac:	429c      	cmp	r4, r3
 8008dae:	d101      	bne.n	8008db4 <_fflush_r+0x68>
 8008db0:	68ac      	ldr	r4, [r5, #8]
 8008db2:	e7df      	b.n	8008d74 <_fflush_r+0x28>
 8008db4:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <_fflush_r+0x7c>)
 8008db6:	429c      	cmp	r4, r3
 8008db8:	d1dc      	bne.n	8008d74 <_fflush_r+0x28>
 8008dba:	68ec      	ldr	r4, [r5, #12]
 8008dbc:	e7da      	b.n	8008d74 <_fflush_r+0x28>
 8008dbe:	46c0      	nop			; (mov r8, r8)
 8008dc0:	080096f4 	.word	0x080096f4
 8008dc4:	08009714 	.word	0x08009714
 8008dc8:	080096d4 	.word	0x080096d4

08008dcc <fiprintf>:
 8008dcc:	b40e      	push	{r1, r2, r3}
 8008dce:	b503      	push	{r0, r1, lr}
 8008dd0:	0001      	movs	r1, r0
 8008dd2:	ab03      	add	r3, sp, #12
 8008dd4:	4804      	ldr	r0, [pc, #16]	; (8008de8 <fiprintf+0x1c>)
 8008dd6:	cb04      	ldmia	r3!, {r2}
 8008dd8:	6800      	ldr	r0, [r0, #0]
 8008dda:	9301      	str	r3, [sp, #4]
 8008ddc:	f7ff fc80 	bl	80086e0 <_vfiprintf_r>
 8008de0:	b002      	add	sp, #8
 8008de2:	bc08      	pop	{r3}
 8008de4:	b003      	add	sp, #12
 8008de6:	4718      	bx	r3
 8008de8:	2000001c 	.word	0x2000001c

08008dec <_lseek_r>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	0004      	movs	r4, r0
 8008df0:	0008      	movs	r0, r1
 8008df2:	0011      	movs	r1, r2
 8008df4:	001a      	movs	r2, r3
 8008df6:	2300      	movs	r3, #0
 8008df8:	4d05      	ldr	r5, [pc, #20]	; (8008e10 <_lseek_r+0x24>)
 8008dfa:	602b      	str	r3, [r5, #0]
 8008dfc:	f7fa fa78 	bl	80032f0 <_lseek>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d103      	bne.n	8008e0c <_lseek_r+0x20>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d000      	beq.n	8008e0c <_lseek_r+0x20>
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	bd70      	pop	{r4, r5, r6, pc}
 8008e0e:	46c0      	nop			; (mov r8, r8)
 8008e10:	200002cc 	.word	0x200002cc

08008e14 <__swhatbuf_r>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	000e      	movs	r6, r1
 8008e18:	001d      	movs	r5, r3
 8008e1a:	230e      	movs	r3, #14
 8008e1c:	5ec9      	ldrsh	r1, [r1, r3]
 8008e1e:	0014      	movs	r4, r2
 8008e20:	b096      	sub	sp, #88	; 0x58
 8008e22:	2900      	cmp	r1, #0
 8008e24:	da08      	bge.n	8008e38 <__swhatbuf_r+0x24>
 8008e26:	220c      	movs	r2, #12
 8008e28:	5eb3      	ldrsh	r3, [r6, r2]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	602a      	str	r2, [r5, #0]
 8008e2e:	061b      	lsls	r3, r3, #24
 8008e30:	d411      	bmi.n	8008e56 <__swhatbuf_r+0x42>
 8008e32:	2380      	movs	r3, #128	; 0x80
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	e00f      	b.n	8008e58 <__swhatbuf_r+0x44>
 8008e38:	466a      	mov	r2, sp
 8008e3a:	f000 f8a1 	bl	8008f80 <_fstat_r>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	dbf1      	blt.n	8008e26 <__swhatbuf_r+0x12>
 8008e42:	23f0      	movs	r3, #240	; 0xf0
 8008e44:	9901      	ldr	r1, [sp, #4]
 8008e46:	021b      	lsls	r3, r3, #8
 8008e48:	4019      	ands	r1, r3
 8008e4a:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <__swhatbuf_r+0x4c>)
 8008e4c:	18c9      	adds	r1, r1, r3
 8008e4e:	424b      	negs	r3, r1
 8008e50:	4159      	adcs	r1, r3
 8008e52:	6029      	str	r1, [r5, #0]
 8008e54:	e7ed      	b.n	8008e32 <__swhatbuf_r+0x1e>
 8008e56:	2340      	movs	r3, #64	; 0x40
 8008e58:	2000      	movs	r0, #0
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	b016      	add	sp, #88	; 0x58
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	ffffe000 	.word	0xffffe000

08008e64 <__smakebuf_r>:
 8008e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e66:	2602      	movs	r6, #2
 8008e68:	898b      	ldrh	r3, [r1, #12]
 8008e6a:	0005      	movs	r5, r0
 8008e6c:	000c      	movs	r4, r1
 8008e6e:	4233      	tst	r3, r6
 8008e70:	d006      	beq.n	8008e80 <__smakebuf_r+0x1c>
 8008e72:	0023      	movs	r3, r4
 8008e74:	3347      	adds	r3, #71	; 0x47
 8008e76:	6023      	str	r3, [r4, #0]
 8008e78:	6123      	str	r3, [r4, #16]
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	6163      	str	r3, [r4, #20]
 8008e7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008e80:	466a      	mov	r2, sp
 8008e82:	ab01      	add	r3, sp, #4
 8008e84:	f7ff ffc6 	bl	8008e14 <__swhatbuf_r>
 8008e88:	9900      	ldr	r1, [sp, #0]
 8008e8a:	0007      	movs	r7, r0
 8008e8c:	0028      	movs	r0, r5
 8008e8e:	f7ff fb89 	bl	80085a4 <_malloc_r>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d108      	bne.n	8008ea8 <__smakebuf_r+0x44>
 8008e96:	220c      	movs	r2, #12
 8008e98:	5ea3      	ldrsh	r3, [r4, r2]
 8008e9a:	059a      	lsls	r2, r3, #22
 8008e9c:	d4ef      	bmi.n	8008e7e <__smakebuf_r+0x1a>
 8008e9e:	2203      	movs	r2, #3
 8008ea0:	4393      	bics	r3, r2
 8008ea2:	431e      	orrs	r6, r3
 8008ea4:	81a6      	strh	r6, [r4, #12]
 8008ea6:	e7e4      	b.n	8008e72 <__smakebuf_r+0xe>
 8008ea8:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <__smakebuf_r+0x84>)
 8008eaa:	62ab      	str	r3, [r5, #40]	; 0x28
 8008eac:	2380      	movs	r3, #128	; 0x80
 8008eae:	89a2      	ldrh	r2, [r4, #12]
 8008eb0:	6020      	str	r0, [r4, #0]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	9b00      	ldr	r3, [sp, #0]
 8008eb8:	6120      	str	r0, [r4, #16]
 8008eba:	6163      	str	r3, [r4, #20]
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00d      	beq.n	8008ede <__smakebuf_r+0x7a>
 8008ec2:	0028      	movs	r0, r5
 8008ec4:	230e      	movs	r3, #14
 8008ec6:	5ee1      	ldrsh	r1, [r4, r3]
 8008ec8:	f000 f86c 	bl	8008fa4 <_isatty_r>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d006      	beq.n	8008ede <__smakebuf_r+0x7a>
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	4393      	bics	r3, r2
 8008ed6:	001a      	movs	r2, r3
 8008ed8:	2301      	movs	r3, #1
 8008eda:	4313      	orrs	r3, r2
 8008edc:	81a3      	strh	r3, [r4, #12]
 8008ede:	89a0      	ldrh	r0, [r4, #12]
 8008ee0:	4307      	orrs	r7, r0
 8008ee2:	81a7      	strh	r7, [r4, #12]
 8008ee4:	e7cb      	b.n	8008e7e <__smakebuf_r+0x1a>
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	08007b35 	.word	0x08007b35

08008eec <__ascii_mbtowc>:
 8008eec:	b082      	sub	sp, #8
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d100      	bne.n	8008ef4 <__ascii_mbtowc+0x8>
 8008ef2:	a901      	add	r1, sp, #4
 8008ef4:	1e10      	subs	r0, r2, #0
 8008ef6:	d006      	beq.n	8008f06 <__ascii_mbtowc+0x1a>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d006      	beq.n	8008f0a <__ascii_mbtowc+0x1e>
 8008efc:	7813      	ldrb	r3, [r2, #0]
 8008efe:	600b      	str	r3, [r1, #0]
 8008f00:	7810      	ldrb	r0, [r2, #0]
 8008f02:	1e43      	subs	r3, r0, #1
 8008f04:	4198      	sbcs	r0, r3
 8008f06:	b002      	add	sp, #8
 8008f08:	4770      	bx	lr
 8008f0a:	2002      	movs	r0, #2
 8008f0c:	4240      	negs	r0, r0
 8008f0e:	e7fa      	b.n	8008f06 <__ascii_mbtowc+0x1a>

08008f10 <__malloc_lock>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	4802      	ldr	r0, [pc, #8]	; (8008f1c <__malloc_lock+0xc>)
 8008f14:	f7fe fef1 	bl	8007cfa <__retarget_lock_acquire_recursive>
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	200002c0 	.word	0x200002c0

08008f20 <__malloc_unlock>:
 8008f20:	b510      	push	{r4, lr}
 8008f22:	4802      	ldr	r0, [pc, #8]	; (8008f2c <__malloc_unlock+0xc>)
 8008f24:	f7fe feea 	bl	8007cfc <__retarget_lock_release_recursive>
 8008f28:	bd10      	pop	{r4, pc}
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	200002c0 	.word	0x200002c0

08008f30 <_read_r>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	0004      	movs	r4, r0
 8008f34:	0008      	movs	r0, r1
 8008f36:	0011      	movs	r1, r2
 8008f38:	001a      	movs	r2, r3
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4d05      	ldr	r5, [pc, #20]	; (8008f54 <_read_r+0x24>)
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	f7fa f97c 	bl	800323c <_read>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d103      	bne.n	8008f50 <_read_r+0x20>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d000      	beq.n	8008f50 <_read_r+0x20>
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	200002cc 	.word	0x200002cc

08008f58 <__ascii_wctomb>:
 8008f58:	0003      	movs	r3, r0
 8008f5a:	1e08      	subs	r0, r1, #0
 8008f5c:	d005      	beq.n	8008f6a <__ascii_wctomb+0x12>
 8008f5e:	2aff      	cmp	r2, #255	; 0xff
 8008f60:	d904      	bls.n	8008f6c <__ascii_wctomb+0x14>
 8008f62:	228a      	movs	r2, #138	; 0x8a
 8008f64:	2001      	movs	r0, #1
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	4240      	negs	r0, r0
 8008f6a:	4770      	bx	lr
 8008f6c:	2001      	movs	r0, #1
 8008f6e:	700a      	strb	r2, [r1, #0]
 8008f70:	e7fb      	b.n	8008f6a <__ascii_wctomb+0x12>

08008f72 <abort>:
 8008f72:	2006      	movs	r0, #6
 8008f74:	b510      	push	{r4, lr}
 8008f76:	f000 f851 	bl	800901c <raise>
 8008f7a:	2001      	movs	r0, #1
 8008f7c:	f7fa f952 	bl	8003224 <_exit>

08008f80 <_fstat_r>:
 8008f80:	2300      	movs	r3, #0
 8008f82:	b570      	push	{r4, r5, r6, lr}
 8008f84:	4d06      	ldr	r5, [pc, #24]	; (8008fa0 <_fstat_r+0x20>)
 8008f86:	0004      	movs	r4, r0
 8008f88:	0008      	movs	r0, r1
 8008f8a:	0011      	movs	r1, r2
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	f7fa f998 	bl	80032c2 <_fstat>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	d103      	bne.n	8008f9e <_fstat_r+0x1e>
 8008f96:	682b      	ldr	r3, [r5, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d000      	beq.n	8008f9e <_fstat_r+0x1e>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	200002cc 	.word	0x200002cc

08008fa4 <_isatty_r>:
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	b570      	push	{r4, r5, r6, lr}
 8008fa8:	4d06      	ldr	r5, [pc, #24]	; (8008fc4 <_isatty_r+0x20>)
 8008faa:	0004      	movs	r4, r0
 8008fac:	0008      	movs	r0, r1
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	f7fa f995 	bl	80032de <_isatty>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d103      	bne.n	8008fc0 <_isatty_r+0x1c>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d000      	beq.n	8008fc0 <_isatty_r+0x1c>
 8008fbe:	6023      	str	r3, [r4, #0]
 8008fc0:	bd70      	pop	{r4, r5, r6, pc}
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	200002cc 	.word	0x200002cc

08008fc8 <_raise_r>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	0004      	movs	r4, r0
 8008fcc:	000d      	movs	r5, r1
 8008fce:	291f      	cmp	r1, #31
 8008fd0:	d904      	bls.n	8008fdc <_raise_r+0x14>
 8008fd2:	2316      	movs	r3, #22
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	4240      	negs	r0, r0
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d004      	beq.n	8008fec <_raise_r+0x24>
 8008fe2:	008a      	lsls	r2, r1, #2
 8008fe4:	189b      	adds	r3, r3, r2
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	d108      	bne.n	8008ffe <_raise_r+0x36>
 8008fec:	0020      	movs	r0, r4
 8008fee:	f000 f831 	bl	8009054 <_getpid_r>
 8008ff2:	002a      	movs	r2, r5
 8008ff4:	0001      	movs	r1, r0
 8008ff6:	0020      	movs	r0, r4
 8008ff8:	f000 f81a 	bl	8009030 <_kill_r>
 8008ffc:	e7ed      	b.n	8008fda <_raise_r+0x12>
 8008ffe:	2000      	movs	r0, #0
 8009000:	2a01      	cmp	r2, #1
 8009002:	d0ea      	beq.n	8008fda <_raise_r+0x12>
 8009004:	1c51      	adds	r1, r2, #1
 8009006:	d103      	bne.n	8009010 <_raise_r+0x48>
 8009008:	2316      	movs	r3, #22
 800900a:	3001      	adds	r0, #1
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	e7e4      	b.n	8008fda <_raise_r+0x12>
 8009010:	2400      	movs	r4, #0
 8009012:	0028      	movs	r0, r5
 8009014:	601c      	str	r4, [r3, #0]
 8009016:	4790      	blx	r2
 8009018:	0020      	movs	r0, r4
 800901a:	e7de      	b.n	8008fda <_raise_r+0x12>

0800901c <raise>:
 800901c:	b510      	push	{r4, lr}
 800901e:	4b03      	ldr	r3, [pc, #12]	; (800902c <raise+0x10>)
 8009020:	0001      	movs	r1, r0
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	f7ff ffd0 	bl	8008fc8 <_raise_r>
 8009028:	bd10      	pop	{r4, pc}
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	2000001c 	.word	0x2000001c

08009030 <_kill_r>:
 8009030:	2300      	movs	r3, #0
 8009032:	b570      	push	{r4, r5, r6, lr}
 8009034:	4d06      	ldr	r5, [pc, #24]	; (8009050 <_kill_r+0x20>)
 8009036:	0004      	movs	r4, r0
 8009038:	0008      	movs	r0, r1
 800903a:	0011      	movs	r1, r2
 800903c:	602b      	str	r3, [r5, #0]
 800903e:	f7fa f8e1 	bl	8003204 <_kill>
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	d103      	bne.n	800904e <_kill_r+0x1e>
 8009046:	682b      	ldr	r3, [r5, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d000      	beq.n	800904e <_kill_r+0x1e>
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	200002cc 	.word	0x200002cc

08009054 <_getpid_r>:
 8009054:	b510      	push	{r4, lr}
 8009056:	f7fa f8cf 	bl	80031f8 <_getpid>
 800905a:	bd10      	pop	{r4, pc}

0800905c <atan2>:
 800905c:	b510      	push	{r4, lr}
 800905e:	f000 f801 	bl	8009064 <__ieee754_atan2>
 8009062:	bd10      	pop	{r4, pc}

08009064 <__ieee754_atan2>:
 8009064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009066:	0016      	movs	r6, r2
 8009068:	001d      	movs	r5, r3
 800906a:	005a      	lsls	r2, r3, #1
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	4273      	negs	r3, r6
 8009070:	4333      	orrs	r3, r6
 8009072:	4f46      	ldr	r7, [pc, #280]	; (800918c <__ieee754_atan2+0x128>)
 8009074:	0852      	lsrs	r2, r2, #1
 8009076:	0fdb      	lsrs	r3, r3, #31
 8009078:	4313      	orrs	r3, r2
 800907a:	42bb      	cmp	r3, r7
 800907c:	d809      	bhi.n	8009092 <__ieee754_atan2+0x2e>
 800907e:	4244      	negs	r4, r0
 8009080:	004b      	lsls	r3, r1, #1
 8009082:	4304      	orrs	r4, r0
 8009084:	085b      	lsrs	r3, r3, #1
 8009086:	0fe4      	lsrs	r4, r4, #31
 8009088:	9100      	str	r1, [sp, #0]
 800908a:	9001      	str	r0, [sp, #4]
 800908c:	431c      	orrs	r4, r3
 800908e:	42bc      	cmp	r4, r7
 8009090:	d905      	bls.n	800909e <__ieee754_atan2+0x3a>
 8009092:	0032      	movs	r2, r6
 8009094:	002b      	movs	r3, r5
 8009096:	f7f7 fd19 	bl	8000acc <__aeabi_dadd>
 800909a:	b003      	add	sp, #12
 800909c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909e:	4c3c      	ldr	r4, [pc, #240]	; (8009190 <__ieee754_atan2+0x12c>)
 80090a0:	192c      	adds	r4, r5, r4
 80090a2:	4334      	orrs	r4, r6
 80090a4:	d102      	bne.n	80090ac <__ieee754_atan2+0x48>
 80090a6:	f000 f889 	bl	80091bc <atan>
 80090aa:	e7f6      	b.n	800909a <__ieee754_atan2+0x36>
 80090ac:	17ac      	asrs	r4, r5, #30
 80090ae:	46a4      	mov	ip, r4
 80090b0:	2402      	movs	r4, #2
 80090b2:	4667      	mov	r7, ip
 80090b4:	403c      	ands	r4, r7
 80090b6:	9f00      	ldr	r7, [sp, #0]
 80090b8:	0fff      	lsrs	r7, r7, #31
 80090ba:	433c      	orrs	r4, r7
 80090bc:	9f01      	ldr	r7, [sp, #4]
 80090be:	431f      	orrs	r7, r3
 80090c0:	d106      	bne.n	80090d0 <__ieee754_atan2+0x6c>
 80090c2:	2c02      	cmp	r4, #2
 80090c4:	d056      	beq.n	8009174 <__ieee754_atan2+0x110>
 80090c6:	2c03      	cmp	r4, #3
 80090c8:	d1e7      	bne.n	800909a <__ieee754_atan2+0x36>
 80090ca:	4832      	ldr	r0, [pc, #200]	; (8009194 <__ieee754_atan2+0x130>)
 80090cc:	4932      	ldr	r1, [pc, #200]	; (8009198 <__ieee754_atan2+0x134>)
 80090ce:	e7e4      	b.n	800909a <__ieee754_atan2+0x36>
 80090d0:	0017      	movs	r7, r2
 80090d2:	4337      	orrs	r7, r6
 80090d4:	d105      	bne.n	80090e2 <__ieee754_atan2+0x7e>
 80090d6:	9b00      	ldr	r3, [sp, #0]
 80090d8:	482e      	ldr	r0, [pc, #184]	; (8009194 <__ieee754_atan2+0x130>)
 80090da:	2b00      	cmp	r3, #0
 80090dc:	da53      	bge.n	8009186 <__ieee754_atan2+0x122>
 80090de:	492f      	ldr	r1, [pc, #188]	; (800919c <__ieee754_atan2+0x138>)
 80090e0:	e7db      	b.n	800909a <__ieee754_atan2+0x36>
 80090e2:	4f2a      	ldr	r7, [pc, #168]	; (800918c <__ieee754_atan2+0x128>)
 80090e4:	42ba      	cmp	r2, r7
 80090e6:	d10f      	bne.n	8009108 <__ieee754_atan2+0xa4>
 80090e8:	3c01      	subs	r4, #1
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d107      	bne.n	80090fe <__ieee754_atan2+0x9a>
 80090ee:	2c02      	cmp	r4, #2
 80090f0:	d843      	bhi.n	800917a <__ieee754_atan2+0x116>
 80090f2:	4b2b      	ldr	r3, [pc, #172]	; (80091a0 <__ieee754_atan2+0x13c>)
 80090f4:	00e4      	lsls	r4, r4, #3
 80090f6:	191c      	adds	r4, r3, r4
 80090f8:	6820      	ldr	r0, [r4, #0]
 80090fa:	6861      	ldr	r1, [r4, #4]
 80090fc:	e7cd      	b.n	800909a <__ieee754_atan2+0x36>
 80090fe:	2c02      	cmp	r4, #2
 8009100:	d83e      	bhi.n	8009180 <__ieee754_atan2+0x11c>
 8009102:	4b28      	ldr	r3, [pc, #160]	; (80091a4 <__ieee754_atan2+0x140>)
 8009104:	00e4      	lsls	r4, r4, #3
 8009106:	e7f6      	b.n	80090f6 <__ieee754_atan2+0x92>
 8009108:	4f20      	ldr	r7, [pc, #128]	; (800918c <__ieee754_atan2+0x128>)
 800910a:	42bb      	cmp	r3, r7
 800910c:	d0e3      	beq.n	80090d6 <__ieee754_atan2+0x72>
 800910e:	1a9b      	subs	r3, r3, r2
 8009110:	151b      	asrs	r3, r3, #20
 8009112:	2b3c      	cmp	r3, #60	; 0x3c
 8009114:	dc18      	bgt.n	8009148 <__ieee754_atan2+0xe4>
 8009116:	2d00      	cmp	r5, #0
 8009118:	da01      	bge.n	800911e <__ieee754_atan2+0xba>
 800911a:	333c      	adds	r3, #60	; 0x3c
 800911c:	db17      	blt.n	800914e <__ieee754_atan2+0xea>
 800911e:	0032      	movs	r2, r6
 8009120:	002b      	movs	r3, r5
 8009122:	f7f8 f80f 	bl	8001144 <__aeabi_ddiv>
 8009126:	f000 f9c9 	bl	80094bc <fabs>
 800912a:	f000 f847 	bl	80091bc <atan>
 800912e:	2c01      	cmp	r4, #1
 8009130:	d010      	beq.n	8009154 <__ieee754_atan2+0xf0>
 8009132:	2c02      	cmp	r4, #2
 8009134:	d013      	beq.n	800915e <__ieee754_atan2+0xfa>
 8009136:	2c00      	cmp	r4, #0
 8009138:	d0af      	beq.n	800909a <__ieee754_atan2+0x36>
 800913a:	4a1b      	ldr	r2, [pc, #108]	; (80091a8 <__ieee754_atan2+0x144>)
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <__ieee754_atan2+0x148>)
 800913e:	f7f8 fe6f 	bl	8001e20 <__aeabi_dsub>
 8009142:	4a14      	ldr	r2, [pc, #80]	; (8009194 <__ieee754_atan2+0x130>)
 8009144:	4b1a      	ldr	r3, [pc, #104]	; (80091b0 <__ieee754_atan2+0x14c>)
 8009146:	e012      	b.n	800916e <__ieee754_atan2+0x10a>
 8009148:	4812      	ldr	r0, [pc, #72]	; (8009194 <__ieee754_atan2+0x130>)
 800914a:	491a      	ldr	r1, [pc, #104]	; (80091b4 <__ieee754_atan2+0x150>)
 800914c:	e7ef      	b.n	800912e <__ieee754_atan2+0xca>
 800914e:	2000      	movs	r0, #0
 8009150:	2100      	movs	r1, #0
 8009152:	e7ec      	b.n	800912e <__ieee754_atan2+0xca>
 8009154:	2480      	movs	r4, #128	; 0x80
 8009156:	0624      	lsls	r4, r4, #24
 8009158:	190b      	adds	r3, r1, r4
 800915a:	0019      	movs	r1, r3
 800915c:	e79d      	b.n	800909a <__ieee754_atan2+0x36>
 800915e:	4a12      	ldr	r2, [pc, #72]	; (80091a8 <__ieee754_atan2+0x144>)
 8009160:	4b12      	ldr	r3, [pc, #72]	; (80091ac <__ieee754_atan2+0x148>)
 8009162:	f7f8 fe5d 	bl	8001e20 <__aeabi_dsub>
 8009166:	0002      	movs	r2, r0
 8009168:	000b      	movs	r3, r1
 800916a:	480a      	ldr	r0, [pc, #40]	; (8009194 <__ieee754_atan2+0x130>)
 800916c:	4910      	ldr	r1, [pc, #64]	; (80091b0 <__ieee754_atan2+0x14c>)
 800916e:	f7f8 fe57 	bl	8001e20 <__aeabi_dsub>
 8009172:	e792      	b.n	800909a <__ieee754_atan2+0x36>
 8009174:	4807      	ldr	r0, [pc, #28]	; (8009194 <__ieee754_atan2+0x130>)
 8009176:	490e      	ldr	r1, [pc, #56]	; (80091b0 <__ieee754_atan2+0x14c>)
 8009178:	e78f      	b.n	800909a <__ieee754_atan2+0x36>
 800917a:	4806      	ldr	r0, [pc, #24]	; (8009194 <__ieee754_atan2+0x130>)
 800917c:	490e      	ldr	r1, [pc, #56]	; (80091b8 <__ieee754_atan2+0x154>)
 800917e:	e78c      	b.n	800909a <__ieee754_atan2+0x36>
 8009180:	2000      	movs	r0, #0
 8009182:	2100      	movs	r1, #0
 8009184:	e789      	b.n	800909a <__ieee754_atan2+0x36>
 8009186:	490b      	ldr	r1, [pc, #44]	; (80091b4 <__ieee754_atan2+0x150>)
 8009188:	e787      	b.n	800909a <__ieee754_atan2+0x36>
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	7ff00000 	.word	0x7ff00000
 8009190:	c0100000 	.word	0xc0100000
 8009194:	54442d18 	.word	0x54442d18
 8009198:	c00921fb 	.word	0xc00921fb
 800919c:	bff921fb 	.word	0xbff921fb
 80091a0:	080099e8 	.word	0x080099e8
 80091a4:	08009a00 	.word	0x08009a00
 80091a8:	33145c07 	.word	0x33145c07
 80091ac:	3ca1a626 	.word	0x3ca1a626
 80091b0:	400921fb 	.word	0x400921fb
 80091b4:	3ff921fb 	.word	0x3ff921fb
 80091b8:	3fe921fb 	.word	0x3fe921fb

080091bc <atan>:
 80091bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091be:	4b98      	ldr	r3, [pc, #608]	; (8009420 <atan+0x264>)
 80091c0:	b085      	sub	sp, #20
 80091c2:	004e      	lsls	r6, r1, #1
 80091c4:	0004      	movs	r4, r0
 80091c6:	000d      	movs	r5, r1
 80091c8:	9103      	str	r1, [sp, #12]
 80091ca:	0876      	lsrs	r6, r6, #1
 80091cc:	429e      	cmp	r6, r3
 80091ce:	dd18      	ble.n	8009202 <atan+0x46>
 80091d0:	4b94      	ldr	r3, [pc, #592]	; (8009424 <atan+0x268>)
 80091d2:	429e      	cmp	r6, r3
 80091d4:	dc02      	bgt.n	80091dc <atan+0x20>
 80091d6:	d10a      	bne.n	80091ee <atan+0x32>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d008      	beq.n	80091ee <atan+0x32>
 80091dc:	0022      	movs	r2, r4
 80091de:	002b      	movs	r3, r5
 80091e0:	0020      	movs	r0, r4
 80091e2:	0029      	movs	r1, r5
 80091e4:	f7f7 fc72 	bl	8000acc <__aeabi_dadd>
 80091e8:	0004      	movs	r4, r0
 80091ea:	000d      	movs	r5, r1
 80091ec:	e005      	b.n	80091fa <atan+0x3e>
 80091ee:	9b03      	ldr	r3, [sp, #12]
 80091f0:	4c8d      	ldr	r4, [pc, #564]	; (8009428 <atan+0x26c>)
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dd00      	ble.n	80091f8 <atan+0x3c>
 80091f6:	e110      	b.n	800941a <atan+0x25e>
 80091f8:	4d8c      	ldr	r5, [pc, #560]	; (800942c <atan+0x270>)
 80091fa:	0020      	movs	r0, r4
 80091fc:	0029      	movs	r1, r5
 80091fe:	b005      	add	sp, #20
 8009200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009202:	4b8b      	ldr	r3, [pc, #556]	; (8009430 <atan+0x274>)
 8009204:	429e      	cmp	r6, r3
 8009206:	dc0f      	bgt.n	8009228 <atan+0x6c>
 8009208:	4b8a      	ldr	r3, [pc, #552]	; (8009434 <atan+0x278>)
 800920a:	429e      	cmp	r6, r3
 800920c:	dc09      	bgt.n	8009222 <atan+0x66>
 800920e:	4a8a      	ldr	r2, [pc, #552]	; (8009438 <atan+0x27c>)
 8009210:	4b8a      	ldr	r3, [pc, #552]	; (800943c <atan+0x280>)
 8009212:	f7f7 fc5b 	bl	8000acc <__aeabi_dadd>
 8009216:	2200      	movs	r2, #0
 8009218:	4b89      	ldr	r3, [pc, #548]	; (8009440 <atan+0x284>)
 800921a:	f7f7 f931 	bl	8000480 <__aeabi_dcmpgt>
 800921e:	2800      	cmp	r0, #0
 8009220:	d1eb      	bne.n	80091fa <atan+0x3e>
 8009222:	2301      	movs	r3, #1
 8009224:	425b      	negs	r3, r3
 8009226:	e025      	b.n	8009274 <atan+0xb8>
 8009228:	f000 f948 	bl	80094bc <fabs>
 800922c:	4b85      	ldr	r3, [pc, #532]	; (8009444 <atan+0x288>)
 800922e:	0004      	movs	r4, r0
 8009230:	000d      	movs	r5, r1
 8009232:	429e      	cmp	r6, r3
 8009234:	dd00      	ble.n	8009238 <atan+0x7c>
 8009236:	e0aa      	b.n	800938e <atan+0x1d2>
 8009238:	4b83      	ldr	r3, [pc, #524]	; (8009448 <atan+0x28c>)
 800923a:	429e      	cmp	r6, r3
 800923c:	dd00      	ble.n	8009240 <atan+0x84>
 800923e:	e090      	b.n	8009362 <atan+0x1a6>
 8009240:	0002      	movs	r2, r0
 8009242:	000b      	movs	r3, r1
 8009244:	f7f7 fc42 	bl	8000acc <__aeabi_dadd>
 8009248:	2200      	movs	r2, #0
 800924a:	4b7d      	ldr	r3, [pc, #500]	; (8009440 <atan+0x284>)
 800924c:	f7f8 fde8 	bl	8001e20 <__aeabi_dsub>
 8009250:	2380      	movs	r3, #128	; 0x80
 8009252:	0006      	movs	r6, r0
 8009254:	000f      	movs	r7, r1
 8009256:	2200      	movs	r2, #0
 8009258:	0020      	movs	r0, r4
 800925a:	0029      	movs	r1, r5
 800925c:	05db      	lsls	r3, r3, #23
 800925e:	f7f7 fc35 	bl	8000acc <__aeabi_dadd>
 8009262:	000b      	movs	r3, r1
 8009264:	0002      	movs	r2, r0
 8009266:	0039      	movs	r1, r7
 8009268:	0030      	movs	r0, r6
 800926a:	f7f7 ff6b 	bl	8001144 <__aeabi_ddiv>
 800926e:	2300      	movs	r3, #0
 8009270:	0004      	movs	r4, r0
 8009272:	000d      	movs	r5, r1
 8009274:	0022      	movs	r2, r4
 8009276:	9302      	str	r3, [sp, #8]
 8009278:	0020      	movs	r0, r4
 800927a:	002b      	movs	r3, r5
 800927c:	0029      	movs	r1, r5
 800927e:	f7f8 fb63 	bl	8001948 <__aeabi_dmul>
 8009282:	0002      	movs	r2, r0
 8009284:	000b      	movs	r3, r1
 8009286:	9000      	str	r0, [sp, #0]
 8009288:	9101      	str	r1, [sp, #4]
 800928a:	f7f8 fb5d 	bl	8001948 <__aeabi_dmul>
 800928e:	0006      	movs	r6, r0
 8009290:	000f      	movs	r7, r1
 8009292:	4a6e      	ldr	r2, [pc, #440]	; (800944c <atan+0x290>)
 8009294:	4b6e      	ldr	r3, [pc, #440]	; (8009450 <atan+0x294>)
 8009296:	f7f8 fb57 	bl	8001948 <__aeabi_dmul>
 800929a:	4a6e      	ldr	r2, [pc, #440]	; (8009454 <atan+0x298>)
 800929c:	4b6e      	ldr	r3, [pc, #440]	; (8009458 <atan+0x29c>)
 800929e:	f7f7 fc15 	bl	8000acc <__aeabi_dadd>
 80092a2:	0032      	movs	r2, r6
 80092a4:	003b      	movs	r3, r7
 80092a6:	f7f8 fb4f 	bl	8001948 <__aeabi_dmul>
 80092aa:	4a6c      	ldr	r2, [pc, #432]	; (800945c <atan+0x2a0>)
 80092ac:	4b6c      	ldr	r3, [pc, #432]	; (8009460 <atan+0x2a4>)
 80092ae:	f7f7 fc0d 	bl	8000acc <__aeabi_dadd>
 80092b2:	0032      	movs	r2, r6
 80092b4:	003b      	movs	r3, r7
 80092b6:	f7f8 fb47 	bl	8001948 <__aeabi_dmul>
 80092ba:	4a6a      	ldr	r2, [pc, #424]	; (8009464 <atan+0x2a8>)
 80092bc:	4b6a      	ldr	r3, [pc, #424]	; (8009468 <atan+0x2ac>)
 80092be:	f7f7 fc05 	bl	8000acc <__aeabi_dadd>
 80092c2:	0032      	movs	r2, r6
 80092c4:	003b      	movs	r3, r7
 80092c6:	f7f8 fb3f 	bl	8001948 <__aeabi_dmul>
 80092ca:	4a68      	ldr	r2, [pc, #416]	; (800946c <atan+0x2b0>)
 80092cc:	4b68      	ldr	r3, [pc, #416]	; (8009470 <atan+0x2b4>)
 80092ce:	f7f7 fbfd 	bl	8000acc <__aeabi_dadd>
 80092d2:	0032      	movs	r2, r6
 80092d4:	003b      	movs	r3, r7
 80092d6:	f7f8 fb37 	bl	8001948 <__aeabi_dmul>
 80092da:	4a66      	ldr	r2, [pc, #408]	; (8009474 <atan+0x2b8>)
 80092dc:	4b66      	ldr	r3, [pc, #408]	; (8009478 <atan+0x2bc>)
 80092de:	f7f7 fbf5 	bl	8000acc <__aeabi_dadd>
 80092e2:	9a00      	ldr	r2, [sp, #0]
 80092e4:	9b01      	ldr	r3, [sp, #4]
 80092e6:	f7f8 fb2f 	bl	8001948 <__aeabi_dmul>
 80092ea:	4a64      	ldr	r2, [pc, #400]	; (800947c <atan+0x2c0>)
 80092ec:	9000      	str	r0, [sp, #0]
 80092ee:	9101      	str	r1, [sp, #4]
 80092f0:	4b63      	ldr	r3, [pc, #396]	; (8009480 <atan+0x2c4>)
 80092f2:	0030      	movs	r0, r6
 80092f4:	0039      	movs	r1, r7
 80092f6:	f7f8 fb27 	bl	8001948 <__aeabi_dmul>
 80092fa:	4a62      	ldr	r2, [pc, #392]	; (8009484 <atan+0x2c8>)
 80092fc:	4b62      	ldr	r3, [pc, #392]	; (8009488 <atan+0x2cc>)
 80092fe:	f7f8 fd8f 	bl	8001e20 <__aeabi_dsub>
 8009302:	0032      	movs	r2, r6
 8009304:	003b      	movs	r3, r7
 8009306:	f7f8 fb1f 	bl	8001948 <__aeabi_dmul>
 800930a:	4a60      	ldr	r2, [pc, #384]	; (800948c <atan+0x2d0>)
 800930c:	4b60      	ldr	r3, [pc, #384]	; (8009490 <atan+0x2d4>)
 800930e:	f7f8 fd87 	bl	8001e20 <__aeabi_dsub>
 8009312:	0032      	movs	r2, r6
 8009314:	003b      	movs	r3, r7
 8009316:	f7f8 fb17 	bl	8001948 <__aeabi_dmul>
 800931a:	4a5e      	ldr	r2, [pc, #376]	; (8009494 <atan+0x2d8>)
 800931c:	4b5e      	ldr	r3, [pc, #376]	; (8009498 <atan+0x2dc>)
 800931e:	f7f8 fd7f 	bl	8001e20 <__aeabi_dsub>
 8009322:	0032      	movs	r2, r6
 8009324:	003b      	movs	r3, r7
 8009326:	f7f8 fb0f 	bl	8001948 <__aeabi_dmul>
 800932a:	4a5c      	ldr	r2, [pc, #368]	; (800949c <atan+0x2e0>)
 800932c:	4b5c      	ldr	r3, [pc, #368]	; (80094a0 <atan+0x2e4>)
 800932e:	f7f8 fd77 	bl	8001e20 <__aeabi_dsub>
 8009332:	0032      	movs	r2, r6
 8009334:	003b      	movs	r3, r7
 8009336:	f7f8 fb07 	bl	8001948 <__aeabi_dmul>
 800933a:	0002      	movs	r2, r0
 800933c:	000b      	movs	r3, r1
 800933e:	9800      	ldr	r0, [sp, #0]
 8009340:	9901      	ldr	r1, [sp, #4]
 8009342:	f7f7 fbc3 	bl	8000acc <__aeabi_dadd>
 8009346:	002b      	movs	r3, r5
 8009348:	0022      	movs	r2, r4
 800934a:	f7f8 fafd 	bl	8001948 <__aeabi_dmul>
 800934e:	9b02      	ldr	r3, [sp, #8]
 8009350:	3301      	adds	r3, #1
 8009352:	d143      	bne.n	80093dc <atan+0x220>
 8009354:	0002      	movs	r2, r0
 8009356:	000b      	movs	r3, r1
 8009358:	0020      	movs	r0, r4
 800935a:	0029      	movs	r1, r5
 800935c:	f7f8 fd60 	bl	8001e20 <__aeabi_dsub>
 8009360:	e742      	b.n	80091e8 <atan+0x2c>
 8009362:	2200      	movs	r2, #0
 8009364:	4b36      	ldr	r3, [pc, #216]	; (8009440 <atan+0x284>)
 8009366:	f7f8 fd5b 	bl	8001e20 <__aeabi_dsub>
 800936a:	2200      	movs	r2, #0
 800936c:	0006      	movs	r6, r0
 800936e:	000f      	movs	r7, r1
 8009370:	0020      	movs	r0, r4
 8009372:	0029      	movs	r1, r5
 8009374:	4b32      	ldr	r3, [pc, #200]	; (8009440 <atan+0x284>)
 8009376:	f7f7 fba9 	bl	8000acc <__aeabi_dadd>
 800937a:	000b      	movs	r3, r1
 800937c:	0002      	movs	r2, r0
 800937e:	0039      	movs	r1, r7
 8009380:	0030      	movs	r0, r6
 8009382:	f7f7 fedf 	bl	8001144 <__aeabi_ddiv>
 8009386:	2301      	movs	r3, #1
 8009388:	0004      	movs	r4, r0
 800938a:	000d      	movs	r5, r1
 800938c:	e772      	b.n	8009274 <atan+0xb8>
 800938e:	4b45      	ldr	r3, [pc, #276]	; (80094a4 <atan+0x2e8>)
 8009390:	429e      	cmp	r6, r3
 8009392:	dc19      	bgt.n	80093c8 <atan+0x20c>
 8009394:	2200      	movs	r2, #0
 8009396:	4b44      	ldr	r3, [pc, #272]	; (80094a8 <atan+0x2ec>)
 8009398:	f7f8 fd42 	bl	8001e20 <__aeabi_dsub>
 800939c:	2200      	movs	r2, #0
 800939e:	0006      	movs	r6, r0
 80093a0:	000f      	movs	r7, r1
 80093a2:	0020      	movs	r0, r4
 80093a4:	0029      	movs	r1, r5
 80093a6:	4b40      	ldr	r3, [pc, #256]	; (80094a8 <atan+0x2ec>)
 80093a8:	f7f8 face 	bl	8001948 <__aeabi_dmul>
 80093ac:	2200      	movs	r2, #0
 80093ae:	4b24      	ldr	r3, [pc, #144]	; (8009440 <atan+0x284>)
 80093b0:	f7f7 fb8c 	bl	8000acc <__aeabi_dadd>
 80093b4:	000b      	movs	r3, r1
 80093b6:	0002      	movs	r2, r0
 80093b8:	0039      	movs	r1, r7
 80093ba:	0030      	movs	r0, r6
 80093bc:	f7f7 fec2 	bl	8001144 <__aeabi_ddiv>
 80093c0:	2302      	movs	r3, #2
 80093c2:	0004      	movs	r4, r0
 80093c4:	000d      	movs	r5, r1
 80093c6:	e755      	b.n	8009274 <atan+0xb8>
 80093c8:	000b      	movs	r3, r1
 80093ca:	0002      	movs	r2, r0
 80093cc:	4937      	ldr	r1, [pc, #220]	; (80094ac <atan+0x2f0>)
 80093ce:	2000      	movs	r0, #0
 80093d0:	f7f7 feb8 	bl	8001144 <__aeabi_ddiv>
 80093d4:	2303      	movs	r3, #3
 80093d6:	0004      	movs	r4, r0
 80093d8:	000d      	movs	r5, r1
 80093da:	e74b      	b.n	8009274 <atan+0xb8>
 80093dc:	9b02      	ldr	r3, [sp, #8]
 80093de:	4f34      	ldr	r7, [pc, #208]	; (80094b0 <atan+0x2f4>)
 80093e0:	00de      	lsls	r6, r3, #3
 80093e2:	4b34      	ldr	r3, [pc, #208]	; (80094b4 <atan+0x2f8>)
 80093e4:	19bf      	adds	r7, r7, r6
 80093e6:	199e      	adds	r6, r3, r6
 80093e8:	6832      	ldr	r2, [r6, #0]
 80093ea:	6873      	ldr	r3, [r6, #4]
 80093ec:	f7f8 fd18 	bl	8001e20 <__aeabi_dsub>
 80093f0:	0022      	movs	r2, r4
 80093f2:	002b      	movs	r3, r5
 80093f4:	f7f8 fd14 	bl	8001e20 <__aeabi_dsub>
 80093f8:	000b      	movs	r3, r1
 80093fa:	0002      	movs	r2, r0
 80093fc:	6838      	ldr	r0, [r7, #0]
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	f7f8 fd0e 	bl	8001e20 <__aeabi_dsub>
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	0004      	movs	r4, r0
 8009408:	000d      	movs	r5, r1
 800940a:	2b00      	cmp	r3, #0
 800940c:	db00      	blt.n	8009410 <atan+0x254>
 800940e:	e6f4      	b.n	80091fa <atan+0x3e>
 8009410:	2180      	movs	r1, #128	; 0x80
 8009412:	0609      	lsls	r1, r1, #24
 8009414:	186b      	adds	r3, r5, r1
 8009416:	001d      	movs	r5, r3
 8009418:	e6ef      	b.n	80091fa <atan+0x3e>
 800941a:	4d27      	ldr	r5, [pc, #156]	; (80094b8 <atan+0x2fc>)
 800941c:	e6ed      	b.n	80091fa <atan+0x3e>
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	440fffff 	.word	0x440fffff
 8009424:	7ff00000 	.word	0x7ff00000
 8009428:	54442d18 	.word	0x54442d18
 800942c:	bff921fb 	.word	0xbff921fb
 8009430:	3fdbffff 	.word	0x3fdbffff
 8009434:	3e1fffff 	.word	0x3e1fffff
 8009438:	8800759c 	.word	0x8800759c
 800943c:	7e37e43c 	.word	0x7e37e43c
 8009440:	3ff00000 	.word	0x3ff00000
 8009444:	3ff2ffff 	.word	0x3ff2ffff
 8009448:	3fe5ffff 	.word	0x3fe5ffff
 800944c:	e322da11 	.word	0xe322da11
 8009450:	3f90ad3a 	.word	0x3f90ad3a
 8009454:	24760deb 	.word	0x24760deb
 8009458:	3fa97b4b 	.word	0x3fa97b4b
 800945c:	a0d03d51 	.word	0xa0d03d51
 8009460:	3fb10d66 	.word	0x3fb10d66
 8009464:	c54c206e 	.word	0xc54c206e
 8009468:	3fb745cd 	.word	0x3fb745cd
 800946c:	920083ff 	.word	0x920083ff
 8009470:	3fc24924 	.word	0x3fc24924
 8009474:	5555550d 	.word	0x5555550d
 8009478:	3fd55555 	.word	0x3fd55555
 800947c:	2c6a6c2f 	.word	0x2c6a6c2f
 8009480:	bfa2b444 	.word	0xbfa2b444
 8009484:	52defd9a 	.word	0x52defd9a
 8009488:	3fadde2d 	.word	0x3fadde2d
 800948c:	af749a6d 	.word	0xaf749a6d
 8009490:	3fb3b0f2 	.word	0x3fb3b0f2
 8009494:	fe231671 	.word	0xfe231671
 8009498:	3fbc71c6 	.word	0x3fbc71c6
 800949c:	9998ebc4 	.word	0x9998ebc4
 80094a0:	3fc99999 	.word	0x3fc99999
 80094a4:	40037fff 	.word	0x40037fff
 80094a8:	3ff80000 	.word	0x3ff80000
 80094ac:	bff00000 	.word	0xbff00000
 80094b0:	08009a18 	.word	0x08009a18
 80094b4:	08009a38 	.word	0x08009a38
 80094b8:	3ff921fb 	.word	0x3ff921fb

080094bc <fabs>:
 80094bc:	004b      	lsls	r3, r1, #1
 80094be:	0859      	lsrs	r1, r3, #1
 80094c0:	4770      	bx	lr
	...

080094c4 <_init>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	46c0      	nop			; (mov r8, r8)
 80094c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ca:	bc08      	pop	{r3}
 80094cc:	469e      	mov	lr, r3
 80094ce:	4770      	bx	lr

080094d0 <_fini>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	46c0      	nop			; (mov r8, r8)
 80094d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d6:	bc08      	pop	{r3}
 80094d8:	469e      	mov	lr, r3
 80094da:	4770      	bx	lr
